!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=65)}([function(e,t,n){"use strict";e.exports=n(42)},function(e,t,n){e.exports={base:"_3xR6y","title-row":"_1Rgz2",titleRow:"_1Rgz2",title:"_1xgR1",back:"_16cJd","upload-area":"_3Z-yf",uploadArea:"_3Z-yf","recv-guide":"_1XnDv",recvGuide:"_1XnDv","icon-plus-wrapper":"_2ObPG",iconPlusWrapper:"_2ObPG","icon-plus":"_3Bexj",iconPlus:"_3Bexj","upload-tip":"_1FRSS",uploadTip:"_1FRSS","upload-btn":"Ua8o6",uploadBtn:"Ua8o6",link:"IL_5a","upload-more":"_31-MJ",uploadMore:"_31-MJ","add-more":"_2OVRj",addMore:"_2OVRj","file-summary":"_3TiMm",fileSummary:"_3TiMm","btn-select-file-done":"_3zjNN",btnSelectFileDone:"_3zjNN","select-send-method":"_3d5TS",selectSendMethod:"_3d5TS","recv-link-container":"_19gix",recvLinkContainer:"_19gix","recv-code-container":"_2qcrG",recvCodeContainer:"_2qcrG","recv-link":"_2Zogg",recvLink:"_2Zogg","recv-code":"_1SuOe",recvCode:"_1SuOe","btn-copy":"_20Rto",btnCopy:"_20Rto","qrcode-container":"_1L_XZ",qrcodeContainer:"_1L_XZ","recv-qrcode":"_1IkS0",recvQrcode:"_1IkS0","connect-tips":"_3dHOO",connectTips:"_3dHOO","btn-wait-connect":"_3kSmA",btnWaitConnect:"_3kSmA","sending-box":"lbn5X",sendingBox:"lbn5X","sending-summary":"PJ7cT",sendingSummary:"PJ7cT","peer-connected":"nkT-W",peerConnected:"nkT-W","peer-not-connected":"_5ew-i",peerNotConnected:"_5ew-i","btn-sending":"_2_x9H",btnSending:"_2_x9H"}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var c in r)n.call(r,c)&&r[c]&&e.push(c)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){e.exports=n(46)()},function(e,t,n){e.exports={container:"_1qOzq","file-row":"_3aoE0",fileRow:"_3aoE0",left:"_3xLTN","file-icon":"_19-z7",fileIcon:"_19-z7","file-info":"_1HRqi",fileInfo:"_1HRqi","file-name":"adZEg",fileName:"adZEg","file-size":"VqVjW",fileSize:"VqVjW","close-icon":"_3x3TW",closeIcon:"_3x3TW",waiting:"_1LnFO",download:"_2WJSt",completed:"_1u9qT"}},function(e,t,n){e.exports={base:"_1nK53",logo:"_3jtTy",slogan:"ay1eI",menus:"_3bzYj",menu:"_1nX2t",active:"_1x8lg"}},function(e,t,n){e.exports={base:"_8bl-q","title-row":"_3AsA1",titleRow:"_3AsA1",title:"MQm7z",cancel:"_2Mx9a",input:"_2iTtO","recv-btn":"_3WTb4",recvBtn:"_3WTb4",tip:"zqMaD",msg1:"_3DmJe",msg2:"uBaZ2","peer-connected":"iVIWn",peerConnected:"iVIWn","peer-not-connected":"_2eFt-",peerNotConnected:"_2eFt-"}},function(e,t,n){e.exports=n(50)},function(e,t,n){e.exports={container:"_2LUsd",content:"_2KMka","cards-area":"IScM0",cardsArea:"IScM0","card-row":"_22OOX",cardRow:"_22OOX","icon-simple":"_2ekLX",iconSimple:"_2ekLX","icon-secure":"_1fZxb",iconSecure:"_1fZxb","icon-speed":"_3jTGm",iconSpeed:"_3jTGm","icon-check":"_30NGw",iconCheck:"_30NGw"}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,c){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,c],u=0;(s=new Error(t.replace(/%s/g,(function(){return l[u++]})))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";const r=["B","kB","MB","GB","TB","PB","EB","ZB","YB"],o=["b","kbit","Mbit","Gbit","Tbit","Pbit","Ebit","Zbit","Ybit"],i=(e,t)=>{let n=e;return"string"==typeof t?n=e.toLocaleString(t):!0===t&&(n=e.toLocaleString()),n};e.exports=(e,t)=>{if(!Number.isFinite(e))throw new TypeError(`Expected a finite number, got ${typeof e}: ${e}`);const n=(t=Object.assign({bits:!1},t)).bits?o:r;if(t.signed&&0===e)return" 0 "+n[0];const a=e<0,c=a?"-":t.signed?"+":"";if(a&&(e=-e),e<1){return c+i(e,t.locale)+" "+n[0]}const s=Math.min(Math.floor(Math.log10(e)/3),n.length-1);return e=Number((e/Math.pow(1e3,s)).toPrecision(3)),c+i(e,t.locale)+" "+n[s]}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(43)},function(e,t,n){e.exports={steps:"_1zbcC",step:"_2LELq",title:"_2mAZE",active:"_3TvyY","index-wrapper":"_3bz5_",indexWrapper:"_3bz5_",index:"_3bZhA"}},function(e,t,n){e.exports={container:"_3Xq0P",toast:"_1zkGI","icon-wrapper":"NfC2S",iconWrapper:"NfC2S",success:"_1JTff",error:"_3hnru",info:"_22hyi",content:"HtHZP"}},function(e,t,n){"use strict";var r={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};r.localCName=r.generateIdentifier(),r.splitLines=function(e){return e.trim().split("\n").map((function(e){return e.trim()}))},r.splitSections=function(e){return e.split("\nm=").map((function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"}))},r.getDescription=function(e){var t=r.splitSections(e);return t&&t[0]},r.getMediaSections=function(e){var t=r.splitSections(e);return t.shift(),t},r.matchPrefix=function(e,t){return r.splitLines(e).filter((function(e){return 0===e.indexOf(t)}))},r.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]=t[r+1]}return n},r.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")},r.parseIceOptions=function(e){return e.substr(14).split(" ")},r.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=3===t.length?parseInt(t[2],10):1,n.numChannels=n.channels,n},r.writeRtpMap=function(e){var t=e.payloadType;void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType);var n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==n?"/"+n:"")+"\r\n"},r.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},r.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},r.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),o=0;o<r.length;o++)n[(t=r[o].trim().split("="))[0].trim()]=t[1];return n},r.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach((function(t){e.parameters[t]?r.push(t+"="+e.parameters[t]):r.push(t)})),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},r.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},r.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach((function(e){t+="a=rtcp-fb:"+n+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"})),t},r.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},r.parseSsrcGroup=function(e){var t=e.substr(13).split(" ");return{semantics:t.shift(),ssrcs:t.map((function(e){return parseInt(e,10)}))}},r.getMid=function(e){var t=r.matchPrefix(e,"a=mid:")[0];if(t)return t.substr(6)},r.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},r.getDtlsParameters=function(e,t){return{role:"auto",fingerprints:r.matchPrefix(e+t,"a=fingerprint:").map(r.parseFingerprint)}},r.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach((function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"})),n},r.getIceParameters=function(e,t){var n=r.splitLines(e);return{usernameFragment:(n=n.concat(r.splitLines(t))).filter((function(e){return 0===e.indexOf("a=ice-ufrag:")}))[0].substr(12),password:n.filter((function(e){return 0===e.indexOf("a=ice-pwd:")}))[0].substr(10)}},r.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},r.parseRtpParameters=function(e){for(var t={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},n=r.splitLines(e)[0].split(" "),o=3;o<n.length;o++){var i=n[o],a=r.matchPrefix(e,"a=rtpmap:"+i+" ")[0];if(a){var c=r.parseRtpMap(a),s=r.matchPrefix(e,"a=fmtp:"+i+" ");switch(c.parameters=s.length?r.parseFmtp(s[0]):{},c.rtcpFeedback=r.matchPrefix(e,"a=rtcp-fb:"+i+" ").map(r.parseRtcpFb),t.codecs.push(c),c.name.toUpperCase()){case"RED":case"ULPFEC":t.fecMechanisms.push(c.name.toUpperCase())}}}return r.matchPrefix(e,"a=extmap:").forEach((function(e){t.headerExtensions.push(r.parseExtmap(e))})),t},r.writeRtpDescription=function(e,t){var n="";n+="m="+e+" ",n+=t.codecs.length>0?"9":"0",n+=" UDP/TLS/RTP/SAVPF ",n+=t.codecs.map((function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType})).join(" ")+"\r\n",n+="c=IN IP4 0.0.0.0\r\n",n+="a=rtcp:9 IN IP4 0.0.0.0\r\n",t.codecs.forEach((function(e){n+=r.writeRtpMap(e),n+=r.writeFmtp(e),n+=r.writeRtcpFb(e)}));var o=0;return t.codecs.forEach((function(e){e.maxptime>o&&(o=e.maxptime)})),o>0&&(n+="a=maxptime:"+o+"\r\n"),n+="a=rtcp-mux\r\n",t.headerExtensions&&t.headerExtensions.forEach((function(e){n+=r.writeExtmap(e)})),n},r.parseRtpEncodingParameters=function(e){var t,n=[],o=r.parseRtpParameters(e),i=-1!==o.fecMechanisms.indexOf("RED"),a=-1!==o.fecMechanisms.indexOf("ULPFEC"),c=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute})),s=c.length>0&&c[0].ssrc,l=r.matchPrefix(e,"a=ssrc-group:FID").map((function(e){return e.substr(17).split(" ").map((function(e){return parseInt(e,10)}))}));l.length>0&&l[0].length>1&&l[0][0]===s&&(t=l[0][1]),o.codecs.forEach((function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var r={ssrc:s,codecPayloadType:parseInt(e.parameters.apt,10)};s&&t&&(r.rtx={ssrc:t}),n.push(r),i&&((r=JSON.parse(JSON.stringify(r))).fec={ssrc:s,mechanism:a?"red+ulpfec":"red"},n.push(r))}})),0===n.length&&s&&n.push({ssrc:s});var u=r.matchPrefix(e,"b=");return u.length&&(u=0===u[0].indexOf("b=TIAS:")?parseInt(u[0].substr(7),10):0===u[0].indexOf("b=AS:")?1e3*parseInt(u[0].substr(5),10)*.95-16e3:void 0,n.forEach((function(e){e.maxBitrate=u}))),n},r.parseRtcpParameters=function(e){var t={},n=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute}))[0];n&&(t.cname=n.value,t.ssrc=n.ssrc);var o=r.matchPrefix(e,"a=rtcp-rsize");t.reducedSize=o.length>0,t.compound=0===o.length;var i=r.matchPrefix(e,"a=rtcp-mux");return t.mux=i.length>0,t},r.parseMsid=function(e){var t,n=r.matchPrefix(e,"a=msid:");if(1===n.length)return{stream:(t=n[0].substr(7).split(" "))[0],track:t[1]};var o=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"msid"===e.attribute}));return o.length>0?{stream:(t=o[0].value.split(" "))[0],track:t[1]}:void 0},r.parseSctpDescription=function(e){var t,n=r.parseMLine(e),o=r.matchPrefix(e,"a=max-message-size:");o.length>0&&(t=parseInt(o[0].substr(19),10)),isNaN(t)&&(t=65536);var i=r.matchPrefix(e,"a=sctp-port:");if(i.length>0)return{port:parseInt(i[0].substr(12),10),protocol:n.fmt,maxMessageSize:t};if(r.matchPrefix(e,"a=sctpmap:").length>0){var a=r.matchPrefix(e,"a=sctpmap:")[0].substr(10).split(" ");return{port:parseInt(a[0],10),protocol:a[1],maxMessageSize:t}}},r.writeSctpDescription=function(e,t){var n=[];return n="DTLS/SCTP"!==e.protocol?["m="+e.kind+" 9 "+e.protocol+" "+t.protocol+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctp-port:"+t.port+"\r\n"]:["m="+e.kind+" 9 "+e.protocol+" "+t.port+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctpmap:"+t.port+" "+t.protocol+" 65535\r\n"],void 0!==t.maxMessageSize&&n.push("a=max-message-size:"+t.maxMessageSize+"\r\n"),n.join("")},r.generateSessionId=function(){return Math.random().toString().substr(2,21)},r.writeSessionBoilerplate=function(e,t,n){var o=void 0!==t?t:2;return"v=0\r\no="+(n||"thisisadapterortc")+" "+(e||r.generateSessionId())+" "+o+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},r.writeMediaSection=function(e,t,n,o){var i=r.writeRtpDescription(e.kind,t);if(i+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),i+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":"active"),i+="a=mid:"+e.mid+"\r\n",e.direction?i+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?i+="a=sendrecv\r\n":e.rtpSender?i+="a=sendonly\r\n":e.rtpReceiver?i+="a=recvonly\r\n":i+="a=inactive\r\n",e.rtpSender){var a="msid:"+o.id+" "+e.rtpSender.track.id+"\r\n";i+="a="+a,i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+a,e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+a,i+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),i},r.getDirection=function(e,t){for(var n=r.splitLines(e),o=0;o<n.length;o++)switch(n[o]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return n[o].substr(2)}return t?r.getDirection(t):"sendrecv"},r.getKind=function(e){return r.splitLines(e)[0].split(" ")[0].substr(2)},r.isRejected=function(e){return"0"===e.split(" ",2)[1]},r.parseMLine=function(e){var t=r.splitLines(e)[0].substr(2).split(" ");return{kind:t[0],port:parseInt(t[1],10),protocol:t[2],fmt:t.slice(3).join(" ")}},r.parseOLine=function(e){var t=r.matchPrefix(e,"o=")[0].substr(2).split(" ");return{username:t[0],sessionId:t[1],sessionVersion:parseInt(t[2],10),netType:t[3],addressType:t[4],address:t[5]}},r.isValidSDP=function(e){if("string"!=typeof e||0===e.length)return!1;for(var t=r.splitLines(e),n=0;n<t.length;n++)if(t[n].length<2||"="!==t[n].charAt(1))return!1;return!0},e.exports=r},function(e,t,n){e.exports={container:"_2NI-B",wrapper:"_38jne",input:"_1ItMl","error-icon":"_2_bPx",errorIcon:"_2_bPx",error:"gCi4n"}},function(e,t,n){"use strict";var r=n(18),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function s(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var l=Object.defineProperty,u=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=u(n);f&&(a=a.concat(f(n)));for(var c=s(t),m=s(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||c&&c[y])){var g=d(n,y);try{l(t,y,g)}catch(e){}}}}return t}},function(e,t,n){e.exports={card:"_13zwq",title:"O7Bq1","title-text":"BCfR8",titleText:"BCfR8",desc:"_1-uRn"}},function(e,t,n){"use strict";e.exports=n(48)},function(e,t,n){var r=n(55),o=n(56);e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var c=0;c<16;++c)t[i+c]=a[c];return t||o(a)}},function(e,t,n){"use strict";(function(e){var n,r="undefined"!=typeof Symbol?Symbol("immer-nothing"):((n={})["immer-nothing"]=!0,n),o="undefined"!=typeof Symbol&&Symbol.for?Symbol.for("immer-draftable"):"__$immer_draftable",i="undefined"!=typeof Symbol&&Symbol.for?Symbol.for("immer-state"):"__$immer_state";function a(e){return!!e&&!!e[i]}function c(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e))return!0;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||!!e[o]||!!e.constructor[o]||b(e)||E(e))}function s(e){if(e&&e[i])return e[i].base}var l=Object.assign||function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return t.forEach((function(t){return Object.keys(t).forEach((function(n){return e[n]=t[n]}))})),e},u="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function f(e,t){if(void 0===t&&(t=!1),Array.isArray(e))return e.slice();if(b(e))return new Map(e);if(E(e))return new Set(e);var n=Object.create(Object.getPrototypeOf(e));return u(e).forEach((function(r){if(r!==i){var o=Object.getOwnPropertyDescriptor(e,r),a=o.value;if(o.get){if(!t)throw new Error("Immer drafts cannot have computed properties");a=o.get.call(e)}o.enumerable?n[r]=a:Object.defineProperty(n,r,{value:a,writable:!0,configurable:!0})}})),n}function d(e,t){Array.isArray(e)||b(e)||E(e)?e.forEach((function(n,r){return t(r,n,e)})):u(e).forEach((function(n){return t(n,e[n],e)}))}function p(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!!n&&n.enumerable}function h(e,t){return b(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function m(e,t){return b(e)?e.get(t):e[t]}function v(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}var y="undefined"!=typeof Symbol,g="undefined"!=typeof Map;function b(e){return g&&e instanceof Map}var w="undefined"!=typeof Set;function E(e){return w&&e instanceof Set}function C(e){var t,n;return(t={})[Symbol.iterator]=function(){return n},t.next=e,n=t}function S(e,t,n){var r="values"!==t;return function(){var t=k(e)[Symbol.iterator]();return C((function(){var e=t.next();if(!e.done){var o=e.value[0],i=n.get(o);e.value=r?[o,i]:i}return e}))}}function T(e){return function(t,n){var r="entries"===n;return function(){var n=k(t)[Symbol.iterator]();return C((function(){var o=n.next();if(!o.done){var i=function(t,n){var r=s(n)||n,o=t.drafts.get(r);if(!o){if(t.finalized||!c(n)||t.finalizing)return n;o=e(n,t),t.drafts.set(r,o),t.modified&&t.copy.add(o)}return o}(t,o.value);o.value=r?[i,i]:i}return o}))}}}function k(e){return e.copy||e.base}function P(e){if(!c(e))return e;if(Array.isArray(e))return e.map(P);if(b(e))return new Map(e);if(E(e))return new Set(e);var t=Object.create(Object.getPrototypeOf(e));for(var n in e)t[n]=P(e[n]);return t}function x(e,t){void 0===t&&(t=!1),!c(e)||a(e)||Object.isFrozen(e)||(E(e)?e.add=e.clear=e.delete=_:b(e)&&(e.set=e.clear=e.delete=_),Object.freeze(e),t&&d(e,(function(e,t){return x(t,!0)})))}function _(){throw new Error("This object has been frozen and should not be mutated")}var O=function(e){this.drafts=[],this.parent=e,this.canAutoFreeze=!0,this.patches=null};function R(e){e[i].revoke()}function N(e,t){var n,r=Array.isArray(e),o=A(e);b(e)?(n=o,Object.defineProperties(n,F),y&&Object.defineProperty(n,Symbol.iterator,G(S))):E(e)?function(e){Object.defineProperties(e,B),y&&Object.defineProperty(e,Symbol.iterator,G(U))}(o):d(o,(function(t){!function(e,t,n){var r=z[t];r?r.enumerable=n:z[t]=r={configurable:!0,enumerable:n,get:function(){return function(e,t){H(e);var n=j(M(e),t);if(e.finalizing)return n;if(n===j(e.base,t)&&c(n))return L(e),e.copy[t]=N(n,e);return n}(this[i],t)},set:function(e){!function(e,t,n){if(H(e),e.assigned[t]=!0,!e.modified){if(v(n,j(M(e),t)))return;I(e),L(e)}e.copy[t]=n}(this[i],t,e)}};Object.defineProperty(e,t,r)}(o,t,r||p(e,t))}));var a=t?t.scope:O.current,s={scope:a,modified:!1,finalizing:!1,finalized:!1,assigned:b(e)?new Map:{},parent:t,base:e,draft:o,drafts:E(e)?new Map:null,copy:null,revoke:D,revoked:!1};return function(e,t,n){Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0})}(o,i,s),a.drafts.push(o),o}function D(){this.revoked=!0}function M(e){return e.copy||e.base}function j(e,t){var n=e[i];if(n&&!n.finalizing){n.finalizing=!0;var r=e[t];return n.finalizing=!1,r}return e[t]}function I(e){e.modified||(e.modified=!0,e.parent&&I(e.parent))}function L(e){e.copy||(e.copy=A(e.base))}function A(e){var t=e&&e[i];if(t){t.finalizing=!0;var n=f(t.draft,!0);return t.finalizing=!1,n}return f(e)}O.prototype.usePatches=function(e){e&&(this.patches=[],this.inversePatches=[],this.patchListener=e)},O.prototype.revoke=function(){this.leave(),this.drafts.forEach(R),this.drafts=null},O.prototype.leave=function(){this===O.current&&(O.current=this.parent)},O.current=null,O.enter=function(){return this.current=new O(this.current)};var z={};var F=W({size:function(e){return M(e).size},has:function(e){return function(t){return M(e).has(t)}},set:function(e){return function(t,n){return M(e).get(t)!==n&&(L(e),I(e),e.assigned.set(t,!0),e.copy.set(t,n)),e.draft}},delete:function(e){return function(t){return L(e),I(e),e.assigned.set(t,!1),e.copy.delete(t),!1}},clear:function(e){return function(){e.copy||L(e),I(e),e.assigned=new Map;for(var t=0,n=M(e).keys();t<n.length;t+=1){var r=n[t];e.assigned.set(r,!1)}return e.copy.clear()}},forEach:function(e,t,n){return function(t){M(e).forEach((function(e,r,o){t(n.get(r),r,o)}))}},get:function(e){return function(t){var n=M(e).get(t);if(e.finalizing||e.finalized||!c(n))return n;if(n!==e.base.get(t))return n;var r=N(n,e);return L(e),e.copy.set(t,r),r}},keys:function(e){return function(){return M(e).keys()}},values:S,entries:S});var U=T(N),B=W({size:function(e){return M(e).size},add:function(e){return function(t){return M(e).has(t)||(I(e),e.copy||L(e),e.copy.add(t)),e.draft}},delete:function(e){return function(t){return I(e),e.copy||L(e),e.copy.delete(t)}},has:function(e){return function(t){return M(e).has(t)}},clear:function(e){return function(){return I(e),e.copy||L(e),e.copy.clear()}},keys:U,entries:U,values:U,forEach:function(e){return function(t,n){for(var r=U(e)(),o=r.next();!o.done;)t.call(n,o.value,o.value,e.draft),o=r.next()}}});function W(e){return Object.keys(e).reduce((function(t,n){var r="size"===n?V:G;return t[n]=r(e[n],n),t}),{})}function V(e){return{get:function(){var t=this[i];return H(t),e(t)}}}function G(e,t){return{get:function(){return function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o=this[i];return H(o),e(o,t,o.draft).apply(void 0,n)}}}}function H(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(M(e)))}function $(e){for(var t=e.length-1;t>=0;t--){var n=e[t][i];n.modified||(Array.isArray(n.base)?K(n)&&I(n):b(n.base)?J(n)&&I(n):E(n.base)?Q(n)&&I(n):q(n)&&I(n))}}function q(e){for(var t=e.base,n=e.draft,r=Object.keys(n),o=r.length-1;o>=0;o--){var a=r[o],c=t[a];if(void 0===c&&!h(t,a))return!0;var s=n[a],l=s&&s[i];if(l?l.base!==c:!v(s,c))return!0}return r.length!==Object.keys(t).length}function K(e){var t=e.draft;if(t.length!==e.base.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}function J(e){var t=e.base,n=e.draft;if(t.size!==n.size)return!0;var r=!1;return n.forEach((function(e,n){r||(r=c(e)?e.modified:e!==t.get(n))})),r}function Q(e){var t=e.base,n=e.draft;if(t.size!==n.size)return!0;var r=!1;return n.forEach((function(e,n){r||(r=c(e)?e.modified:!t.has(n))})),r}var X,Y,Z=Object.freeze({willFinalize:function(e,t,n){e.drafts.forEach((function(e){e[i].finalizing=!0})),n?a(t)&&t[i].scope===e&&$(e.drafts):(e.patches&&function e(t){if(!t||"object"!=typeof t)return;var n=t[i];if(!n)return;var r=n.base,o=n.draft,a=n.assigned;if(Array.isArray(t)){if(K(n)){if(I(n),a.length=!0,o.length<r.length)for(var c=o.length;c<r.length;c++)a[c]=!1;else for(var s=r.length;s<o.length;s++)a[s]=!0;for(var l=0;l<o.length;l++)void 0===a[l]&&e(o[l])}}else Object.keys(o).forEach((function(t){void 0!==r[t]||h(r,t)?a[t]||e(o[t]):(a[t]=!0,I(n))})),Object.keys(r).forEach((function(e){void 0!==o[e]||h(o,e)||(a[e]=!1,I(n))}))}(e.drafts[0]),$(e.drafts))},createProxy:N});function ee(e,t){var n=t?t.scope:O.current,r={scope:n,modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null},o=r,i=te;Array.isArray(e)?(o=[r],i=ne):b(e)?(i=oe,r.drafts=new Map,r.assigned=new Map):E(e)&&(i=ae,r.drafts=new Map);var a=Proxy.revocable(o,i),c=a.revoke,s=a.proxy;return r.draft=s,r.revoke=c,n.drafts.push(s),s}var te={get:function(e,t){if(t===i)return e;var n=e.drafts;if(!e.modified&&h(n,t))return n[t];var r=ce(e)[t];if(e.finalized||!c(r))return r;if(e.modified){if(r!==se(e.base,t))return r;n=e.copy}return n[t]=ee(r,e)},has:function(e,t){return t in ce(e)},ownKeys:function(e){return Reflect.ownKeys(ce(e))},set:function(e,t,n){if(!e.modified){var r=se(e.base,t);if(n?v(r,n)||n===e.drafts[t]:v(r,n)&&t in e.base)return!0;le(e)}return e.assigned[t]=!0,e.copy[t]=n,!0},deleteProperty:function(e,t){return void 0!==se(e.base,t)||t in e.base?(e.assigned[t]=!1,le(e)):e.assigned[t]&&delete e.assigned[t],e.copy&&delete e.copy[t],!0},getOwnPropertyDescriptor:function(e,t){var n=ce(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r&&(r.writable=!0,r.configurable=!Array.isArray(n)||"length"!==t),r},defineProperty:function(){throw new Error("Object.defineProperty() cannot be used on an Immer draft")},getPrototypeOf:function(e){return Object.getPrototypeOf(e.base)},setPrototypeOf:function(){throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft")}},ne={};d(te,(function(e,t){ne[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),ne.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer only supports deleting array indices");return te.deleteProperty.call(this,e[0],t)},ne.set=function(e,t,n){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer only supports setting array indices and the 'length' property");return te.set.call(this,e[0],t,n)};var re=["ownKeys","has","set","deleteProperty","defineProperty","getOwnPropertyDescriptor","preventExtensions","isExtensible","getPrototypeOf"].reduce((function(e,t){return e[t]=function(e){for(var n=[],r=arguments.length-1;r-- >0;)n[r]=arguments[r+1];return Reflect[t].apply(Reflect,[ce(e)].concat(n))},e}),{}),oe=ue(((X={})[i]=function(e){return e},X.size=function(e){return ce(e).size},X.has=function(e){return function(t){return ce(e).has(t)}},X.set=function(e){return function(t,n){var r=ce(e);return r.has(t)&&r.get(t)===n||(le(e),e.assigned.set(t,!0),e.copy.set(t,n)),e.draft}},X.delete=function(e){return function(t){return!!ce(e).has(t)&&(le(e),e.assigned.set(t,!1),e.copy.delete(t))}},X.clear=function(e){return function(){le(e),e.assigned=new Map;for(var t=0,n=ce(e).keys();t<n.length;t+=1){var r=n[t];e.assigned.set(r,!1)}return e.copy.clear()}},X.forEach=function(e,t,n){return function(t,r){return ce(e).forEach((function(e,o,i){var a=n.get(o);t.call(r,a,o,i)}))}},X.get=function(e){return function(t){var n=e[e.modified?"copy":"drafts"];if(n.has(t))return n.get(t);var r=ce(e).get(t);if(e.finalized||!c(r))return r;var o=ee(r,e);return n.set(t,o),o}},X.keys=function(e){return function(){return ce(e).keys()}},X.values=S,X.entries=S,X[y?Symbol.iterator:"@@iterator"]=S,X)),ie=T(ee),ae=ue(((Y={})[i]=function(e){return e},Y.size=function(e){return ce(e).size},Y.has=function(e){return function(t){return ce(e).has(t)}},Y.add=function(e){return function(t){return ce(e).has(t)||(le(e),e.copy.add(t)),e.draft}},Y.delete=function(e){return function(t){return le(e),e.copy.delete(t)}},Y.clear=function(e){return function(){return le(e),e.copy.clear()}},Y.forEach=function(e){return function(t,n){for(var r=ie(e)(),o=r.next();!o.done;)t.call(n,o.value,o.value,e.draft),o=r.next()}},Y.keys=ie,Y.values=ie,Y.entries=ie,Y[y?Symbol.iterator:"@@iterator"]=ie,Y));function ce(e){return e.copy||e.base}function se(e,t){var n=e[i],r=Reflect.getOwnPropertyDescriptor(n?ce(n):e,t);return r&&r.value}function le(e){if(!e.modified){e.modified=!0;var t=e.base,n=e.drafts,r=e.parent,o=f(t);E(t)?(i=o,n.forEach((function(e){var t=s(e);t&&i.delete(t),i.add(e)}))):(b(t)?function(e,t){t.forEach((function(t,n){return e.set(n,t)}))}(o,n):l(o,n),e.drafts=null),e.copy=o,r&&le(r)}var i}function ue(e){return Object.assign({},re,{get:function(t,n,r){return e.hasOwnProperty(n)?e[n](t,n,r):Reflect.get(t,n,r)},setPrototypeOf:function(e){throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft")}})}var fe=Object.freeze({willFinalize:function(){},createProxy:ee});function de(e,t,n,r){var o,i,a=e.base,c=e.copy,s=e.assigned;c.length<a.length&&(a=(o=[c,a])[0],c=o[1],n=(i=[r,n])[0],r=i[1]);for(var l=c.length-a.length,u=0;a[u]===c[u]&&u<a.length;)++u;for(var f=a.length;f>u&&a[f-1]===c[f+l-1];)--f;for(var d=u;d<f;++d)if(s[d]&&c[d]!==a[d]){var p=t.concat([d]);n.push({op:"replace",path:p,value:c[d]}),r.push({op:"replace",path:p,value:a[d]})}for(var h=n.length,m=f+l-1;m>=f;--m){var v=t.concat([m]);n[h+m-f]={op:"add",path:v,value:c[m]},r.push({op:"remove",path:v})}}function pe(e,t,n,r){var o=e.base,i=e.copy;d(e.assigned,(function(e,a){var c=m(o,e),s=m(i,e),l=a?h(o,e)?"replace":"add":"remove";if(c!==s||"replace"!==l){var u=t.concat(e);n.push("remove"===l?{op:l,path:u}:{op:l,path:u,value:s}),r.push("add"===l?{op:"remove",path:u}:"remove"===l?{op:"add",path:u,value:c}:{op:"replace",path:u,value:c})}}))}function he(e,t,n,r){for(var o=e.base,i=e.copy,a=0,c=0,s=o;c<s.length;c+=1){var l=s[c];if(!i.has(l)){var u=t.concat([a]);n.push({op:"remove",path:u,value:l}),r.unshift({op:"add",path:u,value:l})}a++}a=0;for(var f=0,d=i;f<d.length;f+=1){var p=d[f];if(!o.has(p)){var h=t.concat([a]);n.push({op:"add",path:h,value:p}),r.unshift({op:"remove",path:h,value:p})}a++}}var me=function(e,t){for(var n=0,r=t;n<r.length;n+=1){var o=r[n],i=o.path,a=o.op;if(!i.length)throw new Error("Illegal state");for(var c=e,s=0;s<i.length-1;s++)if(!(c=m(c,i[s]))||"object"!=typeof c)throw new Error("Cannot apply patch, path doesn't resolve: "+i.join("/"));var l=P(o.value),u=i[i.length-1];switch(a){case"replace":if(b(c))c.set(u,l);else{if(E(c))throw new Error('Sets cannot have "replace" patches.');c[u]=l}break;case"add":E(c)&&c.delete(o.value),Array.isArray(c)?c.splice(u,0,l):b(c)?c.set(u,l):E(c)?c.add(l):c[u]=l;break;case"remove":Array.isArray(c)?c.splice(u,1):b(c)?c.delete(u):E(c)?c.delete(o.value):delete c[u];break;default:throw new Error("Unsupported patch operation: "+a)}}return e};var ve={useProxies:"undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},ye=function(e){l(this,ve,e),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)};ye.prototype.produce=function(e,t,n){var o,i=this;if("function"==typeof e&&"function"!=typeof t){var a=t;t=e;var s=this;return function(e){var n=this;void 0===e&&(e=a);for(var r=[],o=arguments.length-1;o-- >0;)r[o]=arguments[o+1];return s.produce(e,(function(e){return t.call.apply(t,[n,e].concat(r))}))}}if("function"!=typeof t)throw new Error("The first or second argument to `produce` must be a function");if(void 0!==n&&"function"!=typeof n)throw new Error("The third argument to `produce` must be a function or undefined");if(c(e)){var l=O.enter(),u=this.createProxy(e),f=!0;try{o=t(u),f=!1}finally{f?l.revoke():l.leave()}return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(e){return l.usePatches(n),i.processResult(e,l)}),(function(e){throw l.revoke(),e})):(l.usePatches(n),this.processResult(o,l))}if((o=t(e))!==r)return void 0===o&&(o=e),this.maybeFreeze(o,!0),o},ye.prototype.produceWithPatches=function(e,t,n){var r,o,i=this;if("function"==typeof e)return function(t){for(var n=[],r=arguments.length-1;r-- >0;)n[r]=arguments[r+1];return i.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(n))}))};if(n)throw new Error("A patch listener cannot be passed to produceWithPatches");return[this.produce(e,t,(function(e,t){r=e,o=t})),r,o]},ye.prototype.createDraft=function(e){if(!c(e))throw new Error("First argument to `createDraft` must be a plain object, an array, or an immerable object");var t=O.enter(),n=this.createProxy(e);return n[i].isManual=!0,t.leave(),n},ye.prototype.finishDraft=function(e,t){var n=e&&e[i];if(!n||!n.isManual)throw new Error("First argument to `finishDraft` must be a draft returned by `createDraft`");if(n.finalized)throw new Error("The given draft is already finalized");var r=n.scope;return r.usePatches(t),this.processResult(void 0,r)},ye.prototype.setAutoFreeze=function(e){this.autoFreeze=e},ye.prototype.setUseProxies=function(e){this.useProxies=e,l(this,e?fe:Z)},ye.prototype.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}return a(e)?me(e,t):this.produce(e,(function(e){return me(e,t.slice(n+1))}))},ye.prototype.processResult=function(e,t){var n=t.drafts[0],o=void 0!==e&&e!==n;if(this.willFinalize(t,e,o),o){if(n[i].modified)throw t.revoke(),new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");c(e)&&(e=this.finalize(e,null,t),this.maybeFreeze(e)),t.patches&&(t.patches.push({op:"replace",path:[],value:e}),t.inversePatches.push({op:"replace",path:[],value:n[i].base}))}else e=this.finalize(n,[],t);return t.revoke(),t.patches&&t.patchListener(t.patches,t.inversePatches),e!==r?e:void 0},ye.prototype.finalize=function(e,t,n){var r=this,o=e[i];if(!o)return Object.isFrozen(e)?e:this.finalizeTree(e,null,n);if(o.scope!==n)return e;if(!o.modified)return this.maybeFreeze(o.base,!0),o.base;if(!o.finalized){if(o.finalized=!0,this.finalizeTree(o.draft,t,n),this.onDelete&&!E(o.base))if(this.useProxies){d(o.assigned,(function(e,t){t||r.onDelete(o,e)}))}else{var a=o.base,c=o.copy;d(a,(function(e){h(c,e)||r.onDelete(o,e)}))}this.onCopy&&this.onCopy(o),this.autoFreeze&&n.canAutoFreeze&&x(o.copy,!1),t&&n.patches&&function(e,t,n,r){(Array.isArray(e.base)?de:E(e.base)?he:pe)(e,t,n,r)}(o,t,n.patches,n.inversePatches)}return o.copy},ye.prototype.finalizeTree=function(e,t,n){var r=this,o=e[i];o&&(this.useProxies||(o.copy=f(o.draft,!0)),e=o.copy);var s=!!t&&!!n.patches,l=function(i,u,f){if(u===f)throw Error("Immer forbids circular references");var y=!!o&&f===e,g=E(f);if(a(u)){var w=y&&s&&!g&&!h(o.assigned,i)?t.concat(i):null;if(function(e,t,n){b(e)?e.set(t,n):E(e)?(e.delete(t),e.add(n)):Array.isArray(e)||p(e,t)?e[t]=n:Object.defineProperty(e,t,{value:n,writable:!0,configurable:!0})}(f,i,u=r.finalize(u,w,n)),a(u)&&(n.canAutoFreeze=!1),y&&u===m(o.base,i))return}else{if(y&&v(u,m(o.base,i)))return;c(u)&&!Object.isFrozen(u)&&(d(u,l),r.maybeFreeze(u))}y&&r.onAssign&&!g&&r.onAssign(o,i,u)};return d(e,l),e},ye.prototype.maybeFreeze=function(e,t){void 0===t&&(t=!1),this.autoFreeze&&!a(e)&&x(e,t)};var ge=new ye,be=ge.produce;ge.produceWithPatches.bind(ge),ge.setAutoFreeze.bind(ge),ge.setUseProxies.bind(ge),ge.applyPatches.bind(ge),ge.createDraft.bind(ge),ge.finishDraft.bind(ge);t.a=be}).call(this,n(64))},function(e,t,n){e.exports={base:"_3FHOR",title:"_1YW-m",tip:"_28m7y"}},,function(e,t,n){"use strict";(function(e,r){var o,i=n(34);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(28),n(49)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(51);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return c(i(e,t),t)},e.exports.tokensToFunction=c,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,c="",u=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(c+=e.slice(a,p),a=p+f.length,d)c+=d[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];c&&(r.push(c),c="");var E=null!=m&&null!=h&&h!==m,C="+"===b||"*"===b,S="?"===b||"*"===b,T=n[2]||u,k=y||g;r.push({name:v||i++,prefix:m||"",delimiter:T,optional:S,repeat:C,partial:E,asterisk:!!w,pattern:k?l(k):w?".*":"[^"+s(T)+"]+?"})}}return a<e.length&&(c+=e.substr(a)),c&&r.push(c),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function c(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",c=t||{},s=(o||{}).pretty?a:encodeURIComponent,l=0;l<e.length;l++){var u=e[l];if("string"!=typeof u){var f,d=c[u.name];if(null==d){if(u.optional){u.partial&&(i+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(r(d)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=s(d[p]),!n[l].test(f))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?u.prefix:u.delimiter)+f}}else{if(f=u.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(d),!n[l].test(f))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+f+'"');i+=u.prefix+f}}else i+=u}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",c=0;c<e.length;c++){var l=e[c];if("string"==typeof l)a+=s(l);else{var d=s(l.prefix),p="(?:"+l.pattern+")";t.push(l),l.repeat&&(p+="(?:"+d+p+")*"),a+=p=l.optional?l.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=s(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",u(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return u(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return u(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r=n(52).CopyToClipboard;r.CopyToClipboard=r,e.exports=r},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,c,s=a(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))o.call(n,u)&&(s[u]=n[u]);if(r){c=r(n);for(var f=0;f<c.length;f++)i.call(n,c[f])&&(s[c[f]]=n[c[f]])}}return s}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8}},function(e,t){e.exports={L:1,M:0,Q:3,H:2}},function(e,t,n){var r=n(32);function o(e,t){if(null==e.length)throw new Error(e.length+"/"+t);for(var n=0;n<e.length&&0==e[n];)n++;this.num=new Array(e.length-n+t);for(var r=0;r<e.length-n;r++)this.num[r]=e[r+n]}o.prototype={get:function(e){return this.num[e]},getLength:function(){return this.num.length},multiply:function(e){for(var t=new Array(this.getLength()+e.getLength()-1),n=0;n<this.getLength();n++)for(var i=0;i<e.getLength();i++)t[n+i]^=r.gexp(r.glog(this.get(n))+r.glog(e.get(i)));return new o(t,0)},mod:function(e){if(this.getLength()-e.getLength()<0)return this;for(var t=r.glog(this.get(0))-r.glog(e.get(0)),n=new Array(this.getLength()),i=0;i<this.getLength();i++)n[i]=this.get(i);for(i=0;i<e.getLength();i++)n[i]^=r.gexp(r.glog(e.get(i))+t);return new o(n,0).mod(e)}},e.exports=o},function(e,t){for(var n={glog:function(e){if(e<1)throw new Error("glog("+e+")");return n.LOG_TABLE[e]},gexp:function(e){for(;e<0;)e+=255;for(;e>=256;)e-=255;return n.EXP_TABLE[e]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},r=0;r<8;r++)n.EXP_TABLE[r]=1<<r;for(r=8;r<256;r++)n.EXP_TABLE[r]=n.EXP_TABLE[r-4]^n.EXP_TABLE[r-5]^n.EXP_TABLE[r-6]^n.EXP_TABLE[r-8];for(r=0;r<255;r++)n.LOG_TABLE[n.EXP_TABLE[r]]=r;e.exports=n},function(e,t,n){"use strict";var r=n(14);function o(e,t,n,o,i){var a=r.writeRtpDescription(e.kind,t);if(a+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),a+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":i||"active"),a+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?a+="a=sendrecv\r\n":e.rtpSender?a+="a=sendonly\r\n":e.rtpReceiver?a+="a=recvonly\r\n":a+="a=inactive\r\n",e.rtpSender){var c=e.rtpSender._initialTrackId||e.rtpSender.track.id;e.rtpSender._initialTrackId=c;var s="msid:"+(o?o.id:"-")+" "+c+"\r\n";a+="a="+s,a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+s,e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+s,a+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),a}function i(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]},r=function(e,t){e=parseInt(e,10);for(var n=0;n<t.length;n++)if(t[n].payloadType===e||t[n].preferredPayloadType===e)return t[n]},o=function(e,t,n,o){var i=r(e.parameters.apt,n),a=r(t.parameters.apt,o);return i&&a&&i.name.toLowerCase()===a.name.toLowerCase()};return e.codecs.forEach((function(r){for(var i=0;i<t.codecs.length;i++){var a=t.codecs[i];if(r.name.toLowerCase()===a.name.toLowerCase()&&r.clockRate===a.clockRate){if("rtx"===r.name.toLowerCase()&&r.parameters&&a.parameters.apt&&!o(r,a,e.codecs,t.codecs))continue;(a=JSON.parse(JSON.stringify(a))).numChannels=Math.min(r.numChannels,a.numChannels),n.codecs.push(a),a.rtcpFeedback=a.rtcpFeedback.filter((function(e){for(var t=0;t<r.rtcpFeedback.length;t++)if(r.rtcpFeedback[t].type===e.type&&r.rtcpFeedback[t].parameter===e.parameter)return!0;return!1}));break}}})),e.headerExtensions.forEach((function(e){for(var r=0;r<t.headerExtensions.length;r++){var o=t.headerExtensions[r];if(e.uri===o.uri){n.headerExtensions.push(o);break}}})),n}function a(e,t,n){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(n)}function c(e,t){var n=e.getRemoteCandidates().find((function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type}));return n||e.addRemoteCandidate(t),!n}function s(e,t){var n=new Error(t);return n.name=e,n.code={NotSupportedError:9,InvalidStateError:11,InvalidAccessError:15,TypeError:void 0,OperationError:void 0}[e],n}e.exports=function(e,t){function n(t,n){n.addTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack",{track:t}))}function l(t,n,r,o){var i=new Event("track");i.track=n,i.receiver=r,i.transceiver={receiver:r},i.streams=o,e.setTimeout((function(){t._dispatchEvent("track",i)}))}var u=function(n){var o=this,i=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){o[e]=i[e].bind(i)})),this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this._localDescription=null,this._remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.connectionState="new",this.iceGatheringState="new",n=JSON.parse(JSON.stringify(n||{})),this.usingBundle="max-bundle"===n.bundlePolicy,"negotiate"===n.rtcpMuxPolicy)throw s("NotSupportedError","rtcpMuxPolicy 'negotiate' is not supported");switch(n.rtcpMuxPolicy||(n.rtcpMuxPolicy="require"),n.iceTransportPolicy){case"all":case"relay":break;default:n.iceTransportPolicy="all"}switch(n.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:n.bundlePolicy="balanced"}if(n.iceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((function(e){if(e&&(e.urls||e.url)){var r=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var o="string"==typeof r;return o&&(r=[r]),r=r.filter((function(e){return 0===e.indexOf("turn:")&&-1!==e.indexOf("transport=udp")&&-1===e.indexOf("turn:[")&&!n?(n=!0,!0):0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp")})),delete e.url,e.urls=o?r[0]:r,!!r.length}}))}(n.iceServers||[],t),this._iceGatherers=[],n.iceCandidatePoolSize)for(var a=n.iceCandidatePoolSize;a>0;a--)this._iceGatherers.push(new e.RTCIceGatherer({iceServers:n.iceServers,gatherPolicy:n.iceTransportPolicy}));else n.iceCandidatePoolSize=0;this._config=n,this.transceivers=[],this._sdpSessionId=r.generateSessionId(),this._sdpSessionVersion=0,this._dtlsRole=void 0,this._isClosed=!1};Object.defineProperty(u.prototype,"localDescription",{configurable:!0,get:function(){return this._localDescription}}),Object.defineProperty(u.prototype,"remoteDescription",{configurable:!0,get:function(){return this._remoteDescription}}),u.prototype.onicecandidate=null,u.prototype.onaddstream=null,u.prototype.ontrack=null,u.prototype.onremovestream=null,u.prototype.onsignalingstatechange=null,u.prototype.oniceconnectionstatechange=null,u.prototype.onconnectionstatechange=null,u.prototype.onicegatheringstatechange=null,u.prototype.onnegotiationneeded=null,u.prototype.ondatachannel=null,u.prototype._dispatchEvent=function(e,t){this._isClosed||(this.dispatchEvent(t),"function"==typeof this["on"+e]&&this["on"+e](t))},u.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this._dispatchEvent("icegatheringstatechange",e)},u.prototype.getConfiguration=function(){return this._config},u.prototype.getLocalStreams=function(){return this.localStreams},u.prototype.getRemoteStreams=function(){return this.remoteStreams},u.prototype._createTransceiver=function(e,t){var n=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,associatedRemoteMediaStreams:[],wantReceive:!0};if(this.usingBundle&&n)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var o=this._createIceAndDtlsTransports();r.iceTransport=o.iceTransport,r.dtlsTransport=o.dtlsTransport}return t||this.transceivers.push(r),r},u.prototype.addTrack=function(t,n){if(this._isClosed)throw s("InvalidStateError","Attempted to call addTrack on a closed peerconnection.");var r;if(this.transceivers.find((function(e){return e.track===t})))throw s("InvalidAccessError","Track already exists.");for(var o=0;o<this.transceivers.length;o++)this.transceivers[o].track||this.transceivers[o].kind!==t.kind||(r=this.transceivers[o]);return r||(r=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(n)&&this.localStreams.push(n),r.track=t,r.stream=n,r.rtpSender=new e.RTCRtpSender(t,r.dtlsTransport),r.rtpSender},u.prototype.addStream=function(e){var n=this;if(t>=15025)e.getTracks().forEach((function(t){n.addTrack(t,e)}));else{var r=e.clone();e.getTracks().forEach((function(e,t){var n=r.getTracks()[t];e.addEventListener("enabled",(function(e){n.enabled=e.enabled}))})),r.getTracks().forEach((function(e){n.addTrack(e,r)}))}},u.prototype.removeTrack=function(t){if(this._isClosed)throw s("InvalidStateError","Attempted to call removeTrack on a closed peerconnection.");if(!(t instanceof e.RTCRtpSender))throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");var n=this.transceivers.find((function(e){return e.rtpSender===t}));if(!n)throw s("InvalidAccessError","Sender was not created by this connection.");var r=n.stream;n.rtpSender.stop(),n.rtpSender=null,n.track=null,n.stream=null,-1===this.transceivers.map((function(e){return e.stream})).indexOf(r)&&this.localStreams.indexOf(r)>-1&&this.localStreams.splice(this.localStreams.indexOf(r),1),this._maybeFireNegotiationNeeded()},u.prototype.removeStream=function(e){var t=this;e.getTracks().forEach((function(e){var n=t.getSenders().find((function(t){return t.track===e}));n&&t.removeTrack(n)}))},u.prototype.getSenders=function(){return this.transceivers.filter((function(e){return!!e.rtpSender})).map((function(e){return e.rtpSender}))},u.prototype.getReceivers=function(){return this.transceivers.filter((function(e){return!!e.rtpReceiver})).map((function(e){return e.rtpReceiver}))},u.prototype._createIceGatherer=function(t,n){var r=this;if(n&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var o=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(o,"state",{value:"new",writable:!0}),this.transceivers[t].bufferedCandidateEvents=[],this.transceivers[t].bufferCandidates=function(e){var n=!e.candidate||0===Object.keys(e.candidate).length;o.state=n?"completed":"gathering",null!==r.transceivers[t].bufferedCandidateEvents&&r.transceivers[t].bufferedCandidateEvents.push(e)},o.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),o},u.prototype._gather=function(t,n){var o=this,i=this.transceivers[n].iceGatherer;if(!i.onlocalcandidate){var a=this.transceivers[n].bufferedCandidateEvents;this.transceivers[n].bufferedCandidateEvents=null,i.removeEventListener("localcandidate",this.transceivers[n].bufferCandidates),i.onlocalcandidate=function(e){if(!(o.usingBundle&&n>0)){var a=new Event("icecandidate");a.candidate={sdpMid:t,sdpMLineIndex:n};var c=e.candidate,s=!c||0===Object.keys(c).length;if(s)"new"!==i.state&&"gathering"!==i.state||(i.state="completed");else{"new"===i.state&&(i.state="gathering"),c.component=1,c.ufrag=i.getLocalParameters().usernameFragment;var l=r.writeCandidate(c);a.candidate=Object.assign(a.candidate,r.parseCandidate(l)),a.candidate.candidate=l,a.candidate.toJSON=function(){return{candidate:a.candidate.candidate,sdpMid:a.candidate.sdpMid,sdpMLineIndex:a.candidate.sdpMLineIndex,usernameFragment:a.candidate.usernameFragment}}}var u=r.getMediaSections(o._localDescription.sdp);u[a.candidate.sdpMLineIndex]+=s?"a=end-of-candidates\r\n":"a="+a.candidate.candidate+"\r\n",o._localDescription.sdp=r.getDescription(o._localDescription.sdp)+u.join("");var f=o.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}));"gathering"!==o.iceGatheringState&&(o.iceGatheringState="gathering",o._emitGatheringStateChange()),s||o._dispatchEvent("icecandidate",a),f&&(o._dispatchEvent("icecandidate",new Event("icecandidate")),o.iceGatheringState="complete",o._emitGatheringStateChange())}},e.setTimeout((function(){a.forEach((function(e){i.onlocalcandidate(e)}))}),0)}},u.prototype._createIceAndDtlsTransports=function(){var t=this,n=new e.RTCIceTransport(null);n.onicestatechange=function(){t._updateIceConnectionState(),t._updateConnectionState()};var r=new e.RTCDtlsTransport(n);return r.ondtlsstatechange=function(){t._updateConnectionState()},r.onerror=function(){Object.defineProperty(r,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:n,dtlsTransport:r}},u.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var n=this.transceivers[e].iceTransport;n&&(delete n.onicestatechange,delete this.transceivers[e].iceTransport);var r=this.transceivers[e].dtlsTransport;r&&(delete r.ondtlsstatechange,delete r.onerror,delete this.transceivers[e].dtlsTransport)},u.prototype._transceive=function(e,n,o){var a=i(e.localCapabilities,e.remoteCapabilities);n&&e.rtpSender&&(a.encodings=e.sendEncodingParameters,a.rtcp={cname:r.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(a.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(a)),o&&e.rtpReceiver&&a.codecs.length>0&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach((function(e){delete e.rtx})),e.recvEncodingParameters.length?a.encodings=e.recvEncodingParameters:a.encodings=[{}],a.rtcp={compound:e.rtcpParameters.compound},e.rtcpParameters.cname&&(a.rtcp.cname=e.rtcpParameters.cname),e.sendEncodingParameters.length&&(a.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(a))},u.prototype.setLocalDescription=function(e){var t,n,o=this;if(-1===["offer","answer"].indexOf(e.type))return Promise.reject(s("TypeError",'Unsupported type "'+e.type+'"'));if(!a("setLocalDescription",e.type,o.signalingState)||o._isClosed)return Promise.reject(s("InvalidStateError","Can not set local "+e.type+" in state "+o.signalingState));if("offer"===e.type)t=r.splitSections(e.sdp),n=t.shift(),t.forEach((function(e,t){var n=r.parseRtpParameters(e);o.transceivers[t].localCapabilities=n})),o.transceivers.forEach((function(e,t){o._gather(e.mid,t)}));else if("answer"===e.type){t=r.splitSections(o._remoteDescription.sdp),n=t.shift();var c=r.matchPrefix(n,"a=ice-lite").length>0;t.forEach((function(e,t){var a=o.transceivers[t],s=a.iceGatherer,l=a.iceTransport,u=a.dtlsTransport,f=a.localCapabilities,d=a.remoteCapabilities;if(!(r.isRejected(e)&&0===r.matchPrefix(e,"a=bundle-only").length)&&!a.rejected){var p=r.getIceParameters(e,n),h=r.getDtlsParameters(e,n);c&&(h.role="server"),o.usingBundle&&0!==t||(o._gather(a.mid,t),"new"===l.state&&l.start(s,p,c?"controlling":"controlled"),"new"===u.state&&u.start(h));var m=i(f,d);o._transceive(a,m.codecs.length>0,!1)}}))}return o._localDescription={type:e.type,sdp:e.sdp},"offer"===e.type?o._updateSignalingState("have-local-offer"):o._updateSignalingState("stable"),Promise.resolve()},u.prototype.setRemoteDescription=function(o){var u=this;if(-1===["offer","answer"].indexOf(o.type))return Promise.reject(s("TypeError",'Unsupported type "'+o.type+'"'));if(!a("setRemoteDescription",o.type,u.signalingState)||u._isClosed)return Promise.reject(s("InvalidStateError","Can not set remote "+o.type+" in state "+u.signalingState));var f={};u.remoteStreams.forEach((function(e){f[e.id]=e}));var d=[],p=r.splitSections(o.sdp),h=p.shift(),m=r.matchPrefix(h,"a=ice-lite").length>0,v=r.matchPrefix(h,"a=group:BUNDLE ").length>0;u.usingBundle=v;var y=r.matchPrefix(h,"a=ice-options:")[0];return u.canTrickleIceCandidates=!!y&&y.substr(14).split(" ").indexOf("trickle")>=0,p.forEach((function(a,s){var l=r.splitLines(a),p=r.getKind(a),y=r.isRejected(a)&&0===r.matchPrefix(a,"a=bundle-only").length,g=l[0].substr(2).split(" ")[2],b=r.getDirection(a,h),w=r.parseMsid(a),E=r.getMid(a)||r.generateIdentifier();if(y||"application"===p&&("DTLS/SCTP"===g||"UDP/DTLS/SCTP"===g))u.transceivers[s]={mid:E,kind:p,protocol:g,rejected:!0};else{var C,S,T,k,P,x,_,O,R;!y&&u.transceivers[s]&&u.transceivers[s].rejected&&(u.transceivers[s]=u._createTransceiver(p,!0));var N,D,M=r.parseRtpParameters(a);y||(N=r.getIceParameters(a,h),(D=r.getDtlsParameters(a,h)).role="client"),_=r.parseRtpEncodingParameters(a);var j=r.parseRtcpParameters(a),I=r.matchPrefix(a,"a=end-of-candidates",h).length>0,L=r.matchPrefix(a,"a=candidate:").map((function(e){return r.parseCandidate(e)})).filter((function(e){return 1===e.component}));if(("offer"===o.type||"answer"===o.type)&&!y&&v&&s>0&&u.transceivers[s]&&(u._disposeIceAndDtlsTransports(s),u.transceivers[s].iceGatherer=u.transceivers[0].iceGatherer,u.transceivers[s].iceTransport=u.transceivers[0].iceTransport,u.transceivers[s].dtlsTransport=u.transceivers[0].dtlsTransport,u.transceivers[s].rtpSender&&u.transceivers[s].rtpSender.setTransport(u.transceivers[0].dtlsTransport),u.transceivers[s].rtpReceiver&&u.transceivers[s].rtpReceiver.setTransport(u.transceivers[0].dtlsTransport)),"offer"!==o.type||y){if("answer"===o.type&&!y){S=(C=u.transceivers[s]).iceGatherer,T=C.iceTransport,k=C.dtlsTransport,P=C.rtpReceiver,x=C.sendEncodingParameters,O=C.localCapabilities,u.transceivers[s].recvEncodingParameters=_,u.transceivers[s].remoteCapabilities=M,u.transceivers[s].rtcpParameters=j,L.length&&"new"===T.state&&(!m&&!I||v&&0!==s?L.forEach((function(e){c(C.iceTransport,e)})):T.setRemoteCandidates(L)),v&&0!==s||("new"===T.state&&T.start(S,N,"controlling"),"new"===k.state&&k.start(D)),!i(C.localCapabilities,C.remoteCapabilities).codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&C.sendEncodingParameters[0].rtx&&delete C.sendEncodingParameters[0].rtx,u._transceive(C,"sendrecv"===b||"recvonly"===b,"sendrecv"===b||"sendonly"===b),!P||"sendrecv"!==b&&"sendonly"!==b?delete C.rtpReceiver:(R=P.track,w?(f[w.stream]||(f[w.stream]=new e.MediaStream),n(R,f[w.stream]),d.push([R,P,f[w.stream]])):(f.default||(f.default=new e.MediaStream),n(R,f.default),d.push([R,P,f.default])))}}else{(C=u.transceivers[s]||u._createTransceiver(p)).mid=E,C.iceGatherer||(C.iceGatherer=u._createIceGatherer(s,v)),L.length&&"new"===C.iceTransport.state&&(!I||v&&0!==s?L.forEach((function(e){c(C.iceTransport,e)})):C.iceTransport.setRemoteCandidates(L)),O=e.RTCRtpReceiver.getCapabilities(p),t<15019&&(O.codecs=O.codecs.filter((function(e){return"rtx"!==e.name}))),x=C.sendEncodingParameters||[{ssrc:1001*(2*s+2)}];var A,z=!1;if("sendrecv"===b||"sendonly"===b){if(z=!C.rtpReceiver,P=C.rtpReceiver||new e.RTCRtpReceiver(C.dtlsTransport,p),z)R=P.track,w&&"-"===w.stream||(w?(f[w.stream]||(f[w.stream]=new e.MediaStream,Object.defineProperty(f[w.stream],"id",{get:function(){return w.stream}})),Object.defineProperty(R,"id",{get:function(){return w.track}}),A=f[w.stream]):(f.default||(f.default=new e.MediaStream),A=f.default)),A&&(n(R,A),C.associatedRemoteMediaStreams.push(A)),d.push([R,P,A])}else C.rtpReceiver&&C.rtpReceiver.track&&(C.associatedRemoteMediaStreams.forEach((function(t){var n=t.getTracks().find((function(e){return e.id===C.rtpReceiver.track.id}));n&&function(t,n){n.removeTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("removetrack",{track:t}))}(n,t)})),C.associatedRemoteMediaStreams=[]);C.localCapabilities=O,C.remoteCapabilities=M,C.rtpReceiver=P,C.rtcpParameters=j,C.sendEncodingParameters=x,C.recvEncodingParameters=_,u._transceive(u.transceivers[s],!1,z)}}})),void 0===u._dtlsRole&&(u._dtlsRole="offer"===o.type?"active":"passive"),u._remoteDescription={type:o.type,sdp:o.sdp},"offer"===o.type?u._updateSignalingState("have-remote-offer"):u._updateSignalingState("stable"),Object.keys(f).forEach((function(t){var n=f[t];if(n.getTracks().length){if(-1===u.remoteStreams.indexOf(n)){u.remoteStreams.push(n);var r=new Event("addstream");r.stream=n,e.setTimeout((function(){u._dispatchEvent("addstream",r)}))}d.forEach((function(e){var t=e[0],r=e[1];n.id===e[2].id&&l(u,t,r,[n])}))}})),d.forEach((function(e){e[2]||l(u,e[0],e[1],[])})),e.setTimeout((function(){u&&u.transceivers&&u.transceivers.forEach((function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))}))}),4e3),Promise.resolve()},u.prototype.close=function(){this.transceivers.forEach((function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()})),this._isClosed=!0,this._updateSignalingState("closed")},u.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this._dispatchEvent("signalingstatechange",t)},u.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout((function(){if(t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t._dispatchEvent("negotiationneeded",e)}}),0))},u.prototype._updateIceConnectionState=function(){var e,t={new:0,closed:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&!e.rejected&&t[e.iceTransport.state]++})),e="new",t.failed>0?e="failed":t.checking>0?e="checking":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0?e="connected":t.completed>0&&(e="completed"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this._dispatchEvent("iceconnectionstatechange",n)}},u.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&e.dtlsTransport&&!e.rejected&&(t[e.iceTransport.state]++,t[e.dtlsTransport.state]++)})),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0&&(e="connected"),e!==this.connectionState){this.connectionState=e;var n=new Event("connectionstatechange");this._dispatchEvent("connectionstatechange",n)}},u.prototype.createOffer=function(){var n=this;if(n._isClosed)return Promise.reject(s("InvalidStateError","Can not call createOffer after close"));var i=n.transceivers.filter((function(e){return"audio"===e.kind})).length,a=n.transceivers.filter((function(e){return"video"===e.kind})).length,c=arguments[0];if(c){if(c.mandatory||c.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==c.offerToReceiveAudio&&(i=!0===c.offerToReceiveAudio?1:!1===c.offerToReceiveAudio?0:c.offerToReceiveAudio),void 0!==c.offerToReceiveVideo&&(a=!0===c.offerToReceiveVideo?1:!1===c.offerToReceiveVideo?0:c.offerToReceiveVideo)}for(n.transceivers.forEach((function(e){"audio"===e.kind?--i<0&&(e.wantReceive=!1):"video"===e.kind&&--a<0&&(e.wantReceive=!1)}));i>0||a>0;)i>0&&(n._createTransceiver("audio"),i--),a>0&&(n._createTransceiver("video"),a--);var l=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.transceivers.forEach((function(o,i){var a=o.track,c=o.kind,s=o.mid||r.generateIdentifier();o.mid=s,o.iceGatherer||(o.iceGatherer=n._createIceGatherer(i,n.usingBundle));var l=e.RTCRtpSender.getCapabilities(c);t<15019&&(l.codecs=l.codecs.filter((function(e){return"rtx"!==e.name}))),l.codecs.forEach((function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1"),o.remoteCapabilities&&o.remoteCapabilities.codecs&&o.remoteCapabilities.codecs.forEach((function(t){e.name.toLowerCase()===t.name.toLowerCase()&&e.clockRate===t.clockRate&&(e.preferredPayloadType=t.payloadType)}))})),l.headerExtensions.forEach((function(e){(o.remoteCapabilities&&o.remoteCapabilities.headerExtensions||[]).forEach((function(t){e.uri===t.uri&&(e.id=t.id)}))}));var u=o.sendEncodingParameters||[{ssrc:1001*(2*i+1)}];a&&t>=15019&&"video"===c&&!u[0].rtx&&(u[0].rtx={ssrc:u[0].ssrc+1}),o.wantReceive&&(o.rtpReceiver=new e.RTCRtpReceiver(o.dtlsTransport,c)),o.localCapabilities=l,o.sendEncodingParameters=u})),"max-compat"!==n._config.bundlePolicy&&(l+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),l+="a=ice-options:trickle\r\n",n.transceivers.forEach((function(e,t){l+=o(e,e.localCapabilities,"offer",e.stream,n._dtlsRole),l+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===n.iceGatheringState||0!==t&&n.usingBundle||(e.iceGatherer.getLocalCandidates().forEach((function(e){e.component=1,l+="a="+r.writeCandidate(e)+"\r\n"})),"completed"===e.iceGatherer.state&&(l+="a=end-of-candidates\r\n"))}));var u=new e.RTCSessionDescription({type:"offer",sdp:l});return Promise.resolve(u)},u.prototype.createAnswer=function(){var n=this;if(n._isClosed)return Promise.reject(s("InvalidStateError","Can not call createAnswer after close"));if("have-remote-offer"!==n.signalingState&&"have-local-pranswer"!==n.signalingState)return Promise.reject(s("InvalidStateError","Can not call createAnswer in signalingState "+n.signalingState));var a=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.usingBundle&&(a+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),a+="a=ice-options:trickle\r\n";var c=r.getMediaSections(n._remoteDescription.sdp).length;n.transceivers.forEach((function(e,r){if(!(r+1>c)){if(e.rejected)return"application"===e.kind?"DTLS/SCTP"===e.protocol?a+="m=application 0 DTLS/SCTP 5000\r\n":a+="m=application 0 "+e.protocol+" webrtc-datachannel\r\n":"audio"===e.kind?a+="m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n":"video"===e.kind&&(a+="m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"),void(a+="c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:"+e.mid+"\r\n");var s;if(e.stream)"audio"===e.kind?s=e.stream.getAudioTracks()[0]:"video"===e.kind&&(s=e.stream.getVideoTracks()[0]),s&&t>=15019&&"video"===e.kind&&!e.sendEncodingParameters[0].rtx&&(e.sendEncodingParameters[0].rtx={ssrc:e.sendEncodingParameters[0].ssrc+1});var l=i(e.localCapabilities,e.remoteCapabilities);!l.codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,a+=o(e,l,"answer",e.stream,n._dtlsRole),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(a+="a=rtcp-rsize\r\n")}}));var l=new e.RTCSessionDescription({type:"answer",sdp:a});return Promise.resolve(l)},u.prototype.addIceCandidate=function(e){var t,n=this;return e&&void 0===e.sdpMLineIndex&&!e.sdpMid?Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")):new Promise((function(o,i){if(!n._remoteDescription)return i(s("InvalidStateError","Can not add ICE candidate without a remote description"));if(e&&""!==e.candidate){var a=e.sdpMLineIndex;if(e.sdpMid)for(var l=0;l<n.transceivers.length;l++)if(n.transceivers[l].mid===e.sdpMid){a=l;break}var u=n.transceivers[a];if(!u)return i(s("OperationError","Can not add ICE candidate"));if(u.rejected)return o();var f=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===f.protocol&&(0===f.port||9===f.port))return o();if(f.component&&1!==f.component)return o();if((0===a||a>0&&u.iceTransport!==n.transceivers[0].iceTransport)&&!c(u.iceTransport,f))return i(s("OperationError","Can not add ICE candidate"));var d=e.candidate.trim();0===d.indexOf("a=")&&(d=d.substr(2)),(t=r.getMediaSections(n._remoteDescription.sdp))[a]+="a="+(f.type?d:"end-of-candidates")+"\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join("")}else for(var p=0;p<n.transceivers.length&&(n.transceivers[p].rejected||(n.transceivers[p].iceTransport.addRemoteCandidate({}),(t=r.getMediaSections(n._remoteDescription.sdp))[p]+="a=end-of-candidates\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join(""),!n.usingBundle));p++);o()}))},u.prototype.getStats=function(t){if(t&&t instanceof e.MediaStreamTrack){var n=null;if(this.transceivers.forEach((function(e){e.rtpSender&&e.rtpSender.track===t?n=e.rtpSender:e.rtpReceiver&&e.rtpReceiver.track===t&&(n=e.rtpReceiver)})),!n)throw s("InvalidAccessError","Invalid selector.");return n.getStats()}var r=[];return this.transceivers.forEach((function(e){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach((function(t){e[t]&&r.push(e[t].getStats())}))})),Promise.all(r).then((function(e){var t=new Map;return e.forEach((function(e){e.forEach((function(e){t.set(e.id,e)}))})),t}))};["RTCRtpSender","RTCRtpReceiver","RTCIceGatherer","RTCIceTransport","RTCDtlsTransport"].forEach((function(t){var n=e[t];if(n&&n.prototype&&n.prototype.getStats){var r=n.prototype.getStats;n.prototype.getStats=function(){return r.apply(this).then((function(e){var t=new Map;return Object.keys(e).forEach((function(n){var r;e[n].type={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[(r=e[n]).type]||r.type,t.set(n,e[n])})),t}))}}}));var f=["createOffer","createAnswer"];return f.forEach((function(e){var t=u.prototype[e];u.prototype[e]=function(){var e=arguments;return"function"==typeof e[0]||"function"==typeof e[1]?t.apply(this,[arguments[2]]).then((function(t){"function"==typeof e[0]&&e[0].apply(null,[t])}),(function(t){"function"==typeof e[1]&&e[1].apply(null,[t])})):t.apply(this,arguments)}})),(f=["setLocalDescription","setRemoteDescription","addIceCandidate"]).forEach((function(e){var t=u.prototype[e];u.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]||"function"==typeof e[2]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)}),(function(t){"function"==typeof e[2]&&e[2].apply(null,[t])})):t.apply(this,arguments)}})),["getStats"].forEach((function(e){var t=u.prototype[e];u.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)})):t.apply(this,arguments)}})),u}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(28))},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(n,!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}function f(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?p(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=n(0),g=(n(3),n(57)),b=n(30);function w(e){for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r<2048?(t+=String.fromCharCode(192|r>>6),t+=String.fromCharCode(128|63&r)):r<55296||r>=57344?(t+=String.fromCharCode(224|r>>12),t+=String.fromCharCode(128|r>>6&63),t+=String.fromCharCode(128|63&r)):(n++,r=65536+((1023&r)<<10|1023&e.charCodeAt(n)),t+=String.fromCharCode(240|r>>18),t+=String.fromCharCode(128|r>>12&63),t+=String.fromCharCode(128|r>>6&63),t+=String.fromCharCode(128|63&r))}return t}var E={size:128,level:"L",bgColor:"#FFFFFF",fgColor:"#000000",includeMargin:!1},C=4,S=.1;function T(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[];return e.forEach((function(e,r){var o=null;e.forEach((function(i,a){if(!i&&null!==o)return n.push("M".concat(o+t," ").concat(r+t,"h").concat(a-o,"v1H").concat(o+t,"z")),void(o=null);if(a!==e.length-1)i&&null===o&&(o=a);else{if(!i)return;null===o?n.push("M".concat(a+t,",").concat(r+t," h1v1H").concat(a+t,"z")):n.push("M".concat(o+t,",").concat(r+t," h").concat(a+1-o,"v1H").concat(o+t,"z"))}}))})),n.join("")}function k(e,t){return e.slice().map((function(e,n){return n<t.y||n>=t.y+t.h?e:e.map((function(e,n){return(n<t.x||n>=t.x+t.w)&&e}))}))}function P(e,t){var n=e.imageSettings,r=e.size,o=e.includeMargin;if(null==n)return null;var i=o?C:0,a=t.length+2*i,c=Math.floor(r*S),s=a/r,l=(n.width||c)*s,u=(n.height||c)*s,f=null==n.x?t.length/2-l/2:n.x*s,d=null==n.y?t.length/2-u/2:n.y*s,p=null;if(n.excavate){var h=Math.floor(f),m=Math.floor(d);p={x:h,y:m,w:Math.ceil(l+f-h),h:Math.ceil(u+d-m)}}return{x:f,y:d,h:u,w:l,excavation:p}}var x=function(){try{(new Path2D).addPath(new Path2D)}catch(e){return!1}return!0}(),_=function(e){function t(){var e,n;s(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return v(p(n=f(this,(e=d(t)).call.apply(e,[this].concat(o)))),"_canvas",void 0),v(p(n),"_image",void 0),v(p(n),"state",{imgLoaded:!1}),v(p(n),"handleImageLoad",(function(){n.setState({imgLoaded:!0})})),n}return h(t,e),u(t,[{key:"componentDidMount",value:function(){this.update()}},{key:"componentDidUpdate",value:function(){this.update()}},{key:"update",value:function(){var e=this.props,t=e.value,n=e.size,r=e.level,o=e.bgColor,i=e.fgColor,a=e.includeMargin,c=e.imageSettings,s=new g(-1,b[r]);if(s.addData(w(t)),s.make(),null!=this._canvas){var l=this._canvas,u=l.getContext("2d");if(!u)return;var f=s.modules;if(null===f)return;var d=a?C:0,p=f.length+2*d,h=P(this.props,f);null!=c&&null!=h&&null!=h.excavation&&(f=k(f,h.excavation));var m=window.devicePixelRatio||1;l.height=l.width=n*m;var v=n/p*m;u.scale(v,v),u.fillStyle=o,u.fillRect(0,0,p,p),u.fillStyle=i,x?u.fill(new Path2D(T(f,d))):f.forEach((function(e,t){e.forEach((function(e,n){e&&u.fillRect(n+d,t+d,1,1)}))})),this.state.imgLoaded&&this._image&&null!=h&&u.drawImage(this._image,h.x+d,h.y+d,h.w,h.h)}}},{key:"render",value:function(){var e=this,t=this.props,n=(t.value,t.size),r=(t.level,t.bgColor,t.fgColor,t.style),i=(t.includeMargin,t.imageSettings),s=c(t,["value","size","level","bgColor","fgColor","style","includeMargin","imageSettings"]),l=a({height:n,width:n},r),u=null,f=i&&i.src;return null!=i&&null!=f&&(u=y.createElement("img",{src:f,style:{display:"none"},onLoad:this.handleImageLoad,ref:function(t){return e._image=t}})),y.createElement(y.Fragment,null,y.createElement("canvas",o({style:l,height:n,width:n,ref:function(t){return e._canvas=t}},s)),u)}}]),t}(y.PureComponent);v(_,"defaultProps",E);var O=function(e){function t(){return s(this,t),f(this,d(t).apply(this,arguments))}return h(t,e),u(t,[{key:"render",value:function(){var e=this.props,t=e.value,n=e.size,r=e.level,i=e.bgColor,a=e.fgColor,s=e.includeMargin,l=e.imageSettings,u=c(e,["value","size","level","bgColor","fgColor","includeMargin","imageSettings"]),f=new g(-1,b[r]);f.addData(w(t)),f.make();var d=f.modules;if(null===d)return null;var p=s?C:0,h=d.length+2*p,m=P(this.props,d),v=null;null!=l&&null!=m&&(null!=m.excavation&&(d=k(d,m.excavation)),v=y.createElement("image",{xlinkHref:l.src,height:m.h,width:m.w,x:m.x+p,y:m.y+p,preserveAspectRatio:"none"}));var E=T(d,p);return y.createElement("svg",o({shapeRendering:"crispEdges",height:n,width:n,viewBox:"0 0 ".concat(h," ").concat(h)},u),y.createElement("path",{fill:i,d:"M0,0 h".concat(h,"v").concat(h,"H0z")}),y.createElement("path",{fill:a,d:E}),v)}}]),t}(y.PureComponent);v(O,"defaultProps",E);var R=function(e){var t=e.renderAs,n=c(e,["renderAs"]),r="svg"===t?O:_;return y.createElement(r,n)};R.defaultProps=a({renderAs:"canvas"},E),e.exports=R},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(this&&this[r]||r);else if(Array.isArray(r))e.push(o.apply(this,r));else if("object"===i)for(var a in r)n.call(r,a)&&r[a]&&e.push(this&&this[a]||a)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){e.exports={"btn-primary":"_1efWO",btnPrimary:"_1efWO","btn-secondary":"_1WZn8",btnSecondary:"_1WZn8","btn-disabled":"hSD9a",btnDisabled:"hSD9a"}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function a(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function c(e,t,n,r,i){if("function"!=typeof n)throw new TypeError("The listener must be a function");var c=new a(n,r||e,i),s=o?o+t:t;return e._events[s]?e._events[s].fn?e._events[s]=[e._events[s],c]:e._events[s].push(c):(e._events[s]=c,e._eventsCount++),e}function s(e,t){0==--e._eventsCount?e._events=new i:delete e._events[t]}function l(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),l.prototype.eventNames=function(){var e,t,n=[];if(0===this._eventsCount)return n;for(t in e=this._events)r.call(e,t)&&n.push(o?t.slice(1):t);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},l.prototype.listeners=function(e){var t=o?o+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,i=n.length,a=new Array(i);r<i;r++)a[r]=n[r].fn;return a},l.prototype.listenerCount=function(e){var t=o?o+e:e,n=this._events[t];return n?n.fn?1:n.length:0},l.prototype.emit=function(e,t,n,r,i,a){var c=o?o+e:e;if(!this._events[c])return!1;var s,l,u=this._events[c],f=arguments.length;if(u.fn){switch(u.once&&this.removeListener(e,u.fn,void 0,!0),f){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,t),!0;case 3:return u.fn.call(u.context,t,n),!0;case 4:return u.fn.call(u.context,t,n,r),!0;case 5:return u.fn.call(u.context,t,n,r,i),!0;case 6:return u.fn.call(u.context,t,n,r,i,a),!0}for(l=1,s=new Array(f-1);l<f;l++)s[l-1]=arguments[l];u.fn.apply(u.context,s)}else{var d,p=u.length;for(l=0;l<p;l++)switch(u[l].once&&this.removeListener(e,u[l].fn,void 0,!0),f){case 1:u[l].fn.call(u[l].context);break;case 2:u[l].fn.call(u[l].context,t);break;case 3:u[l].fn.call(u[l].context,t,n);break;case 4:u[l].fn.call(u[l].context,t,n,r);break;default:if(!s)for(d=1,s=new Array(f-1);d<f;d++)s[d-1]=arguments[d];u[l].fn.apply(u[l].context,s)}}return!0},l.prototype.on=function(e,t,n){return c(this,e,t,n,!1)},l.prototype.once=function(e,t,n){return c(this,e,t,n,!0)},l.prototype.removeListener=function(e,t,n,r){var i=o?o+e:e;if(!this._events[i])return this;if(!t)return s(this,i),this;var a=this._events[i];if(a.fn)a.fn!==t||r&&!a.once||n&&a.context!==n||s(this,i);else{for(var c=0,l=[],u=a.length;c<u;c++)(a[c].fn!==t||r&&!a[c].once||n&&a[c].context!==n)&&l.push(a[c]);l.length?this._events[i]=1===l.length?l[0]:l:s(this,i)}return this},l.prototype.removeAllListeners=function(e){var t;return e?(t=o?o+e:e,this._events[t]&&s(this,t)):(this._events=new i,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=o,l.EventEmitter=l,e.exports=l},,function(e,t,n){},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(27),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,c=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,l=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function E(){}function C(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var S=C.prototype=new E;S.constructor=C,r(S,w.prototype),S.isPureReactComponent=!0;var T={current:null},k={current:null},P=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,n){var r,o={},a=null,c=null;if(null!=t)for(r in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var l=Array(s),u=0;u<s;u++)l[u]=arguments[u+2];o.children=l}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:c,props:o,_owner:k.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var R=/\/+/g,N=[];function D(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function j(e,t,n){return null==e?0:function e(t,n,r,o){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var s=!1;if(null===t)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return r(o,t,""===n?"."+I(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var u=n+I(c=t[l],l);s+=e(c,u,r,o)}else if(null===t||"object"!=typeof t?u=null:u="function"==typeof(u=v&&t[v]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),l=0;!(c=t.next()).done;)s+=e(c=c.value,u=n+I(c,l++),r,o);else if("object"===c)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return s}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?z(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),r.push(e))}function z(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),j(e,A,t=D(t,i,r,o)),M(t)}function F(){var e=T.current;if(null===e)throw Error(y(321));return e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return z(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;j(e,L,t=D(null,null,t,n)),M(t)},count:function(e){return j(e,(function(){return null}),null)},toArray:function(e){var t=[];return z(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return F().useCallback(e,t)},useContext:function(e,t){return F().useContext(e,t)},useEffect:function(e,t){return F().useEffect(e,t)},useImperativeHandle:function(e,t,n){return F().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return F().useLayoutEffect(e,t)},useMemo:function(e,t){return F().useMemo(e,t)},useReducer:function(e,t,n){return F().useReducer(e,t,n)},useRef:function(e){return F().useRef(e)},useState:function(e){return F().useState(e)},Fragment:c,Profiler:l,StrictMode:s,Suspense:p,createElement:_,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,c=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,s=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)P.call(t,u)&&!x.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){l=Array(u);for(var f=0;f<u;f++)l[f]=arguments[f+2];o.children=l}return{$$typeof:i,type:e.type,key:a,ref:c,props:o,_owner:s}},createFactory:function(e){var t=_.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r}},B={default:U},W=B&&U||B;e.exports=W.default||W},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(27),i=n(44);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var c=null,s={};function l(){if(c)for(var e in s){var t=s[e],n=c.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,p=r;if(d.hasOwnProperty(p))throw Error(a(99,p));d[p]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&u(h[o],l,p);o=!0}else i.registrationName?(u(i.registrationName,l,p),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function u(e,t,n){if(p[e])throw Error(a(100,e));p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function m(e,t,n,r,o,i,a,c,s){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var v=!1,y=null,g=!1,b=null,w={onError:function(e){v=!0,y=e}};function E(e,t,n,r,o,i,a,c,s){v=!1,y=null,m.apply(w,arguments)}var C=null,S=null,T=null;function k(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,o,i,c,s,l){if(E.apply(this,arguments),v){if(!v)throw Error(a(198));var u=y;v=!1,y=null,g||(g=!0,b=u)}}(r,t,void 0,e),e.currentTarget=null}function P(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function x(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var _=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)k(e,t[r],n[r]);else t&&k(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function R(e){if(null!==e&&(_=P(_,e)),e=_,_=null,e){if(x(e,O),_)throw Error(a(95));if(g)throw e=b,g=!1,b=null,e}}var N={injectEventPluginOrder:function(e){if(c)throw Error(a(101));c=Array.prototype.slice.call(e),l()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!s.hasOwnProperty(t)||s[t]!==r){if(s[t])throw Error(a(102,t));s[t]=r,n=!0}}n&&l()}};function D(e,t){var n=e.stateNode;if(!n)return null;var r=C(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var M=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;M.hasOwnProperty("ReactCurrentDispatcher")||(M.ReactCurrentDispatcher={current:null}),M.hasOwnProperty("ReactCurrentBatchConfig")||(M.ReactCurrentBatchConfig={suspense:null});var j=/^(.*)[\\\/]/,I="function"==typeof Symbol&&Symbol.for,L=I?Symbol.for("react.element"):60103,A=I?Symbol.for("react.portal"):60106,z=I?Symbol.for("react.fragment"):60107,F=I?Symbol.for("react.strict_mode"):60108,U=I?Symbol.for("react.profiler"):60114,B=I?Symbol.for("react.provider"):60109,W=I?Symbol.for("react.context"):60110,V=I?Symbol.for("react.concurrent_mode"):60111,G=I?Symbol.for("react.forward_ref"):60112,H=I?Symbol.for("react.suspense"):60113,$=I?Symbol.for("react.suspense_list"):60120,q=I?Symbol.for("react.memo"):60115,K=I?Symbol.for("react.lazy"):60116;I&&Symbol.for("react.fundamental"),I&&Symbol.for("react.responder"),I&&Symbol.for("react.scope");var J="function"==typeof Symbol&&Symbol.iterator;function Q(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=J&&e[J]||e["@@iterator"])?e:null}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case z:return"Fragment";case A:return"Portal";case U:return"Profiler";case F:return"StrictMode";case H:return"Suspense";case $:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case W:return"Context.Consumer";case B:return"Context.Provider";case G:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case q:return X(e.type);case K:if(e=1===e._status?e._result:null)return X(e)}return null}function Y(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=X(e.type);n=null,r&&(n=X(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(j,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=S(e)){if("function"!=typeof ee)throw Error(a(280));var t=C(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ie(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function ce(e,t,n,r){return e(t,n,r)}function se(){}var le=ae,ue=!1,fe=!1;function de(){null===te&&null===ne||(se(),ie())}new Map;var pe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ve={};function ye(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ge[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ge[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ge[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ge[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ge[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ge[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ge[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ge[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ge[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function Ee(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Ce(e,t,n,r){var o=ge.hasOwnProperty(t)?ge[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(ve,e)||!he.call(me,e)&&(pe.test(e)?ve[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Se(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Te(e){e._valueTracker||(e._valueTracker=function(e){var t=Se(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Se(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Pe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ee(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _e(e,t){null!=(t=t.checked)&&Ce(e,"checked",t,!1)}function Oe(e,t){_e(e,t);var n=Ee(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ne(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ne(e,t.type,Ee(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ne(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function De(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Ee(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ie(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:Ee(n)}}function Le(e,t){var n=Ee(t.value),r=Ee(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),ge.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var ze={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Be,We=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ze.svg||"innerHTML"in e)e.innerHTML=t;else{for((Be=Be||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Be.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ge(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Ge("Animation","AnimationEnd"),animationiteration:Ge("Animation","AnimationIteration"),animationstart:Ge("Animation","AnimationStart"),transitionend:Ge("Transition","TransitionEnd")},$e={},qe={};function Ke(e){if($e[e])return $e[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in qe)return $e[e]=n[t];return e}Z&&(qe=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var Je=Ke("animationend"),Qe=Ke("animationiteration"),Xe=Ke("animationstart"),Ye=Ke("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(a(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return nt(o),e;if(i===r)return nt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var c=!1,s=o.child;s;){if(s===n){c=!0,n=o,r=i;break}if(s===r){c=!0,r=o,n=i;break}s=s.sibling}if(!c){for(s=i.child;s;){if(s===n){c=!0,n=i,r=o;break}if(s===r){c=!0,r=i,n=o;break}s=s.sibling}if(!c)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,it,at,ct=!1,st=[],lt=null,ut=null,ft=null,dt=new Map,pt=new Map,ht=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),vt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function yt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function gt(e,t){switch(e){case"focus":case"blur":lt=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":pt.delete(t.pointerId)}}function bt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=yt(t,n,r,o),null!==t&&(null!==(t=pr(t))&&it(t)),e):(e.eventSystemFlags|=r,e)}function wt(e){var t=dr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){at(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=pr(t);return null!==n&&it(n),e.blockedOn=t,!1}return!0}function Ct(e,t,n){Et(e)&&n.delete(t)}function St(){for(ct=!1;0<st.length;){var e=st[0];if(null!==e.blockedOn){null!==(e=pr(e.blockedOn))&&ot(e);break}var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:st.shift()}null!==lt&&Et(lt)&&(lt=null),null!==ut&&Et(ut)&&(ut=null),null!==ft&&Et(ft)&&(ft=null),dt.forEach(Ct),pt.forEach(Ct)}function Tt(e,t){e.blockedOn===t&&(e.blockedOn=null,ct||(ct=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,St)))}function kt(e){function t(t){return Tt(t,e)}if(0<st.length){Tt(st[0],e);for(var n=1;n<st.length;n++){var r=st[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==lt&&Tt(lt,e),null!==ut&&Tt(ut,e),null!==ft&&Tt(ft,e),dt.forEach(t),pt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)wt(n),null===n.blockedOn&&ht.shift()}function Pt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function xt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function _t(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Ot(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=xt(t);for(t=n.length;0<t--;)_t(n[t],"captured",e);for(t=0;t<n.length;t++)_t(n[t],"bubbled",e)}}function Rt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Nt(e){e&&e.dispatchConfig.registrationName&&Rt(e._targetInst,null,e)}function Dt(e){x(e,Ot)}function Mt(){return!0}function jt(){return!1}function It(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Mt:jt,this.isPropagationStopped=jt,this}function Lt(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function At(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function zt(e){e.eventPool=[],e.getPooled=Lt,e.release=At}o(It.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Mt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Mt)},persist:function(){this.isPersistent=Mt},isPersistent:jt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=jt,this._dispatchInstances=this._dispatchListeners=null}}),It.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},It.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,zt(n),n},zt(It);var Ft=It.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Ut=It.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Bt=It.extend({view:null,detail:null}),Wt=Bt.extend({relatedTarget:null});function Vt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Gt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ht={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},$t={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function qt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=$t[e])&&!!t[e]}function Kt(){return qt}for(var Jt=Bt.extend({key:function(e){if(e.key){var t=Gt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Vt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ht[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?Vt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Vt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Qt=0,Xt=0,Yt=!1,Zt=!1,en=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Qt;return Qt=e.screenX,Yt?"mousemove"===e.type?e.screenX-t:0:(Yt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Xt;return Xt=e.screenY,Zt?"mousemove"===e.type?e.screenY-t:0:(Zt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),on=It.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),an=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),cn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Je,"animationEnd",2],[Qe,"animationIteration",2],[Xe,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Ye,"transitionEnd",2],["waiting","waiting",2]],sn={},ln={},un=0;un<cn.length;un++){var fn=cn[un],dn=fn[0],pn=fn[1],hn=fn[2],mn="on"+(pn[0].toUpperCase()+pn.slice(1)),vn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[dn],eventPriority:hn};sn[pn]=vn,ln[dn]=vn}var yn={eventTypes:sn,getEventPriority:function(e){return void 0!==(e=ln[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=ln[e];if(!o)return null;switch(e){case"keypress":if(0===Vt(n))return null;case"keydown":case"keyup":e=Jt;break;case"blur":case"focus":e=Wt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Je:case Qe:case Xe:e=Ft;break;case Ye:e=on;break;case"scroll":e=Bt;break;case"wheel":e=an;break;case"copy":case"cut":case"paste":e=Ut;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=It}return Dt(t=e.getPooled(o,t,n,r)),t}},gn=i.unstable_UserBlockingPriority,bn=i.unstable_runWithPriority,wn=yn.getEventPriority,En=10,Cn=[];function Sn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=dr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Pt(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=e.eventSystemFlags,c=null,s=0;s<f.length;s++){var l=f[s];l&&(l=l.extractEvents(r,t,i,o,a))&&(c=P(c,l))}R(c)}}var Tn=!0;function kn(e,t){Pn(t,e,!1)}function Pn(e,t,n){switch(wn(t)){case 0:var r=xn.bind(null,t,1);break;case 1:r=_n.bind(null,t,1);break;default:r=Rn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function xn(e,t,n){ue||se();var r=Rn,o=ue;ue=!0;try{ce(r,e,t,n)}finally{(ue=o)||de()}}function _n(e,t,n){bn(gn,Rn.bind(null,e,t,n))}function On(e,t,n,r){if(Cn.length){var o=Cn.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=Sn,n=e,fe)t(n,void 0);else{fe=!0;try{le(t,n,void 0)}finally{fe=!1,de()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,Cn.length<En&&Cn.push(e)}}function Rn(e,t,n){if(Tn)if(0<st.length&&-1<mt.indexOf(e))e=yt(null,e,t,n),st.push(e);else{var r=Nn(e,t,n);null===r?gt(e,n):-1<mt.indexOf(e)?(e=yt(r,e,t,n),st.push(e)):function(e,t,n,r){switch(t){case"focus":return lt=bt(lt,e,t,n,r),!0;case"dragenter":return ut=bt(ut,e,t,n,r),!0;case"mouseover":return ft=bt(ft,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return dt.set(o,bt(dt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,pt.set(o,bt(pt.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(gt(e,n),On(e,t,n,null))}}function Nn(e,t,n){var r=Pt(n);if(null!==(r=dr(r))){var o=et(r);if(null===o)r=null;else{var i=o.tag;if(13===i){if(null!==(r=tt(o)))return r;r=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return On(e,t,n,r),null}function Dn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Mn=new("function"==typeof WeakMap?WeakMap:Map);function jn(e){var t=Mn.get(e);return void 0===t&&(t=new Set,Mn.set(e,t)),t}function In(e,t,n){if(!n.has(e)){switch(e){case"scroll":Pn(t,"scroll",!0);break;case"focus":case"blur":Pn(t,"focus",!0),Pn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Dn(e)&&Pn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&kn(e,t)}n.add(e)}}var Ln={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},An=["Webkit","ms","Moz","O"];function zn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Ln.hasOwnProperty(e)&&Ln[e]?(""+t).trim():t+"px"}function Fn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=zn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Ln).forEach((function(e){An.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ln[t]=Ln[e]}))}));var Un=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Bn(e,t){if(t){if(Un[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function Wn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Vn(e,t){var n=jn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)In(t[r],e,n)}function Gn(){}function Hn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function qn(e,t){var n,r=$n(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=$n(r)}}function Kn(){for(var e=window,t=Hn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Hn((e=t.contentWindow).document)}return t}function Jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Qn="$",Xn="/$",Yn="$?",Zn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var or="function"==typeof setTimeout?setTimeout:void 0,ir="function"==typeof clearTimeout?clearTimeout:void 0;function ar(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function cr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Qn||n===Zn||n===Yn){if(0===t)return e;t--}else n===Xn&&t++}e=e.previousSibling}return null}var sr=Math.random().toString(36).slice(2),lr="__reactInternalInstance$"+sr,ur="__reactEventHandlers$"+sr,fr="__reactContainere$"+sr;function dr(e){var t=e[lr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[lr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=cr(e);null!==e;){if(n=e[lr])return n;e=cr(e)}return t}n=(e=n).parentNode}return null}function pr(e){return!(e=e[lr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function mr(e){return e[ur]||null}var vr=null,yr=null,gr=null;function br(){if(gr)return gr;var e,t,n=yr,r=n.length,o="value"in vr?vr.value:vr.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return gr=o.slice(e,1<t?1-t:void 0)}var wr=It.extend({data:null}),Er=It.extend({data:null}),Cr=[9,13,27,32],Sr=Z&&"CompositionEvent"in window,Tr=null;Z&&"documentMode"in document&&(Tr=document.documentMode);var kr=Z&&"TextEvent"in window&&!Tr,Pr=Z&&(!Sr||Tr&&8<Tr&&11>=Tr),xr=String.fromCharCode(32),_r={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Or=!1;function Rr(e,t){switch(e){case"keyup":return-1!==Cr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Nr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Dr=!1;var Mr={eventTypes:_r,extractEvents:function(e,t,n,r){var o;if(Sr)e:{switch(e){case"compositionstart":var i=_r.compositionStart;break e;case"compositionend":i=_r.compositionEnd;break e;case"compositionupdate":i=_r.compositionUpdate;break e}i=void 0}else Dr?Rr(e,n)&&(i=_r.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=_r.compositionStart);return i?(Pr&&"ko"!==n.locale&&(Dr||i!==_r.compositionStart?i===_r.compositionEnd&&Dr&&(o=br()):(yr="value"in(vr=r)?vr.value:vr.textContent,Dr=!0)),i=wr.getPooled(i,t,n,r),o?i.data=o:null!==(o=Nr(n))&&(i.data=o),Dt(i),o=i):o=null,(e=kr?function(e,t){switch(e){case"compositionend":return Nr(t);case"keypress":return 32!==t.which?null:(Or=!0,xr);case"textInput":return(e=t.data)===xr&&Or?null:e;default:return null}}(e,n):function(e,t){if(Dr)return"compositionend"===e||!Sr&&Rr(e,t)?(e=br(),gr=yr=vr=null,Dr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Er.getPooled(_r.beforeInput,t,n,r)).data=e,Dt(t)):t=null,null===o?t:null===t?o:[o,t]}},jr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ir(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!jr[e.type]:"textarea"===t}var Lr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ar(e,t,n){return(e=It.getPooled(Lr.change,e,t,n)).type="change",oe(n),Dt(e),e}var zr=null,Fr=null;function Ur(e){R(e)}function Br(e){if(ke(hr(e)))return e}function Wr(e,t){if("change"===e)return t}var Vr=!1;function Gr(){zr&&(zr.detachEvent("onpropertychange",Hr),Fr=zr=null)}function Hr(e){if("value"===e.propertyName&&Br(Fr))if(e=Ar(Fr,e,Pt(e)),ue)R(e);else{ue=!0;try{ae(Ur,e)}finally{ue=!1,de()}}}function $r(e,t,n){"focus"===e?(Gr(),Fr=n,(zr=t).attachEvent("onpropertychange",Hr)):"blur"===e&&Gr()}function qr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Br(Fr)}function Kr(e,t){if("click"===e)return Br(t)}function Jr(e,t){if("input"===e||"change"===e)return Br(t)}Z&&(Vr=Dn("input")&&(!document.documentMode||9<document.documentMode));var Qr,Xr={eventTypes:Lr,_isInputEventSupported:Vr,extractEvents:function(e,t,n,r){var o=t?hr(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=Wr;else if(Ir(o))if(Vr)a=Jr;else{a=qr;var c=$r}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Kr);if(a&&(a=a(e,t)))return Ar(a,n,r);c&&c(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ne(o,"number",o.value)}},Yr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zr={eventTypes:Yr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?dr(t):null)&&(t!==(i=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var c=en,s=Yr.mouseLeave,l=Yr.mouseEnter,u="mouse";else"pointerout"!==e&&"pointerover"!==e||(c=tn,s=Yr.pointerLeave,l=Yr.pointerEnter,u="pointer");if(e=null==a?o:hr(a),o=null==t?o:hr(t),(s=c.getPooled(s,a,n,r)).type=u+"leave",s.target=e,s.relatedTarget=o,(r=c.getPooled(l,t,n,r)).type=u+"enter",r.target=o,r.relatedTarget=e,u=t,(c=a)&&u)e:{for(e=u,a=0,t=l=c;t;t=xt(t))a++;for(t=0,o=e;o;o=xt(o))t++;for(;0<a-t;)l=xt(l),a--;for(;0<t-a;)e=xt(e),t--;for(;a--;){if(l===e||l===e.alternate)break e;l=xt(l),e=xt(e)}l=null}else l=null;for(e=l,l=[];c&&c!==e&&(null===(a=c.alternate)||a!==e);)l.push(c),c=xt(c);for(c=[];u&&u!==e&&(null===(a=u.alternate)||a!==e);)c.push(u),u=xt(u);for(u=0;u<l.length;u++)Rt(l[u],"bubbled",s);for(u=c.length;0<u--;)Rt(c[u],"captured",r);return n===Qr?(Qr=null,[s]):(Qr=n,[s,r])}};var eo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},to=Object.prototype.hasOwnProperty;function no(e,t){if(eo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!to.call(t,n[r])||!eo(e[n[r]],t[n[r]]))return!1;return!0}var ro=Z&&"documentMode"in document&&11>=document.documentMode,oo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},io=null,ao=null,co=null,so=!1;function lo(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return so||null==io||io!==Hn(n)?null:("selectionStart"in(n=io)&&Jn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},co&&no(co,n)?null:(co=n,(e=It.getPooled(oo.select,ao,e,t)).type="select",e.target=io,Dt(e),e))}var uo={eventTypes:oo,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=jn(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?hr(t):window,e){case"focus":(Ir(i)||"true"===i.contentEditable)&&(io=i,ao=t,co=null);break;case"blur":co=ao=io=null;break;case"mousedown":so=!0;break;case"contextmenu":case"mouseup":case"dragend":return so=!1,lo(n,r);case"selectionchange":if(ro)break;case"keydown":case"keyup":return lo(n,r)}return null}};N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),C=mr,S=pr,T=hr,N.injectEventPluginsByName({SimpleEventPlugin:yn,EnterLeaveEventPlugin:Zr,ChangeEventPlugin:Xr,SelectEventPlugin:uo,BeforeInputEventPlugin:Mr}),new Set;var fo=[],po=-1;function ho(e){0>po||(e.current=fo[po],fo[po]=null,po--)}function mo(e,t){po++,fo[po]=e.current,e.current=t}var vo={},yo={current:vo},go={current:!1},bo=vo;function wo(e,t){var n=e.type.contextTypes;if(!n)return vo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Eo(e){return null!=(e=e.childContextTypes)}function Co(e){ho(go),ho(yo)}function So(e){ho(go),ho(yo)}function To(e,t,n){if(yo.current!==vo)throw Error(a(168));mo(yo,t),mo(go,n)}function ko(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,X(t)||"Unknown",i));return o({},n,{},r)}function Po(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||vo,bo=yo.current,mo(yo,t),mo(go,go.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=ko(e,t,bo),r.__reactInternalMemoizedMergedChildContext=t,ho(go),ho(yo),mo(yo,t)):ho(go),mo(go,n)}var _o=i.unstable_runWithPriority,Oo=i.unstable_scheduleCallback,Ro=i.unstable_cancelCallback,No=i.unstable_shouldYield,Do=i.unstable_requestPaint,Mo=i.unstable_now,jo=i.unstable_getCurrentPriorityLevel,Io=i.unstable_ImmediatePriority,Lo=i.unstable_UserBlockingPriority,Ao=i.unstable_NormalPriority,zo=i.unstable_LowPriority,Fo=i.unstable_IdlePriority,Uo={},Bo=void 0!==Do?Do:function(){},Wo=null,Vo=null,Go=!1,Ho=Mo(),$o=1e4>Ho?Mo:function(){return Mo()-Ho};function qo(){switch(jo()){case Io:return 99;case Lo:return 98;case Ao:return 97;case zo:return 96;case Fo:return 95;default:throw Error(a(332))}}function Ko(e){switch(e){case 99:return Io;case 98:return Lo;case 97:return Ao;case 96:return zo;case 95:return Fo;default:throw Error(a(332))}}function Jo(e,t){return e=Ko(e),_o(e,t)}function Qo(e,t,n){return e=Ko(e),Oo(e,t,n)}function Xo(e){return null===Wo?(Wo=[e],Vo=Oo(Io,Zo)):Wo.push(e),Uo}function Yo(){if(null!==Vo){var e=Vo;Vo=null,Ro(e)}Zo()}function Zo(){if(!Go&&null!==Wo){Go=!0;var e=0;try{var t=Wo;Jo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Wo=null}catch(t){throw null!==Wo&&(Wo=Wo.slice(e+1)),Oo(Io,Yo),t}finally{Go=!1}}}var ei=3;function ti(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function ni(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ri={current:null},oi=null,ii=null,ai=null;function ci(){ai=ii=oi=null}function si(e,t){var n=e.type._context;mo(ri,n._currentValue),n._currentValue=t}function li(e){var t=ri.current;ho(ri),e.type._context._currentValue=t}function ui(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function fi(e,t){oi=e,ai=ii=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ha=!0),e.firstContext=null)}function di(e,t){if(ai!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ai=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ii){if(null===oi)throw Error(a(308));ii=t,oi.dependencies={expirationTime:0,firstContext:t,responders:null}}else ii=ii.next=t;return e._currentValue}var pi=!1;function hi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function mi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function vi(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function yi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function gi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=hi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=hi(e.memoizedState),o=n.updateQueue=hi(n.memoizedState)):r=e.updateQueue=mi(o):null===o&&(o=n.updateQueue=mi(r));null===o||r===o?yi(r,t):null===r.lastUpdate||null===o.lastUpdate?(yi(r,t),yi(o,t)):(yi(r,t),o.lastUpdate=t)}function bi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=hi(e.memoizedState):wi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function wi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=mi(t)),t}function Ei(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:pi=!0}return r}function Ci(e,t,n,r,o){pi=!1;for(var i=(t=wi(e,t)).baseState,a=null,c=0,s=t.firstUpdate,l=i;null!==s;){var u=s.expirationTime;u<o?(null===a&&(a=s,i=l),c<u&&(c=u)):(xs(u,s.suspenseConfig),l=Ei(e,0,s,l,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(u=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<o?(null===u&&(u=s,null===a&&(i=l)),c<f&&(c=f)):(l=Ei(e,0,s,l,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===u?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===u&&(i=l),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=u,_s(c),e.expirationTime=c,e.memoizedState=l}function Si(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Ti(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Ti(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Ti(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var ki=M.ReactCurrentBatchConfig,Pi=(new r.Component).refs;function xi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var _i={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hs(),o=ki.suspense;(o=vi(r=ms(r,e,o),o)).payload=t,null!=n&&(o.callback=n),gi(e,o),vs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hs(),o=ki.suspense;(o=vi(r=ms(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),gi(e,o),vs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hs(),r=ki.suspense;(r=vi(n=ms(n,e,r),r)).tag=2,null!=t&&(r.callback=t),gi(e,r),vs(e,n)}};function Oi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!no(n,r)||!no(o,i))}function Ri(e,t,n){var r=!1,o=vo,i=t.contextType;return"object"==typeof i&&null!==i?i=di(i):(o=Eo(t)?bo:yo.current,i=(r=null!=(r=t.contextTypes))?wo(e,o):vo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=_i,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Ni(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&_i.enqueueReplaceState(t,t.state,null)}function Di(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Pi;var i=t.contextType;"object"==typeof i&&null!==i?o.context=di(i):(i=Eo(t)?bo:yo.current,o.context=wo(e,i)),null!==(i=e.updateQueue)&&(Ci(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(xi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&_i.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(Ci(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Mi=Array.isArray;function ji(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Pi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ii(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Li(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Ks(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function c(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Xs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ji(e,t,n),r.return=e,r):((r=Js(n.type,n.key,n.props,null,e.mode,r)).ref=ji(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ys(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Qs(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case L:return(n=Js(t.type,t.key,t.props,null,e.mode,n)).ref=ji(e,null,t),n.return=e,n;case A:return(t=Ys(t,e.mode,n)).return=e,t}if(Mi(t)||Q(t))return(t=Qs(t,e.mode,n,null)).return=e,t;Ii(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case L:return n.key===o?n.type===z?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case A:return n.key===o?u(e,t,n,r):null}if(Mi(n)||Q(n))return null!==o?null:f(e,t,n,r,null);Ii(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case L:return e=e.get(null===r.key?n:r.key)||null,r.type===z?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case A:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Mi(r)||Q(r))return f(t,e=e.get(n)||null,r,o,null);Ii(t,r)}return null}function m(o,a,c,s){for(var l=null,u=null,f=a,m=a=0,v=null;null!==f&&m<c.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,c[m],s);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===u?l=y:u.sibling=y,u=y,f=v}if(m===c.length)return n(o,f),l;if(null===f){for(;m<c.length;m++)null!==(f=d(o,c[m],s))&&(a=i(f,a,m),null===u?l=f:u.sibling=f,u=f);return l}for(f=r(o,f);m<c.length;m++)null!==(v=h(f,o,m,c[m],s))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===u?l=v:u.sibling=v,u=v);return e&&f.forEach((function(e){return t(o,e)})),l}function v(o,c,s,l){var u=Q(s);if("function"!=typeof u)throw Error(a(150));if(null==(s=u.call(s)))throw Error(a(151));for(var f=u=null,m=c,v=c=0,y=null,g=s.next();null!==m&&!g.done;v++,g=s.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,l);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),c=i(b,c,v),null===f?u=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),u;if(null===m){for(;!g.done;v++,g=s.next())null!==(g=d(o,g.value,l))&&(c=i(g,c,v),null===f?u=g:f.sibling=g,f=g);return u}for(m=r(o,m);!g.done;v++,g=s.next())null!==(g=h(m,o,v,g.value,l))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),c=i(g,c,v),null===f?u=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),u}return function(e,r,i,s){var l="object"==typeof i&&null!==i&&i.type===z&&null===i.key;l&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case L:e:{for(u=i.key,l=r;null!==l;){if(l.key===u){if(7===l.tag?i.type===z:l.elementType===i.type){n(e,l.sibling),(r=o(l,i.type===z?i.props.children:i.props)).ref=ji(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===z?((r=Qs(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Js(i.type,i.key,i.props,null,e.mode,s)).ref=ji(e,r,i),s.return=e,e=s)}return c(e);case A:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ys(i,e.mode,s)).return=e,e=r}return c(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xs(i,e.mode,s)).return=e,e=r),c(e);if(Mi(i))return m(e,r,i,s);if(Q(i))return v(e,r,i,s);if(u&&Ii(e,i),void 0===i&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ai=Li(!0),zi=Li(!1),Fi={},Ui={current:Fi},Bi={current:Fi},Wi={current:Fi};function Vi(e){if(e===Fi)throw Error(a(174));return e}function Gi(e,t){mo(Wi,t),mo(Bi,e),mo(Ui,Fi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ue(null,"");break;default:t=Ue(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ho(Ui),mo(Ui,t)}function Hi(e){ho(Ui),ho(Bi),ho(Wi)}function $i(e){Vi(Wi.current);var t=Vi(Ui.current),n=Ue(t,e.type);t!==n&&(mo(Bi,e),mo(Ui,n))}function qi(e){Bi.current===e&&(ho(Ui),ho(Bi))}var Ki={current:0};function Ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Yn||n.data===Zn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Qi(e,t){return{responder:e,props:t}}var Xi=M.ReactCurrentDispatcher,Yi=M.ReactCurrentBatchConfig,Zi=0,ea=null,ta=null,na=null,ra=null,oa=null,ia=null,aa=0,ca=null,sa=0,la=!1,ua=null,fa=0;function da(){throw Error(a(321))}function pa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!eo(e[n],t[n]))return!1;return!0}function ha(e,t,n,r,o,i){if(Zi=i,ea=t,na=null!==e?e.memoizedState:null,Xi.current=null===na?Ma:ja,t=n(r,o),la){do{la=!1,fa+=1,na=null!==e?e.memoizedState:null,ia=ra,ca=oa=ta=null,Xi.current=ja,t=n(r,o)}while(la);ua=null,fa=0}if(Xi.current=Da,(e=ea).memoizedState=ra,e.expirationTime=aa,e.updateQueue=ca,e.effectTag|=sa,e=null!==ta&&null!==ta.next,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,ca=null,sa=0,e)throw Error(a(300));return t}function ma(){Xi.current=Da,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,ca=null,sa=0,la=!1,ua=null,fa=0}function va(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===oa?ra=oa=e:oa=oa.next=e,oa}function ya(){if(null!==ia)ia=(oa=ia).next,na=null!==(ta=na)?ta.next:null;else{if(null===na)throw Error(a(310));var e={memoizedState:(ta=na).memoizedState,baseState:ta.baseState,queue:ta.queue,baseUpdate:ta.baseUpdate,next:null};oa=null===oa?ra=e:oa.next=e,na=ta.next}return oa}function ga(e,t){return"function"==typeof t?t(e):t}function ba(e){var t=ya(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<fa){var r=n.dispatch;if(null!==ua){var o=ua.get(n);if(void 0!==o){ua.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return eo(i,t.memoizedState)||(Ha=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var c=t.baseUpdate;if(i=t.baseState,null!==c?(null!==r&&(r.next=null),r=c.next):r=null!==r?r.next:null,null!==r){var s=o=null,l=r,u=!1;do{var f=l.expirationTime;f<Zi?(u||(u=!0,s=c,o=i),f>aa&&_s(aa=f)):(xs(f,l.suspenseConfig),i=l.eagerReducer===e?l.eagerState:e(i,l.action)),c=l,l=l.next}while(null!==l&&l!==r);u||(s=c,o=i),eo(i,t.memoizedState)||(Ha=!0),t.memoizedState=i,t.baseUpdate=s,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function wa(e){var t=va();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ga,lastRenderedState:e}).dispatch=Na.bind(null,ea,e),[t.memoizedState,e]}function Ea(e){return ba(ga)}function Ca(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ca?(ca={lastEffect:null}).lastEffect=e.next=e:null===(t=ca.lastEffect)?ca.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ca.lastEffect=e),e}function Sa(e,t,n,r){var o=va();sa|=e,o.memoizedState=Ca(t,n,void 0,void 0===r?null:r)}function Ta(e,t,n,r){var o=ya();r=void 0===r?null:r;var i=void 0;if(null!==ta){var a=ta.memoizedState;if(i=a.destroy,null!==r&&pa(r,a.deps))return void Ca(0,n,i,r)}sa|=e,o.memoizedState=Ca(t,n,i,r)}function ka(e,t){return Sa(516,192,e,t)}function Pa(e,t){return Ta(516,192,e,t)}function xa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _a(){}function Oa(e,t){return va().memoizedState=[e,void 0===t?null:t],e}function Ra(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Na(e,t,n){if(!(25>fa))throw Error(a(301));var r=e.alternate;if(e===ea||null!==r&&r===ea)if(la=!0,e={expirationTime:Zi,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ua&&(ua=new Map),void 0===(n=ua.get(t)))ua.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=hs(),i=ki.suspense;i={expirationTime:o=ms(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var c=t.last;if(null===c)i.next=i;else{var s=c.next;null!==s&&(i.next=s),c.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=r(l,n);if(i.eagerReducer=r,i.eagerState=u,eo(u,l))return}catch(e){}vs(e,o)}}var Da={readContext:di,useCallback:da,useContext:da,useEffect:da,useImperativeHandle:da,useLayoutEffect:da,useMemo:da,useReducer:da,useRef:da,useState:da,useDebugValue:da,useResponder:da,useDeferredValue:da,useTransition:da},Ma={readContext:di,useCallback:Oa,useContext:di,useEffect:ka,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Sa(4,36,xa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Sa(4,36,e,t)},useMemo:function(e,t){var n=va();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=va();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Na.bind(null,ea,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},va().memoizedState=e},useState:wa,useDebugValue:_a,useResponder:Qi,useDeferredValue:function(e,t){var n=wa(e),r=n[0],o=n[1];return ka((function(){i.unstable_next((function(){var n=Yi.suspense;Yi.suspense=void 0===t?null:t;try{o(e)}finally{Yi.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=wa(!1),n=t[0],r=t[1];return[Oa((function(t){r(!0),i.unstable_next((function(){var n=Yi.suspense;Yi.suspense=void 0===e?null:e;try{r(!1),t()}finally{Yi.suspense=n}}))}),[e,n]),n]}},ja={readContext:di,useCallback:Ra,useContext:di,useEffect:Pa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ta(4,36,xa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ta(4,36,e,t)},useMemo:function(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ba,useRef:function(){return ya().memoizedState},useState:Ea,useDebugValue:_a,useResponder:Qi,useDeferredValue:function(e,t){var n=Ea(),r=n[0],o=n[1];return Pa((function(){i.unstable_next((function(){var n=Yi.suspense;Yi.suspense=void 0===t?null:t;try{o(e)}finally{Yi.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=Ea(),n=t[0],r=t[1];return[Ra((function(t){r(!0),i.unstable_next((function(){var n=Yi.suspense;Yi.suspense=void 0===e?null:e;try{r(!1),t()}finally{Yi.suspense=n}}))}),[e,n]),n]}},Ia=null,La=null,Aa=!1;function za(e,t){var n=$s(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Aa){var t=La;if(t){var n=t;if(!Fa(e,t)){if(!(t=ar(n.nextSibling))||!Fa(e,t))return e.effectTag=-1025&e.effectTag|2,Aa=!1,void(Ia=e);za(Ia,n)}Ia=e,La=ar(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Aa=!1,Ia=e}}function Ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ia=e}function Wa(e){if(e!==Ia)return!1;if(!Aa)return Ba(e),Aa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=La;t;)za(e,t),t=ar(t.nextSibling);if(Ba(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Xn){if(0===t){La=ar(e.nextSibling);break e}t--}else n!==Qn&&n!==Zn&&n!==Yn||t++}e=e.nextSibling}La=null}}else La=Ia?ar(e.stateNode.nextSibling):null;return!0}function Va(){La=Ia=null,Aa=!1}var Ga=M.ReactCurrentOwner,Ha=!1;function $a(e,t,n,r){t.child=null===e?zi(t,null,n,r):Ai(t,e.child,n,r)}function qa(e,t,n,r,o){n=n.render;var i=t.ref;return fi(t,o),r=ha(e,t,n,r,i,o),null===e||Ha?(t.effectTag|=1,$a(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),uc(e,t,o))}function Ka(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||qs(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Js(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ja(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:no)(o,r)&&e.ref===t.ref)?uc(e,t,i):(t.effectTag|=1,(e=Ks(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ja(e,t,n,r,o,i){return null!==e&&no(e.memoizedProps,r)&&e.ref===t.ref&&(Ha=!1,o<i)?uc(e,t,i):Xa(e,t,n,r,i)}function Qa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Xa(e,t,n,r,o){var i=Eo(n)?bo:yo.current;return i=wo(t,i),fi(t,o),n=ha(e,t,n,r,i,o),null===e||Ha?(t.effectTag|=1,$a(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),uc(e,t,o))}function Ya(e,t,n,r,o){if(Eo(n)){var i=!0;Po(t)}else i=!1;if(fi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Ri(t,n,r),Di(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,c=t.memoizedProps;a.props=c;var s=a.context,l=n.contextType;"object"==typeof l&&null!==l?l=di(l):l=wo(t,l=Eo(n)?bo:yo.current);var u=n.getDerivedStateFromProps,f="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||s!==l)&&Ni(t,a,r,l),pi=!1;var d=t.memoizedState;s=a.state=d;var p=t.updateQueue;null!==p&&(Ci(t,p,r,a,o),s=t.memoizedState),c!==r||d!==s||go.current||pi?("function"==typeof u&&(xi(t,n,u,r),s=t.memoizedState),(c=pi||Oi(t,n,c,r,d,s,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=l,r=c):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,c=t.memoizedProps,a.props=t.type===t.elementType?c:ni(t.type,c),s=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=di(l):l=wo(t,l=Eo(n)?bo:yo.current),(f="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||s!==l)&&Ni(t,a,r,l),pi=!1,s=t.memoizedState,d=a.state=s,null!==(p=t.updateQueue)&&(Ci(t,p,r,a,o),d=t.memoizedState),c!==r||s!==d||go.current||pi?("function"==typeof u&&(xi(t,n,u,r),d=t.memoizedState),(u=pi||Oi(t,n,c,r,s,d,l))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,l)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Za(e,t,n,r,i,o)}function Za(e,t,n,r,o,i){Qa(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&xo(t,n,!1),uc(e,t,i);r=t.stateNode,Ga.current=t;var c=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ai(t,e.child,null,i),t.child=Ai(t,null,c,i)):$a(e,t,c,i),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function ec(e){var t=e.stateNode;t.pendingContext?To(0,t.pendingContext,t.pendingContext!==t.context):t.context&&To(0,t.context,!1),Gi(e,t.containerInfo)}var tc,nc,rc,oc,ic={dehydrated:null,retryTime:0};function ac(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ki.current,c=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(c=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),mo(Ki,1&a),null===e){if(void 0!==i.fallback&&Ua(t),c){if(c=i.fallback,(i=Qs(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Qs(c,o,n,null)).return=t,i.sibling=n,t.memoizedState=ic,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=zi(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,c){if(i=i.fallback,(n=Ks(e,e.pendingProps)).return=t,0==(2&t.mode)&&(c=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=c;null!==c;)c.return=n,c=c.sibling;return(o=Ks(o,i,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=ic,t.child=n,o}return n=Ai(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,c){if(c=i.fallback,(i=Qs(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Qs(c,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=ic,t.child=i,n}return t.memoizedState=null,t.child=Ai(t,e,i.children,n)}function cc(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ui(e.return,t)}function sc(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function lc(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if($a(e,t,r.children,n),0!=(2&(r=Ki.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&cc(e,n);else if(19===e.tag)cc(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(mo(Ki,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),sc(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}sc(t,!0,n,null,i,t.lastEffect);break;case"together":sc(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function uc(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&_s(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ks(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ks(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fc(e){e.effectTag|=4}function dc(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function pc(e){switch(e.tag){case 1:Eo(e.type)&&Co();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Hi(),So(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return qi(e),null;case 13:return ho(Ki),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ho(Ki),null;case 4:return Hi(),null;case 10:return li(e),null;default:return null}}function hc(e,t){return{value:e,source:t,stack:Y(t)}}tc=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},nc=function(){},rc=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var c,s,l=t.stateNode;switch(Vi(Ui.current),e=null,n){case"input":a=Pe(l,a),r=Pe(l,r),e=[];break;case"option":a=De(l,a),r=De(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=je(l,a),r=je(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=Gn)}for(c in Bn(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c)for(s in l=a[c])l.hasOwnProperty(s)&&(n||(n={}),n[s]="");else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(p.hasOwnProperty(c)?e||(e=[]):(e=e||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(s in l)!l.hasOwnProperty(s)||u&&u.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in u)u.hasOwnProperty(s)&&l[s]!==u[s]&&(n||(n={}),n[s]=u[s])}else n||(e||(e=[]),e.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(e=e||[]).push(c,""+u)):"children"===c?l===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(p.hasOwnProperty(c)?(null!=u&&Vn(i,c),e||l===u||(e=[])):(e=e||[]).push(c,u))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&fc(t)}},oc=function(e,t,n,r){n!==r&&fc(t)};var mc="function"==typeof WeakSet?WeakSet:Set;function vc(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=Y(n)),null!==n&&X(n.type),t=t.value,null!==e&&1===e.tag&&X(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function yc(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Us(e,t)}else t.current=null}function gc(e,t){switch(t.tag){case 0:case 11:case 15:bc(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ni(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function bc(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function wc(e,t,n){switch("function"==typeof Gs&&Gs(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Jo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Us(o,e)}}e=e.next}while(e!==r)}))}break;case 1:yc(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Us(e,t)}}(t,n);break;case 5:yc(t);break;case 4:Tc(e,t,n)}}function Ec(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&Ec(t)}function Cc(e){return 5===e.tag||3===e.tag||4===e.tag}function Sc(e){e:{for(var t=e.return;null!==t;){if(Cc(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ve(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Cc(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i){var c=i?o.stateNode:o.stateNode.instance;if(n)if(r){var s=c;c=n,8===(i=t).nodeType?i.parentNode.insertBefore(s,c):i.insertBefore(s,c)}else t.insertBefore(c,n);else r?(8===(s=t).nodeType?(i=s.parentNode).insertBefore(c,s):(i=s).appendChild(c),null!=(s=s._reactRootContainer)||null!==i.onclick||(i.onclick=Gn)):t.appendChild(c)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Tc(e,t,n){for(var r,o,i=t,c=!1;;){if(!c){c=i.return;e:for(;;){if(null===c)throw Error(a(160));switch(r=c.stateNode,c.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}c=c.return}c=!0}if(5===i.tag||6===i.tag){e:for(var s=e,l=i,u=n,f=l;;)if(wc(s,f,u),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===l)break;for(;null===f.sibling;){if(null===f.return||f.return===l)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(s=r,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(wc(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(c=!1)}i.sibling.return=i.return,i=i.sibling}}function kc(e,t){switch(t.tag){case 0:case 11:case 14:case 15:bc(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[ur]=r,"input"===e&&"radio"===r.type&&null!=r.name&&_e(n,r),Wn(e,o),t=Wn(e,r),o=0;o<i.length;o+=2){var c=i[o],s=i[o+1];"style"===c?Fn(n,s):"dangerouslySetInnerHTML"===c?We(n,s):"children"===c?Ve(n,s):Ce(n,c,s,t)}switch(e){case"input":Oe(n,r);break;case"textarea":Le(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,kt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,ts=$o()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=zn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Pc(t);break;case 19:Pc(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function Pc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new mc),t.forEach((function(t){var r=Ws.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var xc="function"==typeof WeakMap?WeakMap:Map;function _c(e,t,n){(n=vi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){os||(os=!0,is=r),vc(e,t)},n}function Oc(e,t,n){(n=vi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return vc(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===as?as=new Set([this]):as.add(this),vc(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Rc,Nc=Math.ceil,Dc=M.ReactCurrentDispatcher,Mc=M.ReactCurrentOwner,jc=0,Ic=8,Lc=16,Ac=32,zc=0,Fc=1,Uc=2,Bc=3,Wc=4,Vc=5,Gc=jc,Hc=null,$c=null,qc=0,Kc=zc,Jc=null,Qc=1073741823,Xc=1073741823,Yc=null,Zc=0,es=!1,ts=0,ns=500,rs=null,os=!1,is=null,as=null,cs=!1,ss=null,ls=90,us=null,fs=0,ds=null,ps=0;function hs(){return(Gc&(Lc|Ac))!==jc?1073741821-($o()/10|0):0!==ps?ps:ps=1073741821-($o()/10|0)}function ms(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=qo();if(0==(4&t))return 99===r?1073741823:1073741822;if((Gc&Lc)!==jc)return qc;if(null!==n)e=ti(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=ti(e,150,100);break;case 97:case 96:e=ti(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Hc&&e===qc&&--e,e}function vs(e,t){if(50<fs)throw fs=0,ds=null,Error(a(185));if(null!==(e=ys(e,t))){var n=qo();1073741823===t?(Gc&Ic)!==jc&&(Gc&(Lc|Ac))===jc?Es(e):(bs(e),Gc===jc&&Yo()):bs(e),(4&Gc)===jc||98!==n&&99!==n||(null===us?us=new Map([[e,t]]):(void 0===(n=us.get(e))||n>t)&&us.set(e,t))}}function ys(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Hc===o&&(_s(t),Kc===Wc&&tl(o,qc)),nl(o,t)),o}function gs(e){var t=e.lastExpiredTime;return 0!==t?t:el(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function bs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Xo(Es.bind(null,e));else{var t=gs(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hs();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Uo&&Ro(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Xo(Es.bind(null,e)):Qo(r,ws.bind(null,e),{timeout:10*(1073741821-t)-$o()}),e.callbackNode=t}}}function ws(e,t){if(ps=0,t)return rl(e,t=hs()),bs(e),null;var n=gs(e);if(0!==n){if(t=e.callbackNode,(Gc&(Lc|Ac))!==jc)throw Error(a(327));if(As(),e===Hc&&n===qc||Ts(e,n),null!==$c){var r=Gc;Gc|=Lc;for(var o=Ps();;)try{Rs();break}catch(t){ks(e,t)}if(ci(),Gc=r,Dc.current=o,Kc===Fc)throw t=Jc,Ts(e,n),tl(e,n),bs(e),t;if(null===$c)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Kc,Hc=null,r){case zc:case Fc:throw Error(a(345));case Uc:rl(e,2<n?2:n);break;case Bc:if(tl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ms(o)),1073741823===Qc&&10<(o=ts+ns-$o())){if(es){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,Ts(e,n);break}}if(0!==(i=gs(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=or(js.bind(null,e),o);break}js(e);break;case Wc:if(tl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ms(o)),es&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,Ts(e,n);break}if(0!==(o=gs(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Xc?r=10*(1073741821-Xc)-$o():1073741823===Qc?r=0:(r=10*(1073741821-Qc)-5e3,0>(r=(o=$o())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Nc(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=or(js.bind(null,e),r);break}js(e);break;case Vc:if(1073741823!==Qc&&null!==Yc){i=Qc;var c=Yc;if(0>=(r=0|c.busyMinDurationMs)?r=0:(o=0|c.busyDelayMs,r=(i=$o()-(10*(1073741821-i)-(0|c.timeoutMs||5e3)))<=o?0:o+r-i),10<r){tl(e,n),e.timeoutHandle=or(js.bind(null,e),r);break}}js(e);break;default:throw Error(a(329))}if(bs(e),e.callbackNode===t)return ws.bind(null,e)}}return null}function Es(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)js(e);else{if((Gc&(Lc|Ac))!==jc)throw Error(a(327));if(As(),e===Hc&&t===qc||Ts(e,t),null!==$c){var n=Gc;Gc|=Lc;for(var r=Ps();;)try{Os();break}catch(t){ks(e,t)}if(ci(),Gc=n,Dc.current=r,Kc===Fc)throw n=Jc,Ts(e,t),tl(e,t),bs(e),n;if(null!==$c)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Hc=null,js(e),bs(e)}}return null}function Cs(e,t){var n=Gc;Gc|=1;try{return e(t)}finally{(Gc=n)===jc&&Yo()}}function Ss(e,t){var n=Gc;Gc&=-2,Gc|=Ic;try{return e(t)}finally{(Gc=n)===jc&&Yo()}}function Ts(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ir(n)),null!==$c)for(n=$c.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&Co();break;case 3:Hi(),So();break;case 5:qi(r);break;case 4:Hi();break;case 13:case 19:ho(Ki);break;case 10:li(r)}n=n.return}Hc=e,$c=Ks(e.current,null),qc=t,Kc=zc,Jc=null,Xc=Qc=1073741823,Yc=null,Zc=0,es=!1}function ks(e,t){for(;;){try{if(ci(),ma(),null===$c||null===$c.return)return Kc=Fc,Jc=t,null;e:{var n=e,r=$c.return,o=$c,i=t;if(t=qc,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==i&&"object"==typeof i&&"function"==typeof i.then){var a=i,c=0!=(1&Ki.current),s=r;do{var l;if(l=13===s.tag){var u=s.memoizedState;if(null!==u)l=null!==u.dehydrated;else{var f=s.memoizedProps;l=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!c)}}if(l){var d=s.updateQueue;if(null===d){var p=new Set;p.add(a),s.updateQueue=p}else d.add(a);if(0==(2&s.mode)){if(s.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=vi(1073741823,null);h.tag=2,gi(o,h)}o.expirationTime=1073741823;break e}i=void 0,o=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new xc,i=new Set,m.set(a,i)):void 0===(i=m.get(a))&&(i=new Set,m.set(a,i)),!i.has(o)){i.add(o);var v=Bs.bind(null,n,a,o);a.then(v,v)}s.effectTag|=4096,s.expirationTime=t;break e}s=s.return}while(null!==s);i=Error((X(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Y(o))}Kc!==Vc&&(Kc=Uc),i=hc(i,o),s=r;do{switch(s.tag){case 3:a=i,s.effectTag|=4096,s.expirationTime=t,bi(s,_c(s,a,t));break e;case 1:a=i;var y=s.type,g=s.stateNode;if(0==(64&s.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===as||!as.has(g)))){s.effectTag|=4096,s.expirationTime=t,bi(s,Oc(s,a,t));break e}}s=s.return}while(null!==s)}$c=Ds($c)}catch(e){t=e;continue}break}}function Ps(){var e=Dc.current;return Dc.current=Da,null===e?Da:e}function xs(e,t){e<Qc&&2<e&&(Qc=e),null!==t&&e<Xc&&2<e&&(Xc=e,Yc=t)}function _s(e){e>Zc&&(Zc=e)}function Os(){for(;null!==$c;)$c=Ns($c)}function Rs(){for(;null!==$c&&!No();)$c=Ns($c)}function Ns(e){var t=Rc(e.alternate,e,qc);return e.memoizedProps=e.pendingProps,null===t&&(t=Ds(e)),Mc.current=null,t}function Ds(e){$c=e;do{var t=$c.alternate;if(e=$c.return,0==(2048&$c.effectTag)){e:{var n=t,r=qc,i=(t=$c).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Eo(t.type)&&Co();break;case 3:Hi(),So(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(null===n||null===n.child)&&Wa(t)&&fc(t),nc(t);break;case 5:qi(t),r=Vi(Wi.current);var c=t.type;if(null!==n&&null!=t.stateNode)rc(n,t,c,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var s=Vi(Ui.current);if(Wa(t)){var l=(i=t).stateNode;n=i.type;var u=i.memoizedProps,f=r;switch(l[lr]=i,l[ur]=u,c=void 0,r=l,n){case"iframe":case"object":case"embed":kn("load",r);break;case"video":case"audio":for(l=0;l<Ze.length;l++)kn(Ze[l],r);break;case"source":kn("error",r);break;case"img":case"image":case"link":kn("error",r),kn("load",r);break;case"form":kn("reset",r),kn("submit",r);break;case"details":kn("toggle",r);break;case"input":xe(r,u),kn("invalid",r),Vn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},kn("invalid",r),Vn(f,"onChange");break;case"textarea":Ie(r,u),kn("invalid",r),Vn(f,"onChange")}for(c in Bn(n,u),l=null,u)u.hasOwnProperty(c)&&(s=u[c],"children"===c?"string"==typeof s?r.textContent!==s&&(l=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(l=["children",""+s]):p.hasOwnProperty(c)&&null!=s&&Vn(f,c));switch(n){case"input":Te(r),Re(r,u,!0);break;case"textarea":Te(r),Ae(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=Gn)}c=l,i.updateQueue=c,(i=null!==c)&&fc(t)}else{n=t,f=c,u=i,l=9===r.nodeType?r:r.ownerDocument,s===ze.html&&(s=Fe(f)),s===ze.html?"script"===f?((u=l.createElement("div")).innerHTML="<script><\/script>",l=u.removeChild(u.firstChild)):"string"==typeof u.is?l=l.createElement(f,{is:u.is}):(l=l.createElement(f),"select"===f&&(f=l,u.multiple?f.multiple=!0:u.size&&(f.size=u.size))):l=l.createElementNS(s,f),(u=l)[lr]=n,u[ur]=i,tc(u,t,!1,!1),t.stateNode=u;var d=r,h=Wn(f=c,n=i);switch(f){case"iframe":case"object":case"embed":kn("load",u),r=n;break;case"video":case"audio":for(r=0;r<Ze.length;r++)kn(Ze[r],u);r=n;break;case"source":kn("error",u),r=n;break;case"img":case"image":case"link":kn("error",u),kn("load",u),r=n;break;case"form":kn("reset",u),kn("submit",u),r=n;break;case"details":kn("toggle",u),r=n;break;case"input":xe(u,n),r=Pe(u,n),kn("invalid",u),Vn(d,"onChange");break;case"option":r=De(u,n);break;case"select":u._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),kn("invalid",u),Vn(d,"onChange");break;case"textarea":Ie(u,n),r=je(u,n),kn("invalid",u),Vn(d,"onChange");break;default:r=n}Bn(f,r),l=void 0,s=f;var m=u,v=r;for(l in v)if(v.hasOwnProperty(l)){var y=v[l];"style"===l?Fn(m,y):"dangerouslySetInnerHTML"===l?null!=(y=y?y.__html:void 0)&&We(m,y):"children"===l?"string"==typeof y?("textarea"!==s||""!==y)&&Ve(m,y):"number"==typeof y&&Ve(m,""+y):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(p.hasOwnProperty(l)?null!=y&&Vn(d,l):null!=y&&Ce(m,l,y,h))}switch(f){case"input":Te(u),Re(u,n,!1);break;case"textarea":Te(u),Ae(u);break;case"option":null!=n.value&&u.setAttribute("value",""+Ee(n.value));break;case"select":(r=u).multiple=!!n.multiple,null!=(u=n.value)?Me(r,!!n.multiple,u,!1):null!=n.defaultValue&&Me(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(u.onclick=Gn)}(i=nr(c,i))&&fc(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)oc(n,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));r=Vi(Wi.current),Vi(Ui.current),Wa(t)?(c=(i=t).stateNode,r=i.memoizedProps,c[lr]=i,(i=c.nodeValue!==r)&&fc(t)):(c=t,(i=(9===r.nodeType?r:r.ownerDocument).createTextNode(i))[lr]=c,t.stateNode=i)}break;case 11:break;case 13:if(ho(Ki),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}i=null!==i,c=!1,null===n?void 0!==t.memoizedProps.fallback&&Wa(t):(c=null!==(r=n.memoizedState),i||null===r||null!==(r=n.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=r,r.nextEffect=u):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),i&&!c&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ki.current)?Kc===zc&&(Kc=Bc):(Kc!==zc&&Kc!==Bc||(Kc=Wc),0!==Zc&&null!==Hc&&(tl(Hc,qc),nl(Hc,Zc)))),(i||c)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Hi(),nc(t);break;case 10:li(t);break;case 9:case 14:break;case 17:Eo(t.type)&&Co();break;case 19:if(ho(Ki),null===(i=t.memoizedState))break;if(c=0!=(64&t.effectTag),null===(u=i.rendering)){if(c)dc(i,!1);else if(Kc!==zc||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(u=Ji(n))){for(t.effectTag|=64,dc(i,!1),null!==(c=u.updateQueue)&&(t.updateQueue=c,t.effectTag|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=r,c=t.child;null!==c;)n=i,(r=c).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(u=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=u.childExpirationTime,r.expirationTime=u.expirationTime,r.child=u.child,r.memoizedProps=u.memoizedProps,r.memoizedState=u.memoizedState,r.updateQueue=u.updateQueue,n=u.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),c=c.sibling;mo(Ki,1&Ki.current|2),t=t.child;break e}n=n.sibling}}else{if(!c)if(null!==(n=Ji(u))){if(t.effectTag|=64,c=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),dc(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate){null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else $o()>i.tailExpiration&&1<r&&(t.effectTag|=64,c=!0,dc(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(r=i.last)?r.sibling=u:t.child=u,i.last=u)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=$o()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,i=Ki.current,mo(Ki,i=c?1&i|2:1&i),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(i=$c,1===qc||1!==i.childExpirationTime){for(c=0,r=i.child;null!==r;)(n=r.expirationTime)>c&&(c=n),(u=r.childExpirationTime)>c&&(c=u),r=r.sibling;i.childExpirationTime=c}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=$c.firstEffect),null!==$c.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=$c.firstEffect),e.lastEffect=$c.lastEffect),1<$c.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=$c:e.firstEffect=$c,e.lastEffect=$c))}else{if(null!==(t=pc($c)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=$c.sibling))return t;$c=e}while(null!==$c);return Kc===zc&&(Kc=Vc),null}function Ms(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function js(e){var t=qo();return Jo(99,Is.bind(null,e,t)),null}function Is(e,t){do{As()}while(null!==ss);if((Gc&(Lc|Ac))!==jc)throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Ms(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Hc&&($c=Hc=null,qc=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Gc;Gc|=Ac,Mc.current=null,er=Tn;var c=Kn();if(Jn(c)){if("selectionStart"in c)var s={start:c.selectionStart,end:c.selectionEnd};else e:{var l=(s=(s=c.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(l&&0!==l.rangeCount){s=l.anchorNode;var u=l.anchorOffset,f=l.focusNode;l=l.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var d=0,p=-1,h=-1,m=0,v=0,y=c,g=null;t:for(;;){for(var b;y!==s||0!==u&&3!==y.nodeType||(p=d+u),y!==f||0!==l&&3!==y.nodeType||(h=d+l),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===c)break t;if(g===s&&++m===u&&(p=d),g===f&&++v===l&&(h=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}s=-1===p||-1===h?null:{start:p,end:h}}else s=null}s=s||{start:0,end:0}}else s=null;tr={focusedElem:c,selectionRange:s},Tn=!1,rs=o;do{try{Ls()}catch(e){if(null===rs)throw Error(a(330));Us(rs,e),rs=rs.nextEffect}}while(null!==rs);rs=o;do{try{for(c=e,s=t;null!==rs;){var w=rs.effectTag;if(16&w&&Ve(rs.stateNode,""),128&w){var E=rs.alternate;if(null!==E){var C=E.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(1038&w){case 2:Sc(rs),rs.effectTag&=-3;break;case 6:Sc(rs),rs.effectTag&=-3,kc(rs.alternate,rs);break;case 1024:rs.effectTag&=-1025;break;case 1028:rs.effectTag&=-1025,kc(rs.alternate,rs);break;case 4:kc(rs.alternate,rs);break;case 8:Tc(c,u=rs,s),Ec(u)}rs=rs.nextEffect}}catch(e){if(null===rs)throw Error(a(330));Us(rs,e),rs=rs.nextEffect}}while(null!==rs);if(C=tr,E=Kn(),w=C.focusedElem,s=C.selectionRange,E!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==s&&Jn(w)&&(E=s.start,void 0===(C=s.end)&&(C=E),"selectionStart"in w?(w.selectionStart=E,w.selectionEnd=Math.min(C,w.value.length)):(C=(E=w.ownerDocument||document)&&E.defaultView||window).getSelection&&(C=C.getSelection(),u=w.textContent.length,c=Math.min(s.start,u),s=void 0===s.end?c:Math.min(s.end,u),!C.extend&&c>s&&(u=s,s=c,c=u),u=qn(w,c),f=qn(w,s),u&&f&&(1!==C.rangeCount||C.anchorNode!==u.node||C.anchorOffset!==u.offset||C.focusNode!==f.node||C.focusOffset!==f.offset)&&((E=E.createRange()).setStart(u.node,u.offset),C.removeAllRanges(),c>s?(C.addRange(E),C.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),C.addRange(E))))),E=[];for(C=w;C=C.parentNode;)1===C.nodeType&&E.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<E.length;w++)(C=E[w]).element.scrollLeft=C.left,C.element.scrollTop=C.top}tr=null,Tn=!!er,er=null,e.current=n,rs=o;do{try{for(w=r;null!==rs;){var S=rs.effectTag;if(36&S){var T=rs.alternate;switch(C=w,(E=rs).tag){case 0:case 11:case 15:bc(16,32,E);break;case 1:var k=E.stateNode;if(4&E.effectTag)if(null===T)k.componentDidMount();else{var P=E.elementType===E.type?T.memoizedProps:ni(E.type,T.memoizedProps);k.componentDidUpdate(P,T.memoizedState,k.__reactInternalSnapshotBeforeUpdate)}var x=E.updateQueue;null!==x&&Si(0,x,k);break;case 3:var _=E.updateQueue;if(null!==_){if(c=null,null!==E.child)switch(E.child.tag){case 5:c=E.child.stateNode;break;case 1:c=E.child.stateNode}Si(0,_,c)}break;case 5:var O=E.stateNode;null===T&&4&E.effectTag&&nr(E.type,E.memoizedProps)&&O.focus();break;case 6:case 4:case 12:break;case 13:if(null===E.memoizedState){var R=E.alternate;if(null!==R){var N=R.memoizedState;if(null!==N){var D=N.dehydrated;null!==D&&kt(D)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&S){E=void 0;var M=rs.ref;if(null!==M){var j=rs.stateNode;switch(rs.tag){case 5:E=j;break;default:E=j}"function"==typeof M?M(E):M.current=E}}rs=rs.nextEffect}}catch(e){if(null===rs)throw Error(a(330));Us(rs,e),rs=rs.nextEffect}}while(null!==rs);rs=null,Bo(),Gc=i}else e.current=n;if(cs)cs=!1,ss=e,ls=t;else for(rs=o;null!==rs;)t=rs.nextEffect,rs.nextEffect=null,rs=t;if(0===(t=e.firstPendingTime)&&(as=null),1073741823===t?e===ds?fs++:(fs=0,ds=e):fs=0,"function"==typeof Vs&&Vs(n.stateNode,r),bs(e),os)throw os=!1,e=is,is=null,e;return(Gc&Ic)!==jc?null:(Yo(),null)}function Ls(){for(;null!==rs;){var e=rs.effectTag;0!=(256&e)&&gc(rs.alternate,rs),0==(512&e)||cs||(cs=!0,Qo(97,(function(){return As(),null}))),rs=rs.nextEffect}}function As(){if(90!==ls){var e=97<ls?97:ls;return ls=90,Jo(e,zs)}}function zs(){if(null===ss)return!1;var e=ss;if(ss=null,(Gc&(Lc|Ac))!==jc)throw Error(a(331));var t=Gc;for(Gc|=Ac,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:bc(128,0,n),bc(0,64,n)}}catch(t){if(null===e)throw Error(a(330));Us(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Gc=t,Yo(),!0}function Fs(e,t,n){gi(e,t=_c(e,t=hc(n,t),1073741823)),null!==(e=ys(e,1073741823))&&bs(e)}function Us(e,t){if(3===e.tag)Fs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Fs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===as||!as.has(r))){gi(n,e=Oc(n,e=hc(t,e),1073741823)),null!==(n=ys(n,1073741823))&&bs(n);break}}n=n.return}}function Bs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Hc===e&&qc===n?Kc===Wc||Kc===Bc&&1073741823===Qc&&$o()-ts<ns?Ts(e,qc):es=!0:el(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),bs(e)))}function Ws(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=ms(t=hs(),e,null)),null!==(e=ys(e,t))&&bs(e)}Rc=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||go.current)Ha=!0;else{if(r<n){switch(Ha=!1,t.tag){case 3:ec(t),Va();break;case 5:if($i(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Eo(t.type)&&Po(t);break;case 4:Gi(t,t.stateNode.containerInfo);break;case 10:si(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ac(e,t,n):(mo(Ki,1&Ki.current),null!==(t=uc(e,t,n))?t.sibling:null);mo(Ki,1&Ki.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return lc(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),mo(Ki,Ki.current),!r)return null}return uc(e,t,n)}Ha=!1}}else Ha=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=wo(t,yo.current),fi(t,n),o=ha(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,ma(),Eo(r)){var i=!0;Po(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var c=r.getDerivedStateFromProps;"function"==typeof c&&xi(t,r,c,e),o.updater=_i,t.stateNode=o,o._reactInternalFiber=t,Di(t,r,e,n),t=Za(null,t,r,!0,i,n)}else t.tag=0,$a(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return qs(e)?1:0;if(null!=e){if((e=e.$$typeof)===G)return 11;if(e===q)return 14}return 2}(o),e=ni(o,e),i){case 0:t=Xa(null,t,o,e,n);break;case 1:t=Ya(null,t,o,e,n);break;case 11:t=qa(null,t,o,e,n);break;case 14:t=Ka(null,t,o,ni(o.type,e),r,n);break;default:throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Xa(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ya(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 3:if(ec(t),null===(r=t.updateQueue))throw Error(a(282));if(o=null!==(o=t.memoizedState)?o.element:null,Ci(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Va(),t=uc(e,t,n);else{if((o=t.stateNode.hydrate)&&(La=ar(t.stateNode.containerInfo.firstChild),Ia=t,o=Aa=!0),o)for(n=zi(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else $a(e,t,r,n),Va();t=t.child}return t;case 5:return $i(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,c=o.children,rr(r,o)?c=null:null!==i&&rr(r,i)&&(t.effectTag|=16),Qa(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):($a(e,t,c,n),t=t.child),t;case 6:return null===e&&Ua(t),null;case 13:return ac(e,t,n);case 4:return Gi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ai(t,null,r,n):$a(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,qa(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 7:return $a(e,t,t.pendingProps,n),t.child;case 8:case 12:return $a(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,c=t.memoizedProps,si(t,i=o.value),null!==c){var s=c.value;if(0===(i=eo(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(c.children===o.children&&!go.current){t=uc(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var l=s.dependencies;if(null!==l){c=s.child;for(var u=l.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&i)){1===s.tag&&((u=vi(n,null)).tag=2,gi(s,u)),s.expirationTime<n&&(s.expirationTime=n),null!==(u=s.alternate)&&u.expirationTime<n&&(u.expirationTime=n),ui(s.return,n),l.expirationTime<n&&(l.expirationTime=n);break}u=u.next}}else c=10===s.tag&&s.type===t.type?null:s.child;if(null!==c)c.return=s;else for(c=s;null!==c;){if(c===t){c=null;break}if(null!==(s=c.sibling)){s.return=c.return,c=s;break}c=c.return}s=c}}$a(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,fi(t,n),r=r(o=di(o,i.unstable_observedBits)),t.effectTag|=1,$a(e,t,r,n),t.child;case 14:return i=ni(o=t.type,t.pendingProps),Ka(e,t,o,i=ni(o.type,i),r,n);case 15:return Ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ni(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Eo(r)?(e=!0,Po(t)):e=!1,fi(t,n),Ri(t,r,o),Di(t,r,o,n),Za(null,t,r,!0,e,n);case 19:return lc(e,t,n)}throw Error(a(156,t.tag))};var Vs=null,Gs=null;function Hs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function $s(e,t,n,r){return new Hs(e,t,n,r)}function qs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ks(e,t){var n=e.alternate;return null===n?((n=$s(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Js(e,t,n,r,o,i){var c=2;if(r=e,"function"==typeof e)qs(e)&&(c=1);else if("string"==typeof e)c=5;else e:switch(e){case z:return Qs(n.children,o,i,t);case V:c=8,o|=7;break;case F:c=8,o|=1;break;case U:return(e=$s(12,n,t,8|o)).elementType=U,e.type=U,e.expirationTime=i,e;case H:return(e=$s(13,n,t,o)).type=H,e.elementType=H,e.expirationTime=i,e;case $:return(e=$s(19,n,t,o)).elementType=$,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:c=10;break e;case W:c=9;break e;case G:c=11;break e;case q:c=14;break e;case K:c=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=$s(c,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Qs(e,t,n,r){return(e=$s(7,e,r,t)).expirationTime=n,e}function Xs(e,t,n){return(e=$s(6,e,null,t)).expirationTime=n,e}function Ys(e,t,n){return(t=$s(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zs(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function el(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function tl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function nl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function rl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function ol(e,t,n,r){var o=t.current,i=hs(),c=ki.suspense;i=ms(i,o,c);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(Eo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var l=n.type;if(Eo(l)){n=ko(n,l,s);break e}}n=s}else n=vo;return null===t.context?t.context=n:t.pendingContext=n,(t=vi(i,c)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),gi(o,t),vs(o,i),i}function il(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function al(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function cl(e,t){al(e,t),(e=e.alternate)&&al(e,t)}function sl(e,t,n){var r=new Zs(e,t,n=null!=n&&!0===n.hydrate),o=$s(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=jn(e);mt.forEach((function(n){In(n,e,t)})),vt.forEach((function(n){In(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function ll(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ul(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var c=o;o=function(){var e=il(a);c.call(e)}}ol(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new sl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=il(a);s.call(e)}}Ss((function(){ol(t,a,e,o)}))}return il(a)}function fl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ll(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}sl.prototype.render=function(e,t){ol(e,this._internalRoot,null,void 0===t?null:t)},sl.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;ol(null,t,null,(function(){r[fr]=null,null!==n&&n()}))},ot=function(e){if(13===e.tag){var t=ti(hs(),150,100);vs(e,t),cl(e,t)}},it=function(e){if(13===e.tag){hs();var t=ei++;vs(e,t),cl(e,t)}},at=function(e){if(13===e.tag){var t=hs();vs(e,t=ms(t,e,null)),cl(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=mr(r);if(!o)throw Error(a(90));ke(r),Oe(r,o)}}}break;case"textarea":Le(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},ae=Cs,ce=function(e,t,n,r){var o=Gc;Gc|=4;try{return Jo(98,e.bind(null,t,n,r))}finally{(Gc=o)===jc&&Yo()}},se=function(){(Gc&(1|Lc|Ac))===jc&&(function(){if(null!==us){var e=us;us=null,e.forEach((function(e,t){rl(t,e),bs(t)})),Yo()}}(),As())},le=function(e,t){var n=Gc;Gc|=2;try{return e(t)}finally{(Gc=n)===jc&&Yo()}};var dl,pl,hl={createPortal:fl,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!ll(t))throw Error(a(200));return ul(null,e,t,!0,n)},render:function(e,t,n){if(!ll(t))throw Error(a(200));return ul(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!ll(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return ul(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!ll(e))throw Error(a(40));return!!e._reactRootContainer&&(Ss((function(){ul(null,null,e,!1,(function(){e._reactRootContainer=null,e[fr]=null}))})),!0)},unstable_createPortal:function(){return fl.apply(void 0,arguments)},unstable_batchedUpdates:Cs,flushSync:function(e,t){if((Gc&(Lc|Ac))!==jc)throw Error(a(187));var n=Gc;Gc|=1;try{return Jo(99,e.bind(null,t))}finally{Gc=n,Yo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[pr,hr,mr,N.injectEventPluginsByName,d,Dt,function(e){x(e,Nt)},oe,ie,Rn,R,As,{current:!1}]}};pl=(dl={findFiberByHostInstance:dr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Vs=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Gs=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},dl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:M.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return pl?pl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var ml={default:hl},vl=ml&&hl||ml;e.exports=vl.default||vl},function(e,t,n){"use strict";e.exports=n(45)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,c;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,l=null,u=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(u,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(u,0))},o=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},a=function(){return!1},c=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,b=null,w=-1,E=5,C=0;a=function(){return t.unstable_now()>=C},c=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,T=S.port2;S.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();C=e+E;try{b(!0,e)?T.postMessage(null):(g=!1,b=null)}catch(e){throw T.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,T.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){m(w),w=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function P(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],c=i+1,s=e[c];if(void 0!==a&&0>_(a,n))void 0!==s&&0>_(s,a)?(e[r]=s,e[c]=n,r=c):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>_(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],R=[],N=1,D=null,M=3,j=!1,I=!1,L=!1;function A(e){for(var t=P(R);null!==t;){if(null===t.callback)x(R);else{if(!(t.startTime<=e))break;x(R),t.sortIndex=t.expirationTime,k(O,t)}t=P(R)}}function z(e){if(L=!1,A(e),!I)if(null!==P(O))I=!0,r(F);else{var t=P(R);null!==t&&o(z,t.startTime-e)}}function F(e,n){I=!1,L&&(L=!1,i()),j=!0;var r=M;try{for(A(n),D=P(O);null!==D&&(!(D.expirationTime>n)||e&&!a());){var c=D.callback;if(null!==c){D.callback=null,M=D.priorityLevel;var s=c(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?D.callback=s:D===P(O)&&x(O),A(n)}else x(O);D=P(O)}if(null!==D)var l=!0;else{var u=P(R);null!==u&&o(z,u.startTime-n),l=!1}return l}finally{D=null,M=r,j=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=c;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_scheduleCallback=function(e,n,a){var c=t.unstable_now();if("object"==typeof a&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?c+s:c,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),s=c;return e={id:N++,callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>c?(e.sortIndex=s,k(R,e),null===P(O)&&e===P(R)&&(L?i():L=!0,o(z,s-c))):(e.sortIndex=a,k(O,e),I||j||(I=!0,r(F))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_shouldYield=function(){var e=t.unstable_now();A(e);var n=P(O);return n!==D&&null!==D&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<D.expirationTime||a()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){I||j||(I=!0,r(F))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return P(O)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=n(47);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case s:case c:case h:return e;default:switch(e=e&&e.$$typeof){case u:case p:case y:case v:case l:return e;default:return t}}case i:return t}}}function C(e){return E(e)===d}t.typeOf=E,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=s,t.StrictMode=c,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===s||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===l||e.$$typeof===u||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w)},t.isAsyncMode=function(e){return C(e)||E(e)===f},t.isConcurrentMode=C,t.isContextConsumer=function(e){return E(e)===u},t.isContextProvider=function(e){return E(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===p},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===s},t.isStrictMode=function(e){return E(e)===c},t.isSuspense=function(e){return E(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new x(r||[]);return i._invoke=function(e,t,n){var r=u;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw i;return O()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=T(a,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===u)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var s=l(e,t,n);if("normal"===s.type){if(r=n.done?p:f,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=p,n.method="throw",n.arg=s.arg)}}}(e,n,a),i}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var u="suspendedStart",f="suspendedYield",d="executing",p="completed",h={};function m(){}function v(){}function y(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(_([])));w&&w!==n&&r.call(w,i)&&(g=w);var E=y.prototype=m.prototype=Object.create(g);function C(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function S(e){var t;this._invoke=function(n,o){function i(){return new Promise((function(t,i){!function t(n,o,i,a){var c=l(e[n],e,o);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==typeof u&&r.call(u,"__await")?Promise.resolve(u.__await).then((function(e){t("next",e,i,a)}),(function(e){t("throw",e,i,a)})):Promise.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return t("throw",e,i,a)}))}a(c.arg)}(n,o,t,i)}))}return t=t?t.then(i,i):i()}}function T(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function x(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function _(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:O}}function O(){return{value:t,done:!0}}return v.prototype=E.constructor=y,y.constructor=v,y[c]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c in e||(e[c]="GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},C(S.prototype),S.prototype[a]=function(){return this},e.AsyncIterator=S,e.async=function(t,n,r,o){var i=new S(s(t,n,r,o));return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(E),E[c]="Generator",E[i]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=_,x.prototype={constructor:x,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),l=r.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:_(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CopyToClipboard=void 0;var r=i(n(0)),o=i(n(53));function i(e){return e&&e.__esModule?e:{default:e}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,c=new Array(i),s=0;s<i;s++)c[s]=arguments[s];return n=function(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?f(e):t}(this,(e=u(t)).call.apply(e,[this].concat(c))),p(f(n),"onClick",(function(e){var t=n.props,i=t.text,a=t.onCopy,c=t.children,s=t.options,l=r.default.Children.only(c),u=(0,o.default)(i,s);a&&a(i,u),l&&l.props&&"function"==typeof l.props.onClick&&l.props.onClick(e)})),n}var n,i,h;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),n=t,(i=[{key:"render",value:function(){var e=this.props,t=(e.text,e.onCopy,e.options,e.children),n=s(e,["text","onCopy","options","children"]),o=r.default.Children.only(t);return r.default.cloneElement(o,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(n,!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n,{onClick:this.onClick}))}}])&&l(n.prototype,i),h&&l(n,h),t}(r.default.PureComponent);t.CopyToClipboard=h,p(h,"defaultProps",{onCopy:void 0,options:void 0})},function(e,t,n){"use strict";var r=n(54),o="Copy to clipboard: #{key}, Enter";e.exports=function(e,t){var n,i,a,c,s,l,u=!1;t||(t={}),n=t.debug||!1;try{if(a=r(),c=document.createRange(),s=document.getSelection(),(l=document.createElement("span")).textContent=e,l.style.all="unset",l.style.position="fixed",l.style.top=0,l.style.clip="rect(0, 0, 0, 0)",l.style.whiteSpace="pre",l.style.webkitUserSelect="text",l.style.MozUserSelect="text",l.style.msUserSelect="text",l.style.userSelect="text",l.addEventListener("copy",(function(n){n.stopPropagation(),t.format&&(n.preventDefault(),n.clipboardData.clearData(),n.clipboardData.setData(t.format,e))})),document.body.appendChild(l),c.selectNodeContents(l),s.addRange(c),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");u=!0}catch(r){n&&console.error("unable to copy using execCommand: ",r),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),u=!0}catch(r){n&&console.error("unable to copy using clipboardData: ",r),n&&console.error("falling back to prompt"),i=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:o),window.prompt(i,e)}}finally{s&&("function"==typeof s.removeRange?s.removeRange(c):s.removeAllRanges()),l&&document.body.removeChild(l),a()}return u}},function(e,t){e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],r=0;r<e.rangeCount;r++)n.push(e.getRangeAt(r));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}},function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},function(e,t,n){var r=n(58),o=n(59),i=n(60),a=n(61),c=n(31);function s(e,t){this.typeNumber=e,this.errorCorrectLevel=t,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}var l=s.prototype;l.addData=function(e){var t=new r(e);this.dataList.push(t),this.dataCache=null},l.isDark=function(e,t){if(e<0||this.moduleCount<=e||t<0||this.moduleCount<=t)throw new Error(e+","+t);return this.modules[e][t]},l.getModuleCount=function(){return this.moduleCount},l.make=function(){if(this.typeNumber<1){var e=1;for(e=1;e<40;e++){for(var t=o.getRSBlocks(e,this.errorCorrectLevel),n=new i,r=0,c=0;c<t.length;c++)r+=t[c].dataCount;for(c=0;c<this.dataList.length;c++){var s=this.dataList[c];n.put(s.mode,4),n.put(s.getLength(),a.getLengthInBits(s.mode,e)),s.write(n)}if(n.getLengthInBits()<=8*r)break}this.typeNumber=e}this.makeImpl(!1,this.getBestMaskPattern())},l.makeImpl=function(e,t){this.moduleCount=4*this.typeNumber+17,this.modules=new Array(this.moduleCount);for(var n=0;n<this.moduleCount;n++){this.modules[n]=new Array(this.moduleCount);for(var r=0;r<this.moduleCount;r++)this.modules[n][r]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(e,t),this.typeNumber>=7&&this.setupTypeNumber(e),null==this.dataCache&&(this.dataCache=s.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,t)},l.setupPositionProbePattern=function(e,t){for(var n=-1;n<=7;n++)if(!(e+n<=-1||this.moduleCount<=e+n))for(var r=-1;r<=7;r++)t+r<=-1||this.moduleCount<=t+r||(this.modules[e+n][t+r]=0<=n&&n<=6&&(0==r||6==r)||0<=r&&r<=6&&(0==n||6==n)||2<=n&&n<=4&&2<=r&&r<=4)},l.getBestMaskPattern=function(){for(var e=0,t=0,n=0;n<8;n++){this.makeImpl(!0,n);var r=a.getLostPoint(this);(0==n||e>r)&&(e=r,t=n)}return t},l.createMovieClip=function(e,t,n){var r=e.createEmptyMovieClip(t,n);this.make();for(var o=0;o<this.modules.length;o++)for(var i=1*o,a=0;a<this.modules[o].length;a++){var c=1*a;this.modules[o][a]&&(r.beginFill(0,100),r.moveTo(c,i),r.lineTo(c+1,i),r.lineTo(c+1,i+1),r.lineTo(c,i+1),r.endFill())}return r},l.setupTimingPattern=function(){for(var e=8;e<this.moduleCount-8;e++)null==this.modules[e][6]&&(this.modules[e][6]=e%2==0);for(var t=8;t<this.moduleCount-8;t++)null==this.modules[6][t]&&(this.modules[6][t]=t%2==0)},l.setupPositionAdjustPattern=function(){for(var e=a.getPatternPosition(this.typeNumber),t=0;t<e.length;t++)for(var n=0;n<e.length;n++){var r=e[t],o=e[n];if(null==this.modules[r][o])for(var i=-2;i<=2;i++)for(var c=-2;c<=2;c++)this.modules[r+i][o+c]=-2==i||2==i||-2==c||2==c||0==i&&0==c}},l.setupTypeNumber=function(e){for(var t=a.getBCHTypeNumber(this.typeNumber),n=0;n<18;n++){var r=!e&&1==(t>>n&1);this.modules[Math.floor(n/3)][n%3+this.moduleCount-8-3]=r}for(n=0;n<18;n++){r=!e&&1==(t>>n&1);this.modules[n%3+this.moduleCount-8-3][Math.floor(n/3)]=r}},l.setupTypeInfo=function(e,t){for(var n=this.errorCorrectLevel<<3|t,r=a.getBCHTypeInfo(n),o=0;o<15;o++){var i=!e&&1==(r>>o&1);o<6?this.modules[o][8]=i:o<8?this.modules[o+1][8]=i:this.modules[this.moduleCount-15+o][8]=i}for(o=0;o<15;o++){i=!e&&1==(r>>o&1);o<8?this.modules[8][this.moduleCount-o-1]=i:o<9?this.modules[8][15-o-1+1]=i:this.modules[8][15-o-1]=i}this.modules[this.moduleCount-8][8]=!e},l.mapData=function(e,t){for(var n=-1,r=this.moduleCount-1,o=7,i=0,c=this.moduleCount-1;c>0;c-=2)for(6==c&&c--;;){for(var s=0;s<2;s++)if(null==this.modules[r][c-s]){var l=!1;i<e.length&&(l=1==(e[i]>>>o&1)),a.getMask(t,r,c-s)&&(l=!l),this.modules[r][c-s]=l,-1==--o&&(i++,o=7)}if((r+=n)<0||this.moduleCount<=r){r-=n,n=-n;break}}},s.PAD0=236,s.PAD1=17,s.createData=function(e,t,n){for(var r=o.getRSBlocks(e,t),c=new i,l=0;l<n.length;l++){var u=n[l];c.put(u.mode,4),c.put(u.getLength(),a.getLengthInBits(u.mode,e)),u.write(c)}var f=0;for(l=0;l<r.length;l++)f+=r[l].dataCount;if(c.getLengthInBits()>8*f)throw new Error("code length overflow. ("+c.getLengthInBits()+">"+8*f+")");for(c.getLengthInBits()+4<=8*f&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;!(c.getLengthInBits()>=8*f||(c.put(s.PAD0,8),c.getLengthInBits()>=8*f));)c.put(s.PAD1,8);return s.createBytes(c,r)},s.createBytes=function(e,t){for(var n=0,r=0,o=0,i=new Array(t.length),s=new Array(t.length),l=0;l<t.length;l++){var u=t[l].dataCount,f=t[l].totalCount-u;r=Math.max(r,u),o=Math.max(o,f),i[l]=new Array(u);for(var d=0;d<i[l].length;d++)i[l][d]=255&e.buffer[d+n];n+=u;var p=a.getErrorCorrectPolynomial(f),h=new c(i[l],p.getLength()-1).mod(p);s[l]=new Array(p.getLength()-1);for(d=0;d<s[l].length;d++){var m=d+h.getLength()-s[l].length;s[l][d]=m>=0?h.get(m):0}}var v=0;for(d=0;d<t.length;d++)v+=t[d].totalCount;var y=new Array(v),g=0;for(d=0;d<r;d++)for(l=0;l<t.length;l++)d<i[l].length&&(y[g++]=i[l][d]);for(d=0;d<o;d++)for(l=0;l<t.length;l++)d<s[l].length&&(y[g++]=s[l][d]);return y},e.exports=s},function(e,t,n){var r=n(29);function o(e){this.mode=r.MODE_8BIT_BYTE,this.data=e}o.prototype={getLength:function(e){return this.data.length},write:function(e){for(var t=0;t<this.data.length;t++)e.put(this.data.charCodeAt(t),8)}},e.exports=o},function(e,t,n){var r=n(30);function o(e,t){this.totalCount=e,this.dataCount=t}o.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],o.getRSBlocks=function(e,t){var n=o.getRsBlockTable(e,t);if(null==n)throw new Error("bad rs block @ typeNumber:"+e+"/errorCorrectLevel:"+t);for(var r=n.length/3,i=new Array,a=0;a<r;a++)for(var c=n[3*a+0],s=n[3*a+1],l=n[3*a+2],u=0;u<c;u++)i.push(new o(s,l));return i},o.getRsBlockTable=function(e,t){switch(t){case r.L:return o.RS_BLOCK_TABLE[4*(e-1)+0];case r.M:return o.RS_BLOCK_TABLE[4*(e-1)+1];case r.Q:return o.RS_BLOCK_TABLE[4*(e-1)+2];case r.H:return o.RS_BLOCK_TABLE[4*(e-1)+3];default:return}},e.exports=o},function(e,t){function n(){this.buffer=new Array,this.length=0}n.prototype={get:function(e){var t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(var n=0;n<t;n++)this.putBit(1==(e>>>t-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){var t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=n},function(e,t,n){var r=n(29),o=n(31),i=n(32),a=0,c=1,s=2,l=3,u=4,f=5,d=6,p=7,h={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(e){for(var t=e<<10;h.getBCHDigit(t)-h.getBCHDigit(h.G15)>=0;)t^=h.G15<<h.getBCHDigit(t)-h.getBCHDigit(h.G15);return(e<<10|t)^h.G15_MASK},getBCHTypeNumber:function(e){for(var t=e<<12;h.getBCHDigit(t)-h.getBCHDigit(h.G18)>=0;)t^=h.G18<<h.getBCHDigit(t)-h.getBCHDigit(h.G18);return e<<12|t},getBCHDigit:function(e){for(var t=0;0!=e;)t++,e>>>=1;return t},getPatternPosition:function(e){return h.PATTERN_POSITION_TABLE[e-1]},getMask:function(e,t,n){switch(e){case a:return(t+n)%2==0;case c:return t%2==0;case s:return n%3==0;case l:return(t+n)%3==0;case u:return(Math.floor(t/2)+Math.floor(n/3))%2==0;case f:return t*n%2+t*n%3==0;case d:return(t*n%2+t*n%3)%2==0;case p:return(t*n%3+(t+n)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}},getErrorCorrectPolynomial:function(e){for(var t=new o([1],0),n=0;n<e;n++)t=t.multiply(new o([1,i.gexp(n)],0));return t},getLengthInBits:function(e,t){if(1<=t&&t<10)switch(e){case r.MODE_NUMBER:return 10;case r.MODE_ALPHA_NUM:return 9;case r.MODE_8BIT_BYTE:case r.MODE_KANJI:return 8;default:throw new Error("mode:"+e)}else if(t<27)switch(e){case r.MODE_NUMBER:return 12;case r.MODE_ALPHA_NUM:return 11;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 10;default:throw new Error("mode:"+e)}else{if(!(t<41))throw new Error("type:"+t);switch(e){case r.MODE_NUMBER:return 14;case r.MODE_ALPHA_NUM:return 13;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 12;default:throw new Error("mode:"+e)}}},getLostPoint:function(e){for(var t=e.getModuleCount(),n=0,r=0;r<t;r++)for(var o=0;o<t;o++){for(var i=0,a=e.isDark(r,o),c=-1;c<=1;c++)if(!(r+c<0||t<=r+c))for(var s=-1;s<=1;s++)o+s<0||t<=o+s||0==c&&0==s||a==e.isDark(r+c,o+s)&&i++;i>5&&(n+=3+i-5)}for(r=0;r<t-1;r++)for(o=0;o<t-1;o++){var l=0;e.isDark(r,o)&&l++,e.isDark(r+1,o)&&l++,e.isDark(r,o+1)&&l++,e.isDark(r+1,o+1)&&l++,0!=l&&4!=l||(n+=3)}for(r=0;r<t;r++)for(o=0;o<t-6;o++)e.isDark(r,o)&&!e.isDark(r,o+1)&&e.isDark(r,o+2)&&e.isDark(r,o+3)&&e.isDark(r,o+4)&&!e.isDark(r,o+5)&&e.isDark(r,o+6)&&(n+=40);for(o=0;o<t;o++)for(r=0;r<t-6;r++)e.isDark(r,o)&&!e.isDark(r+1,o)&&e.isDark(r+2,o)&&e.isDark(r+3,o)&&e.isDark(r+4,o)&&!e.isDark(r+5,o)&&e.isDark(r+6,o)&&(n+=40);var u=0;for(o=0;o<t;o++)for(r=0;r<t;r++)e.isDark(r,o)&&u++;return n+=10*(Math.abs(100*u/t/t-50)/5)}};e.exports=h},function(e,t,n){},function(e,t,n){},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,l=[],u=!1,f=-1;function d(){u&&s&&(u=!1,s.length?l=s.concat(l):f=-1,l.length&&p())}function p(){if(!u){var e=c(d);u=!0;for(var t=l.length;t;){for(s=l,l=[];++f<t;)s&&s[f].run();f=-1,t=l.length}s=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||u||c(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"shimGetUserMedia",(function(){return k})),n.d(r,"shimGetDisplayMedia",(function(){return P})),n.d(r,"shimMediaStream",(function(){return x})),n.d(r,"shimOnTrack",(function(){return _})),n.d(r,"shimGetSendersWithDtmf",(function(){return O})),n.d(r,"shimGetStats",(function(){return R})),n.d(r,"shimSenderReceiverGetStats",(function(){return N})),n.d(r,"shimAddTrackRemoveTrackWithNative",(function(){return D})),n.d(r,"shimAddTrackRemoveTrack",(function(){return M})),n.d(r,"shimPeerConnection",(function(){return j})),n.d(r,"fixNegotiationNeeded",(function(){return I}));var o={};n.r(o),n.d(o,"shimGetUserMedia",(function(){return z})),n.d(o,"shimGetDisplayMedia",(function(){return F})),n.d(o,"shimPeerConnection",(function(){return U})),n.d(o,"shimReplaceTrack",(function(){return B}));var i={};n.r(i),n.d(i,"shimGetUserMedia",(function(){return W})),n.d(i,"shimGetDisplayMedia",(function(){return V})),n.d(i,"shimOnTrack",(function(){return G})),n.d(i,"shimPeerConnection",(function(){return H})),n.d(i,"shimSenderGetStats",(function(){return $})),n.d(i,"shimReceiverGetStats",(function(){return q})),n.d(i,"shimRemoveStream",(function(){return K})),n.d(i,"shimRTCDataChannel",(function(){return J})),n.d(i,"shimAddTransceiver",(function(){return Q})),n.d(i,"shimCreateOffer",(function(){return X})),n.d(i,"shimCreateAnswer",(function(){return Y}));var a={};n.r(a),n.d(a,"shimLocalStreamsAPI",(function(){return Z})),n.d(a,"shimRemoteStreamsAPI",(function(){return ee})),n.d(a,"shimCallbacksAPI",(function(){return te})),n.d(a,"shimGetUserMedia",(function(){return ne})),n.d(a,"shimConstraints",(function(){return re})),n.d(a,"shimRTCIceServerUrls",(function(){return oe})),n.d(a,"shimTrackEventTransceiver",(function(){return ie})),n.d(a,"shimCreateOfferLegacy",(function(){return ae}));var c={};n.r(c),n.d(c,"shimRTCIceCandidate",(function(){return le})),n.d(c,"shimMaxMessageSize",(function(){return ue})),n.d(c,"shimSendThrowTypeError",(function(){return fe})),n.d(c,"shimConnectionState",(function(){return de})),n.d(c,"removeAllowExtmapMixed",(function(){return pe}));n(41);var s=n(0),l=n.n(s),u=n(11),f=n.n(u);let d=!0,p=!0;function h(e,t,n){const r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}function m(e,t,n){if(!e.RTCPeerConnection)return;const r=e.RTCPeerConnection.prototype,o=r.addEventListener;r.addEventListener=function(e,r){if(e!==t)return o.apply(this,arguments);const i=e=>{const t=n(e);t&&r(t)};return this._eventMap=this._eventMap||{},this._eventMap[r]=i,o.apply(this,[e,i])};const i=r.removeEventListener;r.removeEventListener=function(e,n){if(e!==t||!this._eventMap||!this._eventMap[n])return i.apply(this,arguments);const r=this._eventMap[n];return delete this._eventMap[n],i.apply(this,[e,r])},Object.defineProperty(r,"on"+t,{get(){return this["_on"+t]},set(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)},enumerable:!0,configurable:!0})}function v(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(d=e,e?"adapter.js logging disabled":"adapter.js logging enabled")}function y(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(p=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))}function g(){if("object"==typeof window){if(d)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}}function b(e,t){p&&console.warn(e+" is deprecated, please use "+t+" instead.")}function w(e){const{navigator:t}=e,n={browser:null,version:null};if(void 0===e||!e.navigator)return n.browser="Not a browser.",n;if(t.mozGetUserMedia)n.browser="firefox",n.version=h(t.userAgent,/Firefox\/(\d+)\./,1);else if(t.webkitGetUserMedia||!1===e.isSecureContext&&e.webkitRTCPeerConnection&&!e.RTCIceGatherer)n.browser="chrome",n.version=h(t.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(t.mediaDevices&&t.userAgent.match(/Edge\/(\d+).(\d+)$/))n.browser="edge",n.version=h(t.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!e.RTCPeerConnection||!t.userAgent.match(/AppleWebKit\/(\d+)\./))return n.browser="Not a supported browser.",n;n.browser="safari",n.version=h(t.userAgent,/AppleWebKit\/(\d+)\./,1),n.supportsUnifiedPlan=e.RTCRtpTransceiver&&"currentDirection"in e.RTCRtpTransceiver.prototype}return n}function E(e){return"[object Object]"===Object.prototype.toString.call(e)}function C(e){return E(e)?Object.keys(e).reduce((function(t,n){const r=E(e[n]),o=r?C(e[n]):e[n],i=r&&!Object.keys(o).length;return void 0===o||i?t:Object.assign(t,{[n]:o})}),{}):e}function S(e,t,n){const r=n?"outbound-rtp":"inbound-rtp",o=new Map;if(null===t)return o;const i=[];return e.forEach(e=>{"track"===e.type&&e.trackIdentifier===t.id&&i.push(e)}),i.forEach(t=>{e.forEach(n=>{n.type===r&&n.trackId===t.id&&function e(t,n,r){n&&!r.has(n.id)&&(r.set(n.id,n),Object.keys(n).forEach(o=>{o.endsWith("Id")?e(t,t.get(n[o]),r):o.endsWith("Ids")&&n[o].forEach(n=>{e(t,t.get(n),r)})}))}(e,n,o)})}),o}const T=g;function k(e){const t=e&&e.navigator;if(!t.mediaDevices)return;const n=w(e),r=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;const t={};return Object.keys(e).forEach(n=>{if("require"===n||"advanced"===n||"mediaSource"===n)return;const r="object"==typeof e[n]?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);const o=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];let e={};"number"==typeof r.ideal?(e[o("min",n)]=r.ideal,t.optional.push(e),(e={})[o("max",n)]=r.ideal,t.optional.push(e)):(e[o("",n)]=r.ideal,t.optional.push(e))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[o("",n)]=r.exact):["min","max"].forEach(e=>{void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[o(e,n)]=r[e])})}),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},o=function(e,o){if(n.version>=61)return o(e);if((e=JSON.parse(JSON.stringify(e)))&&"object"==typeof e.audio){const t=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])};t((e=JSON.parse(JSON.stringify(e))).audio,"autoGainControl","googAutoGainControl"),t(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=r(e.audio)}if(e&&"object"==typeof e.video){let i=e.video.facingMode;i=i&&("object"==typeof i?i:{ideal:i});const a=n.version<66;if(i&&("user"===i.exact||"environment"===i.exact||"user"===i.ideal||"environment"===i.ideal)&&(!t.mediaDevices.getSupportedConstraints||!t.mediaDevices.getSupportedConstraints().facingMode||a)){let n;if(delete e.video.facingMode,"environment"===i.exact||"environment"===i.ideal?n=["back","rear"]:"user"!==i.exact&&"user"!==i.ideal||(n=["front"]),n)return t.mediaDevices.enumerateDevices().then(t=>{let a=(t=t.filter(e=>"videoinput"===e.kind)).find(e=>n.some(t=>e.label.toLowerCase().includes(t)));return!a&&t.length&&n.includes("back")&&(a=t[t.length-1]),a&&(e.video.deviceId=i.exact?{exact:a.deviceId}:{ideal:a.deviceId}),e.video=r(e.video),T("chrome: "+JSON.stringify(e)),o(e)})}e.video=r(e.video)}return T("chrome: "+JSON.stringify(e)),o(e)},i=function(e){return n.version>=64?e:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString(){return this.name+(this.message&&": ")+this.message}}};if(t.getUserMedia=function(e,n,r){o(e,e=>{t.webkitGetUserMedia(e,n,e=>{r&&r(i(e))})})}.bind(t),t.mediaDevices.getUserMedia){const e=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(t){return o(t,t=>e(t).then(e=>{if(t.audio&&!e.getAudioTracks().length||t.video&&!e.getVideoTracks().length)throw e.getTracks().forEach(e=>{e.stop()}),new DOMException("","NotFoundError");return e},e=>Promise.reject(i(e))))}}}function P(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&("function"==typeof t?e.navigator.mediaDevices.getDisplayMedia=function(n){return t(n).then(t=>{const r=n.video&&n.video.width,o=n.video&&n.video.height,i=n.video&&n.video.frameRate;return n.video={mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:t,maxFrameRate:i||3}},r&&(n.video.mandatory.maxWidth=r),o&&(n.video.mandatory.maxHeight=o),e.navigator.mediaDevices.getUserMedia(n)})}:console.error("shimGetDisplayMedia: getSourceId argument is not a function"))}function x(e){e.MediaStream=e.MediaStream||e.webkitMediaStream}function _(e){if("object"!=typeof e||!e.RTCPeerConnection||"ontrack"in e.RTCPeerConnection.prototype)m(e,"track",e=>(e.transceiver||Object.defineProperty(e,"transceiver",{value:{receiver:e.receiver}}),e));else{Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get(){return this._ontrack},set(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)},enumerable:!0,configurable:!0});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){return this._ontrackpoly||(this._ontrackpoly=t=>{t.stream.addEventListener("addtrack",n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find(e=>e.track&&e.track.id===n.track.id):{track:n.track};const o=new Event("track");o.track=n.track,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)}),t.stream.getTracks().forEach(n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find(e=>e.track&&e.track.id===n.id):{track:n};const o=new Event("track");o.track=n,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)})},this.addEventListener("addstream",this._ontrackpoly)),t.apply(this,arguments)}}}function O(e){if("object"==typeof e&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){const t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};const n=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,r){let o=n.apply(this,arguments);return o||(o=t(this,e),this._senders.push(o)),o};const r=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){r.apply(this,arguments);const t=this._senders.indexOf(e);-1!==t&&this._senders.splice(t,1)}}const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._senders=this._senders||[],n.apply(this,[e]),e.getTracks().forEach(e=>{this._senders.push(t(this,e))})};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){this._senders=this._senders||[],r.apply(this,[e]),e.getTracks().forEach(e=>{const t=this._senders.find(t=>t.track===e);t&&this._senders.splice(this._senders.indexOf(t),1)})}}else if("object"==typeof e&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}}function R(e){if(!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,n,r]=arguments;if(arguments.length>0&&"function"==typeof e)return t.apply(this,arguments);if(0===t.length&&(0===arguments.length||"function"!=typeof e))return t.apply(this,[]);const o=function(e){const t={};return e.result().forEach(e=>{const n={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach(t=>{n[t]=e.stat(t)}),t[n.id]=n}),t},i=function(e){return new Map(Object.keys(e).map(t=>[t,e[t]]))};if(arguments.length>=2){const r=function(e){n(i(o(e)))};return t.apply(this,[r,e])}return new Promise((e,n)=>{t.apply(this,[function(t){e(i(o(t)))},n])}).then(n,r)}}function N(e){if(!("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver))return;if(!("getStats"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){const e=this;return this._pc.getStats().then(t=>S(t,e.track,!0))}}if(!("getStats"in e.RTCRtpReceiver.prototype)){const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e}),m(e,"track",e=>(e.receiver._pc=e.srcElement,e)),e.RTCRtpReceiver.prototype.getStats=function(){const e=this;return this._pc.getStats().then(t=>S(t,e.track,!1))}}if(!("getStats"in e.RTCRtpSender.prototype&&"getStats"in e.RTCRtpReceiver.prototype))return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){const e=arguments[0];let t,n,r;return this.getSenders().forEach(n=>{n.track===e&&(t?r=!0:t=n)}),this.getReceivers().forEach(t=>(t.track===e&&(n?r=!0:n=t),t.track===e)),r||t&&n?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):t?t.getStats():n?n.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return t.apply(this,arguments)}}function D(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map(e=>this._shimmedLocalStreams[e][0])};const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){if(!n)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};const r=t.apply(this,arguments);return this._shimmedLocalStreams[n.id]?-1===this._shimmedLocalStreams[n.id].indexOf(r)&&this._shimmedLocalStreams[n.id].push(r):this._shimmedLocalStreams[n.id]=[n,r],r};const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._shimmedLocalStreams=this._shimmedLocalStreams||{},e.getTracks().forEach(e=>{if(this.getSenders().find(t=>t.track===e))throw new DOMException("Track already exists.","InvalidAccessError")});const t=this.getSenders();n.apply(this,arguments);const r=this.getSenders().filter(e=>-1===t.indexOf(e));this._shimmedLocalStreams[e.id]=[e].concat(r)};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[e.id],r.apply(this,arguments)};const o=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},e&&Object.keys(this._shimmedLocalStreams).forEach(t=>{const n=this._shimmedLocalStreams[t].indexOf(e);-1!==n&&this._shimmedLocalStreams[t].splice(n,1),1===this._shimmedLocalStreams[t].length&&delete this._shimmedLocalStreams[t]}),o.apply(this,arguments)}}function M(e){if(!e.RTCPeerConnection)return;const t=w(e);if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return D(e);const n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){const e=n.apply(this);return this._reverseStreams=this._reverseStreams||{},e.map(e=>this._reverseStreams[e.id])};const r=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){if(this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},t.getTracks().forEach(e=>{if(this.getSenders().find(t=>t.track===e))throw new DOMException("Track already exists.","InvalidAccessError")}),!this._reverseStreams[t.id]){const n=new e.MediaStream(t.getTracks());this._streams[t.id]=n,this._reverseStreams[n.id]=t,t=n}r.apply(this,[t])};const o=e.RTCPeerConnection.prototype.removeStream;function i(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(o.id,"g"),r.id)}),new RTCSessionDescription({type:t.type,sdp:n})}function a(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(r.id,"g"),o.id)}),new RTCSessionDescription({type:t.type,sdp:n})}e.RTCPeerConnection.prototype.removeStream=function(e){this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},o.apply(this,[this._streams[e.id]||e]),delete this._reverseStreams[this._streams[e.id]?this._streams[e.id].id:e.id],delete this._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,n){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");const r=[].slice.call(arguments,1);if(1!==r.length||!r[0].getTracks().find(e=>e===t))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");const o=this.getSenders().find(e=>e.track===t);if(o)throw new DOMException("Track already exists.","InvalidAccessError");this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{};const i=this._streams[n.id];if(i)i.addTrack(t),Promise.resolve().then(()=>{this.dispatchEvent(new Event("negotiationneeded"))});else{const r=new e.MediaStream([t]);this._streams[n.id]=r,this._reverseStreams[r.id]=n,this.addStream(r)}return this.getSenders().find(e=>e.track===t)},["createOffer","createAnswer"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){const e=arguments;return arguments.length&&"function"==typeof arguments[0]?n.apply(this,[t=>{const n=i(this,t);e[0].apply(null,[n])},t=>{e[1]&&e[1].apply(null,t)},arguments[2]]):n.apply(this,arguments).then(e=>i(this,e))}};e.RTCPeerConnection.prototype[t]=r[t]}));const c=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return arguments.length&&arguments[0].type?(arguments[0]=a(this,arguments[0]),c.apply(this,arguments)):c.apply(this,arguments)};const s=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get(){const e=s.get.apply(this);return""===e.type?e:i(this,e)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(!(e._pc===this))throw new DOMException("Sender was not created by this connection.","InvalidAccessError");let t;this._streams=this._streams||{},Object.keys(this._streams).forEach(n=>{this._streams[n].getTracks().find(t=>e.track===t)&&(t=this._streams[n])}),t&&(1===t.getTracks().length?this.removeStream(this._reverseStreams[t.id]):t.removeTrack(e.track),this.dispatchEvent(new Event("negotiationneeded")))}}function j(e){const t=w(e);if(!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=e.webkitRTCPeerConnection),!e.RTCPeerConnection)return;t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]}));const n=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?t.version<78&&arguments[0]&&""===arguments[0].candidate?Promise.resolve():n.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}function I(e){m(e,"negotiationneeded",e=>{if("stable"===e.target.signalingState)return e})}var L=n(33),A=n.n(L);function z(e){const t=e&&e.navigator,n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch(e=>Promise.reject(function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString(){return this.name}}}(e)))}}function F(e){"getDisplayMedia"in e.navigator&&e.navigator.mediaDevices&&(e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||(e.navigator.mediaDevices.getDisplayMedia=e.navigator.getDisplayMedia.bind(e.navigator)))}function U(e){const t=w(e);if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){const t=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set(e){t.set.call(this,e);const n=new Event("enabled");n.enabled=e,this.dispatchEvent(n)}})}!e.RTCRtpSender||"dtmf"in e.RTCRtpSender.prototype||Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCDtmfSender&&!e.RTCDTMFSender&&(e.RTCDTMFSender=e.RTCDtmfSender);const n=A()(e,t.version);e.RTCPeerConnection=function(e){return e&&e.iceServers&&(e.iceServers=function(e,t){let n=!1;return(e=JSON.parse(JSON.stringify(e))).filter(e=>{if(e&&(e.urls||e.url)){var t=e.urls||e.url;e.url&&!e.urls&&b("RTCIceServer.url","RTCIceServer.urls");const r="string"==typeof t;return r&&(t=[t]),t=t.filter(e=>{if(0===e.indexOf("stun:"))return!1;const t=e.startsWith("turn")&&!e.startsWith("turn:[")&&e.includes("transport=udp");return t&&!n?(n=!0,!0):t&&!n}),delete e.url,e.urls=r?t[0]:t,!!t.length}})}(e.iceServers,t.version),g("ICE servers after filtering:",e.iceServers)),new n(e)},e.RTCPeerConnection.prototype=n.prototype}function B(e){!e.RTCRtpSender||"replaceTrack"in e.RTCRtpSender.prototype||(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)}function W(e){const t=w(e),n=e&&e.navigator,r=e&&e.MediaStreamTrack;if(n.getUserMedia=function(e,t,r){b("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(e).then(t,r)},!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){const e=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])},t=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(n){return"object"==typeof n&&"object"==typeof n.audio&&(n=JSON.parse(JSON.stringify(n)),e(n.audio,"autoGainControl","mozAutoGainControl"),e(n.audio,"noiseSuppression","mozNoiseSuppression")),t(n)},r&&r.prototype.getSettings){const t=r.prototype.getSettings;r.prototype.getSettings=function(){const n=t.apply(this,arguments);return e(n,"mozAutoGainControl","autoGainControl"),e(n,"mozNoiseSuppression","noiseSuppression"),n}}if(r&&r.prototype.applyConstraints){const t=r.prototype.applyConstraints;r.prototype.applyConstraints=function(n){return"audio"===this.kind&&"object"==typeof n&&(n=JSON.parse(JSON.stringify(n)),e(n,"autoGainControl","mozAutoGainControl"),e(n,"noiseSuppression","mozNoiseSuppression")),t.apply(this,[n])}}}}function V(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&(e.navigator.mediaDevices.getDisplayMedia=function(n){if(!n||!n.video){const e=new DOMException("getDisplayMedia without video constraints is undefined");return e.name="NotFoundError",e.code=8,Promise.reject(e)}return!0===n.video?n.video={mediaSource:t}:n.video.mediaSource=t,e.navigator.mediaDevices.getUserMedia(n)})}function G(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function H(e){const t=w(e);if("object"!=typeof e||!e.RTCPeerConnection&&!e.mozRTCPeerConnection)return;if(!e.RTCPeerConnection&&e.mozRTCPeerConnection&&(e.RTCPeerConnection=e.mozRTCPeerConnection),t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]})),t.version<68){const t=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?arguments[0]&&""===arguments[0].candidate?Promise.resolve():t.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}const n={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},r=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,o,i]=arguments;return r.apply(this,[e||null]).then(e=>{if(t.version<53&&!o)try{e.forEach(e=>{e.type=n[e.type]||e.type})}catch(t){if("TypeError"!==t.name)throw t;e.forEach((t,r)=>{e.set(r,Object.assign({},t,{type:n[t.type]||t.type}))})}return e}).then(o,i)}}function $(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpSender.prototype)return;const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}function q(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpReceiver.prototype)return;const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e}),m(e,"track",e=>(e.receiver._pc=e.srcElement,e)),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}function K(e){!e.RTCPeerConnection||"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){b("removeStream","removeTrack"),this.getSenders().forEach(t=>{t.track&&e.getTracks().includes(t.track)&&this.removeTrack(t)})})}function J(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)}function Q(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.addTransceiver;t&&(e.RTCPeerConnection.prototype.addTransceiver=function(){this.setParametersPromises=[];const e=arguments[1],n=e&&"sendEncodings"in e;n&&e.sendEncodings.forEach(e=>{if("rid"in e){if(!/^[a-z0-9]{0,16}$/i.test(e.rid))throw new TypeError("Invalid RID value provided.")}if("scaleResolutionDownBy"in e&&!(parseFloat(e.scaleResolutionDownBy)>=1))throw new RangeError("scale_resolution_down_by must be >= 1.0");if("maxFramerate"in e&&!(parseFloat(e.maxFramerate)>=0))throw new RangeError("max_framerate must be >= 0.0")});const r=t.apply(this,arguments);if(n){const{sender:t}=r,n=t.getParameters();"encodings"in n||(n.encodings=e.sendEncodings,this.setParametersPromises.push(t.setParameters(n).catch(()=>{})))}return r})}function X(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}function Y(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createAnswer;e.RTCPeerConnection.prototype.createAnswer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}function Z(e){if("object"==typeof e&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),!("addStream"in e.RTCPeerConnection.prototype)){const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){this._localStreams||(this._localStreams=[]),this._localStreams.includes(e)||this._localStreams.push(e),e.getAudioTracks().forEach(n=>t.call(this,n,e)),e.getVideoTracks().forEach(n=>t.call(this,n,e))},e.RTCPeerConnection.prototype.addTrack=function(e){const n=arguments[1];return n&&(this._localStreams?this._localStreams.includes(n)||this._localStreams.push(n):this._localStreams=[n]),t.apply(this,arguments)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){this._localStreams||(this._localStreams=[]);const t=this._localStreams.indexOf(e);if(-1===t)return;this._localStreams.splice(t,1);const n=e.getTracks();this.getSenders().forEach(e=>{n.includes(e.track)&&this.removeTrack(e)})})}}function ee(e){if("object"==typeof e&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get(){return this._onaddstream},set(e){this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=e),this.addEventListener("track",this._onaddstreampoly=e=>{e.streams.forEach(e=>{if(this._remoteStreams||(this._remoteStreams=[]),this._remoteStreams.includes(e))return;this._remoteStreams.push(e);const t=new Event("addstream");t.stream=e,this.dispatchEvent(t)})})}});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){const e=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(t){t.streams.forEach(t=>{if(e._remoteStreams||(e._remoteStreams=[]),e._remoteStreams.indexOf(t)>=0)return;e._remoteStreams.push(t);const n=new Event("addstream");n.stream=t,e.dispatchEvent(n)})}),t.apply(e,arguments)}}}function te(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,o=t.setLocalDescription,i=t.setRemoteDescription,a=t.addIceCandidate;t.createOffer=function(e,t){const r=arguments.length>=2?arguments[2]:arguments[0],o=n.apply(this,[r]);return t?(o.then(e,t),Promise.resolve()):o},t.createAnswer=function(e,t){const n=arguments.length>=2?arguments[2]:arguments[0],o=r.apply(this,[n]);return t?(o.then(e,t),Promise.resolve()):o};let c=function(e,t,n){const r=o.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r};t.setLocalDescription=c,c=function(e,t,n){const r=i.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.setRemoteDescription=c,c=function(e,t,n){const r=a.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.addIceCandidate=c}function ne(e){const t=e&&e.navigator;if(t.mediaDevices&&t.mediaDevices.getUserMedia){const e=t.mediaDevices,n=e.getUserMedia.bind(e);t.mediaDevices.getUserMedia=e=>n(re(e))}!t.getUserMedia&&t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,n,r){t.mediaDevices.getUserMedia(e).then(n,r)}.bind(t))}function re(e){return e&&void 0!==e.video?Object.assign({},e,{video:C(e.video)}):e}function oe(e){const t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,n){if(e&&e.iceServers){const t=[];for(let n=0;n<e.iceServers.length;n++){let r=e.iceServers[n];!r.hasOwnProperty("urls")&&r.hasOwnProperty("url")?(b("RTCIceServer.url","RTCIceServer.urls"),(r=JSON.parse(JSON.stringify(r))).urls=r.url,delete r.url,t.push(r)):t.push(e.iceServers[n])}e.iceServers=t}return new t(e,n)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in e.RTCPeerConnection&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:()=>t.generateCertificate})}function ie(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function ae(e){const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(e){if(e){void 0!==e.offerToReceiveAudio&&(e.offerToReceiveAudio=!!e.offerToReceiveAudio);const t=this.getTransceivers().find(e=>"audio"===e.receiver.track.kind);!1===e.offerToReceiveAudio&&t?"sendrecv"===t.direction?t.setDirection?t.setDirection("sendonly"):t.direction="sendonly":"recvonly"===t.direction&&(t.setDirection?t.setDirection("inactive"):t.direction="inactive"):!0!==e.offerToReceiveAudio||t||this.addTransceiver("audio"),void 0!==e.offerToReceiveVideo&&(e.offerToReceiveVideo=!!e.offerToReceiveVideo);const n=this.getTransceivers().find(e=>"video"===e.receiver.track.kind);!1===e.offerToReceiveVideo&&n?"sendrecv"===n.direction?n.setDirection?n.setDirection("sendonly"):n.direction="sendonly":"recvonly"===n.direction&&(n.setDirection?n.setDirection("inactive"):n.direction="inactive"):!0!==e.offerToReceiveVideo||n||this.addTransceiver("video")}return t.apply(this,arguments)}}var ce=n(14),se=n.n(ce);function le(e){if(!e.RTCIceCandidate||e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)return;const t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){if("object"==typeof e&&e.candidate&&0===e.candidate.indexOf("a=")&&((e=JSON.parse(JSON.stringify(e))).candidate=e.candidate.substr(2)),e.candidate&&e.candidate.length){const n=new t(e),r=se.a.parseCandidate(e.candidate),o=Object.assign(n,r);return o.toJSON=function(){return{candidate:o.candidate,sdpMid:o.sdpMid,sdpMLineIndex:o.sdpMLineIndex,usernameFragment:o.usernameFragment}},o}return new t(e)},e.RTCIceCandidate.prototype=t.prototype,m(e,"icecandidate",t=>(t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t))}function ue(e){if(!e.RTCPeerConnection)return;const t=w(e);"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get(){return void 0===this._sctp?null:this._sctp}});const n=function(e){if(!e||!e.sdp)return!1;const t=se.a.splitSections(e.sdp);return t.shift(),t.some(e=>{const t=se.a.parseMLine(e);return t&&"application"===t.kind&&-1!==t.protocol.indexOf("SCTP")})},r=function(e){const t=e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(null===t||t.length<2)return-1;const n=parseInt(t[1],10);return n!=n?-1:n},o=function(e){let n=65536;return"firefox"===t.browser&&(n=t.version<57?-1===e?16384:2147483637:t.version<60?57===t.version?65535:65536:2147483637),n},i=function(e,n){let r=65536;"firefox"===t.browser&&57===t.version&&(r=65535);const o=se.a.matchPrefix(e.sdp,"a=max-message-size:");return o.length>0?r=parseInt(o[0].substr(19),10):"firefox"===t.browser&&-1!==n&&(r=2147483637),r},a=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){if(this._sctp=null,"chrome"===t.browser&&t.version>=76){const{sdpSemantics:e}=this.getConfiguration();"plan-b"===e&&Object.defineProperty(this,"sctp",{get(){return void 0===this._sctp?null:this._sctp},enumerable:!0,configurable:!0})}if(n(arguments[0])){const e=r(arguments[0]),t=o(e),n=i(arguments[0],e);let a;a=0===t&&0===n?Number.POSITIVE_INFINITY:0===t||0===n?Math.max(t,n):Math.min(t,n);const c={};Object.defineProperty(c,"maxMessageSize",{get:()=>a}),this._sctp=c}return a.apply(this,arguments)}}function fe(e){if(!(e.RTCPeerConnection&&"createDataChannel"in e.RTCPeerConnection.prototype))return;function t(e,t){const n=e.send;e.send=function(){const r=arguments[0],o=r.length||r.size||r.byteLength;if("open"===e.readyState&&t.sctp&&o>t.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+t.sctp.maxMessageSize+" bytes)");return n.apply(e,arguments)}}const n=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){const e=n.apply(this,arguments);return t(e,this),e},m(e,"datachannel",e=>(t(e.channel,e.target),e))}function de(e){if(!e.RTCPeerConnection||"connectionState"in e.RTCPeerConnection.prototype)return;const t=e.RTCPeerConnection.prototype;Object.defineProperty(t,"connectionState",{get(){return{completed:"connected",checking:"connecting"}[this.iceConnectionState]||this.iceConnectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t,"onconnectionstatechange",{get(){return this._onconnectionstatechange||null},set(e){this._onconnectionstatechange&&(this.removeEventListener("connectionstatechange",this._onconnectionstatechange),delete this._onconnectionstatechange),e&&this.addEventListener("connectionstatechange",this._onconnectionstatechange=e)},enumerable:!0,configurable:!0}),["setLocalDescription","setRemoteDescription"].forEach(e=>{const n=t[e];t[e]=function(){return this._connectionstatechangepoly||(this._connectionstatechangepoly=e=>{const t=e.target;if(t._lastConnectionState!==t.connectionState){t._lastConnectionState=t.connectionState;const n=new Event("connectionstatechange",e);t.dispatchEvent(n)}return e},this.addEventListener("iceconnectionstatechange",this._connectionstatechangepoly)),n.apply(this,arguments)}})}function pe(e){if(!e.RTCPeerConnection)return;const t=w(e);if("chrome"===t.browser&&t.version>=71)return;const n=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(e){return e&&e.sdp&&-1!==e.sdp.indexOf("\na=extmap-allow-mixed")&&(e.sdp=e.sdp.split("\n").filter(e=>"a=extmap-allow-mixed"!==e.trim()).join("\n")),n.apply(this,arguments)}}!function({window:e}={},t={shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0}){const n=g,s=w(e),l={browserDetails:s,commonShim:c,extractVersion:h,disableLog:v,disableWarnings:y};switch(s.browser){case"chrome":if(!r||!j||!t.shimChrome)return n("Chrome shim is not included in this adapter release."),l;n("adapter.js shimming chrome."),l.browserShim=r,k(e),x(e),j(e),_(e),M(e),O(e),R(e),N(e),I(e),le(e),de(e),ue(e),fe(e),pe(e);break;case"firefox":if(!i||!H||!t.shimFirefox)return n("Firefox shim is not included in this adapter release."),l;n("adapter.js shimming firefox."),l.browserShim=i,W(e),H(e),G(e),K(e),$(e),q(e),J(e),Q(e),X(e),Y(e),le(e),de(e),ue(e),fe(e);break;case"edge":if(!o||!U||!t.shimEdge)return n("MS edge shim is not included in this adapter release."),l;n("adapter.js shimming edge."),l.browserShim=o,z(e),F(e),U(e),B(e),ue(e),fe(e);break;case"safari":if(!a||!t.shimSafari)return n("Safari shim is not included in this adapter release."),l;n("adapter.js shimming safari."),l.browserShim=a,oe(e),ae(e),te(e),Z(e),ee(e),ie(e),ne(e),le(e),ue(e),fe(e),pe(e);break;default:n("Unsupported browser!")}}({window:window});var he=n(3),me=n.n(he),ve=l.a.createContext(null);var ye=function(e){e()},ge=function(){return ye},be=null,we={notify:function(){}};var Ee=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=we,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=ge(),t=[],n=[],{clear:function(){n=be,t=be},notify:function(){var r=t=n;e((function(){for(var e=0;e<r.length;e++)r[e]()}))},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==be&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=we)},e}();function Ce(e){var t=e.store,n=e.context,r=e.children,o=Object(s.useMemo)((function(){var e=new Ee(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),i=Object(s.useMemo)((function(){return t.getState()}),[t]);Object(s.useEffect)((function(){var e=o.subscription;return e.trySubscribe(),i!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,i]);var a=n||ve;return l.a.createElement(a.Provider,{value:o},r)}Ce.propTypes={store:me.a.shape({subscribe:me.a.func.isRequired,dispatch:me.a.func.isRequired,getState:me.a.func.isRequired}),context:me.a.object,children:me.a.any};var Se=Ce;function Te(){return(Te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ke(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var Pe=n(16),xe=n.n(Pe),_e=n(9),Oe=n.n(_e),Re=n(18),Ne="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?s.useLayoutEffect:s.useEffect,De=[],Me=[null,null];function je(e,t){var n=e[1];return[t.payload,n+1]}var Ie=function(){return[null,0]};function Le(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,i=n.methodName,a=void 0===i?"connectAdvanced":i,c=n.renderCountProp,u=void 0===c?void 0:c,f=n.shouldHandleStateChanges,d=void 0===f||f,p=n.storeKey,h=void 0===p?"store":p,m=n.withRef,v=void 0!==m&&m,y=n.forwardRef,g=void 0!==y&&y,b=n.context,w=void 0===b?ve:b,E=ke(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);Oe()(void 0===u,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),Oe()(!v,"withRef is removed. To access the wrapped instance, use a ref on the connected component");Oe()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var C=w;return function(t){var n=t.displayName||t.name||"Component",r=o(n),i=Te({},E,{getDisplayName:o,methodName:a,renderCountProp:u,shouldHandleStateChanges:d,storeKey:h,displayName:r,wrappedComponentName:n,WrappedComponent:t}),c=E.pure;var f=c?s.useMemo:function(e){return e()};function p(n){var o=Object(s.useMemo)((function(){var e=n.forwardedRef,t=ke(n,["forwardedRef"]);return[n.context,e,t]}),[n]),a=o[0],c=o[1],u=o[2],p=Object(s.useMemo)((function(){return a&&a.Consumer&&Object(Re.isContextConsumer)(l.a.createElement(a.Consumer,null))?a:C}),[a,C]),h=Object(s.useContext)(p),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch),v=Boolean(h)&&Boolean(h.store);Oe()(m||v,'Could not find "store" in the context of "'+r+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+r+" in connect options.");var y=m?n.store:h.store,g=Object(s.useMemo)((function(){return function(t){return e(t.dispatch,i)}(y)}),[y]),b=Object(s.useMemo)((function(){if(!d)return Me;var e=new Ee(y,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[y,m,h]),w=b[0],E=b[1],S=Object(s.useMemo)((function(){return m?h:Te({},h,{subscription:w})}),[m,h,w]),T=Object(s.useReducer)(je,De,Ie),k=T[0][0],P=T[1];if(k&&k.error)throw k.error;var x=Object(s.useRef)(),_=Object(s.useRef)(u),O=Object(s.useRef)(),R=Object(s.useRef)(!1),N=f((function(){return O.current&&u===_.current?O.current:g(y.getState(),u)}),[y,k,u]);Ne((function(){_.current=u,x.current=N,R.current=!1,O.current&&(O.current=null,E())})),Ne((function(){if(d){var e=!1,t=null,n=function(){if(!e){var n,r,o=y.getState();try{n=g(o,_.current)}catch(e){r=e,t=e}r||(t=null),n===x.current?R.current||E():(x.current=n,O.current=n,R.current=!0,P({type:"STORE_UPDATED",payload:{error:r}}))}};w.onStateChange=n,w.trySubscribe(),n();return function(){if(e=!0,w.tryUnsubscribe(),w.onStateChange=null,t)throw t}}}),[y,w,g]);var D=Object(s.useMemo)((function(){return l.a.createElement(t,Te({},N,{ref:c}))}),[c,t,N]);return Object(s.useMemo)((function(){return d?l.a.createElement(p.Provider,{value:S},D):D}),[p,D,S])}var m=c?l.a.memo(p):p;if(m.WrappedComponent=t,m.displayName=r,g){var v=l.a.forwardRef((function(e,t){return l.a.createElement(m,Te({},e,{forwardedRef:t}))}));return v.displayName=r,v.WrappedComponent=t,xe()(v,t)}return xe()(m,t)}}var Ae=Object.prototype.hasOwnProperty;function ze(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function Fe(e,t){if(ze(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Ae.call(t,n[o])||!ze(e[n[o]],t[n[o]]))return!1;return!0}var Ue=n(23),Be=function(){return Math.random().toString(36).substring(7).split("").join(".")},We={INIT:"@@redux/INIT"+Be(),REPLACE:"@@redux/REPLACE"+Be(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Be()}};function Ve(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Ge(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(Ge)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],c=a,s=!1;function l(){c===a&&(c=a.slice())}function u(){if(s)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(s)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return l(),c.push(e),function(){if(t){if(s)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,l();var n=c.indexOf(e);c.splice(n,1)}}}function d(e){if(!Ve(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(s)throw new Error("Reducers may not dispatch actions.");try{s=!0,i=o(i,e)}finally{s=!1}for(var t=a=c,n=0;n<t.length;n++){(0,t[n])()}return e}return d({type:We.INIT}),(r={dispatch:d,subscribe:f,getState:u,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:We.REPLACE})}})[Ue.a]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(u())}return n(),{unsubscribe:t(n)}}})[Ue.a]=function(){return this},e},r}function He(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function $e(e,t){return function(){return t(e.apply(this,arguments))}}function qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ke(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function Je(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ke(n,!0).forEach((function(t){qe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ke(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function Xe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return Je({},n,{dispatch:r=Qe.apply(void 0,i)(n.dispatch)})}}}function Ye(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Ze(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function et(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=Ze(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Ze(o),o=r(t,n)),o},r}}var tt=[function(e){return"function"==typeof e?et(e):void 0},function(e){return e?void 0:Ye((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?Ye((function(t){return function(e,t){if("function"==typeof e)return $e(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=$e(o,t))}return n}(e,t)})):void 0}];var nt=[function(e){return"function"==typeof e?et(e):void 0},function(e){return e?void 0:Ye((function(){return{}}))}];function rt(e,t,n){return Te({},n,{},e,{},t)}var ot=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,c){var s=e(t,n,c);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return rt}}];function it(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function at(e,t,n,r,o){var i,a,c,s,l,u=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,a),y=!u(o,i);return i=o,a=p,v&&y?(c=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),l=n(c,s,a)):v?(e.dependsOnOwnProps&&(c=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),l=n(c,s,a)):y?(h=e(i,a),m=!d(h,c),c=h,m&&(l=n(c,s,a)),l):l}return function(o,u){return p?h(o,u):(c=e(i=o,a=u),s=t(r,a),l=n(c,s,a),p=!0,l)}}function ct(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=ke(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),c=r(e,i),s=o(e,i);return(i.pure?at:it)(a,c,s,e,i)}function st(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function lt(e,t){return e===t}var ut,ft,dt,pt,ht,mt,vt,yt,gt,bt,wt,Et,Ct=(dt=(ft=void 0===ut?{}:ut).connectHOC,pt=void 0===dt?Le:dt,ht=ft.mapStateToPropsFactories,mt=void 0===ht?nt:ht,vt=ft.mapDispatchToPropsFactories,yt=void 0===vt?tt:vt,gt=ft.mergePropsFactories,bt=void 0===gt?ot:gt,wt=ft.selectorFactory,Et=void 0===wt?ct:wt,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,c=o.areStatesEqual,s=void 0===c?lt:c,l=o.areOwnPropsEqual,u=void 0===l?Fe:l,f=o.areStatePropsEqual,d=void 0===f?Fe:f,p=o.areMergedPropsEqual,h=void 0===p?Fe:p,m=ke(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=st(e,mt,"mapStateToProps"),y=st(t,yt,"mapDispatchToProps"),g=st(n,bt,"mergeProps");return pt(Et,Te({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:y,initMergeProps:g,pure:a,areStatesEqual:s,areOwnPropsEqual:u,areStatePropsEqual:d,areMergedPropsEqual:h},m))});function St(){var e=Object(s.useContext)(ve);return Oe()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function Tt(e){void 0===e&&(e=ve);var t=e===ve?St:function(){return Object(s.useContext)(e)};return function(){return t().store}}var kt=Tt();!function(e){void 0===e&&(e=ve);var t=e===ve?kt:Tt(e)}();var Pt=function(e,t){return e===t};var xt;!function(e){void 0===e&&(e=ve);var t=e===ve?St:function(){return Object(s.useContext)(e)}}();function _t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ot(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Rt(e,t,n){return t&&Ot(e.prototype,t),n&&Ot(e,n),e}function Nt(e){return(Nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Dt(e){return(Dt="function"==typeof Symbol&&"symbol"===Nt(Symbol.iterator)?function(e){return Nt(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Nt(e)})(e)}function Mt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function jt(e,t){return!t||"object"!==Dt(t)&&"function"!=typeof t?Mt(e):t}function It(e){return(It=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Lt(e,t){return(Lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function At(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lt(e,t)}function zt(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function Ft(e){return"/"===e.charAt(0)}function Ut(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}xt=u.unstable_batchedUpdates,ye=xt;var Bt=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&Ft(e),a=t&&Ft(t),c=i||a;if(e&&Ft(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var l=0,u=o.length;u>=0;u--){var f=o[u];"."===f?Ut(o,u):".."===f?(Ut(o,u),l++):l&&(Ut(o,u),l--)}if(!c)for(;l--;l)o.unshift("..");!c||""===o[0]||o[0]&&Ft(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};function Wt(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var Vt=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=Wt(t),o=Wt(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},Gt=!0,Ht="Invariant failed";var $t=function(e,t){if(!e)throw Gt?new Error(Ht):new Error(Ht+": "+(t||""))};function qt(e){return"/"===e.charAt(0)?e:"/"+e}function Kt(e){return"/"===e.charAt(0)?e.substr(1):e}function Jt(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function Qt(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function Xt(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function Yt(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Bt(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function Zt(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var en=!("undefined"==typeof window||!window.document||!window.document.createElement);function tn(e,t){t(window.confirm(e))}var nn="popstate",rn="hashchange";function on(){try{return window.history.state||{}}catch(e){return{}}}function an(e){void 0===e&&(e={}),en||$t(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,c=void 0!==a&&a,s=i.getUserConfirmation,l=void 0===s?tn:s,u=i.keyLength,f=void 0===u?6:u,d=e.basename?Qt(qt(e.basename)):"";function p(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return d&&(i=Jt(i,d)),Yt(i,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=Zt();function v(e){Te(_,e),_.length=n.length,m.notifyListeners(_.location,_.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||w(p(e.state))}function g(){w(p(on()))}var b=!1;function w(e){if(b)b=!1,v();else{m.confirmTransitionTo(e,"POP",l,(function(t){t?v({action:"POP",location:e}):function(e){var t=_.location,n=C.indexOf(t.key);-1===n&&(n=0);var r=C.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,T(o))}(e)}))}}var E=p(on()),C=[E.key];function S(e){return d+Xt(e)}function T(e){n.go(e)}var k=0;function P(e){1===(k+=e)&&1===e?(window.addEventListener(nn,y),o&&window.addEventListener(rn,g)):0===k&&(window.removeEventListener(nn,y),o&&window.removeEventListener(rn,g))}var x=!1;var _={length:n.length,action:"POP",location:E,createHref:S,push:function(e,t){var o=Yt(e,t,h(),_.location);m.confirmTransitionTo(o,"PUSH",l,(function(e){if(e){var t=S(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),c)window.location.href=t;else{var s=C.indexOf(_.location.key),l=C.slice(0,s+1);l.push(o.key),C=l,v({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=Yt(e,t,h(),_.location);m.confirmTransitionTo(o,"REPLACE",l,(function(e){if(e){var t=S(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),c)window.location.replace(t);else{var s=C.indexOf(_.location.key);-1!==s&&(C[s]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:T,goBack:function(){T(-1)},goForward:function(){T(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return x||(P(1),x=!0),function(){return x&&(x=!1,P(-1)),t()}},listen:function(e){var t=m.appendListener(e);return P(1),function(){P(-1),t()}}};return _}var cn="hashchange",sn={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+Kt(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:Kt,decodePath:qt},slash:{encodePath:qt,decodePath:qt}};function ln(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function un(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function fn(e){window.location.replace(ln(window.location.href)+"#"+e)}function dn(e){void 0===e&&(e={}),en||$t(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?tn:r,i=n.hashType,a=void 0===i?"slash":i,c=e.basename?Qt(qt(e.basename)):"",s=sn[a],l=s.encodePath,u=s.decodePath;function f(){var e=u(un());return c&&(e=Jt(e,c)),Yt(e)}var d=Zt();function p(e){Te(k,e),k.length=t.length,d.notifyListeners(k.location,k.action)}var h=!1,m=null;function v(){var e,t,n=un(),r=l(n);if(n!==r)fn(r);else{var i=f(),a=k.location;if(!h&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===Xt(i))return;m=null,function(e){if(h)h=!1,p();else{d.confirmTransitionTo(e,"POP",o,(function(t){t?p({action:"POP",location:e}):function(e){var t=k.location,n=w.lastIndexOf(Xt(t));-1===n&&(n=0);var r=w.lastIndexOf(Xt(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,E(o))}(e)}))}}(i)}}var y=un(),g=l(y);y!==g&&fn(g);var b=f(),w=[Xt(b)];function E(e){t.go(e)}var C=0;function S(e){1===(C+=e)&&1===e?window.addEventListener(cn,v):0===C&&window.removeEventListener(cn,v)}var T=!1;var k={length:t.length,action:"POP",location:b,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=ln(window.location.href)),n+"#"+l(c+Xt(e))},push:function(e,t){var n=Yt(e,void 0,void 0,k.location);d.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=Xt(n),r=l(c+t);if(un()!==r){m=t,function(e){window.location.hash=e}(r);var o=w.lastIndexOf(Xt(k.location)),i=w.slice(0,o+1);i.push(t),w=i,p({action:"PUSH",location:n})}else p()}}))},replace:function(e,t){var n=Yt(e,void 0,void 0,k.location);d.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=Xt(n),r=l(c+t);un()!==r&&(m=t,fn(r));var o=w.indexOf(Xt(k.location));-1!==o&&(w[o]=t),p({action:"REPLACE",location:n})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return T||(S(1),T=!0),function(){return T&&(T=!1,S(-1)),t()}},listen:function(e){var t=d.appendListener(e);return S(1),function(){S(-1),t()}}};return k}function pn(e,t,n){return Math.min(Math.max(e,t),n)}var hn=n(24),mn=n.n(hn),vn=n(35),yn=n.n(vn),gn=1073741823;var bn=l.a.createContext||function(e,t){var n,r,o="__create-react-context-"+yn()()+"__",i=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter((function(t){return t!==e}))},get:function(){return n},set:function(e,t){n=e,r.forEach((function(e){return e(n,t)}))}}),t}mn()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):gn,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(s.Component);i.childContextTypes=((n={})[o]=me.a.object.isRequired,n);var a=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}mn()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?gn:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?gn:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(s.Component);return a.contextTypes=((r={})[o]=me.a.object,r),{Provider:i,Consumer:a}},wn=n(25),En=n.n(wn),Cn=function(e){var t=bn();return t.displayName=e,t}("Router"),Sn=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}zt(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return l.a.createElement(Cn.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(l.a.Component);l.a.Component;var Tn=function(e){function t(){return e.apply(this,arguments)||this}zt(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(l.a.Component);var kn={},Pn=1e4,xn=0;function _n(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(kn[e])return kn[e];var t=En.a.compile(e);return xn<Pn&&(kn[e]=t,xn++),t}(e)(t,{pretty:!0})}function On(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return l.a.createElement(Cn.Consumer,null,(function(e){e||$t(!1);var r=e.history,i=e.staticContext,a=o?r.push:r.replace,c=Yt(t?"string"==typeof n?_n(n,t.params):Te({},n,{pathname:_n(n.pathname,t.params)}):n);return i?(a(c),null):l.a.createElement(Tn,{onMount:function(){a(c)},onUpdate:function(e,t){var n,r,o=Yt(t.to);n=o,r=Te({},c,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&Vt(n.state,r.state)||a(c)},to:n})}))}var Rn={},Nn=1e4,Dn=0;function Mn(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,c=void 0!==a&&a,s=n.sensitive,l=void 0!==s&&s;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Rn[n]||(Rn[n]={});if(r[e])return r[e];var o=[],i={regexp:En()(e,o,t),keys:o};return Dn<Nn&&(r[e]=i,Dn++),i}(n,{end:i,strict:c,sensitive:l}),o=r.regexp,a=r.keys,s=o.exec(e);if(!s)return null;var u=s[0],f=s.slice(1),d=e===u;return i&&!d?null:{path:n,url:"/"===n&&""===u?"/":u,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var jn=function(e){function t(){return e.apply(this,arguments)||this}return zt(t,e),t.prototype.render=function(){var e=this;return l.a.createElement(Cn.Consumer,null,(function(t){t||$t(!1);var n=e.props.location||t.location,r=Te({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?Mn(n.pathname,e.props):t.match}),o=e.props,i=o.children,a=o.component,c=o.render;return Array.isArray(i)&&0===i.length&&(i=null),l.a.createElement(Cn.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:a?l.a.createElement(a,r):c?c(r):null:"function"==typeof i?i(r):null)}))},t}(l.a.Component);function In(e){return"/"===e.charAt(0)?e:"/"+e}function Ln(e,t){if(!e)return t;var n=In(e);return 0!==t.pathname.indexOf(n)?t:Te({},t,{pathname:t.pathname.substr(n.length)})}function An(e){return"string"==typeof e?e:Xt(e)}function zn(e){return function(){$t(!1)}}function Fn(){}l.a.Component;var Un=function(e){function t(){return e.apply(this,arguments)||this}return zt(t,e),t.prototype.render=function(){var e=this;return l.a.createElement(Cn.Consumer,null,(function(t){t||$t(!1);var n,r,o=e.props.location||t.location;return l.a.Children.forEach(e.props.children,(function(e){if(null==r&&l.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?Mn(o.pathname,Te({},e.props,{path:i})):t.match}})),r?l.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(l.a.Component);function Bn(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=ke(t,["wrappedComponentRef"]);return l.a.createElement(Cn.Consumer,null,(function(t){return t||$t(!1),l.a.createElement(e,Te({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,xe()(n,e)}l.a.useContext;var Wn=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=an(t.props),t}return zt(t,e),t.prototype.render=function(){return l.a.createElement(Sn,{history:this.history,children:this.props.children})},t}(l.a.Component);l.a.Component;var Vn=function(e,t){return"function"==typeof e?e(t):e},Gn=function(e,t){return"string"==typeof e?Yt(e,null,null,t):e},Hn=function(e){return e},$n=l.a.forwardRef;void 0===$n&&($n=Hn);var qn=$n((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=ke(e,["innerRef","navigate","onClick"]),a=i.target,c=Te({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||a&&"_self"!==a||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=Hn!==$n&&t||n,l.a.createElement("a",c)}));var Kn=$n((function(e,t){var n=e.component,r=void 0===n?qn:n,o=e.replace,i=e.to,a=e.innerRef,c=ke(e,["component","replace","to","innerRef"]);return l.a.createElement(Cn.Consumer,null,(function(e){e||$t(!1);var n=e.history,s=Gn(Vn(i,e.location),e.location),u=s?n.createHref(s):"",f=Te({},c,{href:u,navigate:function(){var t=Vn(i,e.location);(o?n.replace:n.push)(t)}});return Hn!==$n?f.ref=t||a:f.innerRef=a,l.a.createElement(r,f)}))})),Jn=function(e){return e},Qn=l.a.forwardRef;void 0===Qn&&(Qn=Jn);Qn((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,a=e.activeStyle,c=e.className,s=e.exact,u=e.isActive,f=e.location,d=e.strict,p=e.style,h=e.to,m=e.innerRef,v=ke(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return l.a.createElement(Cn.Consumer,null,(function(e){e||$t(!1);var n=f||e.location,o=Gn(Vn(h,n),n),y=o.pathname,g=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),b=g?Mn(n.pathname,{path:g,exact:s,strict:d}):null,w=!!(u?u(b,n):b),E=w?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,i):c,C=w?Te({},p,{},a):p,S=Te({"aria-current":w&&r||null,className:E,style:C,to:o},v);return Jn!==Qn?S.ref=t||m:S.innerRef=m,l.a.createElement(Kn,S)}))}));function Xn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Yn=n(7),Zn=n.n(Yn);function er(e,t,n,r,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function tr(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){er(i,r,o,a,c,"next",e)}function c(e){er(i,r,o,a,c,"throw",e)}a(void 0)}))}}var nr=null,rr=new Map;function or(e){if("string"==typeof e.data){var t=JSON.parse(e.data),n=t.type,r=t.payload,o=rr.get(n);if(!o)return;for(var i=0;i<o.length;i++){var a=o[i];try{a(r)}catch(e){console.error("websocket message handler error: ",e)}}}else console.log("received not string ws msg")}function ir(){return new Promise((function(e,t){var n,r,o=(n=window.location,r="","https:"===n.protocol?r+="wss://":r+="ws://",r+=n.host,r+="/ws");if(nr&&1===nr.readyState)return e();(nr=new window.WebSocket(o)).onopen=function(){e()},nr.onerror=function(e){console.log("connect web socket error: ",e),t(e)},nr.onclose=function(){console.log("websocket closed")},nr.onmessage=or}))}function ar(e){return cr.apply(this,arguments)}function cr(){return(cr=tr(Zn.a.mark((function e(t){return Zn.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(nr&&1===nr.readyState){e.next=3;break}return e.next=3,ir();case 3:nr.send(t);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function sr(){return(sr=tr(Zn.a.mark((function e(t){return Zn.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ar(JSON.stringify(t));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var lr={sendJSON:function(e){return sr.apply(this,arguments)},registerMessageHandler:function(e,t){var n=rr.get(e)||[];n.push(t),rr.set(e,n)},removeMessageHandler:function(e,t){var n=(rr.get(e)||[]).filter((function(e){return e!==t}));0===n.length?rr.delete(e):rr.set(e,n)}},ur=n(2),fr=n.n(ur),dr=n(5),pr=n.n(dr);function hr(e){var t=e.location.pathname,n=Mn(t,"/recv/:recvCode?");return l.a.createElement("div",{className:pr.a.base},l.a.createElement("a",{href:"/"},l.a.createElement("img",{src:"/images/logo.png",alt:"logo",className:pr.a.logo})),l.a.createElement("div",{className:pr.a.slogan},"简单安全高效的P2P文件传输服务"),l.a.createElement("div",{className:pr.a.menus},l.a.createElement(Kn,{to:"/send"},l.a.createElement("span",{className:fr()(pr.a.menu,"/send"===t&&pr.a.active)},"发送文件")),l.a.createElement(Kn,{to:"/recv"},l.a.createElement("span",{className:fr()(pr.a.menu,n&&pr.a.active)},"接收文件")),l.a.createElement(Kn,{to:"/contact"},l.a.createElement("span",{className:fr()(pr.a.menu,"/contact"===t&&pr.a.active)},"联系我们"))))}hr.defaultProps={};var mr=Bn(hr),vr=n(26),yr=n.n(vr),gr=n(10),br=n.n(gr),wr=n(19),Er=n.n(wr),Cr=n(36),Sr=n.n(Cr),Tr=function(e){function t(e){return _t(this,t),jt(this,It(t).call(this,e))}return At(t,e),Rt(t,[{key:"render",value:function(){var e=this.props,t=e.className,n=e.name,r=e.tooltip,o=e.onClick,i=l.a.createElement("i",{className:fr()("iconfont","icon-".concat(n),t),onClick:o});return r?l.a.createElement("span",{className:fr()("tooltip--top"),"aria-label":r},i):i}}]),t}(s.Component);Tr.defaultProps={className:null,name:null,onClick:null};var kr=Tr,Pr=n(37),xr=n.n(Pr),_r=n(38),Or=n.n(_r),Rr=xr.a.bind(Or.a),Nr=function(e){function t(){return _t(this,t),jt(this,It(t).apply(this,arguments))}return At(t,e),Rt(t,[{key:"render",value:function(){var e=this.props,t=e.type,n=e.style,r=e.disabled,o=e.children,i=e.href,a=e.onClick,c=fr()(Rr("btn-".concat(t),{"btn-disabled":r}),this.props.className);return i?l.a.createElement(Kn,{to:i,style:n,className:c},o):l.a.createElement("button",{type:"button",style:n,className:c,onClick:a,disabled:r},o)}}]),t}(s.Component);Nr.defaultProps={disabled:!1,style:null,className:null,onClick:null,children:null,href:null};var Dr=Nr,Mr=n(12),jr=n.n(Mr),Ir=function(e){function t(e){return _t(this,t),jt(this,It(t).call(this,e))}return At(t,e),Rt(t,[{key:"render",value:function(){return l.a.createElement("div",{className:jr.a.steps},this.props.children)}}]),t}(s.Component),Lr=function(e){function t(e){return _t(this,t),jt(this,It(t).call(this,e))}return At(t,e),Rt(t,[{key:"render",value:function(){var e=this.props,t=e.title,n=e.index,r=e.active;return l.a.createElement("span",{className:fr()(jr.a.step,r&&jr.a.active)},l.a.createElement("span",{className:fr()(jr.a.indexWrapper,r&&jr.a.active)},l.a.createElement("span",{className:jr.a.index},n)),l.a.createElement("span",{className:jr.a.title},t))}}]),t}(s.Component);Ir.Step=Lr;var Ar=Ir;function zr(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Fr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ur=l.a.createContext(null);function Br(e,t){var n=Object.create(null);return e&&s.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(s.isValidElement)(e)?t(e):e}(e)})),n}function Wr(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Vr(e,t,n){var r=Br(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var c={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var l=o[s][r];c[o[s][r]]=n(l)}c[s]=n(s)}for(r=0;r<i.length;r++)c[i[r]]=n(i[r]);return c}(t,r);return Object.keys(o).forEach((function(i){var a=o[i];if(Object(s.isValidElement)(a)){var c=i in t,l=i in r,u=t[i],f=Object(s.isValidElement)(u)&&!u.props.in;!l||c&&!f?l||!c||f?l&&c&&Object(s.isValidElement)(u)&&(o[i]=Object(s.cloneElement)(a,{onExited:n.bind(null,a),in:u.props.in,exit:Wr(a,"exit",e),enter:Wr(a,"enter",e)})):o[i]=Object(s.cloneElement)(a,{in:!1}):o[i]=Object(s.cloneElement)(a,{onExited:n.bind(null,a),in:!0,exit:Wr(a,"exit",e),enter:Wr(a,"enter",e)})}})),o}var Gr=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Hr=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Fr(Fr(r)));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}zt(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,r=i,Br(n.children,(function(e){return Object(s.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:Wr(e,"appear",n),enter:Wr(e,"enter",n),exit:Wr(e,"exit",n)})}))):Vr(e,o,i),firstRender:!1}},n.handleExited=function(e,t){var n=Br(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Te({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=ke(e,["component","childFactory"]),o=this.state.contextValue,i=Gr(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?l.a.createElement(Ur.Provider,{value:o},i):l.a.createElement(Ur.Provider,{value:o},l.a.createElement(t,r,i))},t}(l.a.Component);Hr.propTypes={},Hr.defaultProps={component:"div",childFactory:function(e){return e}};var $r=Hr;function qr(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}var Kr=!1,Jr="unmounted",Qr="exited",Xr="entering",Yr="entered",Zr=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=Qr,r.appearStatus=Xr):o=Yr:o=t.unmountOnExit||t.mountOnEnter?Jr:Qr,r.state={status:o},r.nextCallback=null,r}zt(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Jr?{status:Qr}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Xr&&n!==Yr&&(t=Xr):n!==Xr&&n!==Yr||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=f.a.findDOMNode(this);t===Xr?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===Qr&&this.setState({status:Jr})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:t,i=this.getTimeouts(),a=o?i.appear:i.enter;!t&&!r||Kr?this.safeSetState({status:Yr},(function(){n.props.onEntered(e)})):(this.props.onEnter(e,o),this.safeSetState({status:Xr},(function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a,(function(){n.safeSetState({status:Yr},(function(){n.props.onEntered(e,o)}))}))})))},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n&&!Kr?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,(function(){t.safeSetState({status:Qr},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:Qr},(function(){t.props.onExited(e)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===Jr)return null;var t=this.props,n=t.children,r=ke(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return l.a.createElement(Ur.Provider,{value:null},n(e,r));var o=l.a.Children.only(n);return(l.a.createElement(Ur.Provider,{value:null},l.a.cloneElement(o,r)))},t}(l.a.Component);function eo(){}Zr.contextType=Ur,Zr.propTypes={},Zr.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:eo,onEntering:eo,onEntered:eo,onExit:eo,onExiting:eo,onExited:eo},Zr.UNMOUNTED=0,Zr.EXITED=1,Zr.ENTERING=2,Zr.ENTERED=3,Zr.EXITING=4;var to=Zr,no=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.remove(r):"string"==typeof n.className?n.className=qr(n.className,r):n.setAttribute("class",qr(n.className&&n.className.baseVal||"",r)));var n,r}))},ro=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).appliedClasses={appear:{},enter:{},exit:{}},t.onEnter=function(e,n){t.removeClasses(e,"exit"),t.addClass(e,n?"appear":"enter","base"),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var r=n?"appear":"enter";t.addClass(e,r,"active"),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var r=n?"appear":"enter";t.removeClasses(e,r),t.addClass(e,r,"done"),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){t.removeClasses(e,"appear"),t.removeClasses(e,"enter"),t.addClass(e,"exit","base"),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){t.addClass(e,"exit","active"),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){t.removeClasses(e,"exit"),t.addClass(e,"exit","done"),t.props.onExited&&t.props.onExited(e)},t.getClassNames=function(e){var n=t.props.classNames,r="string"==typeof n,o=r?""+(r&&n?n+"-":"")+e:n[e];return{baseClassName:o,activeClassName:r?o+"-active":n[e+"Active"],doneClassName:r?o+"-done":n[e+"Done"]}},t}zt(t,e);var n=t.prototype;return n.addClass=function(e,t,n){var r=this.getClassNames(t)[n+"ClassName"];"appear"===t&&"done"===n&&(r+=" "+this.getClassNames("enter").doneClassName),"active"===n&&e&&e.scrollTop,this.appliedClasses[t][n]=r,function(e,t){e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.add(r):function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")}(n,r)||("string"==typeof n.className?n.className=n.className+" "+r:n.setAttribute("class",(n.className&&n.className.baseVal||"")+" "+r)));var n,r}))}(e,r)},n.removeClasses=function(e,t){var n=this.appliedClasses[t],r=n.base,o=n.active,i=n.done;this.appliedClasses[t]={},r&&no(e,r),o&&no(e,o),i&&no(e,i)},n.render=function(){var e=this.props,t=(e.classNames,ke(e,["classNames"]));return l.a.createElement(to,Te({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(l.a.Component);ro.defaultProps={classNames:""},ro.propTypes={};var oo=ro,io=n(13),ao=n.n(io),co=1,so=2,lo=3,uo=function(e){function t(e){var n;return _t(this,t),(n=jt(this,It(t).call(this,e))).state={toasts:[]},n}return At(t,e),Rt(t,[{key:"add",value:function(e,t){var n=this,r=Er()(),o={id:r,type:e,title:t};setTimeout((function(){n.setState((function(e){return{toasts:e.toasts.filter((function(e){return e.id!==r}))}}))}),2e3),this.setState((function(e){return{toasts:[].concat(zr(e.toasts),[o])}}))}},{key:"render",value:function(){var e,t,n=this.state.toasts,r=void 0===n?[]:n,o=(Xn(e={},co,"check"),Xn(e,so,"close"),Xn(e,lo,"info"),e),i=(Xn(t={},co,ao.a.success),Xn(t,so,ao.a.error),Xn(t,lo,ao.a.info),t);return l.a.createElement("div",{className:ao.a.container},l.a.createElement($r,{component:null},r.map((function(e){var t=e.type;return l.a.createElement(oo,{key:e.id,classNames:"toast-animation",timeout:220},l.a.createElement("div",{className:fr()(ao.a.toast,i[t])},l.a.createElement("div",{className:fr()(ao.a.iconWrapper,i[t])},l.a.createElement(kr,{name:o[t]})),l.a.createElement("div",{key:e.id,className:fr()(ao.a.content,i[t])},e.title)))}))))}}]),t}(s.Component),fo=document.createElement("div");document.body.appendChild(fo);var po=l.a.createRef();f.a.render(l.a.createElement(uo,{ref:po}),fo),uo.success=function(e){po.current.add(co,e)},uo.error=function(e){po.current.add(so,e)},uo.info=function(e){po.current.add(lo,e)};var ho=uo,mo=n(4),vo=n.n(mo),yo=function(e){function t(){return _t(this,t),jt(this,It(t).apply(this,arguments))}return At(t,e),Rt(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.files,r=t.removable,o=t.curFileId;return l.a.createElement("div",{className:vo.a.container},n.map((function(t){var n=t.uid,i=t.name,a=t.size,c=t.downloadUrl,s=t.pct,u=null;return u=c?l.a.createElement("a",{href:c,download:i,className:vo.a.download},"下载"):s>=100?l.a.createElement("span",{className:vo.a.completed},"完成"):n===o?l.a.createElement("span",null,s,"%"):l.a.createElement("span",{className:vo.a.waiting},"等待"),l.a.createElement("div",{key:t.uid,className:vo.a.fileRow},l.a.createElement("div",{className:vo.a.left},l.a.createElement(kr,{name:"file",className:vo.a.fileIcon}),l.a.createElement("div",{className:vo.a.fileInfo},l.a.createElement("div",{className:vo.a.fileName},i),l.a.createElement("div",{className:vo.a.fileSize},br()(a)))),l.a.createElement("div",{className:vo.a.right},!r&&u,r&&l.a.createElement(kr,{name:"close",onClick:e.props.onRemoveFile(t.uid),className:vo.a.closeIcon})))})))}}]),t}(s.Component),go=n(39),bo=function(e){function t(){var e;return _t(this,t),(e=jt(this,It(t).call(this))).id=null,e.targetId=null,e.pc=null,e.dc=null,e.waitingCallback=null,e.onIceCandidate=e.onIceCandidate.bind(Mt(e)),e.onDescription=e.onDescription.bind(Mt(e)),e.connectPeer=e.connectPeer.bind(Mt(e)),e.onConnectionStateChange=e.onConnectionStateChange.bind(Mt(e)),e.onRTCMessage=e.onRTCMessage.bind(Mt(e)),e.onChannelOpen=e.onChannelOpen.bind(Mt(e)),e.onChannelClose=e.onChannelClose.bind(Mt(e)),e.onBufferedAmountLow=e.onBufferedAmountLow.bind(Mt(e)),e.onS2cSignal=e.onS2cSignal.bind(Mt(e)),e.onS2cOpen=e.onS2cOpen.bind(Mt(e)),lr.registerMessageHandler("s2c_open",e.onS2cOpen),lr.registerMessageHandler("s2c_signal",e.onS2cSignal),e}return At(t,e),Rt(t,[{key:"onS2cOpen",value:function(e){this.id=e.id,this.emit("peerId",this.id)}},{key:"onS2cSignal",value:function(e){var t=this;this.targetId||(this.targetId=e.srcId),this.pc||this.createRTCConnection(!1),e.sdp?this.pc.setRemoteDescription(new RTCSessionDescription(e.sdp)).then((function(n){if("offer"===e.sdp.type)return t.pc.createAnswer().then((function(e){return t.onDescription(e)}))})):e.ice&&this.pc.addIceCandidate(new RTCIceCandidate(e.ice))}},{key:"onDescription",value:function(e){var t=this;this.pc.setLocalDescription(e).then((function(){lr.sendJSON({type:"c2s_signal",payload:{targetId:t.targetId,sdp:e}})})).catch((function(e){return console.log("onDescription error: ",e)}))}},{key:"onConnectionStateChange",value:function(){"disconnected"===this.pc.connectionState?(this.dc&&this.dc.close(),this.waitingCallback&&(this.waitingCallback(new Error("peer disconnected, cannot send")),this.waitingCallback=null),this.emit("disconnected")):"connected"===this.pc.connectionState?this.emit("connected"):"connecting"===this.pc.connectionState?this.emit("connecting"):"failed"===this.pc.connectionState&&this.emit("connectFailed"),console.log("onConnectionStateChange: ",this.pc.connectionState)}},{key:"onRTCMessage",value:function(e){this.emit("data",e.data)}},{key:"createRTCConnection",value:function(e){var t=this,n=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"turn:0.peerjs.com:3478",username:"peerjs",credential:"peerjsp"}]});if(this.pc=n,n.onicecandidate=this.onIceCandidate,n.onconnectionstatechange=function(e){return t.onConnectionStateChange(e)},n.onnegotiationneeded=function(e){return t.onNegotiationNeeded(e)},e){var r=n.createDataChannel("file-transfer",{reliable:!0});this.setupDataChannel(r)}else this.pc.ondatachannel=function(e){var n=e.channel||e.target;t.setupDataChannel(n)}}},{key:"setupDataChannel",value:function(e){this.dc=e,e.bufferedAmountLowThreshold=14680064,e.binaryType="arraybuffer",e.onopen=this.onChannelOpen,e.onclose=this.onChannelClose,e.onerror=this.onChannelError,e.onbufferedamountlow=this.onBufferedAmountLow}},{key:"onNegotiationNeeded",value:function(e){var t=this;this.pc.createOffer().then((function(e){return t.onDescription(e)}))}},{key:"connectPeer",value:function(e){this.targetId=e,this.createRTCConnection(!0)}},{key:"destroy",value:function(){this.targetId=null,this.waitingCallback=null,this.pc&&(this.pc.close(),this.pc=null),this.dc&&(this.dc.close(),this.dc=null)}},{key:"onIceCandidate",value:function(e){e.candidate&&lr.sendJSON({type:"c2s_signal",payload:{targetId:this.targetId,ice:e.candidate}})}},{key:"onChannelOpen",value:function(e){this.emit("channelOpen"),this.dc.onmessage=this.onRTCMessage}},{key:"onChannelClose",value:function(e){console.log("## channel close: ",e)}},{key:"onChannelError",value:function(e){console.log("## channel error: ",e)}},{key:"onBufferedAmountLow",value:function(){this.waitingCallback&&(this.waitingCallback(),this.waitingCallback=null)}},{key:"send",value:function(e){var t=this;return new Promise((function(n,r){if("open"===t.dc.readyState)if(t.dc.bufferedAmount>=15728640)t.waitingCallback=function(e){e?r(e):n()};else try{t.dc.send(e),n()}catch(e){console.error("send error: ",e),r(e)}else{var o="send but channel is not open, now state is: "+t.dc.readyState;console.error(o),r(new Error(o))}}))}},{key:"sendJSON",value:function(e){return this.send(JSON.stringify(e))}}]),t}(n.n(go).a),wo=function(){function e(t){_t(this,e),this.file=t,this.reader=new FileReader,this.offset=0}return Rt(e,[{key:"getNextChunk",value:function(){var e=this;return new Promise((function(t,n){e.offset>=e.file.size&&t({done:!0}),e.reader.onload=function(n){e.offset+=16384,t({done:e.offset>=e.file.size,chunk:n.target.result,offset:e.offset})},e.reader.onabort=function(){n(new Error("FileReader abort"))},e.reader.onerror=function(e){n(new Error("FileReader onerror"+e))};var r=e.file.slice(e.offset,e.offset+16384);e.reader.readAsArrayBuffer(r)}))}}]),e}();function Eo(e,t){return(e/t*100).toFixed(1)}function Co(e){lr.sendJSON({type:"c2s_prepare_recv",payload:{recvCode:e}})}var So=n(1),To=n.n(So);function ko(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Po=Ar.Step,xo=function(e){function t(e){var n;return _t(this,t),(n=jt(this,It(t).call(this,e))).peer=new bo,n.inputRef=l.a.createRef(),n.onClickUpload=n.onClickUpload.bind(Mt(n)),n.onChangeFile=n.onChangeFile.bind(Mt(n)),n.onRemoveFile=n.onRemoveFile.bind(Mt(n)),n.onClickSelectDone=n.onClickSelectDone.bind(Mt(n)),n.onClickBack=n.onClickBack.bind(Mt(n)),n.onReset=n.onReset.bind(Mt(n)),n.sendSizes={},n.bps=0,n.timer=setInterval((function(){var e=n.props.files.map((function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ko(Object(n),!0).forEach((function(t){Xn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ko(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{pct:Eo(n.sendSizes[e.uid]||0,e.size)})}));n.props.setState({files:e,bps:n.bps}),n.bps=0}),1e3),n}return At(t,e),Rt(t,[{key:"componentWillUnmount",value:function(){clearInterval(this.timer)}},{key:"onClickUpload",value:function(){this.inputRef.current.click()}},{key:"onClickSelectDone",value:function(){var e=this;this.props.setState({curStep:2}),function(e){lr.sendJSON({type:"c2s_prepare_send",payload:{files:e}})}(this.props.files.map((function(e){return{uid:e.uid,name:e.name,size:e.size,type:e.type}})));var t=this.peer;t.on("connecting",(function(){e.props.setState({peerState:"connecting"})})),t.on("connected",(function(){e.props.setState({peerState:"connected"})})),t.on("connectFailed",(function(){e.props.setState({peerState:"connectFailed"}),ho.error("连接失败")})),t.on("disconnected",tr(Zn.a.mark((function t(){return Zn.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.props.setState({peerState:"disconnected"}),ho.error("连接断开，请重试");case 2:case"end":return t.stop()}}),t)})))),t.on("channelOpen",tr(Zn.a.mark((function n(){var r,o,i,a,c,s,l,u,f,d;return Zn.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:e.props.setState({curStep:3,peerState:"transfer"}),r=e.props.files,o=0;case 3:if(!(o<r.length)){n.next=38;break}return i=r[o],a=i.uid,n.next=8,t.sendJSON({type:"fileStart",fileId:a});case 8:e.props.setState({curFileId:a}),c=new wo(i.realFile),s=!1,l=0;case 12:if(s){n.next=32;break}return n.next=15,c.getNextChunk();case 15:return u=n.sent,s=u.done,f=u.chunk,d=u.offset,n.prev=18,n.next=21,t.send(f);case 21:n.next=27;break;case 23:return n.prev=23,n.t0=n.catch(18),ho.error("传输错误："+n.t0),n.abrupt("break",32);case 27:e.sendSizes[a]=d,e.bps+=d-l,l=d,n.next=12;break;case 32:if(!s){n.next=35;break}return n.next=35,t.sendJSON({type:"fileEnd",fileId:a});case 35:o++,n.next=3;break;case 38:case"end":return n.stop()}}),n,null,[[18,23]])}))))}},{key:"onClickBack",value:function(){this.props.setState({curStep:this.props.curStep-1})}},{key:"onReset",value:function(){this.peer.destroy(),this.props.setState({curStep:1,files:[],peerState:""})}},{key:"onChangeFile",value:function(e){var t=this,n=Array.from(e.target.files),r=n.filter((function(e){return!t.props.files.find((function(t){return t.name===e.name&&t.size===e.size&&t.lastModified===e.lastModified&&t.type===e.type}))})).map((function(e){return{realFile:e,uid:Er()(),name:e.name,size:e.size,type:e.type}}));r.length!==n.length&&ho.info("发现疑似相同的文件，已自动过滤");var o=this.props.files.concat(r);this.props.setState({files:o}),e.target.value=null}},{key:"onRemoveFile",value:function(e){var t=this;return function(){var n=t.props.files.filter((function(t){return t.uid!==e}));t.props.setState({files:n})}}},{key:"renderStep1",value:function(){var e=this.props.files,t=e.reduce((function(e,t){return e+t.size}),0);return 0===e.length?l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:To.a.uploadArea},l.a.createElement("div",{className:To.a.iconPlusWrapper},l.a.createElement(kr,{name:"plus",className:To.a.iconPlus})),l.a.createElement("div",{className:To.a.uploadTip},"将文件拖动到方框内或点击下方按钮"),l.a.createElement(Dr,{type:"primary",className:To.a.uploadBtn,onClick:this.onClickUpload},"上传文件")),l.a.createElement("div",{className:To.a.recvGuide},"已有收件码？点击",l.a.createElement(Kn,{to:"/recv",className:To.a.link}," 接收文件"))):l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:To.a.uploadArea},l.a.createElement(yo,{files:e,removable:!0,onRemoveFile:this.onRemoveFile})),l.a.createElement("div",{className:To.a.uploadMore},l.a.createElement("div",{className:To.a.addMore,onClick:this.onClickUpload},l.a.createElement("span",null,"添加文件")),l.a.createElement("div",{className:To.a.fileSummary},e.length," 个文件，共 ",br()(t))),l.a.createElement(Dr,{type:"primary",className:To.a.btnSelectFileDone,onClick:this.onClickSelectDone},"选好了"))}},{key:"renderStep2",value:function(){var e=this.props.recvCode,t="http://".concat(document.location.host,"/recv/").concat(e);return l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:To.a.selectSendMethod},"请选择发送方式："),l.a.createElement("div",{className:To.a.sendMethod1},"1. 通过链接发送（对方打开链接即可下载文件）"),l.a.createElement("div",{className:To.a.recvLinkContainer},l.a.createElement("span",{className:To.a.recvLink},t),l.a.createElement(yr.a,{text:t,onCopy:function(){return ho.success("复制成功")}},l.a.createElement("span",{className:To.a.btnCopy},"复制"))),l.a.createElement("div",null,"2. 通过6位数取件码（对方在小鹿快传网站输入即可下载文件）"),l.a.createElement("div",{className:To.a.recvCodeContainer},l.a.createElement("span",{className:To.a.recvCode},e),l.a.createElement(yr.a,{text:e,onCopy:function(){return ho.success("复制成功")}},l.a.createElement("span",{className:To.a.btnCopy},"复制"))),l.a.createElement("div",null,"3. 扫描下方二维码："),l.a.createElement("div",{className:To.a.qrcodeContainer},l.a.createElement(Sr.a,{value:t})),l.a.createElement("div",{className:To.a.connectTips},"温馨提示：",l.a.createElement("br",null),"以上取件码在10分钟内有效，请尽快发送给对方 ",l.a.createElement("br",null),"对方输入取件码并确认之后会自动开始发送"),l.a.createElement(Dr,{type:"primary",className:To.a.btnWaitConnect,disabled:!0},"等待连接..."))}},{key:"renderStep3",value:function(){var e,t=this.props,n=t.curFileId,r=t.files,o=t.peerState,i=r.reduce((function(e,t){return e+t.size}),0),a=!0;r.forEach((function(e){e.pct<100&&(a=!1)})),a?e="继续发送":"connecting"===o?e="正在连接...":"connected"===o?e="连接成功":"transfer"===o?e="正在发送...(".concat(br()(this.bps||0),"/s)"):"disconnected"!==o&&"connectFailed"!==o||(e="连接断开，等待重连...");var c=!0;return a&&(c=!1),l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:To.a.sendingBox},l.a.createElement(yo,{files:r,curFileId:n})),l.a.createElement("div",{className:To.a.sendingSummary},l.a.createElement("div",null,r.length,"个文件，共",br()(i))),l.a.createElement(Dr,{type:"primary",className:To.a.btnSending,disabled:c,onClick:this.onReset},e))}},{key:"render",value:function(){var e=this.props,t=e.curStep,n=e.files;return l.a.createElement("div",{className:To.a.base},l.a.createElement("div",{className:To.a.titleRow},(1===t&&n.length>0||3===t)&&l.a.createElement("div",{className:To.a.back,onClick:this.onReset},"取消"),2===t&&l.a.createElement("div",{className:To.a.back,onClick:this.onClickBack},"返回"),l.a.createElement("div",{className:To.a.title},"发送文件")),l.a.createElement(Ar,null,l.a.createElement(Po,{index:1,title:"选择文件",active:1===t}),l.a.createElement(Po,{index:2,title:"收件码",active:2===t}),l.a.createElement(Po,{index:3,title:"发送",active:3===t})),1===t&&this.renderStep1(),2===t&&this.renderStep2(),3===t&&this.renderStep3(),l.a.createElement("input",{type:"file",hidden:!0,ref:this.inputRef,onChange:this.onChangeFile,multiple:!0}))}}]),t}(s.Component);function _o(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Oo=n(15),Ro=n.n(Oo),No=function(e){function t(){return _t(this,t),jt(this,It(t).apply(this,arguments))}return At(t,e),Rt(t,[{key:"render",value:function(){var e=this.props,t=e.error,n=e.containerClassName,r=e.inputClassName,o=e.type,i=e.value,a=e.readOnly,c=e.placeholder,s=e.autoComplete,u=e.autoFocus,f=e.autoCapitalize,d=e.onChange,p=e.onEnter,h=void 0===p?function(){}:p,m=e.onBlur,v=e.onFocus,y=e.onClick,g=_o(e,["error","containerClassName","inputClassName","type","value","readOnly","placeholder","autoComplete","autoFocus","autoCapitalize","onChange","onEnter","onBlur","onFocus","onClick"]);return l.a.createElement("div",{className:fr()(Ro.a.container,n)},l.a.createElement("div",{className:Ro.a.wrapper},l.a.createElement("input",Object.assign({className:fr()(Ro.a.input,r),type:o||"text",value:i||"",placeholder:c,autoComplete:s,readOnly:a,autoFocus:u,autoCapitalize:f,onChange:function(e){return d(e.target.value)},onKeyDown:function(e){return 13===e.keyCode&&h()},onBlur:m,onFocus:v,onClick:y},g))),!!t&&l.a.createElement("div",{className:Ro.a.error},l.a.createElement(kr,{name:"warning-circle",className:Ro.a.errorIcon}),t))}}]),t}(s.Component);No.defaultProps={label:null,error:null};var Do=No,Mo=n(6),jo=n.n(Mo);function Io(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Lo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Io(Object(n),!0).forEach((function(t){Xn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Io(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ao=Bn(function(e){function t(e){var n;return _t(this,t),(n=jt(this,It(t).call(this,e))).onChangeRecvCode=n.onChangeRecvCode.bind(Mt(n)),n.onPrepareRecv=n.onPrepareRecv.bind(Mt(n)),n.onStartRecv=n.onStartRecv.bind(Mt(n)),n.onReset=n.onReset.bind(Mt(n)),n.onRecvData=n.onRecvData.bind(Mt(n)),n.handleMsg=n.handleMsg.bind(Mt(n)),n.peer=new bo,n.recvBuffer=[],n.recvSizes={},n.bps=0,n.timer=setInterval((function(){var e=n.props.files.map((function(e){return Lo({},e,{pct:Eo(n.recvSizes[e.uid]||0,e.size)})}));n.props.setState({files:e}),n.bps=0}),1e3),n}return At(t,e),Rt(t,[{key:"componentDidMount",value:function(){var e=this.props.match.params.recvCode;e&&Co(e)}},{key:"componentWillUnMount",value:function(){clearInterval(this.timer)}},{key:"onChangeRecvCode",value:function(e){this.props.setState({recvCode:e})}},{key:"onPrepareRecv",value:function(){Co(this.props.recvCode)}},{key:"onReset",value:function(){this.peer.destroy(),this.props.setState({recvCode:"",peerState:"",started:!1,files:[],targetId:""})}},{key:"onStartRecv",value:function(){var e=this;console.log("start recv"),this.props.setState({started:!0});var t=this.peer;t.on("connecting",(function(){e.props.setState({peerState:"connecting"})})),t.on("connected",(function(){ho.success("连接成功"),e.props.setState({peerState:"connected"})})),t.on("disconnected",(function(){ho.error("连接已断开"),e.props.setState({peerState:"disconnected"})})),t.on("connectFailed",(function(){ho.error("连接失败，请重试"),e.props.setState({peerState:"connectFailed"})})),t.on("channelOpen",(function(){e.props.setState({peerState:"transfer"})})),t.on("data",this.onRecvData),t.connectPeer(this.props.targetId)}},{key:"onRecvData",value:function(e){var t=this.props.curFileId;if("string"==typeof e){var n=JSON.parse(e);this.handleMsg(n)}else{this.recvBuffer.push(e);var r=(this.recvSizes[t]||0)+e.byteLength;this.recvSizes[t]=r,this.bps+=e.byteLength}}},{key:"handleMsg",value:function(e){if("fileStart"===e.type)this.props.setState({curFileId:e.fileId});else if("fileEnd"===e.type){var t=e.fileId,n=new Blob(this.recvBuffer),r=window.URL.createObjectURL(n),o=this.props.files.map((function(e){return e.uid===t?Lo({},e,{downloadUrl:r}):e}));this.props.setState({files:o})}}},{key:"renderStep1",value:function(){var e=this.props.recvCode;return l.a.createElement(l.a.Fragment,null,l.a.createElement(Do,{placeholder:"请输入6位收件码",inputClassName:jo.a.input,value:e,onChange:this.onChangeRecvCode}),l.a.createElement(Dr,{type:"primary",className:jo.a.recvBtn,onClick:this.onPrepareRecv},"接收文件"),l.a.createElement("div",{className:jo.a.tip},l.a.createElement(kr,{name:"info"}),"如何获取收件码？"))}},{key:"renderStep2",value:function(){var e=this.props,t=e.peerState,n=e.started,r=e.curFileId,o=e.files,i=o.reduce((function(e,t){return e+t.size}),0),a=!0;o.forEach((function(e){e.downloadUrl||(a=!1)}));var c="开始下载";return a?c="继续接收":n?"disconnected"===t||"connectFailed"===t?c="重新下载":"connecting"===t?c="正在连接...":"connected"===t?c="连接成功":"transfer"===t&&(c="正在下载...(".concat(br()(this.bps),"/s)")):c="开始下载",l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:jo.a.msg1},"对方发送给您以下文件："),l.a.createElement(yo,{files:this.props.files,curFileId:r}),l.a.createElement("div",{className:jo.a.msg2},l.a.createElement("div",null,o.length," 个文件，共 ",br()(i))),l.a.createElement(Dr,{type:"primary",className:jo.a.recvBtn,disabled:n&&!a&&("connected"===t||"connecting"===t||"transfer"===t),onClick:a?this.onReset:this.onStartRecv},c))}},{key:"render",value:function(){var e=this.props.files;return l.a.createElement("div",{className:jo.a.base},l.a.createElement("div",{className:jo.a.titleRow},e.length>0&&l.a.createElement("div",{className:jo.a.cancel,onClick:this.onReset},"取消"),l.a.createElement("div",{className:jo.a.title},"接收文件")),0===e.length&&this.renderStep1(),e.length>0&&this.renderStep2())}}]),t}(s.Component)),zo=n(21),Fo=n.n(zo),Uo=function(e){function t(){return _t(this,t),jt(this,It(t).apply(this,arguments))}return At(t,e),Rt(t,[{key:"render",value:function(){return l.a.createElement("div",{className:Fo.a.base},l.a.createElement("div",{className:Fo.a.title},"联系我们"),l.a.createElement("div",null,l.a.createElement("img",{src:"/images/qrcode_wechat.jpg",alt:"qrcode-wechat"})),l.a.createElement("div",{className:Fo.a.tip},"请扫描上方二维码关注公众号，并给我们留言"))}}]),t}(s.Component),Bo=n(17),Wo=n.n(Bo);function Vo(e){var t=e.title,n=e.desc,r=e.icon;return l.a.createElement("div",{className:Wo.a.card},l.a.createElement("div",{className:Wo.a.title},r,l.a.createElement("span",{className:Wo.a.titleText},t)),l.a.createElement("div",{className:Wo.a.desc},n))}Vo.defaultProps={};var Go=Vo,Ho=n(8),$o=n.n(Ho);function qo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ko(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qo(Object(n),!0).forEach((function(t){Xn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Jo=function(e){function t(){var e;return _t(this,t),(e=jt(this,It(t).call(this))).state={send:{curStep:1,files:[],peerState:""},recv:{recvCode:"",peerState:"",started:!1,files:[],targetId:""}},e.setSendState=e.setSendState.bind(Mt(e)),e.setRecvState=e.setRecvState.bind(Mt(e)),e.onS2cPrepareSend=e.onS2cPrepareSend.bind(Mt(e)),e.onS2cPrepareRecv=e.onS2cPrepareRecv.bind(Mt(e)),e}return At(t,e),Rt(t,[{key:"onS2cPrepareSend",value:function(e){this.setSendState({recvCode:e.recvCode})}},{key:"onS2cPrepareRecv",value:function(e){this.setRecvState({targetId:e.clientId,files:e.files})}},{key:"componentDidMount",value:function(){lr.registerMessageHandler("s2c_prepare_send",this.onS2cPrepareSend),lr.registerMessageHandler("s2c_prepare_recv",this.onS2cPrepareRecv)}},{key:"setSendState",value:function(e){this.setState((function(t){return Ko({},t,{send:Ko({},t.send,{},e)})}))}},{key:"setRecvState",value:function(e){this.setState((function(t){return Ko({},t,{recv:Ko({},t.recv,{},e)})}))}},{key:"render",value:function(){return l.a.createElement("div",{className:$o.a.container},l.a.createElement(mr,null),l.a.createElement(jn,{exact:!0,path:"/"},l.a.createElement(On,{to:"/send"})),l.a.createElement("div",{className:$o.a.content},l.a.createElement(Un,null,l.a.createElement(jn,{path:"/send"},l.a.createElement(xo,Object.assign({},this.state.send,{setState:this.setSendState}))),l.a.createElement(jn,{path:"/recv/:recvCode?"},l.a.createElement(Ao,Object.assign({},this.state.recv,{setState:this.setRecvState}))),l.a.createElement(jn,{path:"/contact"},l.a.createElement(Uo,null))),l.a.createElement("div",{className:$o.a.cardsArea},l.a.createElement("div",{className:$o.a.cardRow},l.a.createElement(Go,{title:"简单",icon:l.a.createElement(kr,{name:"simple",className:$o.a.iconSimple}),desc:"无需登录只需要选择好想要发送的文件，然后将生成的下载链接发送给对方即可开始传送"}),l.a.createElement(Go,{title:"安全",icon:l.a.createElement(kr,{name:"secure",className:$o.a.iconSecure}),desc:"小鹿快传使用P2P技术，文件数据不走服务器，直接发送给对方，且数据自带加密，免去隐私被泄漏的风险。"})),l.a.createElement("div",{className:$o.a.cardRow},l.a.createElement(Go,{title:"高效",icon:l.a.createElement(kr,{name:"speed",className:$o.a.iconSpeed}),desc:"由于使用P2P技术，文件传输速度不会受到服务器性能的影响，完全取决于你和对方的网速。"}),l.a.createElement(Go,{title:"专业",icon:l.a.createElement(kr,{name:"check-fill",className:$o.a.iconCheck}),desc:"不限制文件类型，任何文件都可随心传输。所有文件都是原文件传输，传视频图片不损失画质。"})))))}}]),t}(l.a.Component);Jo.defaultProps={};var Qo=Jo,Xo=(n(62),n(63),function(e){function t(){return _t(this,t),jt(this,It(t).apply(this,arguments))}return At(t,e),Rt(t,[{key:"render",value:function(){return l.a.createElement(Wn,null,l.a.createElement(Un,null,l.a.createElement(jn,{path:"/"},l.a.createElement(Qo,null))))}}]),t}(l.a.Component));var Yo=Ct((function(e){return{user:e.user}}),{})(Xo);function Zo(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var ei=Zo();ei.withExtraArgument=Zo;var ti=ei,ni=n(20),ri="UPDATE_SEND_FILE_INFO",oi="UPDATE_RECV_FILE_INFO",ii={recvCode:""},ai=Object(ni.a)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ii,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case ri:e.recvCode=t.payload.recvCode}return e})),ci={targetId:"",files:[]},si=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:We.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:We.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+We.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},c=0;c<a.length;c++){var s=a[c],l=n[s],u=e[s],f=l(u,t);if(void 0===f){var d=He(s,t);throw new Error(d)}o[s]=f,r=r||f!==u}return r?o:e}}({sendFile:ai,recvFile:Object(ni.a)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ci,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case oi:e.targetId=t.payload.clientId,e.files=t.payload.files}return e}))}),li=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||Qe;var ui,fi,di=(fi=[ti],Ge(si,ui,li(Xe.apply(void 0,fi))));di.dispatch,lr.registerMessageHandler("s2c_error",(function(e){ho.error(e.message)})),f.a.render(l.a.createElement(Se,{store:di},l.a.createElement(Yo,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,