!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=105)}([function(e,t,n){"use strict";e.exports=n(68)},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"d",(function(){return c})),n.d(t,"g",(function(){return s})),n.d(t,"e",(function(){return u})),n.d(t,"f",(function(){return l}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function a(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function c(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(a,c)}s((r=r.apply(e,t||[])).next())}))}function c(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function s(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function l(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}},function(e,t,n){e.exports=n(72)()},function(e,t,n){e.exports={base:"_3xR6yF","title-row":"_1Rgz2l",titleRow:"_1Rgz2l",title:"_1xgR1v",back:"_16cJdu","upload-area":"_3Z-yfm",uploadArea:"_3Z-yfm","drag-active":"_29put-",dragActive:"_29put-","recv-guide":"_1XnDvl",recvGuide:"_1XnDvl","icon-plus-wrapper":"_2ObPGq",iconPlusWrapper:"_2ObPGq","icon-plus":"_3Bexjs",iconPlus:"_3Bexjs","upload-tip":"_1FRSSP",uploadTip:"_1FRSSP","upload-btn":"Ua8o6l",uploadBtn:"Ua8o6l",link:"IL_5aL","upload-more":"_31-MJ1",uploadMore:"_31-MJ1","add-more":"_2OVRj9",addMore:"_2OVRj9","file-summary":"_3TiMmv",fileSummary:"_3TiMmv","btn-select-file-done":"_3zjNNo",btnSelectFileDone:"_3zjNNo","select-send-method":"_3d5TSD",selectSendMethod:"_3d5TSD","recv-link-container":"_19gixB",recvLinkContainer:"_19gixB","recv-code-container":"_2qcrGl",recvCodeContainer:"_2qcrGl","recv-link":"_2Zoggo",recvLink:"_2Zoggo","recv-code":"_1SuOe4",recvCode:"_1SuOe4","btn-copy":"_20RtoV",btnCopy:"_20RtoV","qrcode-container":"_1L_XZ-",qrcodeContainer:"_1L_XZ-","recv-qrcode":"_1IkS0W",recvQrcode:"_1IkS0W","connect-tips":"_3dHOOW",connectTips:"_3dHOOW","btn-wait-connect":"_3kSmAG",btnWaitConnect:"_3kSmAG","sending-box":"lbn5Xj",sendingBox:"lbn5Xj","sending-summary":"PJ7cTz",sendingSummary:"PJ7cTz","peer-connected":"nkT-WI",peerConnected:"nkT-WI","peer-not-connected":"_5ew-iS",peerNotConnected:"_5ew-iS","btn-sending":"_2_x9HQ",btnSending:"_2_x9HQ"}},function(e,t,n){"use strict";(function(e,r){n.d(t,"d",(function(){return i})),n.d(t,"j",(function(){return a})),n.d(t,"g",(function(){return s})),n.d(t,"n",(function(){return u})),n.d(t,"l",(function(){return l})),n.d(t,"e",(function(){return f})),n.d(t,"c",(function(){return p})),n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h})),n.d(t,"h",(function(){return m})),n.d(t,"i",(function(){return v})),n.d(t,"m",(function(){return g})),n.d(t,"k",(function(){return w})),n.d(t,"f",(function(){return S}));var o=n(8);n(20);function i(e,t){return e.require(t)}function a(){return"[object process]"===Object.prototype.toString.call(void 0!==e?e:0)}var c={};function s(){return a()?r:"undefined"!=typeof window?window:"undefined"!=typeof self?self:c}function u(){var e=s(),t=e.crypto||e.msCrypto;if(void 0!==t&&t.getRandomValues){var n=new Uint16Array(8);t.getRandomValues(n),n[3]=4095&n[3]|16384,n[4]=16383&n[4]|32768;var r=function(e){for(var t=e.toString(16);t.length<4;)t="0"+t;return t};return r(n[0])+r(n[1])+r(n[2])+r(n[3])+r(n[4])+r(n[5])+r(n[6])+r(n[7])}return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}function l(e){if(!e)return{};var t=e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};var n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],relative:t[5]+n+r}}function f(e){if(e.message)return e.message;if(e.exception&&e.exception.values&&e.exception.values[0]){var t=e.exception.values[0];return t.type&&t.value?t.type+": "+t.value:t.type||t.value||e.event_id||"<unknown>"}return e.event_id||"<unknown>"}function p(e){var t=s();if(!("console"in t))return e();var n=t.console,r={};["debug","info","warn","error","log","assert"].forEach((function(e){e in t.console&&n[e].__sentry_original__&&(r[e]=n[e],n[e]=n[e].__sentry_original__)}));var o=e();return Object.keys(r).forEach((function(e){n[e]=r[e]})),o}function d(e,t,n){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].value=e.exception.values[0].value||t||"",e.exception.values[0].type=e.exception.values[0].type||n||"Error"}function h(e,t){void 0===t&&(t={});try{e.exception.values[0].mechanism=e.exception.values[0].mechanism||{},Object.keys(t).forEach((function(n){e.exception.values[0].mechanism[n]=t[n]}))}catch(e){}}function m(){try{return document.location.href}catch(e){return""}}function v(e){try{for(var t=e,n=[],r=0,o=0,i=" > ".length,a=void 0;t&&r++<5&&!("html"===(a=y(t))||r>1&&o+n.length*i+a.length>=80);)n.push(a),o+=a.length,t=t.parentNode;return n.reverse().join(" > ")}catch(e){return"<unknown>"}}function y(e){var t,n,r,i,a,c=e,s=[];if(!c||!c.tagName)return"";if(s.push(c.tagName.toLowerCase()),c.id&&s.push("#"+c.id),(t=c.className)&&Object(o.k)(t))for(n=t.split(/\s+/),a=0;a<n.length;a++)s.push("."+n[a]);var u=["type","name","title","alt"];for(a=0;a<u.length;a++)r=u[a],(i=c.getAttribute(r))&&s.push("["+r+'="'+i+'"]');return s.join("")}function g(){return(new Date).getTime()/1e3}var b=6e4;function w(e,t){if(!t)return b;var n=parseInt(""+t,10);if(!isNaN(n))return 1e3*n;var r=Date.parse(""+t);return isNaN(r)?b:r-e}var E="<anonymous>";function S(e){try{return e&&"function"==typeof e&&e.name||E}catch(e){return E}}}).call(this,n(36),n(30))},,function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return c})),n.d(t,"e",(function(){return s})),n.d(t,"d",(function(){return f})),n.d(t,"c",(function(){return h})),n.d(t,"a",(function(){return m}));var r=n(8),o=n(64),i=n(4),a=n(20);function c(e,t,n){if(t in e){var r=e[t],o=n(r);if("function"==typeof o)try{o.prototype=o.prototype||{},Object.defineProperties(o,{__sentry_original__:{enumerable:!1,value:r}})}catch(e){}e[t]=o}}function s(e){return Object.keys(e).map((function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])})).join("&")}function u(e){if(Object(r.d)(e)){var t=e,n={message:t.message,name:t.name,stack:t.stack};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}if(Object(r.f)(e)){var a=e,c={};c.type=a.type;try{c.target=Object(r.c)(a.target)?Object(i.i)(a.target):Object.prototype.toString.call(a.target)}catch(e){c.target="<unknown>"}try{c.currentTarget=Object(r.c)(a.currentTarget)?Object(i.i)(a.currentTarget):Object.prototype.toString.call(a.currentTarget)}catch(e){c.currentTarget="<unknown>"}for(var o in"undefined"!=typeof CustomEvent&&Object(r.g)(e,CustomEvent)&&(c.detail=a.detail),a)Object.prototype.hasOwnProperty.call(a,o)&&(c[o]=a);return c}return e}function l(e){return function(e){return~-encodeURI(e).split(/%..|./).length}(JSON.stringify(e))}function f(e,t,n){void 0===t&&(t=3),void 0===n&&(n=102400);var r=h(e,t);return l(r)>n?f(e,t-1,n):r}function p(t,n){return"domain"===n&&t&&"object"==typeof t&&t._events?"[Domain]":"domainEmitter"===n?"[DomainEmitter]":void 0!==e&&t===e?"[Global]":"undefined"!=typeof window&&t===window?"[Window]":"undefined"!=typeof document&&t===document?"[Document]":Object(r.l)(t)?"[SyntheticEvent]":"number"==typeof t&&t!=t?"[NaN]":void 0===t?"[undefined]":"function"==typeof t?"[Function: "+Object(i.f)(t)+"]":t}function d(e,t,n,i){if(void 0===n&&(n=1/0),void 0===i&&(i=new o.a),0===n)return function(e){var t=Object.prototype.toString.call(e);if("string"==typeof e)return e;if("[object Object]"===t)return"[Object]";if("[object Array]"===t)return"[Array]";var n=p(e);return Object(r.i)(n)?n:t}(t);if(null!=t&&"function"==typeof t.toJSON)return t.toJSON();var a=p(t,e);if(Object(r.i)(a))return a;var c=u(t),s=Array.isArray(t)?[]:{};if(i.memoize(t))return"[Circular ~]";for(var l in c)Object.prototype.hasOwnProperty.call(c,l)&&(s[l]=d(l,c[l],n-1,i));return i.unmemoize(t),s}function h(e,t){try{return JSON.parse(JSON.stringify(e,(function(e,n){return d(e,n,t)})))}catch(e){return"**non-serializable**"}}function m(e,t){void 0===t&&(t=40);var n=Object.keys(u(e));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=t)return Object(a.d)(n[0],t);for(var r=n.length;r>0;r--){var o=n.slice(0,r).join(", ");if(!(o.length>t))return r===n.length?o:Object(a.d)(o,t)}return""}}).call(this,n(30))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var c in r)n.call(r,c)&&r[c]&&e.push(c)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";function r(e){switch(Object.prototype.toString.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return m(e,Error)}}function o(e){return"[object ErrorEvent]"===Object.prototype.toString.call(e)}function i(e){return"[object DOMError]"===Object.prototype.toString.call(e)}function a(e){return"[object DOMException]"===Object.prototype.toString.call(e)}function c(e){return"[object String]"===Object.prototype.toString.call(e)}function s(e){return null===e||"object"!=typeof e&&"function"!=typeof e}function u(e){return"[object Object]"===Object.prototype.toString.call(e)}function l(e){return"undefined"!=typeof Event&&m(e,Event)}function f(e){return"undefined"!=typeof Element&&m(e,Element)}function p(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function d(e){return Boolean(e&&e.then&&"function"==typeof e.then)}function h(e){return u(e)&&"nativeEvent"in e&&"preventDefault"in e&&"stopPropagation"in e}function m(e,t){try{return e instanceof t}catch(e){return!1}}n.d(t,"d",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"k",(function(){return c})),n.d(t,"i",(function(){return s})),n.d(t,"h",(function(){return u})),n.d(t,"f",(function(){return l})),n.d(t,"c",(function(){return f})),n.d(t,"j",(function(){return p})),n.d(t,"m",(function(){return d})),n.d(t,"l",(function(){return h})),n.d(t,"g",(function(){return m}))},function(e,t,n){"use strict";var r=n(47),o=n(88),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function c(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===i.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:s,isStream:function(e){return c(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports={container:"_1qOzqf","file-row":"_3aoE0Y",fileRow:"_3aoE0Y",left:"_3xLTNB","file-icon":"_19-z7S",fileIcon:"_19-z7S","file-info":"_1HRqi1",fileInfo:"_1HRqi1","file-name":"adZEgA",fileName:"adZEgA","file-size":"VqVjWq",fileSize:"VqVjWq","close-icon":"_3x3TWQ",closeIcon:"_3x3TWQ",waiting:"_1LnFOT",download:"_2WJStE",completed:"_1u9qTB"}},function(e,t,n){e.exports={base:"_1nK53-",logo:"_3jtTy3",slogan:"ay1eIM",menus:"_3bzYjy",menu:"_1nX2tW",active:"_1x8lgF"}},function(e,t,n){e.exports={base:"_8bl-qe","title-row":"_3AsA1Y",titleRow:"_3AsA1Y",title:"MQm7zy",cancel:"_2Mx9a4",input:"_2iTtOQ","recv-btn":"_3WTb49",recvBtn:"_3WTb49",tip:"zqMaDg",msg1:"_3DmJej",msg2:"uBaZ2I","peer-connected":"iVIWn9",peerConnected:"iVIWn9","peer-not-connected":"_2eFt-R",peerNotConnected:"_2eFt-R"}},function(e,t,n){e.exports=n(75)},function(e,t,n){e.exports={container:"_2LUsdD",content:"_2KMkak","cards-area":"IScM0S",cardsArea:"IScM0S","card-row":"_22OOXg",cardRow:"_22OOXg","icon-simple":"_2ekLXR",iconSimple:"_2ekLXR","icon-secure":"_1fZxby",iconSecure:"_1fZxby","icon-speed":"_3jTGm8",iconSpeed:"_3jTGm8","icon-check":"_30NGwS",iconCheck:"_30NGwS"}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,c){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,c],l=0;(s=new Error(t.replace(/%s/g,(function(){return u[l++]})))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";const r=["B","kB","MB","GB","TB","PB","EB","ZB","YB"],o=["b","kbit","Mbit","Gbit","Tbit","Pbit","Ebit","Zbit","Ybit"],i=(e,t)=>{let n=e;return"string"==typeof t?n=e.toLocaleString(t):!0===t&&(n=e.toLocaleString()),n};e.exports=(e,t)=>{if(!Number.isFinite(e))throw new TypeError(`Expected a finite number, got ${typeof e}: ${e}`);const n=(t=Object.assign({bits:!1},t)).bits?o:r;if(t.signed&&0===e)return" 0 "+n[0];const a=e<0,c=a?"-":t.signed?"+":"";if(a&&(e=-e),e<1){return c+i(e,t.locale)+" "+n[0]}const s=Math.min(Math.floor(Math.log10(e)/3),n.length-1);return e=Number((e/Math.pow(1e3,s)).toPrecision(3)),c+i(e,t.locale)+" "+n[s]}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(69)},function(e,t,n){e.exports={steps:"_1zbcCu",step:"_2LELqN",title:"_2mAZEj",active:"_3TvyYS","index-wrapper":"_3bz5_s",indexWrapper:"_3bz5_s",index:"_3bZhAh"}},function(e,t,n){e.exports={container:"_3Xq0PF",toast:"_1zkGIF","icon-wrapper":"NfC2Sl",iconWrapper:"NfC2Sl",success:"_1JTff1",error:"_3hnrua",info:"_22hyiO",content:"HtHZPh"}},function(e,t,n){"use strict";n.d(t,"d",(function(){return o})),n.d(t,"c",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return c}));var r=n(8);function o(e,t){return void 0===t&&(t=0),"string"!=typeof e||0===t?e:e.length<=t?e:e.substr(0,t)+"..."}function i(e,t){var n=e,r=n.length;if(r<=150)return n;t>r&&(t=r);var o=Math.max(t-60,0);o<5&&(o=0);var i=Math.min(o+140,r);return i>r-5&&(i=r),i===r&&(o=Math.max(i-140,0)),n=n.slice(o,i),o>0&&(n="'{snip} "+n),i<r&&(n+=" {snip}"),n}function a(e,t){if(!Array.isArray(e))return"";for(var n=[],r=0;r<e.length;r++){var o=e[r];try{n.push(String(o))}catch(e){n.push("[value cannot be serialized]")}}return n.join(t)}function c(e,t){return Object(r.j)(t)?t.test(e):"string"==typeof t&&-1!==e.indexOf(t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),o=Object(r.g)(),i="Sentry Logger ",a=function(){function e(){this._enabled=!1}return e.prototype.disable=function(){this._enabled=!1},e.prototype.enable=function(){this._enabled=!0},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(r.c)((function(){o.console.log(i+"[Log]: "+e.join(" "))}))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(r.c)((function(){o.console.warn(i+"[Warn]: "+e.join(" "))}))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(r.c)((function(){o.console.error(i+"[Error]: "+e.join(" "))}))},e}();o.__SENTRY__=o.__SENTRY__||{};var c=o.__SENTRY__.logger||(o.__SENTRY__.logger=new a)},function(e,t,n){e.exports={base:"_3FHORl",title:"_1YW-mE",input:"ToSpzV",textarea:"_1Q8uUd",btn:"dgspjT",tips:"_3UKauA"}},function(e,t,n){"use strict";var r={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};r.localCName=r.generateIdentifier(),r.splitLines=function(e){return e.trim().split("\n").map((function(e){return e.trim()}))},r.splitSections=function(e){return e.split("\nm=").map((function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"}))},r.getDescription=function(e){var t=r.splitSections(e);return t&&t[0]},r.getMediaSections=function(e){var t=r.splitSections(e);return t.shift(),t},r.matchPrefix=function(e,t){return r.splitLines(e).filter((function(e){return 0===e.indexOf(t)}))},r.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]=t[r+1]}return n},r.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")},r.parseIceOptions=function(e){return e.substr(14).split(" ")},r.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=3===t.length?parseInt(t[2],10):1,n.numChannels=n.channels,n},r.writeRtpMap=function(e){var t=e.payloadType;void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType);var n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==n?"/"+n:"")+"\r\n"},r.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},r.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},r.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),o=0;o<r.length;o++)n[(t=r[o].trim().split("="))[0].trim()]=t[1];return n},r.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach((function(t){e.parameters[t]?r.push(t+"="+e.parameters[t]):r.push(t)})),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},r.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},r.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach((function(e){t+="a=rtcp-fb:"+n+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"})),t},r.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},r.parseSsrcGroup=function(e){var t=e.substr(13).split(" ");return{semantics:t.shift(),ssrcs:t.map((function(e){return parseInt(e,10)}))}},r.getMid=function(e){var t=r.matchPrefix(e,"a=mid:")[0];if(t)return t.substr(6)},r.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},r.getDtlsParameters=function(e,t){return{role:"auto",fingerprints:r.matchPrefix(e+t,"a=fingerprint:").map(r.parseFingerprint)}},r.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach((function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"})),n},r.getIceParameters=function(e,t){var n=r.splitLines(e);return{usernameFragment:(n=n.concat(r.splitLines(t))).filter((function(e){return 0===e.indexOf("a=ice-ufrag:")}))[0].substr(12),password:n.filter((function(e){return 0===e.indexOf("a=ice-pwd:")}))[0].substr(10)}},r.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},r.parseRtpParameters=function(e){for(var t={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},n=r.splitLines(e)[0].split(" "),o=3;o<n.length;o++){var i=n[o],a=r.matchPrefix(e,"a=rtpmap:"+i+" ")[0];if(a){var c=r.parseRtpMap(a),s=r.matchPrefix(e,"a=fmtp:"+i+" ");switch(c.parameters=s.length?r.parseFmtp(s[0]):{},c.rtcpFeedback=r.matchPrefix(e,"a=rtcp-fb:"+i+" ").map(r.parseRtcpFb),t.codecs.push(c),c.name.toUpperCase()){case"RED":case"ULPFEC":t.fecMechanisms.push(c.name.toUpperCase())}}}return r.matchPrefix(e,"a=extmap:").forEach((function(e){t.headerExtensions.push(r.parseExtmap(e))})),t},r.writeRtpDescription=function(e,t){var n="";n+="m="+e+" ",n+=t.codecs.length>0?"9":"0",n+=" UDP/TLS/RTP/SAVPF ",n+=t.codecs.map((function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType})).join(" ")+"\r\n",n+="c=IN IP4 0.0.0.0\r\n",n+="a=rtcp:9 IN IP4 0.0.0.0\r\n",t.codecs.forEach((function(e){n+=r.writeRtpMap(e),n+=r.writeFmtp(e),n+=r.writeRtcpFb(e)}));var o=0;return t.codecs.forEach((function(e){e.maxptime>o&&(o=e.maxptime)})),o>0&&(n+="a=maxptime:"+o+"\r\n"),n+="a=rtcp-mux\r\n",t.headerExtensions&&t.headerExtensions.forEach((function(e){n+=r.writeExtmap(e)})),n},r.parseRtpEncodingParameters=function(e){var t,n=[],o=r.parseRtpParameters(e),i=-1!==o.fecMechanisms.indexOf("RED"),a=-1!==o.fecMechanisms.indexOf("ULPFEC"),c=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute})),s=c.length>0&&c[0].ssrc,u=r.matchPrefix(e,"a=ssrc-group:FID").map((function(e){return e.substr(17).split(" ").map((function(e){return parseInt(e,10)}))}));u.length>0&&u[0].length>1&&u[0][0]===s&&(t=u[0][1]),o.codecs.forEach((function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var r={ssrc:s,codecPayloadType:parseInt(e.parameters.apt,10)};s&&t&&(r.rtx={ssrc:t}),n.push(r),i&&((r=JSON.parse(JSON.stringify(r))).fec={ssrc:s,mechanism:a?"red+ulpfec":"red"},n.push(r))}})),0===n.length&&s&&n.push({ssrc:s});var l=r.matchPrefix(e,"b=");return l.length&&(l=0===l[0].indexOf("b=TIAS:")?parseInt(l[0].substr(7),10):0===l[0].indexOf("b=AS:")?1e3*parseInt(l[0].substr(5),10)*.95-16e3:void 0,n.forEach((function(e){e.maxBitrate=l}))),n},r.parseRtcpParameters=function(e){var t={},n=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute}))[0];n&&(t.cname=n.value,t.ssrc=n.ssrc);var o=r.matchPrefix(e,"a=rtcp-rsize");t.reducedSize=o.length>0,t.compound=0===o.length;var i=r.matchPrefix(e,"a=rtcp-mux");return t.mux=i.length>0,t},r.parseMsid=function(e){var t,n=r.matchPrefix(e,"a=msid:");if(1===n.length)return{stream:(t=n[0].substr(7).split(" "))[0],track:t[1]};var o=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"msid"===e.attribute}));return o.length>0?{stream:(t=o[0].value.split(" "))[0],track:t[1]}:void 0},r.parseSctpDescription=function(e){var t,n=r.parseMLine(e),o=r.matchPrefix(e,"a=max-message-size:");o.length>0&&(t=parseInt(o[0].substr(19),10)),isNaN(t)&&(t=65536);var i=r.matchPrefix(e,"a=sctp-port:");if(i.length>0)return{port:parseInt(i[0].substr(12),10),protocol:n.fmt,maxMessageSize:t};if(r.matchPrefix(e,"a=sctpmap:").length>0){var a=r.matchPrefix(e,"a=sctpmap:")[0].substr(10).split(" ");return{port:parseInt(a[0],10),protocol:a[1],maxMessageSize:t}}},r.writeSctpDescription=function(e,t){var n=[];return n="DTLS/SCTP"!==e.protocol?["m="+e.kind+" 9 "+e.protocol+" "+t.protocol+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctp-port:"+t.port+"\r\n"]:["m="+e.kind+" 9 "+e.protocol+" "+t.port+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctpmap:"+t.port+" "+t.protocol+" 65535\r\n"],void 0!==t.maxMessageSize&&n.push("a=max-message-size:"+t.maxMessageSize+"\r\n"),n.join("")},r.generateSessionId=function(){return Math.random().toString().substr(2,21)},r.writeSessionBoilerplate=function(e,t,n){var o=void 0!==t?t:2;return"v=0\r\no="+(n||"thisisadapterortc")+" "+(e||r.generateSessionId())+" "+o+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},r.writeMediaSection=function(e,t,n,o){var i=r.writeRtpDescription(e.kind,t);if(i+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),i+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":"active"),i+="a=mid:"+e.mid+"\r\n",e.direction?i+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?i+="a=sendrecv\r\n":e.rtpSender?i+="a=sendonly\r\n":e.rtpReceiver?i+="a=recvonly\r\n":i+="a=inactive\r\n",e.rtpSender){var a="msid:"+o.id+" "+e.rtpSender.track.id+"\r\n";i+="a="+a,i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+a,e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+a,i+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),i},r.getDirection=function(e,t){for(var n=r.splitLines(e),o=0;o<n.length;o++)switch(n[o]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return n[o].substr(2)}return t?r.getDirection(t):"sendrecv"},r.getKind=function(e){return r.splitLines(e)[0].split(" ")[0].substr(2)},r.isRejected=function(e){return"0"===e.split(" ",2)[1]},r.parseMLine=function(e){var t=r.splitLines(e)[0].substr(2).split(" ");return{kind:t[0],port:parseInt(t[1],10),protocol:t[2],fmt:t.slice(3).join(" ")}},r.parseOLine=function(e){var t=r.matchPrefix(e,"o=")[0].substr(2).split(" ");return{username:t[0],sessionId:t[1],sessionVersion:parseInt(t[2],10),netType:t[3],addressType:t[4],address:t[5]}},r.isValidSDP=function(e){if("string"!=typeof e||0===e.length)return!1;for(var t=r.splitLines(e),n=0;n<t.length;n++)if(t[n].length<2||"="!==t[n].charAt(1))return!1;return!0},e.exports=r},function(e,t,n){e.exports={container:"_2NI-Bu",wrapper:"_38jnea",input:"_1ItMl6","error-icon":"_2_bPxy",errorIcon:"_2_bPxy",error:"gCi4nG"}},,function(e,t,n){"use strict";var r=n(31),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function s(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var u=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var c=s(t),m=s(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||c&&c[y])){var g=p(n,y);try{u(t,y,g)}catch(e){}}}}return t}},function(e,t,n){e.exports={card:"_13zwq3",title:"O7Bq1A","title-text":"BCfR8x",titleText:"BCfR8x",desc:"_1-uRnm"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r,o=n(8);!function(e){e.PENDING="PENDING",e.RESOLVED="RESOLVED",e.REJECTED="REJECTED"}(r||(r={}));var i=function(){function e(e){var t=this;this._state=r.PENDING,this._handlers=[],this._resolve=function(e){t._setResult(r.RESOLVED,e)},this._reject=function(e){t._setResult(r.REJECTED,e)},this._setResult=function(e,n){t._state===r.PENDING&&(Object(o.m)(n)?n.then(t._resolve,t._reject):(t._state=e,t._value=n,t._executeHandlers()))},this._attachHandler=function(e){t._handlers=t._handlers.concat(e),t._executeHandlers()},this._executeHandlers=function(){t._state!==r.PENDING&&(t._state===r.REJECTED?t._handlers.forEach((function(e){e.onrejected&&e.onrejected(t._value)})):t._handlers.forEach((function(e){e.onfulfilled&&e.onfulfilled(t._value)})),t._handlers=[])};try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}return e.prototype.toString=function(){return"[object SyncPromise]"},e.resolve=function(t){return new e((function(e){e(t)}))},e.reject=function(t){return new e((function(e,n){n(t)}))},e.all=function(t){return new e((function(n,r){if(Array.isArray(t))if(0!==t.length){var o=t.length,i=[];t.forEach((function(t,a){e.resolve(t).then((function(e){i[a]=e,0===(o-=1)&&n(i)})).then(null,r)}))}else n([]);else r(new TypeError("Promise.all requires an array as input."))}))},e.prototype.then=function(t,n){var r=this;return new e((function(e,o){r._attachHandler({onfulfilled:function(n){if(t)try{return void e(t(n))}catch(e){return void o(e)}else e(n)},onrejected:function(t){if(n)try{return void e(n(t))}catch(e){return void o(e)}else o(t)}})}))},e.prototype.catch=function(e){return this.then((function(e){return e}),e)},e.prototype.finally=function(t){var n=this;return new e((function(e,r){var o,i;return n.then((function(e){i=!1,o=e,t&&t()}),(function(e){i=!0,o=e,t&&t()})).then((function(){i?r(o):e(o)}))}))},e}()},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(74)},function(e,t,n){var r=n(80),o=n(81);e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var c=0;c<16;++c)t[i+c]=a[c];return t||o(a)}},function(e,t,n){"use strict";(function(e){var n,r="undefined"!=typeof Symbol?Symbol("immer-nothing"):((n={})["immer-nothing"]=!0,n),o="undefined"!=typeof Symbol&&Symbol.for?Symbol.for("immer-draftable"):"__$immer_draftable",i="undefined"!=typeof Symbol&&Symbol.for?Symbol.for("immer-state"):"__$immer_state";function a(e){return!!e&&!!e[i]}function c(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e))return!0;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||!!e[o]||!!e.constructor[o]||b(e)||E(e))}function s(e){if(e&&e[i])return e[i].base}var u=Object.assign||function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return t.forEach((function(t){return Object.keys(t).forEach((function(n){return e[n]=t[n]}))})),e},l="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function f(e,t){if(void 0===t&&(t=!1),Array.isArray(e))return e.slice();if(b(e))return new Map(e);if(E(e))return new Set(e);var n=Object.create(Object.getPrototypeOf(e));return l(e).forEach((function(r){if(r!==i){var o=Object.getOwnPropertyDescriptor(e,r),a=o.value;if(o.get){if(!t)throw new Error("Immer drafts cannot have computed properties");a=o.get.call(e)}o.enumerable?n[r]=a:Object.defineProperty(n,r,{value:a,writable:!0,configurable:!0})}})),n}function p(e,t){Array.isArray(e)||b(e)||E(e)?e.forEach((function(n,r){return t(r,n,e)})):l(e).forEach((function(n){return t(n,e[n],e)}))}function d(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!!n&&n.enumerable}function h(e,t){return b(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function m(e,t){return b(e)?e.get(t):e[t]}function v(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}var y="undefined"!=typeof Symbol,g="undefined"!=typeof Map;function b(e){return g&&e instanceof Map}var w="undefined"!=typeof Set;function E(e){return w&&e instanceof Set}function S(e){var t,n;return(t={})[Symbol.iterator]=function(){return n},t.next=e,n=t}function _(e,t,n){var r="values"!==t;return function(){var t=k(e)[Symbol.iterator]();return S((function(){var e=t.next();if(!e.done){var o=e.value[0],i=n.get(o);e.value=r?[o,i]:i}return e}))}}function C(e){return function(t,n){var r="entries"===n;return function(){var n=k(t)[Symbol.iterator]();return S((function(){var o=n.next();if(!o.done){var i=function(t,n){var r=s(n)||n,o=t.drafts.get(r);if(!o){if(t.finalized||!c(n)||t.finalizing)return n;o=e(n,t),t.drafts.set(r,o),t.modified&&t.copy.add(o)}return o}(t,o.value);o.value=r?[i,i]:i}return o}))}}}function k(e){return e.copy||e.base}function x(e){if(!c(e))return e;if(Array.isArray(e))return e.map(x);if(b(e))return new Map(e);if(E(e))return new Set(e);var t=Object.create(Object.getPrototypeOf(e));for(var n in e)t[n]=x(e[n]);return t}function T(e,t){void 0===t&&(t=!1),!c(e)||a(e)||Object.isFrozen(e)||(E(e)?e.add=e.clear=e.delete=O:b(e)&&(e.set=e.clear=e.delete=O),Object.freeze(e),t&&p(e,(function(e,t){return T(t,!0)})))}function O(){throw new Error("This object has been frozen and should not be mutated")}var P=function(e){this.drafts=[],this.parent=e,this.canAutoFreeze=!0,this.patches=null};function R(e){e[i].revoke()}function j(e,t){var n,r=Array.isArray(e),o=A(e);b(e)?(n=o,Object.defineProperties(n,z),y&&Object.defineProperty(n,Symbol.iterator,q(_))):E(e)?function(e){Object.defineProperties(e,B),y&&Object.defineProperty(e,Symbol.iterator,q(U))}(o):p(o,(function(t){!function(e,t,n){var r=F[t];r?r.enumerable=n:F[t]=r={configurable:!0,enumerable:n,get:function(){return function(e,t){G(e);var n=I(N(e),t);if(e.finalizing)return n;if(n===I(e.base,t)&&c(n))return L(e),e.copy[t]=j(n,e);return n}(this[i],t)},set:function(e){!function(e,t,n){if(G(e),e.assigned[t]=!0,!e.modified){if(v(n,I(N(e),t)))return;M(e),L(e)}e.copy[t]=n}(this[i],t,e)}};Object.defineProperty(e,t,r)}(o,t,r||d(e,t))}));var a=t?t.scope:P.current,s={scope:a,modified:!1,finalizing:!1,finalized:!1,assigned:b(e)?new Map:{},parent:t,base:e,draft:o,drafts:E(e)?new Map:null,copy:null,revoke:D,revoked:!1};return function(e,t,n){Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0})}(o,i,s),a.drafts.push(o),o}function D(){this.revoked=!0}function N(e){return e.copy||e.base}function I(e,t){var n=e[i];if(n&&!n.finalizing){n.finalizing=!0;var r=e[t];return n.finalizing=!1,r}return e[t]}function M(e){e.modified||(e.modified=!0,e.parent&&M(e.parent))}function L(e){e.copy||(e.copy=A(e.base))}function A(e){var t=e&&e[i];if(t){t.finalizing=!0;var n=f(t.draft,!0);return t.finalizing=!1,n}return f(e)}P.prototype.usePatches=function(e){e&&(this.patches=[],this.inversePatches=[],this.patchListener=e)},P.prototype.revoke=function(){this.leave(),this.drafts.forEach(R),this.drafts=null},P.prototype.leave=function(){this===P.current&&(P.current=this.parent)},P.current=null,P.enter=function(){return this.current=new P(this.current)};var F={};var z=H({size:function(e){return N(e).size},has:function(e){return function(t){return N(e).has(t)}},set:function(e){return function(t,n){return N(e).get(t)!==n&&(L(e),M(e),e.assigned.set(t,!0),e.copy.set(t,n)),e.draft}},delete:function(e){return function(t){return L(e),M(e),e.assigned.set(t,!1),e.copy.delete(t),!1}},clear:function(e){return function(){e.copy||L(e),M(e),e.assigned=new Map;for(var t=0,n=N(e).keys();t<n.length;t+=1){var r=n[t];e.assigned.set(r,!1)}return e.copy.clear()}},forEach:function(e,t,n){return function(t){N(e).forEach((function(e,r,o){t(n.get(r),r,o)}))}},get:function(e){return function(t){var n=N(e).get(t);if(e.finalizing||e.finalized||!c(n))return n;if(n!==e.base.get(t))return n;var r=j(n,e);return L(e),e.copy.set(t,r),r}},keys:function(e){return function(){return N(e).keys()}},values:_,entries:_});var U=C(j),B=H({size:function(e){return N(e).size},add:function(e){return function(t){return N(e).has(t)||(M(e),e.copy||L(e),e.copy.add(t)),e.draft}},delete:function(e){return function(t){return M(e),e.copy||L(e),e.copy.delete(t)}},has:function(e){return function(t){return N(e).has(t)}},clear:function(e){return function(){return M(e),e.copy||L(e),e.copy.clear()}},keys:U,entries:U,values:U,forEach:function(e){return function(t,n){for(var r=U(e)(),o=r.next();!o.done;)t.call(n,o.value,o.value,e.draft),o=r.next()}}});function H(e){return Object.keys(e).reduce((function(t,n){var r="size"===n?W:q;return t[n]=r(e[n],n),t}),{})}function W(e){return{get:function(){var t=this[i];return G(t),e(t)}}}function q(e,t){return{get:function(){return function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o=this[i];return G(o),e(o,t,o.draft).apply(void 0,n)}}}}function G(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(N(e)))}function V(e){for(var t=e.length-1;t>=0;t--){var n=e[t][i];n.modified||(Array.isArray(n.base)?K(n)&&M(n):b(n.base)?J(n)&&M(n):E(n.base)?Y(n)&&M(n):$(n)&&M(n))}}function $(e){for(var t=e.base,n=e.draft,r=Object.keys(n),o=r.length-1;o>=0;o--){var a=r[o],c=t[a];if(void 0===c&&!h(t,a))return!0;var s=n[a],u=s&&s[i];if(u?u.base!==c:!v(s,c))return!0}return r.length!==Object.keys(t).length}function K(e){var t=e.draft;if(t.length!==e.base.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}function J(e){var t=e.base,n=e.draft;if(t.size!==n.size)return!0;var r=!1;return n.forEach((function(e,n){r||(r=c(e)?e.modified:e!==t.get(n))})),r}function Y(e){var t=e.base,n=e.draft;if(t.size!==n.size)return!0;var r=!1;return n.forEach((function(e,n){r||(r=c(e)?e.modified:!t.has(n))})),r}var X,Q,Z=Object.freeze({willFinalize:function(e,t,n){e.drafts.forEach((function(e){e[i].finalizing=!0})),n?a(t)&&t[i].scope===e&&V(e.drafts):(e.patches&&function e(t){if(!t||"object"!=typeof t)return;var n=t[i];if(!n)return;var r=n.base,o=n.draft,a=n.assigned;if(Array.isArray(t)){if(K(n)){if(M(n),a.length=!0,o.length<r.length)for(var c=o.length;c<r.length;c++)a[c]=!1;else for(var s=r.length;s<o.length;s++)a[s]=!0;for(var u=0;u<o.length;u++)void 0===a[u]&&e(o[u])}}else Object.keys(o).forEach((function(t){void 0!==r[t]||h(r,t)?a[t]||e(o[t]):(a[t]=!0,M(n))})),Object.keys(r).forEach((function(e){void 0!==o[e]||h(o,e)||(a[e]=!1,M(n))}))}(e.drafts[0]),V(e.drafts))},createProxy:j});function ee(e,t){var n=t?t.scope:P.current,r={scope:n,modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null},o=r,i=te;Array.isArray(e)?(o=[r],i=ne):b(e)?(i=oe,r.drafts=new Map,r.assigned=new Map):E(e)&&(i=ae,r.drafts=new Map);var a=Proxy.revocable(o,i),c=a.revoke,s=a.proxy;return r.draft=s,r.revoke=c,n.drafts.push(s),s}var te={get:function(e,t){if(t===i)return e;var n=e.drafts;if(!e.modified&&h(n,t))return n[t];var r=ce(e)[t];if(e.finalized||!c(r))return r;if(e.modified){if(r!==se(e.base,t))return r;n=e.copy}return n[t]=ee(r,e)},has:function(e,t){return t in ce(e)},ownKeys:function(e){return Reflect.ownKeys(ce(e))},set:function(e,t,n){if(!e.modified){var r=se(e.base,t);if(n?v(r,n)||n===e.drafts[t]:v(r,n)&&t in e.base)return!0;ue(e)}return e.assigned[t]=!0,e.copy[t]=n,!0},deleteProperty:function(e,t){return void 0!==se(e.base,t)||t in e.base?(e.assigned[t]=!1,ue(e)):e.assigned[t]&&delete e.assigned[t],e.copy&&delete e.copy[t],!0},getOwnPropertyDescriptor:function(e,t){var n=ce(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r&&(r.writable=!0,r.configurable=!Array.isArray(n)||"length"!==t),r},defineProperty:function(){throw new Error("Object.defineProperty() cannot be used on an Immer draft")},getPrototypeOf:function(e){return Object.getPrototypeOf(e.base)},setPrototypeOf:function(){throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft")}},ne={};p(te,(function(e,t){ne[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),ne.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer only supports deleting array indices");return te.deleteProperty.call(this,e[0],t)},ne.set=function(e,t,n){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer only supports setting array indices and the 'length' property");return te.set.call(this,e[0],t,n)};var re=["ownKeys","has","set","deleteProperty","defineProperty","getOwnPropertyDescriptor","preventExtensions","isExtensible","getPrototypeOf"].reduce((function(e,t){return e[t]=function(e){for(var n=[],r=arguments.length-1;r-- >0;)n[r]=arguments[r+1];return Reflect[t].apply(Reflect,[ce(e)].concat(n))},e}),{}),oe=le(((X={})[i]=function(e){return e},X.size=function(e){return ce(e).size},X.has=function(e){return function(t){return ce(e).has(t)}},X.set=function(e){return function(t,n){var r=ce(e);return r.has(t)&&r.get(t)===n||(ue(e),e.assigned.set(t,!0),e.copy.set(t,n)),e.draft}},X.delete=function(e){return function(t){return!!ce(e).has(t)&&(ue(e),e.assigned.set(t,!1),e.copy.delete(t))}},X.clear=function(e){return function(){ue(e),e.assigned=new Map;for(var t=0,n=ce(e).keys();t<n.length;t+=1){var r=n[t];e.assigned.set(r,!1)}return e.copy.clear()}},X.forEach=function(e,t,n){return function(t,r){return ce(e).forEach((function(e,o,i){var a=n.get(o);t.call(r,a,o,i)}))}},X.get=function(e){return function(t){var n=e[e.modified?"copy":"drafts"];if(n.has(t))return n.get(t);var r=ce(e).get(t);if(e.finalized||!c(r))return r;var o=ee(r,e);return n.set(t,o),o}},X.keys=function(e){return function(){return ce(e).keys()}},X.values=_,X.entries=_,X[y?Symbol.iterator:"@@iterator"]=_,X)),ie=C(ee),ae=le(((Q={})[i]=function(e){return e},Q.size=function(e){return ce(e).size},Q.has=function(e){return function(t){return ce(e).has(t)}},Q.add=function(e){return function(t){return ce(e).has(t)||(ue(e),e.copy.add(t)),e.draft}},Q.delete=function(e){return function(t){return ue(e),e.copy.delete(t)}},Q.clear=function(e){return function(){return ue(e),e.copy.clear()}},Q.forEach=function(e){return function(t,n){for(var r=ie(e)(),o=r.next();!o.done;)t.call(n,o.value,o.value,e.draft),o=r.next()}},Q.keys=ie,Q.values=ie,Q.entries=ie,Q[y?Symbol.iterator:"@@iterator"]=ie,Q));function ce(e){return e.copy||e.base}function se(e,t){var n=e[i],r=Reflect.getOwnPropertyDescriptor(n?ce(n):e,t);return r&&r.value}function ue(e){if(!e.modified){e.modified=!0;var t=e.base,n=e.drafts,r=e.parent,o=f(t);E(t)?(i=o,n.forEach((function(e){var t=s(e);t&&i.delete(t),i.add(e)}))):(b(t)?function(e,t){t.forEach((function(t,n){return e.set(n,t)}))}(o,n):u(o,n),e.drafts=null),e.copy=o,r&&ue(r)}var i}function le(e){return Object.assign({},re,{get:function(t,n,r){return e.hasOwnProperty(n)?e[n](t,n,r):Reflect.get(t,n,r)},setPrototypeOf:function(e){throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft")}})}var fe=Object.freeze({willFinalize:function(){},createProxy:ee});function pe(e,t,n,r){var o,i,a=e.base,c=e.copy,s=e.assigned;c.length<a.length&&(a=(o=[c,a])[0],c=o[1],n=(i=[r,n])[0],r=i[1]);for(var u=c.length-a.length,l=0;a[l]===c[l]&&l<a.length;)++l;for(var f=a.length;f>l&&a[f-1]===c[f+u-1];)--f;for(var p=l;p<f;++p)if(s[p]&&c[p]!==a[p]){var d=t.concat([p]);n.push({op:"replace",path:d,value:c[p]}),r.push({op:"replace",path:d,value:a[p]})}for(var h=n.length,m=f+u-1;m>=f;--m){var v=t.concat([m]);n[h+m-f]={op:"add",path:v,value:c[m]},r.push({op:"remove",path:v})}}function de(e,t,n,r){var o=e.base,i=e.copy;p(e.assigned,(function(e,a){var c=m(o,e),s=m(i,e),u=a?h(o,e)?"replace":"add":"remove";if(c!==s||"replace"!==u){var l=t.concat(e);n.push("remove"===u?{op:u,path:l}:{op:u,path:l,value:s}),r.push("add"===u?{op:"remove",path:l}:"remove"===u?{op:"add",path:l,value:c}:{op:"replace",path:l,value:c})}}))}function he(e,t,n,r){for(var o=e.base,i=e.copy,a=0,c=0,s=o;c<s.length;c+=1){var u=s[c];if(!i.has(u)){var l=t.concat([a]);n.push({op:"remove",path:l,value:u}),r.unshift({op:"add",path:l,value:u})}a++}a=0;for(var f=0,p=i;f<p.length;f+=1){var d=p[f];if(!o.has(d)){var h=t.concat([a]);n.push({op:"add",path:h,value:d}),r.unshift({op:"remove",path:h,value:d})}a++}}var me=function(e,t){for(var n=0,r=t;n<r.length;n+=1){var o=r[n],i=o.path,a=o.op;if(!i.length)throw new Error("Illegal state");for(var c=e,s=0;s<i.length-1;s++)if(!(c=m(c,i[s]))||"object"!=typeof c)throw new Error("Cannot apply patch, path doesn't resolve: "+i.join("/"));var u=x(o.value),l=i[i.length-1];switch(a){case"replace":if(b(c))c.set(l,u);else{if(E(c))throw new Error('Sets cannot have "replace" patches.');c[l]=u}break;case"add":E(c)&&c.delete(o.value),Array.isArray(c)?c.splice(l,0,u):b(c)?c.set(l,u):E(c)?c.add(u):c[l]=u;break;case"remove":Array.isArray(c)?c.splice(l,1):b(c)?c.delete(l):E(c)?c.delete(o.value):delete c[l];break;default:throw new Error("Unsupported patch operation: "+a)}}return e};var ve={useProxies:"undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},ye=function(e){u(this,ve,e),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)};ye.prototype.produce=function(e,t,n){var o,i=this;if("function"==typeof e&&"function"!=typeof t){var a=t;t=e;var s=this;return function(e){var n=this;void 0===e&&(e=a);for(var r=[],o=arguments.length-1;o-- >0;)r[o]=arguments[o+1];return s.produce(e,(function(e){return t.call.apply(t,[n,e].concat(r))}))}}if("function"!=typeof t)throw new Error("The first or second argument to `produce` must be a function");if(void 0!==n&&"function"!=typeof n)throw new Error("The third argument to `produce` must be a function or undefined");if(c(e)){var u=P.enter(),l=this.createProxy(e),f=!0;try{o=t(l),f=!1}finally{f?u.revoke():u.leave()}return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(e){return u.usePatches(n),i.processResult(e,u)}),(function(e){throw u.revoke(),e})):(u.usePatches(n),this.processResult(o,u))}if((o=t(e))!==r)return void 0===o&&(o=e),this.maybeFreeze(o,!0),o},ye.prototype.produceWithPatches=function(e,t,n){var r,o,i=this;if("function"==typeof e)return function(t){for(var n=[],r=arguments.length-1;r-- >0;)n[r]=arguments[r+1];return i.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(n))}))};if(n)throw new Error("A patch listener cannot be passed to produceWithPatches");return[this.produce(e,t,(function(e,t){r=e,o=t})),r,o]},ye.prototype.createDraft=function(e){if(!c(e))throw new Error("First argument to `createDraft` must be a plain object, an array, or an immerable object");var t=P.enter(),n=this.createProxy(e);return n[i].isManual=!0,t.leave(),n},ye.prototype.finishDraft=function(e,t){var n=e&&e[i];if(!n||!n.isManual)throw new Error("First argument to `finishDraft` must be a draft returned by `createDraft`");if(n.finalized)throw new Error("The given draft is already finalized");var r=n.scope;return r.usePatches(t),this.processResult(void 0,r)},ye.prototype.setAutoFreeze=function(e){this.autoFreeze=e},ye.prototype.setUseProxies=function(e){this.useProxies=e,u(this,e?fe:Z)},ye.prototype.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}return a(e)?me(e,t):this.produce(e,(function(e){return me(e,t.slice(n+1))}))},ye.prototype.processResult=function(e,t){var n=t.drafts[0],o=void 0!==e&&e!==n;if(this.willFinalize(t,e,o),o){if(n[i].modified)throw t.revoke(),new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");c(e)&&(e=this.finalize(e,null,t),this.maybeFreeze(e)),t.patches&&(t.patches.push({op:"replace",path:[],value:e}),t.inversePatches.push({op:"replace",path:[],value:n[i].base}))}else e=this.finalize(n,[],t);return t.revoke(),t.patches&&t.patchListener(t.patches,t.inversePatches),e!==r?e:void 0},ye.prototype.finalize=function(e,t,n){var r=this,o=e[i];if(!o)return Object.isFrozen(e)?e:this.finalizeTree(e,null,n);if(o.scope!==n)return e;if(!o.modified)return this.maybeFreeze(o.base,!0),o.base;if(!o.finalized){if(o.finalized=!0,this.finalizeTree(o.draft,t,n),this.onDelete&&!E(o.base))if(this.useProxies){p(o.assigned,(function(e,t){t||r.onDelete(o,e)}))}else{var a=o.base,c=o.copy;p(a,(function(e){h(c,e)||r.onDelete(o,e)}))}this.onCopy&&this.onCopy(o),this.autoFreeze&&n.canAutoFreeze&&T(o.copy,!1),t&&n.patches&&function(e,t,n,r){(Array.isArray(e.base)?pe:E(e.base)?he:de)(e,t,n,r)}(o,t,n.patches,n.inversePatches)}return o.copy},ye.prototype.finalizeTree=function(e,t,n){var r=this,o=e[i];o&&(this.useProxies||(o.copy=f(o.draft,!0)),e=o.copy);var s=!!t&&!!n.patches,u=function(i,l,f){if(l===f)throw Error("Immer forbids circular references");var y=!!o&&f===e,g=E(f);if(a(l)){var w=y&&s&&!g&&!h(o.assigned,i)?t.concat(i):null;if(function(e,t,n){b(e)?e.set(t,n):E(e)?(e.delete(t),e.add(n)):Array.isArray(e)||d(e,t)?e[t]=n:Object.defineProperty(e,t,{value:n,writable:!0,configurable:!0})}(f,i,l=r.finalize(l,w,n)),a(l)&&(n.canAutoFreeze=!1),y&&l===m(o.base,i))return}else{if(y&&v(l,m(o.base,i)))return;c(l)&&!Object.isFrozen(l)&&(p(l,u),r.maybeFreeze(l))}y&&r.onAssign&&!g&&r.onAssign(o,i,l)};return p(e,u),e},ye.prototype.maybeFreeze=function(e,t){void 0===t&&(t=!1),this.autoFreeze&&!a(e)&&T(e,t)};var ge=new ye,be=ge.produce;ge.produceWithPatches.bind(ge),ge.setAutoFreeze.bind(ge),ge.setUseProxies.bind(ge),ge.applyPatches.bind(ge),ge.createDraft.bind(ge),ge.finishDraft.bind(ge);t.a=be}).call(this,n(36))},function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return l}));var r=n(1),o=n(28),i=n(8),a=n(6),c=n(4),s=function(){function e(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._user={},this._tags={},this._extra={},this._context={}}return e.prototype.addScopeListener=function(e){this._scopeListeners.push(e)},e.prototype.addEventProcessor=function(e){return this._eventProcessors.push(e),this},e.prototype._notifyScopeListeners=function(){var e=this;this._notifyingListeners||(this._notifyingListeners=!0,setTimeout((function(){e._scopeListeners.forEach((function(t){t(e)})),e._notifyingListeners=!1})))},e.prototype._notifyEventProcessors=function(e,t,n,a){var c=this;return void 0===a&&(a=0),new o.a((function(o,s){var u=e[a];if(null===t||"function"!=typeof u)o(t);else{var l=u(r.a({},t),n);Object(i.m)(l)?l.then((function(t){return c._notifyEventProcessors(e,t,n,a+1).then(o)})).then(null,s):c._notifyEventProcessors(e,l,n,a+1).then(o).then(null,s)}}))},e.prototype.setUser=function(e){return this._user=Object(a.c)(e),this._notifyScopeListeners(),this},e.prototype.setTags=function(e){return this._tags=r.a({},this._tags,Object(a.c)(e)),this._notifyScopeListeners(),this},e.prototype.setTag=function(e,t){var n;return this._tags=r.a({},this._tags,((n={})[e]=Object(a.c)(t),n)),this._notifyScopeListeners(),this},e.prototype.setExtras=function(e){return this._extra=r.a({},this._extra,Object(a.c)(e)),this._notifyScopeListeners(),this},e.prototype.setExtra=function(e,t){var n;return this._extra=r.a({},this._extra,((n={})[e]=Object(a.c)(t),n)),this._notifyScopeListeners(),this},e.prototype.setFingerprint=function(e){return this._fingerprint=Object(a.c)(e),this._notifyScopeListeners(),this},e.prototype.setLevel=function(e){return this._level=Object(a.c)(e),this._notifyScopeListeners(),this},e.prototype.setTransaction=function(e){return this._transaction=e,this._notifyScopeListeners(),this},e.prototype.setContext=function(e,t){return this._context[e]=t?Object(a.c)(t):void 0,this._notifyScopeListeners(),this},e.prototype.setSpan=function(e){return this._span=e,this._notifyScopeListeners(),this},e.prototype.getSpan=function(){return this._span},e.clone=function(t){var n=new e;return t&&(n._breadcrumbs=r.f(t._breadcrumbs),n._tags=r.a({},t._tags),n._extra=r.a({},t._extra),n._context=r.a({},t._context),n._user=t._user,n._level=t._level,n._span=t._span,n._transaction=t._transaction,n._fingerprint=t._fingerprint,n._eventProcessors=r.f(t._eventProcessors)),n},e.prototype.clear=function(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._context={},this._level=void 0,this._transaction=void 0,this._fingerprint=void 0,this._span=void 0,this._notifyScopeListeners(),this},e.prototype.addBreadcrumb=function(e,t){var n=Object(c.m)(),o=r.a({timestamp:n},e);return this._breadcrumbs=void 0!==t&&t>=0?r.f(this._breadcrumbs,[Object(a.c)(o)]).slice(-t):r.f(this._breadcrumbs,[Object(a.c)(o)]),this._notifyScopeListeners(),this},e.prototype.clearBreadcrumbs=function(){return this._breadcrumbs=[],this._notifyScopeListeners(),this},e.prototype._applyFingerprint=function(e){e.fingerprint=e.fingerprint?Array.isArray(e.fingerprint)?e.fingerprint:[e.fingerprint]:[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint},e.prototype.applyToEvent=function(e,t){return this._extra&&Object.keys(this._extra).length&&(e.extra=r.a({},this._extra,e.extra)),this._tags&&Object.keys(this._tags).length&&(e.tags=r.a({},this._tags,e.tags)),this._user&&Object.keys(this._user).length&&(e.user=r.a({},this._user,e.user)),this._context&&Object.keys(this._context).length&&(e.contexts=r.a({},this._context,e.contexts)),this._level&&(e.level=this._level),this._transaction&&(e.transaction=this._transaction),this._applyFingerprint(e),e.breadcrumbs=r.f(e.breadcrumbs||[],this._breadcrumbs),e.breadcrumbs=e.breadcrumbs.length>0?e.breadcrumbs:void 0,this._notifyEventProcessors(r.f(u(),this._eventProcessors),e,t)},e}();function u(){var e=Object(c.g)();return e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.globalEventProcessors=e.__SENTRY__.globalEventProcessors||[],e.__SENTRY__.globalEventProcessors}function l(e){u().push(e)}},,function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,u=[],l=!1,f=-1;function p(){l&&s&&(l=!1,s.length?u=s.concat(u):f=-1,u.length&&d())}function d(){if(!l){var e=c(p);l=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";(function(e,r){var o,i=n(56);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(30),n(42)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(76);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return c(i(e,t),t)},e.exports.tokensToFunction=c,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,c="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(c+=e.slice(a,d),a=d+f.length,p)c+=p[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];c&&(r.push(c),c="");var E=null!=m&&null!=h&&h!==m,S="+"===b||"*"===b,_="?"===b||"*"===b,C=n[2]||l,k=y||g;r.push({name:v||i++,prefix:m||"",delimiter:C,optional:_,repeat:S,partial:E,asterisk:!!w,pattern:k?u(k):w?".*":"[^"+s(C)+"]+?"})}}return a<e.length&&(c+=e.substr(a)),c&&r.push(c),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function c(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",c=t||{},s=(o||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var l=e[u];if("string"!=typeof l){var f,p=c[l.name];if(null==p){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(r(p)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=s(p[d]),!n[u].test(f))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?l.prefix:l.delimiter)+f}}else{if(f=l.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(p),!n[u].test(f))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+f+'"');i+=l.prefix+f}}else i+=l}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function l(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",c=0;c<e.length;c++){var u=e[c];if("string"==typeof u)a+=s(u);else{var p=s(u.prefix),d="(?:"+u.pattern+")";t.push(u),u.repeat&&(d+="(?:"+p+d+")*"),a+=d=u.optional?u.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=s(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",l(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return l(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return l(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r=n(77).CopyToClipboard;r.CopyToClipboard=r,e.exports=r},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,c,s=a(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){c=r(n);for(var f=0;f<c.length;f++)i.call(n,c[f])&&(s[c[f]]=n[c[f]])}}return s}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8}},function(e,t){e.exports={L:1,M:0,Q:3,H:2}},function(e,t,n){var r=n(46);function o(e,t){if(null==e.length)throw new Error(e.length+"/"+t);for(var n=0;n<e.length&&0==e[n];)n++;this.num=new Array(e.length-n+t);for(var r=0;r<e.length-n;r++)this.num[r]=e[r+n]}o.prototype={get:function(e){return this.num[e]},getLength:function(){return this.num.length},multiply:function(e){for(var t=new Array(this.getLength()+e.getLength()-1),n=0;n<this.getLength();n++)for(var i=0;i<e.getLength();i++)t[n+i]^=r.gexp(r.glog(this.get(n))+r.glog(e.get(i)));return new o(t,0)},mod:function(e){if(this.getLength()-e.getLength()<0)return this;for(var t=r.glog(this.get(0))-r.glog(e.get(0)),n=new Array(this.getLength()),i=0;i<this.getLength();i++)n[i]=this.get(i);for(i=0;i<e.getLength();i++)n[i]^=r.gexp(r.glog(e.get(i))+t);return new o(n,0).mod(e)}},e.exports=o},function(e,t){for(var n={glog:function(e){if(e<1)throw new Error("glog("+e+")");return n.LOG_TABLE[e]},gexp:function(e){for(;e<0;)e+=255;for(;e>=256;)e-=255;return n.EXP_TABLE[e]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},r=0;r<8;r++)n.EXP_TABLE[r]=1<<r;for(r=8;r<256;r++)n.EXP_TABLE[r]=n.EXP_TABLE[r-4]^n.EXP_TABLE[r-5]^n.EXP_TABLE[r-6]^n.EXP_TABLE[r-8];for(r=0;r<255;r++)n.LOG_TABLE[n.EXP_TABLE[r]]=r;e.exports=n},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(9);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var c=e.indexOf("#");-1!==c&&(e=e.slice(0,c)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(9),o=n(93),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,s={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?c=n(51):"undefined"!=typeof XMLHttpRequest&&(c=n(51)),c),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(i)})),e.exports=s}).call(this,n(36))},function(e,t,n){"use strict";var r=n(9),o=n(94),i=n(48),a=n(96),c=n(97),s=n(52);e.exports=function(e){return new Promise((function(t,u){var l=e.data,f=e.headers;r.isFormData(l)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+h)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,u,r),p=null}},p.onabort=function(){p&&(u(s("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){u(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){u(s("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var m=n(98),v=(e.withCredentials||c(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&r.forEach(f,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),u(e),p=null)})),void 0===l&&(l=null),p.send(l)}))}},function(e,t,n){"use strict";var r=n(95);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(["headers","auth","proxy"],(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";var r=n(23);function o(e,t,n,o,i){var a=r.writeRtpDescription(e.kind,t);if(a+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),a+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":i||"active"),a+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?a+="a=sendrecv\r\n":e.rtpSender?a+="a=sendonly\r\n":e.rtpReceiver?a+="a=recvonly\r\n":a+="a=inactive\r\n",e.rtpSender){var c=e.rtpSender._initialTrackId||e.rtpSender.track.id;e.rtpSender._initialTrackId=c;var s="msid:"+(o?o.id:"-")+" "+c+"\r\n";a+="a="+s,a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+s,e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+s,a+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),a}function i(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]},r=function(e,t){e=parseInt(e,10);for(var n=0;n<t.length;n++)if(t[n].payloadType===e||t[n].preferredPayloadType===e)return t[n]},o=function(e,t,n,o){var i=r(e.parameters.apt,n),a=r(t.parameters.apt,o);return i&&a&&i.name.toLowerCase()===a.name.toLowerCase()};return e.codecs.forEach((function(r){for(var i=0;i<t.codecs.length;i++){var a=t.codecs[i];if(r.name.toLowerCase()===a.name.toLowerCase()&&r.clockRate===a.clockRate){if("rtx"===r.name.toLowerCase()&&r.parameters&&a.parameters.apt&&!o(r,a,e.codecs,t.codecs))continue;(a=JSON.parse(JSON.stringify(a))).numChannels=Math.min(r.numChannels,a.numChannels),n.codecs.push(a),a.rtcpFeedback=a.rtcpFeedback.filter((function(e){for(var t=0;t<r.rtcpFeedback.length;t++)if(r.rtcpFeedback[t].type===e.type&&r.rtcpFeedback[t].parameter===e.parameter)return!0;return!1}));break}}})),e.headerExtensions.forEach((function(e){for(var r=0;r<t.headerExtensions.length;r++){var o=t.headerExtensions[r];if(e.uri===o.uri){n.headerExtensions.push(o);break}}})),n}function a(e,t,n){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(n)}function c(e,t){var n=e.getRemoteCandidates().find((function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type}));return n||e.addRemoteCandidate(t),!n}function s(e,t){var n=new Error(t);return n.name=e,n.code={NotSupportedError:9,InvalidStateError:11,InvalidAccessError:15,TypeError:void 0,OperationError:void 0}[e],n}e.exports=function(e,t){function n(t,n){n.addTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack",{track:t}))}function u(t,n,r,o){var i=new Event("track");i.track=n,i.receiver=r,i.transceiver={receiver:r},i.streams=o,e.setTimeout((function(){t._dispatchEvent("track",i)}))}var l=function(n){var o=this,i=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){o[e]=i[e].bind(i)})),this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this._localDescription=null,this._remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.connectionState="new",this.iceGatheringState="new",n=JSON.parse(JSON.stringify(n||{})),this.usingBundle="max-bundle"===n.bundlePolicy,"negotiate"===n.rtcpMuxPolicy)throw s("NotSupportedError","rtcpMuxPolicy 'negotiate' is not supported");switch(n.rtcpMuxPolicy||(n.rtcpMuxPolicy="require"),n.iceTransportPolicy){case"all":case"relay":break;default:n.iceTransportPolicy="all"}switch(n.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:n.bundlePolicy="balanced"}if(n.iceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((function(e){if(e&&(e.urls||e.url)){var r=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var o="string"==typeof r;return o&&(r=[r]),r=r.filter((function(e){return 0===e.indexOf("turn:")&&-1!==e.indexOf("transport=udp")&&-1===e.indexOf("turn:[")&&!n?(n=!0,!0):0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp")})),delete e.url,e.urls=o?r[0]:r,!!r.length}}))}(n.iceServers||[],t),this._iceGatherers=[],n.iceCandidatePoolSize)for(var a=n.iceCandidatePoolSize;a>0;a--)this._iceGatherers.push(new e.RTCIceGatherer({iceServers:n.iceServers,gatherPolicy:n.iceTransportPolicy}));else n.iceCandidatePoolSize=0;this._config=n,this.transceivers=[],this._sdpSessionId=r.generateSessionId(),this._sdpSessionVersion=0,this._dtlsRole=void 0,this._isClosed=!1};Object.defineProperty(l.prototype,"localDescription",{configurable:!0,get:function(){return this._localDescription}}),Object.defineProperty(l.prototype,"remoteDescription",{configurable:!0,get:function(){return this._remoteDescription}}),l.prototype.onicecandidate=null,l.prototype.onaddstream=null,l.prototype.ontrack=null,l.prototype.onremovestream=null,l.prototype.onsignalingstatechange=null,l.prototype.oniceconnectionstatechange=null,l.prototype.onconnectionstatechange=null,l.prototype.onicegatheringstatechange=null,l.prototype.onnegotiationneeded=null,l.prototype.ondatachannel=null,l.prototype._dispatchEvent=function(e,t){this._isClosed||(this.dispatchEvent(t),"function"==typeof this["on"+e]&&this["on"+e](t))},l.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this._dispatchEvent("icegatheringstatechange",e)},l.prototype.getConfiguration=function(){return this._config},l.prototype.getLocalStreams=function(){return this.localStreams},l.prototype.getRemoteStreams=function(){return this.remoteStreams},l.prototype._createTransceiver=function(e,t){var n=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,associatedRemoteMediaStreams:[],wantReceive:!0};if(this.usingBundle&&n)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var o=this._createIceAndDtlsTransports();r.iceTransport=o.iceTransport,r.dtlsTransport=o.dtlsTransport}return t||this.transceivers.push(r),r},l.prototype.addTrack=function(t,n){if(this._isClosed)throw s("InvalidStateError","Attempted to call addTrack on a closed peerconnection.");var r;if(this.transceivers.find((function(e){return e.track===t})))throw s("InvalidAccessError","Track already exists.");for(var o=0;o<this.transceivers.length;o++)this.transceivers[o].track||this.transceivers[o].kind!==t.kind||(r=this.transceivers[o]);return r||(r=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(n)&&this.localStreams.push(n),r.track=t,r.stream=n,r.rtpSender=new e.RTCRtpSender(t,r.dtlsTransport),r.rtpSender},l.prototype.addStream=function(e){var n=this;if(t>=15025)e.getTracks().forEach((function(t){n.addTrack(t,e)}));else{var r=e.clone();e.getTracks().forEach((function(e,t){var n=r.getTracks()[t];e.addEventListener("enabled",(function(e){n.enabled=e.enabled}))})),r.getTracks().forEach((function(e){n.addTrack(e,r)}))}},l.prototype.removeTrack=function(t){if(this._isClosed)throw s("InvalidStateError","Attempted to call removeTrack on a closed peerconnection.");if(!(t instanceof e.RTCRtpSender))throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");var n=this.transceivers.find((function(e){return e.rtpSender===t}));if(!n)throw s("InvalidAccessError","Sender was not created by this connection.");var r=n.stream;n.rtpSender.stop(),n.rtpSender=null,n.track=null,n.stream=null,-1===this.transceivers.map((function(e){return e.stream})).indexOf(r)&&this.localStreams.indexOf(r)>-1&&this.localStreams.splice(this.localStreams.indexOf(r),1),this._maybeFireNegotiationNeeded()},l.prototype.removeStream=function(e){var t=this;e.getTracks().forEach((function(e){var n=t.getSenders().find((function(t){return t.track===e}));n&&t.removeTrack(n)}))},l.prototype.getSenders=function(){return this.transceivers.filter((function(e){return!!e.rtpSender})).map((function(e){return e.rtpSender}))},l.prototype.getReceivers=function(){return this.transceivers.filter((function(e){return!!e.rtpReceiver})).map((function(e){return e.rtpReceiver}))},l.prototype._createIceGatherer=function(t,n){var r=this;if(n&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var o=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(o,"state",{value:"new",writable:!0}),this.transceivers[t].bufferedCandidateEvents=[],this.transceivers[t].bufferCandidates=function(e){var n=!e.candidate||0===Object.keys(e.candidate).length;o.state=n?"completed":"gathering",null!==r.transceivers[t].bufferedCandidateEvents&&r.transceivers[t].bufferedCandidateEvents.push(e)},o.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),o},l.prototype._gather=function(t,n){var o=this,i=this.transceivers[n].iceGatherer;if(!i.onlocalcandidate){var a=this.transceivers[n].bufferedCandidateEvents;this.transceivers[n].bufferedCandidateEvents=null,i.removeEventListener("localcandidate",this.transceivers[n].bufferCandidates),i.onlocalcandidate=function(e){if(!(o.usingBundle&&n>0)){var a=new Event("icecandidate");a.candidate={sdpMid:t,sdpMLineIndex:n};var c=e.candidate,s=!c||0===Object.keys(c).length;if(s)"new"!==i.state&&"gathering"!==i.state||(i.state="completed");else{"new"===i.state&&(i.state="gathering"),c.component=1,c.ufrag=i.getLocalParameters().usernameFragment;var u=r.writeCandidate(c);a.candidate=Object.assign(a.candidate,r.parseCandidate(u)),a.candidate.candidate=u,a.candidate.toJSON=function(){return{candidate:a.candidate.candidate,sdpMid:a.candidate.sdpMid,sdpMLineIndex:a.candidate.sdpMLineIndex,usernameFragment:a.candidate.usernameFragment}}}var l=r.getMediaSections(o._localDescription.sdp);l[a.candidate.sdpMLineIndex]+=s?"a=end-of-candidates\r\n":"a="+a.candidate.candidate+"\r\n",o._localDescription.sdp=r.getDescription(o._localDescription.sdp)+l.join("");var f=o.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}));"gathering"!==o.iceGatheringState&&(o.iceGatheringState="gathering",o._emitGatheringStateChange()),s||o._dispatchEvent("icecandidate",a),f&&(o._dispatchEvent("icecandidate",new Event("icecandidate")),o.iceGatheringState="complete",o._emitGatheringStateChange())}},e.setTimeout((function(){a.forEach((function(e){i.onlocalcandidate(e)}))}),0)}},l.prototype._createIceAndDtlsTransports=function(){var t=this,n=new e.RTCIceTransport(null);n.onicestatechange=function(){t._updateIceConnectionState(),t._updateConnectionState()};var r=new e.RTCDtlsTransport(n);return r.ondtlsstatechange=function(){t._updateConnectionState()},r.onerror=function(){Object.defineProperty(r,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:n,dtlsTransport:r}},l.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var n=this.transceivers[e].iceTransport;n&&(delete n.onicestatechange,delete this.transceivers[e].iceTransport);var r=this.transceivers[e].dtlsTransport;r&&(delete r.ondtlsstatechange,delete r.onerror,delete this.transceivers[e].dtlsTransport)},l.prototype._transceive=function(e,n,o){var a=i(e.localCapabilities,e.remoteCapabilities);n&&e.rtpSender&&(a.encodings=e.sendEncodingParameters,a.rtcp={cname:r.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(a.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(a)),o&&e.rtpReceiver&&a.codecs.length>0&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach((function(e){delete e.rtx})),e.recvEncodingParameters.length?a.encodings=e.recvEncodingParameters:a.encodings=[{}],a.rtcp={compound:e.rtcpParameters.compound},e.rtcpParameters.cname&&(a.rtcp.cname=e.rtcpParameters.cname),e.sendEncodingParameters.length&&(a.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(a))},l.prototype.setLocalDescription=function(e){var t,n,o=this;if(-1===["offer","answer"].indexOf(e.type))return Promise.reject(s("TypeError",'Unsupported type "'+e.type+'"'));if(!a("setLocalDescription",e.type,o.signalingState)||o._isClosed)return Promise.reject(s("InvalidStateError","Can not set local "+e.type+" in state "+o.signalingState));if("offer"===e.type)t=r.splitSections(e.sdp),n=t.shift(),t.forEach((function(e,t){var n=r.parseRtpParameters(e);o.transceivers[t].localCapabilities=n})),o.transceivers.forEach((function(e,t){o._gather(e.mid,t)}));else if("answer"===e.type){t=r.splitSections(o._remoteDescription.sdp),n=t.shift();var c=r.matchPrefix(n,"a=ice-lite").length>0;t.forEach((function(e,t){var a=o.transceivers[t],s=a.iceGatherer,u=a.iceTransport,l=a.dtlsTransport,f=a.localCapabilities,p=a.remoteCapabilities;if(!(r.isRejected(e)&&0===r.matchPrefix(e,"a=bundle-only").length)&&!a.rejected){var d=r.getIceParameters(e,n),h=r.getDtlsParameters(e,n);c&&(h.role="server"),o.usingBundle&&0!==t||(o._gather(a.mid,t),"new"===u.state&&u.start(s,d,c?"controlling":"controlled"),"new"===l.state&&l.start(h));var m=i(f,p);o._transceive(a,m.codecs.length>0,!1)}}))}return o._localDescription={type:e.type,sdp:e.sdp},"offer"===e.type?o._updateSignalingState("have-local-offer"):o._updateSignalingState("stable"),Promise.resolve()},l.prototype.setRemoteDescription=function(o){var l=this;if(-1===["offer","answer"].indexOf(o.type))return Promise.reject(s("TypeError",'Unsupported type "'+o.type+'"'));if(!a("setRemoteDescription",o.type,l.signalingState)||l._isClosed)return Promise.reject(s("InvalidStateError","Can not set remote "+o.type+" in state "+l.signalingState));var f={};l.remoteStreams.forEach((function(e){f[e.id]=e}));var p=[],d=r.splitSections(o.sdp),h=d.shift(),m=r.matchPrefix(h,"a=ice-lite").length>0,v=r.matchPrefix(h,"a=group:BUNDLE ").length>0;l.usingBundle=v;var y=r.matchPrefix(h,"a=ice-options:")[0];return l.canTrickleIceCandidates=!!y&&y.substr(14).split(" ").indexOf("trickle")>=0,d.forEach((function(a,s){var u=r.splitLines(a),d=r.getKind(a),y=r.isRejected(a)&&0===r.matchPrefix(a,"a=bundle-only").length,g=u[0].substr(2).split(" ")[2],b=r.getDirection(a,h),w=r.parseMsid(a),E=r.getMid(a)||r.generateIdentifier();if(y||"application"===d&&("DTLS/SCTP"===g||"UDP/DTLS/SCTP"===g))l.transceivers[s]={mid:E,kind:d,protocol:g,rejected:!0};else{var S,_,C,k,x,T,O,P,R;!y&&l.transceivers[s]&&l.transceivers[s].rejected&&(l.transceivers[s]=l._createTransceiver(d,!0));var j,D,N=r.parseRtpParameters(a);y||(j=r.getIceParameters(a,h),(D=r.getDtlsParameters(a,h)).role="client"),O=r.parseRtpEncodingParameters(a);var I=r.parseRtcpParameters(a),M=r.matchPrefix(a,"a=end-of-candidates",h).length>0,L=r.matchPrefix(a,"a=candidate:").map((function(e){return r.parseCandidate(e)})).filter((function(e){return 1===e.component}));if(("offer"===o.type||"answer"===o.type)&&!y&&v&&s>0&&l.transceivers[s]&&(l._disposeIceAndDtlsTransports(s),l.transceivers[s].iceGatherer=l.transceivers[0].iceGatherer,l.transceivers[s].iceTransport=l.transceivers[0].iceTransport,l.transceivers[s].dtlsTransport=l.transceivers[0].dtlsTransport,l.transceivers[s].rtpSender&&l.transceivers[s].rtpSender.setTransport(l.transceivers[0].dtlsTransport),l.transceivers[s].rtpReceiver&&l.transceivers[s].rtpReceiver.setTransport(l.transceivers[0].dtlsTransport)),"offer"!==o.type||y){if("answer"===o.type&&!y){_=(S=l.transceivers[s]).iceGatherer,C=S.iceTransport,k=S.dtlsTransport,x=S.rtpReceiver,T=S.sendEncodingParameters,P=S.localCapabilities,l.transceivers[s].recvEncodingParameters=O,l.transceivers[s].remoteCapabilities=N,l.transceivers[s].rtcpParameters=I,L.length&&"new"===C.state&&(!m&&!M||v&&0!==s?L.forEach((function(e){c(S.iceTransport,e)})):C.setRemoteCandidates(L)),v&&0!==s||("new"===C.state&&C.start(_,j,"controlling"),"new"===k.state&&k.start(D)),!i(S.localCapabilities,S.remoteCapabilities).codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&S.sendEncodingParameters[0].rtx&&delete S.sendEncodingParameters[0].rtx,l._transceive(S,"sendrecv"===b||"recvonly"===b,"sendrecv"===b||"sendonly"===b),!x||"sendrecv"!==b&&"sendonly"!==b?delete S.rtpReceiver:(R=x.track,w?(f[w.stream]||(f[w.stream]=new e.MediaStream),n(R,f[w.stream]),p.push([R,x,f[w.stream]])):(f.default||(f.default=new e.MediaStream),n(R,f.default),p.push([R,x,f.default])))}}else{(S=l.transceivers[s]||l._createTransceiver(d)).mid=E,S.iceGatherer||(S.iceGatherer=l._createIceGatherer(s,v)),L.length&&"new"===S.iceTransport.state&&(!M||v&&0!==s?L.forEach((function(e){c(S.iceTransport,e)})):S.iceTransport.setRemoteCandidates(L)),P=e.RTCRtpReceiver.getCapabilities(d),t<15019&&(P.codecs=P.codecs.filter((function(e){return"rtx"!==e.name}))),T=S.sendEncodingParameters||[{ssrc:1001*(2*s+2)}];var A,F=!1;if("sendrecv"===b||"sendonly"===b){if(F=!S.rtpReceiver,x=S.rtpReceiver||new e.RTCRtpReceiver(S.dtlsTransport,d),F)R=x.track,w&&"-"===w.stream||(w?(f[w.stream]||(f[w.stream]=new e.MediaStream,Object.defineProperty(f[w.stream],"id",{get:function(){return w.stream}})),Object.defineProperty(R,"id",{get:function(){return w.track}}),A=f[w.stream]):(f.default||(f.default=new e.MediaStream),A=f.default)),A&&(n(R,A),S.associatedRemoteMediaStreams.push(A)),p.push([R,x,A])}else S.rtpReceiver&&S.rtpReceiver.track&&(S.associatedRemoteMediaStreams.forEach((function(t){var n=t.getTracks().find((function(e){return e.id===S.rtpReceiver.track.id}));n&&function(t,n){n.removeTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("removetrack",{track:t}))}(n,t)})),S.associatedRemoteMediaStreams=[]);S.localCapabilities=P,S.remoteCapabilities=N,S.rtpReceiver=x,S.rtcpParameters=I,S.sendEncodingParameters=T,S.recvEncodingParameters=O,l._transceive(l.transceivers[s],!1,F)}}})),void 0===l._dtlsRole&&(l._dtlsRole="offer"===o.type?"active":"passive"),l._remoteDescription={type:o.type,sdp:o.sdp},"offer"===o.type?l._updateSignalingState("have-remote-offer"):l._updateSignalingState("stable"),Object.keys(f).forEach((function(t){var n=f[t];if(n.getTracks().length){if(-1===l.remoteStreams.indexOf(n)){l.remoteStreams.push(n);var r=new Event("addstream");r.stream=n,e.setTimeout((function(){l._dispatchEvent("addstream",r)}))}p.forEach((function(e){var t=e[0],r=e[1];n.id===e[2].id&&u(l,t,r,[n])}))}})),p.forEach((function(e){e[2]||u(l,e[0],e[1],[])})),e.setTimeout((function(){l&&l.transceivers&&l.transceivers.forEach((function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))}))}),4e3),Promise.resolve()},l.prototype.close=function(){this.transceivers.forEach((function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()})),this._isClosed=!0,this._updateSignalingState("closed")},l.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this._dispatchEvent("signalingstatechange",t)},l.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout((function(){if(t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t._dispatchEvent("negotiationneeded",e)}}),0))},l.prototype._updateIceConnectionState=function(){var e,t={new:0,closed:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&!e.rejected&&t[e.iceTransport.state]++})),e="new",t.failed>0?e="failed":t.checking>0?e="checking":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0?e="connected":t.completed>0&&(e="completed"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this._dispatchEvent("iceconnectionstatechange",n)}},l.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&e.dtlsTransport&&!e.rejected&&(t[e.iceTransport.state]++,t[e.dtlsTransport.state]++)})),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0&&(e="connected"),e!==this.connectionState){this.connectionState=e;var n=new Event("connectionstatechange");this._dispatchEvent("connectionstatechange",n)}},l.prototype.createOffer=function(){var n=this;if(n._isClosed)return Promise.reject(s("InvalidStateError","Can not call createOffer after close"));var i=n.transceivers.filter((function(e){return"audio"===e.kind})).length,a=n.transceivers.filter((function(e){return"video"===e.kind})).length,c=arguments[0];if(c){if(c.mandatory||c.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==c.offerToReceiveAudio&&(i=!0===c.offerToReceiveAudio?1:!1===c.offerToReceiveAudio?0:c.offerToReceiveAudio),void 0!==c.offerToReceiveVideo&&(a=!0===c.offerToReceiveVideo?1:!1===c.offerToReceiveVideo?0:c.offerToReceiveVideo)}for(n.transceivers.forEach((function(e){"audio"===e.kind?--i<0&&(e.wantReceive=!1):"video"===e.kind&&--a<0&&(e.wantReceive=!1)}));i>0||a>0;)i>0&&(n._createTransceiver("audio"),i--),a>0&&(n._createTransceiver("video"),a--);var u=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.transceivers.forEach((function(o,i){var a=o.track,c=o.kind,s=o.mid||r.generateIdentifier();o.mid=s,o.iceGatherer||(o.iceGatherer=n._createIceGatherer(i,n.usingBundle));var u=e.RTCRtpSender.getCapabilities(c);t<15019&&(u.codecs=u.codecs.filter((function(e){return"rtx"!==e.name}))),u.codecs.forEach((function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1"),o.remoteCapabilities&&o.remoteCapabilities.codecs&&o.remoteCapabilities.codecs.forEach((function(t){e.name.toLowerCase()===t.name.toLowerCase()&&e.clockRate===t.clockRate&&(e.preferredPayloadType=t.payloadType)}))})),u.headerExtensions.forEach((function(e){(o.remoteCapabilities&&o.remoteCapabilities.headerExtensions||[]).forEach((function(t){e.uri===t.uri&&(e.id=t.id)}))}));var l=o.sendEncodingParameters||[{ssrc:1001*(2*i+1)}];a&&t>=15019&&"video"===c&&!l[0].rtx&&(l[0].rtx={ssrc:l[0].ssrc+1}),o.wantReceive&&(o.rtpReceiver=new e.RTCRtpReceiver(o.dtlsTransport,c)),o.localCapabilities=u,o.sendEncodingParameters=l})),"max-compat"!==n._config.bundlePolicy&&(u+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),u+="a=ice-options:trickle\r\n",n.transceivers.forEach((function(e,t){u+=o(e,e.localCapabilities,"offer",e.stream,n._dtlsRole),u+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===n.iceGatheringState||0!==t&&n.usingBundle||(e.iceGatherer.getLocalCandidates().forEach((function(e){e.component=1,u+="a="+r.writeCandidate(e)+"\r\n"})),"completed"===e.iceGatherer.state&&(u+="a=end-of-candidates\r\n"))}));var l=new e.RTCSessionDescription({type:"offer",sdp:u});return Promise.resolve(l)},l.prototype.createAnswer=function(){var n=this;if(n._isClosed)return Promise.reject(s("InvalidStateError","Can not call createAnswer after close"));if("have-remote-offer"!==n.signalingState&&"have-local-pranswer"!==n.signalingState)return Promise.reject(s("InvalidStateError","Can not call createAnswer in signalingState "+n.signalingState));var a=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.usingBundle&&(a+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),a+="a=ice-options:trickle\r\n";var c=r.getMediaSections(n._remoteDescription.sdp).length;n.transceivers.forEach((function(e,r){if(!(r+1>c)){if(e.rejected)return"application"===e.kind?"DTLS/SCTP"===e.protocol?a+="m=application 0 DTLS/SCTP 5000\r\n":a+="m=application 0 "+e.protocol+" webrtc-datachannel\r\n":"audio"===e.kind?a+="m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n":"video"===e.kind&&(a+="m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"),void(a+="c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:"+e.mid+"\r\n");var s;if(e.stream)"audio"===e.kind?s=e.stream.getAudioTracks()[0]:"video"===e.kind&&(s=e.stream.getVideoTracks()[0]),s&&t>=15019&&"video"===e.kind&&!e.sendEncodingParameters[0].rtx&&(e.sendEncodingParameters[0].rtx={ssrc:e.sendEncodingParameters[0].ssrc+1});var u=i(e.localCapabilities,e.remoteCapabilities);!u.codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,a+=o(e,u,"answer",e.stream,n._dtlsRole),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(a+="a=rtcp-rsize\r\n")}}));var u=new e.RTCSessionDescription({type:"answer",sdp:a});return Promise.resolve(u)},l.prototype.addIceCandidate=function(e){var t,n=this;return e&&void 0===e.sdpMLineIndex&&!e.sdpMid?Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")):new Promise((function(o,i){if(!n._remoteDescription)return i(s("InvalidStateError","Can not add ICE candidate without a remote description"));if(e&&""!==e.candidate){var a=e.sdpMLineIndex;if(e.sdpMid)for(var u=0;u<n.transceivers.length;u++)if(n.transceivers[u].mid===e.sdpMid){a=u;break}var l=n.transceivers[a];if(!l)return i(s("OperationError","Can not add ICE candidate"));if(l.rejected)return o();var f=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===f.protocol&&(0===f.port||9===f.port))return o();if(f.component&&1!==f.component)return o();if((0===a||a>0&&l.iceTransport!==n.transceivers[0].iceTransport)&&!c(l.iceTransport,f))return i(s("OperationError","Can not add ICE candidate"));var p=e.candidate.trim();0===p.indexOf("a=")&&(p=p.substr(2)),(t=r.getMediaSections(n._remoteDescription.sdp))[a]+="a="+(f.type?p:"end-of-candidates")+"\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join("")}else for(var d=0;d<n.transceivers.length&&(n.transceivers[d].rejected||(n.transceivers[d].iceTransport.addRemoteCandidate({}),(t=r.getMediaSections(n._remoteDescription.sdp))[d]+="a=end-of-candidates\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join(""),!n.usingBundle));d++);o()}))},l.prototype.getStats=function(t){if(t&&t instanceof e.MediaStreamTrack){var n=null;if(this.transceivers.forEach((function(e){e.rtpSender&&e.rtpSender.track===t?n=e.rtpSender:e.rtpReceiver&&e.rtpReceiver.track===t&&(n=e.rtpReceiver)})),!n)throw s("InvalidAccessError","Invalid selector.");return n.getStats()}var r=[];return this.transceivers.forEach((function(e){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach((function(t){e[t]&&r.push(e[t].getStats())}))})),Promise.all(r).then((function(e){var t=new Map;return e.forEach((function(e){e.forEach((function(e){t.set(e.id,e)}))})),t}))};["RTCRtpSender","RTCRtpReceiver","RTCIceGatherer","RTCIceTransport","RTCDtlsTransport"].forEach((function(t){var n=e[t];if(n&&n.prototype&&n.prototype.getStats){var r=n.prototype.getStats;n.prototype.getStats=function(){return r.apply(this).then((function(e){var t=new Map;return Object.keys(e).forEach((function(n){var r;e[n].type={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[(r=e[n]).type]||r.type,t.set(n,e[n])})),t}))}}}));var f=["createOffer","createAnswer"];return f.forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[0]||"function"==typeof e[1]?t.apply(this,[arguments[2]]).then((function(t){"function"==typeof e[0]&&e[0].apply(null,[t])}),(function(t){"function"==typeof e[1]&&e[1].apply(null,[t])})):t.apply(this,arguments)}})),(f=["setLocalDescription","setRemoteDescription","addIceCandidate"]).forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]||"function"==typeof e[2]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)}),(function(t){"function"==typeof e[2]&&e[2].apply(null,[t])})):t.apply(this,arguments)}})),["getStats"].forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)})):t.apply(this,arguments)}})),l}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(30))},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(n,!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}function f(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?d(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=n(0),g=(n(2),n(82)),b=n(44);function w(e){for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r<2048?(t+=String.fromCharCode(192|r>>6),t+=String.fromCharCode(128|63&r)):r<55296||r>=57344?(t+=String.fromCharCode(224|r>>12),t+=String.fromCharCode(128|r>>6&63),t+=String.fromCharCode(128|63&r)):(n++,r=65536+((1023&r)<<10|1023&e.charCodeAt(n)),t+=String.fromCharCode(240|r>>18),t+=String.fromCharCode(128|r>>12&63),t+=String.fromCharCode(128|r>>6&63),t+=String.fromCharCode(128|63&r))}return t}var E={size:128,level:"L",bgColor:"#FFFFFF",fgColor:"#000000",includeMargin:!1},S=4,_=.1;function C(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[];return e.forEach((function(e,r){var o=null;e.forEach((function(i,a){if(!i&&null!==o)return n.push("M".concat(o+t," ").concat(r+t,"h").concat(a-o,"v1H").concat(o+t,"z")),void(o=null);if(a!==e.length-1)i&&null===o&&(o=a);else{if(!i)return;null===o?n.push("M".concat(a+t,",").concat(r+t," h1v1H").concat(a+t,"z")):n.push("M".concat(o+t,",").concat(r+t," h").concat(a+1-o,"v1H").concat(o+t,"z"))}}))})),n.join("")}function k(e,t){return e.slice().map((function(e,n){return n<t.y||n>=t.y+t.h?e:e.map((function(e,n){return(n<t.x||n>=t.x+t.w)&&e}))}))}function x(e,t){var n=e.imageSettings,r=e.size,o=e.includeMargin;if(null==n)return null;var i=o?S:0,a=t.length+2*i,c=Math.floor(r*_),s=a/r,u=(n.width||c)*s,l=(n.height||c)*s,f=null==n.x?t.length/2-u/2:n.x*s,p=null==n.y?t.length/2-l/2:n.y*s,d=null;if(n.excavate){var h=Math.floor(f),m=Math.floor(p);d={x:h,y:m,w:Math.ceil(u+f-h),h:Math.ceil(l+p-m)}}return{x:f,y:p,h:l,w:u,excavation:d}}var T=function(){try{(new Path2D).addPath(new Path2D)}catch(e){return!1}return!0}(),O=function(e){function t(){var e,n;s(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return v(d(n=f(this,(e=p(t)).call.apply(e,[this].concat(o)))),"_canvas",void 0),v(d(n),"_image",void 0),v(d(n),"state",{imgLoaded:!1}),v(d(n),"handleImageLoad",(function(){n.setState({imgLoaded:!0})})),n}return h(t,e),l(t,[{key:"componentDidMount",value:function(){this.update()}},{key:"componentDidUpdate",value:function(){this.update()}},{key:"update",value:function(){var e=this.props,t=e.value,n=e.size,r=e.level,o=e.bgColor,i=e.fgColor,a=e.includeMargin,c=e.imageSettings,s=new g(-1,b[r]);if(s.addData(w(t)),s.make(),null!=this._canvas){var u=this._canvas,l=u.getContext("2d");if(!l)return;var f=s.modules;if(null===f)return;var p=a?S:0,d=f.length+2*p,h=x(this.props,f);null!=c&&null!=h&&null!=h.excavation&&(f=k(f,h.excavation));var m=window.devicePixelRatio||1;u.height=u.width=n*m;var v=n/d*m;l.scale(v,v),l.fillStyle=o,l.fillRect(0,0,d,d),l.fillStyle=i,T?l.fill(new Path2D(C(f,p))):f.forEach((function(e,t){e.forEach((function(e,n){e&&l.fillRect(n+p,t+p,1,1)}))})),this.state.imgLoaded&&this._image&&null!=h&&l.drawImage(this._image,h.x+p,h.y+p,h.w,h.h)}}},{key:"render",value:function(){var e=this,t=this.props,n=(t.value,t.size),r=(t.level,t.bgColor,t.fgColor,t.style),i=(t.includeMargin,t.imageSettings),s=c(t,["value","size","level","bgColor","fgColor","style","includeMargin","imageSettings"]),u=a({height:n,width:n},r),l=null,f=i&&i.src;return null!=i&&null!=f&&(l=y.createElement("img",{src:f,style:{display:"none"},onLoad:this.handleImageLoad,ref:function(t){return e._image=t}})),y.createElement(y.Fragment,null,y.createElement("canvas",o({style:u,height:n,width:n,ref:function(t){return e._canvas=t}},s)),l)}}]),t}(y.PureComponent);v(O,"defaultProps",E);var P=function(e){function t(){return s(this,t),f(this,p(t).apply(this,arguments))}return h(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.value,n=e.size,r=e.level,i=e.bgColor,a=e.fgColor,s=e.includeMargin,u=e.imageSettings,l=c(e,["value","size","level","bgColor","fgColor","includeMargin","imageSettings"]),f=new g(-1,b[r]);f.addData(w(t)),f.make();var p=f.modules;if(null===p)return null;var d=s?S:0,h=p.length+2*d,m=x(this.props,p),v=null;null!=u&&null!=m&&(null!=m.excavation&&(p=k(p,m.excavation)),v=y.createElement("image",{xlinkHref:u.src,height:m.h,width:m.w,x:m.x+d,y:m.y+d,preserveAspectRatio:"none"}));var E=C(p,d);return y.createElement("svg",o({shapeRendering:"crispEdges",height:n,width:n,viewBox:"0 0 ".concat(h," ").concat(h)},l),y.createElement("path",{fill:i,d:"M0,0 h".concat(h,"v").concat(h,"H0z")}),y.createElement("path",{fill:a,d:E}),v)}}]),t}(y.PureComponent);v(P,"defaultProps",E);var R=function(e){var t=e.renderAs,n=c(e,["renderAs"]),r="svg"===t?P:O;return y.createElement(r,n)};R.defaultProps=a({renderAs:"canvas"},E),e.exports=R},function(e,t){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(","),r=e.name||"",o=e.type||"",i=o.replace(/\/.*$/,"");return n.some((function(e){var t=e.trim();return"."===t.charAt(0)?r.toLowerCase().endsWith(t.toLowerCase()):t.endsWith("/*")?i===t.replace(/\/.*$/,""):o===t}))}return!0}}])},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(this&&this[r]||r);else if(Array.isArray(r))e.push(o.apply(this,r));else if("object"===i)for(var a in r)n.call(r,a)&&r[a]&&e.push(this&&this[a]||a)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){e.exports={"btn-primary":"_1efWOZ",btnPrimary:"_1efWOZ","btn-secondary":"_1WZn8u",btnSecondary:"_1WZn8u","btn-disabled":"hSD9ab",btnDisabled:"hSD9ab"}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function a(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function c(e,t,n,r,i){if("function"!=typeof n)throw new TypeError("The listener must be a function");var c=new a(n,r||e,i),s=o?o+t:t;return e._events[s]?e._events[s].fn?e._events[s]=[e._events[s],c]:e._events[s].push(c):(e._events[s]=c,e._eventsCount++),e}function s(e,t){0==--e._eventsCount?e._events=new i:delete e._events[t]}function u(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),u.prototype.eventNames=function(){var e,t,n=[];if(0===this._eventsCount)return n;for(t in e=this._events)r.call(e,t)&&n.push(o?t.slice(1):t);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},u.prototype.listeners=function(e){var t=o?o+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,i=n.length,a=new Array(i);r<i;r++)a[r]=n[r].fn;return a},u.prototype.listenerCount=function(e){var t=o?o+e:e,n=this._events[t];return n?n.fn?1:n.length:0},u.prototype.emit=function(e,t,n,r,i,a){var c=o?o+e:e;if(!this._events[c])return!1;var s,u,l=this._events[c],f=arguments.length;if(l.fn){switch(l.once&&this.removeListener(e,l.fn,void 0,!0),f){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,t),!0;case 3:return l.fn.call(l.context,t,n),!0;case 4:return l.fn.call(l.context,t,n,r),!0;case 5:return l.fn.call(l.context,t,n,r,i),!0;case 6:return l.fn.call(l.context,t,n,r,i,a),!0}for(u=1,s=new Array(f-1);u<f;u++)s[u-1]=arguments[u];l.fn.apply(l.context,s)}else{var p,d=l.length;for(u=0;u<d;u++)switch(l[u].once&&this.removeListener(e,l[u].fn,void 0,!0),f){case 1:l[u].fn.call(l[u].context);break;case 2:l[u].fn.call(l[u].context,t);break;case 3:l[u].fn.call(l[u].context,t,n);break;case 4:l[u].fn.call(l[u].context,t,n,r);break;default:if(!s)for(p=1,s=new Array(f-1);p<f;p++)s[p-1]=arguments[p];l[u].fn.apply(l[u].context,s)}}return!0},u.prototype.on=function(e,t,n){return c(this,e,t,n,!1)},u.prototype.once=function(e,t,n){return c(this,e,t,n,!0)},u.prototype.removeListener=function(e,t,n,r){var i=o?o+e:e;if(!this._events[i])return this;if(!t)return s(this,i),this;var a=this._events[i];if(a.fn)a.fn!==t||r&&!a.once||n&&a.context!==n||s(this,i);else{for(var c=0,u=[],l=a.length;c<l;c++)(a[c].fn!==t||r&&!a[c].once||n&&a[c].context!==n)&&u.push(a[c]);u.length?this._events[i]=1===u.length?u[0]:u:s(this,i)}return this},u.prototype.removeAllListeners=function(e){var t;return e?(t=o?o+e:e,this._events[t]&&s(this,t)):(this._events=new i,this._eventsCount=0),this},u.prototype.off=u.prototype.removeListener,u.prototype.addListener=u.prototype.on,u.prefixed=o,u.EventEmitter=u,e.exports=u},function(e,t,n){e.exports=n(87)},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(){function e(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}return e.prototype.memoize=function(e){if(this._hasWeakSet)return!!this._inner.has(e)||(this._inner.add(e),!1);for(var t=0;t<this._inner.length;t++){if(this._inner[t]===e)return!0}return this._inner.push(e),!1},e.prototype.unmemoize=function(e){if(this._hasWeakSet)this._inner.delete(e);else for(var t=0;t<this._inner.length;t++)if(this._inner[t]===e){this._inner.splice(t,1);break}},e}()},,,function(e,t,n){},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(41),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,c=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function E(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var _=S.prototype=new E;_.constructor=S,r(_,w.prototype),_.isPureReactComponent=!0;var C={current:null},k={current:null},x=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,o={},a=null,c=null;if(null!=t)for(r in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var u=Array(s),l=0;l<s;l++)u[l]=arguments[l+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:c,props:o,_owner:k.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var R=/\/+/g,j=[];function D(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var s=!1;if(null===t)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return r(o,t,""===n?"."+M(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var l=n+M(c=t[u],u);s+=e(c,l,r,o)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=v&&t[v]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),u=0;!(c=t.next()).done;)s+=e(c=c.value,l=n+M(c,u++),r,o);else if("object"===c)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return s}(e,"",t,n)}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),I(e,A,t=D(t,i,r,o)),N(t)}function z(){var e=C.current;if(null===e)throw Error(y(321));return e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,L,t=D(null,null,t,n)),N(t)},count:function(e){return I(e,(function(){return null}),null)},toArray:function(e){var t=[];return F(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:S,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:c,Profiler:u,StrictMode:s,Suspense:d,createElement:O,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,c=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,s=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in t)x.call(t,l)&&!T.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==u?u[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){u=Array(l);for(var f=0;f<l;f++)u[f]=arguments[f+2];o.children=u}return{$$typeof:i,type:e.type,key:a,ref:c,props:o,_owner:s}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:C,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r}},B={default:U},H=B&&U||B;e.exports=H.default||H},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(41),i=n(70);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var c=null,s={};function u(){if(c)for(var e in s){var t=s[e],n=c.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,d=r;if(p.hasOwnProperty(d))throw Error(a(99,d));p[d]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&l(h[o],u,d);o=!0}else i.registrationName?(l(i.registrationName,u,d),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function l(e,t,n){if(d[e])throw Error(a(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};function m(e,t,n,r,o,i,a,c,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var v=!1,y=null,g=!1,b=null,w={onError:function(e){v=!0,y=e}};function E(e,t,n,r,o,i,a,c,s){v=!1,y=null,m.apply(w,arguments)}var S=null,_=null,C=null;function k(e,t,n){var r=e.type||"unknown-event";e.currentTarget=C(n),function(e,t,n,r,o,i,c,s,u){if(E.apply(this,arguments),v){if(!v)throw Error(a(198));var l=y;v=!1,y=null,g||(g=!0,b=l)}}(r,t,void 0,e),e.currentTarget=null}function x(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)k(e,t[r],n[r]);else t&&k(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function R(e){if(null!==e&&(O=x(O,e)),e=O,O=null,e){if(T(e,P),O)throw Error(a(95));if(g)throw e=b,g=!1,b=null,e}}var j={injectEventPluginOrder:function(e){if(c)throw Error(a(101));c=Array.prototype.slice.call(e),u()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!s.hasOwnProperty(t)||s[t]!==r){if(s[t])throw Error(a(102,t));s[t]=r,n=!0}}n&&u()}};function D(e,t){var n=e.stateNode;if(!n)return null;var r=S(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var N=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;N.hasOwnProperty("ReactCurrentDispatcher")||(N.ReactCurrentDispatcher={current:null}),N.hasOwnProperty("ReactCurrentBatchConfig")||(N.ReactCurrentBatchConfig={suspense:null});var I=/^(.*)[\\\/]/,M="function"==typeof Symbol&&Symbol.for,L=M?Symbol.for("react.element"):60103,A=M?Symbol.for("react.portal"):60106,F=M?Symbol.for("react.fragment"):60107,z=M?Symbol.for("react.strict_mode"):60108,U=M?Symbol.for("react.profiler"):60114,B=M?Symbol.for("react.provider"):60109,H=M?Symbol.for("react.context"):60110,W=M?Symbol.for("react.concurrent_mode"):60111,q=M?Symbol.for("react.forward_ref"):60112,G=M?Symbol.for("react.suspense"):60113,V=M?Symbol.for("react.suspense_list"):60120,$=M?Symbol.for("react.memo"):60115,K=M?Symbol.for("react.lazy"):60116;M&&Symbol.for("react.fundamental"),M&&Symbol.for("react.responder"),M&&Symbol.for("react.scope");var J="function"==typeof Symbol&&Symbol.iterator;function Y(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=J&&e[J]||e["@@iterator"])?e:null}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case F:return"Fragment";case A:return"Portal";case U:return"Profiler";case z:return"StrictMode";case G:return"Suspense";case V:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case H:return"Context.Consumer";case B:return"Context.Provider";case q:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case $:return X(e.type);case K:if(e=1===e._status?e._result:null)return X(e)}return null}function Q(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=X(e.type);n=null,r&&(n=X(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(I,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=_(e)){if("function"!=typeof ee)throw Error(a(280));var t=S(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ie(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function ce(e,t,n,r){return e(t,n,r)}function se(){}var ue=ae,le=!1,fe=!1;function pe(){null===te&&null===ne||(se(),ie())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ve={};function ye(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ge[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ge[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ge[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ge[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ge[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ge[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ge[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ge[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ge[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function Ee(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Se(e,t,n,r){var o=ge.hasOwnProperty(t)?ge[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(ve,e)||!he.call(me,e)&&(de.test(e)?ve[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function _e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ce(e){e._valueTracker||(e._valueTracker=function(e){var t=_e(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=_e(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Te(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ee(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Oe(e,t){null!=(t=t.checked)&&Se(e,"checked",t,!1)}function Pe(e,t){Oe(e,t);var n=Ee(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?je(e,t.type,n):t.hasOwnProperty("defaultValue")&&je(e,t.type,Ee(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function je(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function De(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Ee(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Me(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:Ee(n)}}function Le(e,t){var n=Ee(t.value),r=Ee(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),ge.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var Fe={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function ze(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ze(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Be,He=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Fe.svg||"innerHTML"in e)e.innerHTML=t;else{for((Be=Be||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Be.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function qe(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ge={animationend:qe("Animation","AnimationEnd"),animationiteration:qe("Animation","AnimationIteration"),animationstart:qe("Animation","AnimationStart"),transitionend:qe("Transition","TransitionEnd")},Ve={},$e={};function Ke(e){if(Ve[e])return Ve[e];if(!Ge[e])return e;var t,n=Ge[e];for(t in n)if(n.hasOwnProperty(t)&&t in $e)return Ve[e]=n[t];return e}Z&&($e=document.createElement("div").style,"AnimationEvent"in window||(delete Ge.animationend.animation,delete Ge.animationiteration.animation,delete Ge.animationstart.animation),"TransitionEvent"in window||delete Ge.transitionend.transition);var Je=Ke("animationend"),Ye=Ke("animationiteration"),Xe=Ke("animationstart"),Qe=Ke("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(a(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return nt(o),e;if(i===r)return nt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var c=!1,s=o.child;s;){if(s===n){c=!0,n=o,r=i;break}if(s===r){c=!0,r=o,n=i;break}s=s.sibling}if(!c){for(s=i.child;s;){if(s===n){c=!0,n=i,r=o;break}if(s===r){c=!0,r=i,n=o;break}s=s.sibling}if(!c)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,it,at,ct=!1,st=[],ut=null,lt=null,ft=null,pt=new Map,dt=new Map,ht=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),vt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function yt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function gt(e,t){switch(e){case"focus":case"blur":ut=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function bt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=yt(t,n,r,o),null!==t&&(null!==(t=dr(t))&&it(t)),e):(e.eventSystemFlags|=r,e)}function wt(e){var t=pr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){at(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=jn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=dr(t);return null!==n&&it(n),e.blockedOn=t,!1}return!0}function St(e,t,n){Et(e)&&n.delete(t)}function _t(){for(ct=!1;0<st.length;){var e=st[0];if(null!==e.blockedOn){null!==(e=dr(e.blockedOn))&&ot(e);break}var t=jn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:st.shift()}null!==ut&&Et(ut)&&(ut=null),null!==lt&&Et(lt)&&(lt=null),null!==ft&&Et(ft)&&(ft=null),pt.forEach(St),dt.forEach(St)}function Ct(e,t){e.blockedOn===t&&(e.blockedOn=null,ct||(ct=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,_t)))}function kt(e){function t(t){return Ct(t,e)}if(0<st.length){Ct(st[0],e);for(var n=1;n<st.length;n++){var r=st[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ut&&Ct(ut,e),null!==lt&&Ct(lt,e),null!==ft&&Ct(ft,e),pt.forEach(t),dt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)wt(n),null===n.blockedOn&&ht.shift()}function xt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Tt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ot(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function Pt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Tt(t);for(t=n.length;0<t--;)Ot(n[t],"captured",e);for(t=0;t<n.length;t++)Ot(n[t],"bubbled",e)}}function Rt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function jt(e){e&&e.dispatchConfig.registrationName&&Rt(e._targetInst,null,e)}function Dt(e){T(e,Pt)}function Nt(){return!0}function It(){return!1}function Mt(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Nt:It,this.isPropagationStopped=It,this}function Lt(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function At(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ft(e){e.eventPool=[],e.getPooled=Lt,e.release=At}o(Mt.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Nt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Nt)},persist:function(){this.isPersistent=Nt},isPersistent:It,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=It,this._dispatchInstances=this._dispatchListeners=null}}),Mt.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Mt.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Ft(n),n},Ft(Mt);var zt=Mt.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Ut=Mt.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Bt=Mt.extend({view:null,detail:null}),Ht=Bt.extend({relatedTarget:null});function Wt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var qt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Gt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Vt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function $t(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Vt[e])&&!!t[e]}function Kt(){return $t}for(var Jt=Bt.extend({key:function(e){if(e.key){var t=qt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Wt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Gt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?Wt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Yt=0,Xt=0,Qt=!1,Zt=!1,en=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Yt;return Yt=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Xt;return Xt=e.screenY,Zt?"mousemove"===e.type?e.screenY-t:0:(Zt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),on=Mt.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),an=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),cn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Je,"animationEnd",2],[Ye,"animationIteration",2],[Xe,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Qe,"transitionEnd",2],["waiting","waiting",2]],sn={},un={},ln=0;ln<cn.length;ln++){var fn=cn[ln],pn=fn[0],dn=fn[1],hn=fn[2],mn="on"+(dn[0].toUpperCase()+dn.slice(1)),vn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[pn],eventPriority:hn};sn[dn]=vn,un[pn]=vn}var yn={eventTypes:sn,getEventPriority:function(e){return void 0!==(e=un[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=un[e];if(!o)return null;switch(e){case"keypress":if(0===Wt(n))return null;case"keydown":case"keyup":e=Jt;break;case"blur":case"focus":e=Ht;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Je:case Ye:case Xe:e=zt;break;case Qe:e=on;break;case"scroll":e=Bt;break;case"wheel":e=an;break;case"copy":case"cut":case"paste":e=Ut;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=Mt}return Dt(t=e.getPooled(o,t,n,r)),t}},gn=i.unstable_UserBlockingPriority,bn=i.unstable_runWithPriority,wn=yn.getEventPriority,En=10,Sn=[];function _n(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=pr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=xt(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=e.eventSystemFlags,c=null,s=0;s<f.length;s++){var u=f[s];u&&(u=u.extractEvents(r,t,i,o,a))&&(c=x(c,u))}R(c)}}var Cn=!0;function kn(e,t){xn(t,e,!1)}function xn(e,t,n){switch(wn(t)){case 0:var r=Tn.bind(null,t,1);break;case 1:r=On.bind(null,t,1);break;default:r=Rn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Tn(e,t,n){le||se();var r=Rn,o=le;le=!0;try{ce(r,e,t,n)}finally{(le=o)||pe()}}function On(e,t,n){bn(gn,Rn.bind(null,e,t,n))}function Pn(e,t,n,r){if(Sn.length){var o=Sn.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=_n,n=e,fe)t(n,void 0);else{fe=!0;try{ue(t,n,void 0)}finally{fe=!1,pe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,Sn.length<En&&Sn.push(e)}}function Rn(e,t,n){if(Cn)if(0<st.length&&-1<mt.indexOf(e))e=yt(null,e,t,n),st.push(e);else{var r=jn(e,t,n);null===r?gt(e,n):-1<mt.indexOf(e)?(e=yt(r,e,t,n),st.push(e)):function(e,t,n,r){switch(t){case"focus":return ut=bt(ut,e,t,n,r),!0;case"dragenter":return lt=bt(lt,e,t,n,r),!0;case"mouseover":return ft=bt(ft,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return pt.set(o,bt(pt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,dt.set(o,bt(dt.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(gt(e,n),Pn(e,t,n,null))}}function jn(e,t,n){var r=xt(n);if(null!==(r=pr(r))){var o=et(r);if(null===o)r=null;else{var i=o.tag;if(13===i){if(null!==(r=tt(o)))return r;r=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Pn(e,t,n,r),null}function Dn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Nn=new("function"==typeof WeakMap?WeakMap:Map);function In(e){var t=Nn.get(e);return void 0===t&&(t=new Set,Nn.set(e,t)),t}function Mn(e,t,n){if(!n.has(e)){switch(e){case"scroll":xn(t,"scroll",!0);break;case"focus":case"blur":xn(t,"focus",!0),xn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Dn(e)&&xn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&kn(e,t)}n.add(e)}}var Ln={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},An=["Webkit","ms","Moz","O"];function Fn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Ln.hasOwnProperty(e)&&Ln[e]?(""+t).trim():t+"px"}function zn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Fn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Ln).forEach((function(e){An.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ln[t]=Ln[e]}))}));var Un=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Bn(e,t){if(t){if(Un[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function Hn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Wn(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)Mn(t[r],e,n)}function qn(){}function Gn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Vn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function $n(e,t){var n,r=Vn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Vn(r)}}function Kn(){for(var e=window,t=Gn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Gn((e=t.contentWindow).document)}return t}function Jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Yn="$",Xn="/$",Qn="$?",Zn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var or="function"==typeof setTimeout?setTimeout:void 0,ir="function"==typeof clearTimeout?clearTimeout:void 0;function ar(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function cr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Yn||n===Zn||n===Qn){if(0===t)return e;t--}else n===Xn&&t++}e=e.previousSibling}return null}var sr=Math.random().toString(36).slice(2),ur="__reactInternalInstance$"+sr,lr="__reactEventHandlers$"+sr,fr="__reactContainere$"+sr;function pr(e){var t=e[ur];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[ur]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=cr(e);null!==e;){if(n=e[ur])return n;e=cr(e)}return t}n=(e=n).parentNode}return null}function dr(e){return!(e=e[ur]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function mr(e){return e[lr]||null}var vr=null,yr=null,gr=null;function br(){if(gr)return gr;var e,t,n=yr,r=n.length,o="value"in vr?vr.value:vr.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return gr=o.slice(e,1<t?1-t:void 0)}var wr=Mt.extend({data:null}),Er=Mt.extend({data:null}),Sr=[9,13,27,32],_r=Z&&"CompositionEvent"in window,Cr=null;Z&&"documentMode"in document&&(Cr=document.documentMode);var kr=Z&&"TextEvent"in window&&!Cr,xr=Z&&(!_r||Cr&&8<Cr&&11>=Cr),Tr=String.fromCharCode(32),Or={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Pr=!1;function Rr(e,t){switch(e){case"keyup":return-1!==Sr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function jr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Dr=!1;var Nr={eventTypes:Or,extractEvents:function(e,t,n,r){var o;if(_r)e:{switch(e){case"compositionstart":var i=Or.compositionStart;break e;case"compositionend":i=Or.compositionEnd;break e;case"compositionupdate":i=Or.compositionUpdate;break e}i=void 0}else Dr?Rr(e,n)&&(i=Or.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=Or.compositionStart);return i?(xr&&"ko"!==n.locale&&(Dr||i!==Or.compositionStart?i===Or.compositionEnd&&Dr&&(o=br()):(yr="value"in(vr=r)?vr.value:vr.textContent,Dr=!0)),i=wr.getPooled(i,t,n,r),o?i.data=o:null!==(o=jr(n))&&(i.data=o),Dt(i),o=i):o=null,(e=kr?function(e,t){switch(e){case"compositionend":return jr(t);case"keypress":return 32!==t.which?null:(Pr=!0,Tr);case"textInput":return(e=t.data)===Tr&&Pr?null:e;default:return null}}(e,n):function(e,t){if(Dr)return"compositionend"===e||!_r&&Rr(e,t)?(e=br(),gr=yr=vr=null,Dr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return xr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Er.getPooled(Or.beforeInput,t,n,r)).data=e,Dt(t)):t=null,null===o?t:null===t?o:[o,t]}},Ir={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Mr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ir[e.type]:"textarea"===t}var Lr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ar(e,t,n){return(e=Mt.getPooled(Lr.change,e,t,n)).type="change",oe(n),Dt(e),e}var Fr=null,zr=null;function Ur(e){R(e)}function Br(e){if(ke(hr(e)))return e}function Hr(e,t){if("change"===e)return t}var Wr=!1;function qr(){Fr&&(Fr.detachEvent("onpropertychange",Gr),zr=Fr=null)}function Gr(e){if("value"===e.propertyName&&Br(zr))if(e=Ar(zr,e,xt(e)),le)R(e);else{le=!0;try{ae(Ur,e)}finally{le=!1,pe()}}}function Vr(e,t,n){"focus"===e?(qr(),zr=n,(Fr=t).attachEvent("onpropertychange",Gr)):"blur"===e&&qr()}function $r(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Br(zr)}function Kr(e,t){if("click"===e)return Br(t)}function Jr(e,t){if("input"===e||"change"===e)return Br(t)}Z&&(Wr=Dn("input")&&(!document.documentMode||9<document.documentMode));var Yr,Xr={eventTypes:Lr,_isInputEventSupported:Wr,extractEvents:function(e,t,n,r){var o=t?hr(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=Hr;else if(Mr(o))if(Wr)a=Jr;else{a=$r;var c=Vr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Kr);if(a&&(a=a(e,t)))return Ar(a,n,r);c&&c(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&je(o,"number",o.value)}},Qr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zr={eventTypes:Qr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?pr(t):null)&&(t!==(i=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var c=en,s=Qr.mouseLeave,u=Qr.mouseEnter,l="mouse";else"pointerout"!==e&&"pointerover"!==e||(c=tn,s=Qr.pointerLeave,u=Qr.pointerEnter,l="pointer");if(e=null==a?o:hr(a),o=null==t?o:hr(t),(s=c.getPooled(s,a,n,r)).type=l+"leave",s.target=e,s.relatedTarget=o,(r=c.getPooled(u,t,n,r)).type=l+"enter",r.target=o,r.relatedTarget=e,l=t,(c=a)&&l)e:{for(e=l,a=0,t=u=c;t;t=Tt(t))a++;for(t=0,o=e;o;o=Tt(o))t++;for(;0<a-t;)u=Tt(u),a--;for(;0<t-a;)e=Tt(e),t--;for(;a--;){if(u===e||u===e.alternate)break e;u=Tt(u),e=Tt(e)}u=null}else u=null;for(e=u,u=[];c&&c!==e&&(null===(a=c.alternate)||a!==e);)u.push(c),c=Tt(c);for(c=[];l&&l!==e&&(null===(a=l.alternate)||a!==e);)c.push(l),l=Tt(l);for(l=0;l<u.length;l++)Rt(u[l],"bubbled",s);for(l=c.length;0<l--;)Rt(c[l],"captured",r);return n===Yr?(Yr=null,[s]):(Yr=n,[s,r])}};var eo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},to=Object.prototype.hasOwnProperty;function no(e,t){if(eo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!to.call(t,n[r])||!eo(e[n[r]],t[n[r]]))return!1;return!0}var ro=Z&&"documentMode"in document&&11>=document.documentMode,oo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},io=null,ao=null,co=null,so=!1;function uo(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return so||null==io||io!==Gn(n)?null:("selectionStart"in(n=io)&&Jn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},co&&no(co,n)?null:(co=n,(e=Mt.getPooled(oo.select,ao,e,t)).type="select",e.target=io,Dt(e),e))}var lo={eventTypes:oo,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=In(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?hr(t):window,e){case"focus":(Mr(i)||"true"===i.contentEditable)&&(io=i,ao=t,co=null);break;case"blur":co=ao=io=null;break;case"mousedown":so=!0;break;case"contextmenu":case"mouseup":case"dragend":return so=!1,uo(n,r);case"selectionchange":if(ro)break;case"keydown":case"keyup":return uo(n,r)}return null}};j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),S=mr,_=dr,C=hr,j.injectEventPluginsByName({SimpleEventPlugin:yn,EnterLeaveEventPlugin:Zr,ChangeEventPlugin:Xr,SelectEventPlugin:lo,BeforeInputEventPlugin:Nr}),new Set;var fo=[],po=-1;function ho(e){0>po||(e.current=fo[po],fo[po]=null,po--)}function mo(e,t){po++,fo[po]=e.current,e.current=t}var vo={},yo={current:vo},go={current:!1},bo=vo;function wo(e,t){var n=e.type.contextTypes;if(!n)return vo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Eo(e){return null!=(e=e.childContextTypes)}function So(e){ho(go),ho(yo)}function _o(e){ho(go),ho(yo)}function Co(e,t,n){if(yo.current!==vo)throw Error(a(168));mo(yo,t),mo(go,n)}function ko(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,X(t)||"Unknown",i));return o({},n,{},r)}function xo(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||vo,bo=yo.current,mo(yo,t),mo(go,go.current),!0}function To(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=ko(e,t,bo),r.__reactInternalMemoizedMergedChildContext=t,ho(go),ho(yo),mo(yo,t)):ho(go),mo(go,n)}var Oo=i.unstable_runWithPriority,Po=i.unstable_scheduleCallback,Ro=i.unstable_cancelCallback,jo=i.unstable_shouldYield,Do=i.unstable_requestPaint,No=i.unstable_now,Io=i.unstable_getCurrentPriorityLevel,Mo=i.unstable_ImmediatePriority,Lo=i.unstable_UserBlockingPriority,Ao=i.unstable_NormalPriority,Fo=i.unstable_LowPriority,zo=i.unstable_IdlePriority,Uo={},Bo=void 0!==Do?Do:function(){},Ho=null,Wo=null,qo=!1,Go=No(),Vo=1e4>Go?No:function(){return No()-Go};function $o(){switch(Io()){case Mo:return 99;case Lo:return 98;case Ao:return 97;case Fo:return 96;case zo:return 95;default:throw Error(a(332))}}function Ko(e){switch(e){case 99:return Mo;case 98:return Lo;case 97:return Ao;case 96:return Fo;case 95:return zo;default:throw Error(a(332))}}function Jo(e,t){return e=Ko(e),Oo(e,t)}function Yo(e,t,n){return e=Ko(e),Po(e,t,n)}function Xo(e){return null===Ho?(Ho=[e],Wo=Po(Mo,Zo)):Ho.push(e),Uo}function Qo(){if(null!==Wo){var e=Wo;Wo=null,Ro(e)}Zo()}function Zo(){if(!qo&&null!==Ho){qo=!0;var e=0;try{var t=Ho;Jo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ho=null}catch(t){throw null!==Ho&&(Ho=Ho.slice(e+1)),Po(Mo,Qo),t}finally{qo=!1}}}var ei=3;function ti(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function ni(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ri={current:null},oi=null,ii=null,ai=null;function ci(){ai=ii=oi=null}function si(e,t){var n=e.type._context;mo(ri,n._currentValue),n._currentValue=t}function ui(e){var t=ri.current;ho(ri),e.type._context._currentValue=t}function li(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function fi(e,t){oi=e,ai=ii=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ga=!0),e.firstContext=null)}function pi(e,t){if(ai!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ai=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ii){if(null===oi)throw Error(a(308));ii=t,oi.dependencies={expirationTime:0,firstContext:t,responders:null}}else ii=ii.next=t;return e._currentValue}var di=!1;function hi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function mi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function vi(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function yi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function gi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=hi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=hi(e.memoizedState),o=n.updateQueue=hi(n.memoizedState)):r=e.updateQueue=mi(o):null===o&&(o=n.updateQueue=mi(r));null===o||r===o?yi(r,t):null===r.lastUpdate||null===o.lastUpdate?(yi(r,t),yi(o,t)):(yi(r,t),o.lastUpdate=t)}function bi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=hi(e.memoizedState):wi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function wi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=mi(t)),t}function Ei(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:di=!0}return r}function Si(e,t,n,r,o){di=!1;for(var i=(t=wi(e,t)).baseState,a=null,c=0,s=t.firstUpdate,u=i;null!==s;){var l=s.expirationTime;l<o?(null===a&&(a=s,i=u),c<l&&(c=l)):(Ts(l,s.suspenseConfig),u=Ei(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(l=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<o?(null===l&&(l=s,null===a&&(i=u)),c<f&&(c=f)):(u=Ei(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===l?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===l&&(i=u),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=l,Os(c),e.expirationTime=c,e.memoizedState=u}function _i(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Ci(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Ci(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Ci(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var ki=N.ReactCurrentBatchConfig,xi=(new r.Component).refs;function Ti(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Oi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hs(),o=ki.suspense;(o=vi(r=ms(r,e,o),o)).payload=t,null!=n&&(o.callback=n),gi(e,o),vs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hs(),o=ki.suspense;(o=vi(r=ms(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),gi(e,o),vs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hs(),r=ki.suspense;(r=vi(n=ms(n,e,r),r)).tag=2,null!=t&&(r.callback=t),gi(e,r),vs(e,n)}};function Pi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!no(n,r)||!no(o,i))}function Ri(e,t,n){var r=!1,o=vo,i=t.contextType;return"object"==typeof i&&null!==i?i=pi(i):(o=Eo(t)?bo:yo.current,i=(r=null!=(r=t.contextTypes))?wo(e,o):vo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Oi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function ji(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Oi.enqueueReplaceState(t,t.state,null)}function Di(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=xi;var i=t.contextType;"object"==typeof i&&null!==i?o.context=pi(i):(i=Eo(t)?bo:yo.current,o.context=wo(e,i)),null!==(i=e.updateQueue)&&(Si(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Ti(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Oi.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(Si(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Ni=Array.isArray;function Ii(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===xi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Mi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Li(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Ks(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function c(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Xs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ii(e,t,n),r.return=e,r):((r=Js(n.type,n.key,n.props,null,e.mode,r)).ref=Ii(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ys(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case L:return(n=Js(t.type,t.key,t.props,null,e.mode,n)).ref=Ii(e,null,t),n.return=e,n;case A:return(t=Qs(t,e.mode,n)).return=e,t}if(Ni(t)||Y(t))return(t=Ys(t,e.mode,n,null)).return=e,t;Mi(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case L:return n.key===o?n.type===F?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case A:return n.key===o?l(e,t,n,r):null}if(Ni(n)||Y(n))return null!==o?null:f(e,t,n,r,null);Mi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case L:return e=e.get(null===r.key?n:r.key)||null,r.type===F?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case A:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ni(r)||Y(r))return f(t,e=e.get(n)||null,r,o,null);Mi(t,r)}return null}function m(o,a,c,s){for(var u=null,l=null,f=a,m=a=0,v=null;null!==f&&m<c.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(o,f,c[m],s);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===l?u=y:l.sibling=y,l=y,f=v}if(m===c.length)return n(o,f),u;if(null===f){for(;m<c.length;m++)null!==(f=p(o,c[m],s))&&(a=i(f,a,m),null===l?u=f:l.sibling=f,l=f);return u}for(f=r(o,f);m<c.length;m++)null!==(v=h(f,o,m,c[m],s))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===l?u=v:l.sibling=v,l=v);return e&&f.forEach((function(e){return t(o,e)})),u}function v(o,c,s,u){var l=Y(s);if("function"!=typeof l)throw Error(a(150));if(null==(s=l.call(s)))throw Error(a(151));for(var f=l=null,m=c,v=c=0,y=null,g=s.next();null!==m&&!g.done;v++,g=s.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=d(o,m,g.value,u);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),c=i(b,c,v),null===f?l=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),l;if(null===m){for(;!g.done;v++,g=s.next())null!==(g=p(o,g.value,u))&&(c=i(g,c,v),null===f?l=g:f.sibling=g,f=g);return l}for(m=r(o,m);!g.done;v++,g=s.next())null!==(g=h(m,o,v,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),c=i(g,c,v),null===f?l=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),l}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===F&&null===i.key;u&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case L:e:{for(l=i.key,u=r;null!==u;){if(u.key===l){if(7===u.tag?i.type===F:u.elementType===i.type){n(e,u.sibling),(r=o(u,i.type===F?i.props.children:i.props)).ref=Ii(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===F?((r=Ys(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Js(i.type,i.key,i.props,null,e.mode,s)).ref=Ii(e,r,i),s.return=e,e=s)}return c(e);case A:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Qs(i,e.mode,s)).return=e,e=r}return c(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xs(i,e.mode,s)).return=e,e=r),c(e);if(Ni(i))return m(e,r,i,s);if(Y(i))return v(e,r,i,s);if(l&&Mi(e,i),void 0===i&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ai=Li(!0),Fi=Li(!1),zi={},Ui={current:zi},Bi={current:zi},Hi={current:zi};function Wi(e){if(e===zi)throw Error(a(174));return e}function qi(e,t){mo(Hi,t),mo(Bi,e),mo(Ui,zi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ue(null,"");break;default:t=Ue(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ho(Ui),mo(Ui,t)}function Gi(e){ho(Ui),ho(Bi),ho(Hi)}function Vi(e){Wi(Hi.current);var t=Wi(Ui.current),n=Ue(t,e.type);t!==n&&(mo(Bi,e),mo(Ui,n))}function $i(e){Bi.current===e&&(ho(Ui),ho(Bi))}var Ki={current:0};function Ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Qn||n.data===Zn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Yi(e,t){return{responder:e,props:t}}var Xi=N.ReactCurrentDispatcher,Qi=N.ReactCurrentBatchConfig,Zi=0,ea=null,ta=null,na=null,ra=null,oa=null,ia=null,aa=0,ca=null,sa=0,ua=!1,la=null,fa=0;function pa(){throw Error(a(321))}function da(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!eo(e[n],t[n]))return!1;return!0}function ha(e,t,n,r,o,i){if(Zi=i,ea=t,na=null!==e?e.memoizedState:null,Xi.current=null===na?Na:Ia,t=n(r,o),ua){do{ua=!1,fa+=1,na=null!==e?e.memoizedState:null,ia=ra,ca=oa=ta=null,Xi.current=Ia,t=n(r,o)}while(ua);la=null,fa=0}if(Xi.current=Da,(e=ea).memoizedState=ra,e.expirationTime=aa,e.updateQueue=ca,e.effectTag|=sa,e=null!==ta&&null!==ta.next,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,ca=null,sa=0,e)throw Error(a(300));return t}function ma(){Xi.current=Da,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,ca=null,sa=0,ua=!1,la=null,fa=0}function va(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===oa?ra=oa=e:oa=oa.next=e,oa}function ya(){if(null!==ia)ia=(oa=ia).next,na=null!==(ta=na)?ta.next:null;else{if(null===na)throw Error(a(310));var e={memoizedState:(ta=na).memoizedState,baseState:ta.baseState,queue:ta.queue,baseUpdate:ta.baseUpdate,next:null};oa=null===oa?ra=e:oa.next=e,na=ta.next}return oa}function ga(e,t){return"function"==typeof t?t(e):t}function ba(e){var t=ya(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<fa){var r=n.dispatch;if(null!==la){var o=la.get(n);if(void 0!==o){la.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return eo(i,t.memoizedState)||(Ga=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var c=t.baseUpdate;if(i=t.baseState,null!==c?(null!==r&&(r.next=null),r=c.next):r=null!==r?r.next:null,null!==r){var s=o=null,u=r,l=!1;do{var f=u.expirationTime;f<Zi?(l||(l=!0,s=c,o=i),f>aa&&Os(aa=f)):(Ts(f,u.suspenseConfig),i=u.eagerReducer===e?u.eagerState:e(i,u.action)),c=u,u=u.next}while(null!==u&&u!==r);l||(s=c,o=i),eo(i,t.memoizedState)||(Ga=!0),t.memoizedState=i,t.baseUpdate=s,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function wa(e){var t=va();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ga,lastRenderedState:e}).dispatch=ja.bind(null,ea,e),[t.memoizedState,e]}function Ea(e){return ba(ga)}function Sa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ca?(ca={lastEffect:null}).lastEffect=e.next=e:null===(t=ca.lastEffect)?ca.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ca.lastEffect=e),e}function _a(e,t,n,r){var o=va();sa|=e,o.memoizedState=Sa(t,n,void 0,void 0===r?null:r)}function Ca(e,t,n,r){var o=ya();r=void 0===r?null:r;var i=void 0;if(null!==ta){var a=ta.memoizedState;if(i=a.destroy,null!==r&&da(r,a.deps))return void Sa(0,n,i,r)}sa|=e,o.memoizedState=Sa(t,n,i,r)}function ka(e,t){return _a(516,192,e,t)}function xa(e,t){return Ca(516,192,e,t)}function Ta(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Oa(){}function Pa(e,t){return va().memoizedState=[e,void 0===t?null:t],e}function Ra(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&da(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ja(e,t,n){if(!(25>fa))throw Error(a(301));var r=e.alternate;if(e===ea||null!==r&&r===ea)if(ua=!0,e={expirationTime:Zi,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===la&&(la=new Map),void 0===(n=la.get(t)))la.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=hs(),i=ki.suspense;i={expirationTime:o=ms(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var c=t.last;if(null===c)i.next=i;else{var s=c.next;null!==s&&(i.next=s),c.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=r(u,n);if(i.eagerReducer=r,i.eagerState=l,eo(l,u))return}catch(e){}vs(e,o)}}var Da={readContext:pi,useCallback:pa,useContext:pa,useEffect:pa,useImperativeHandle:pa,useLayoutEffect:pa,useMemo:pa,useReducer:pa,useRef:pa,useState:pa,useDebugValue:pa,useResponder:pa,useDeferredValue:pa,useTransition:pa},Na={readContext:pi,useCallback:Pa,useContext:pi,useEffect:ka,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,_a(4,36,Ta.bind(null,t,e),n)},useLayoutEffect:function(e,t){return _a(4,36,e,t)},useMemo:function(e,t){var n=va();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=va();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ja.bind(null,ea,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},va().memoizedState=e},useState:wa,useDebugValue:Oa,useResponder:Yi,useDeferredValue:function(e,t){var n=wa(e),r=n[0],o=n[1];return ka((function(){i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===t?null:t;try{o(e)}finally{Qi.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=wa(!1),n=t[0],r=t[1];return[Pa((function(t){r(!0),i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qi.suspense=n}}))}),[e,n]),n]}},Ia={readContext:pi,useCallback:Ra,useContext:pi,useEffect:xa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ca(4,36,Ta.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ca(4,36,e,t)},useMemo:function(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&da(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ba,useRef:function(){return ya().memoizedState},useState:Ea,useDebugValue:Oa,useResponder:Yi,useDeferredValue:function(e,t){var n=Ea(),r=n[0],o=n[1];return xa((function(){i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===t?null:t;try{o(e)}finally{Qi.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=Ea(),n=t[0],r=t[1];return[Ra((function(t){r(!0),i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qi.suspense=n}}))}),[e,n]),n]}},Ma=null,La=null,Aa=!1;function Fa(e,t){var n=Vs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function za(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Aa){var t=La;if(t){var n=t;if(!za(e,t)){if(!(t=ar(n.nextSibling))||!za(e,t))return e.effectTag=-1025&e.effectTag|2,Aa=!1,void(Ma=e);Fa(Ma,n)}Ma=e,La=ar(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Aa=!1,Ma=e}}function Ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ma=e}function Ha(e){if(e!==Ma)return!1;if(!Aa)return Ba(e),Aa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=La;t;)Fa(e,t),t=ar(t.nextSibling);if(Ba(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Xn){if(0===t){La=ar(e.nextSibling);break e}t--}else n!==Yn&&n!==Zn&&n!==Qn||t++}e=e.nextSibling}La=null}}else La=Ma?ar(e.stateNode.nextSibling):null;return!0}function Wa(){La=Ma=null,Aa=!1}var qa=N.ReactCurrentOwner,Ga=!1;function Va(e,t,n,r){t.child=null===e?Fi(t,null,n,r):Ai(t,e.child,n,r)}function $a(e,t,n,r,o){n=n.render;var i=t.ref;return fi(t,o),r=ha(e,t,n,r,i,o),null===e||Ga?(t.effectTag|=1,Va(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),lc(e,t,o))}function Ka(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||$s(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Js(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ja(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:no)(o,r)&&e.ref===t.ref)?lc(e,t,i):(t.effectTag|=1,(e=Ks(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ja(e,t,n,r,o,i){return null!==e&&no(e.memoizedProps,r)&&e.ref===t.ref&&(Ga=!1,o<i)?lc(e,t,i):Xa(e,t,n,r,i)}function Ya(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Xa(e,t,n,r,o){var i=Eo(n)?bo:yo.current;return i=wo(t,i),fi(t,o),n=ha(e,t,n,r,i,o),null===e||Ga?(t.effectTag|=1,Va(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),lc(e,t,o))}function Qa(e,t,n,r,o){if(Eo(n)){var i=!0;xo(t)}else i=!1;if(fi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Ri(t,n,r),Di(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,c=t.memoizedProps;a.props=c;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=pi(u):u=wo(t,u=Eo(n)?bo:yo.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||s!==u)&&ji(t,a,r,u),di=!1;var p=t.memoizedState;s=a.state=p;var d=t.updateQueue;null!==d&&(Si(t,d,r,a,o),s=t.memoizedState),c!==r||p!==s||go.current||di?("function"==typeof l&&(Ti(t,n,l,r),s=t.memoizedState),(c=di||Pi(t,n,c,r,p,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=c):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,c=t.memoizedProps,a.props=t.type===t.elementType?c:ni(t.type,c),s=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=pi(u):u=wo(t,u=Eo(n)?bo:yo.current),(f="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||s!==u)&&ji(t,a,r,u),di=!1,s=t.memoizedState,p=a.state=s,null!==(d=t.updateQueue)&&(Si(t,d,r,a,o),p=t.memoizedState),c!==r||s!==p||go.current||di?("function"==typeof l&&(Ti(t,n,l,r),p=t.memoizedState),(l=di||Pi(t,n,c,r,s,p,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=l):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Za(e,t,n,r,i,o)}function Za(e,t,n,r,o,i){Ya(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&To(t,n,!1),lc(e,t,i);r=t.stateNode,qa.current=t;var c=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ai(t,e.child,null,i),t.child=Ai(t,null,c,i)):Va(e,t,c,i),t.memoizedState=r.state,o&&To(t,n,!0),t.child}function ec(e){var t=e.stateNode;t.pendingContext?Co(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Co(0,t.context,!1),qi(e,t.containerInfo)}var tc,nc,rc,oc,ic={dehydrated:null,retryTime:0};function ac(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ki.current,c=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(c=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),mo(Ki,1&a),null===e){if(void 0!==i.fallback&&Ua(t),c){if(c=i.fallback,(i=Ys(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ys(c,o,n,null)).return=t,i.sibling=n,t.memoizedState=ic,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Fi(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,c){if(i=i.fallback,(n=Ks(e,e.pendingProps)).return=t,0==(2&t.mode)&&(c=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=c;null!==c;)c.return=n,c=c.sibling;return(o=Ks(o,i,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=ic,t.child=n,o}return n=Ai(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,c){if(c=i.fallback,(i=Ys(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ys(c,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=ic,t.child=i,n}return t.memoizedState=null,t.child=Ai(t,e,i.children,n)}function cc(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),li(e.return,t)}function sc(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function uc(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Va(e,t,r.children,n),0!=(2&(r=Ki.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&cc(e,n);else if(19===e.tag)cc(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(mo(Ki,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),sc(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}sc(t,!0,n,null,i,t.lastEffect);break;case"together":sc(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function lc(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&Os(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ks(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ks(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fc(e){e.effectTag|=4}function pc(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function dc(e){switch(e.tag){case 1:Eo(e.type)&&So();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Gi(),_o(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return $i(e),null;case 13:return ho(Ki),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ho(Ki),null;case 4:return Gi(),null;case 10:return ui(e),null;default:return null}}function hc(e,t){return{value:e,source:t,stack:Q(t)}}tc=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},nc=function(){},rc=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var c,s,u=t.stateNode;switch(Wi(Ui.current),e=null,n){case"input":a=xe(u,a),r=xe(u,r),e=[];break;case"option":a=De(u,a),r=De(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Ie(u,a),r=Ie(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=qn)}for(c in Bn(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c)for(s in u=a[c])u.hasOwnProperty(s)&&(n||(n={}),n[s]="");else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(d.hasOwnProperty(c)?e||(e=[]):(e=e||[]).push(c,null));for(c in r){var l=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&l!==u&&(null!=l||null!=u))if("style"===c)if(u){for(s in u)!u.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in l)l.hasOwnProperty(s)&&u[s]!==l[s]&&(n||(n={}),n[s]=l[s])}else n||(e||(e=[]),e.push(c,n)),n=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,u=u?u.__html:void 0,null!=l&&u!==l&&(e=e||[]).push(c,""+l)):"children"===c?u===l||"string"!=typeof l&&"number"!=typeof l||(e=e||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(d.hasOwnProperty(c)?(null!=l&&Wn(i,c),e||u===l||(e=[])):(e=e||[]).push(c,l))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&fc(t)}},oc=function(e,t,n,r){n!==r&&fc(t)};var mc="function"==typeof WeakSet?WeakSet:Set;function vc(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=Q(n)),null!==n&&X(n.type),t=t.value,null!==e&&1===e.tag&&X(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function yc(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Us(e,t)}else t.current=null}function gc(e,t){switch(t.tag){case 0:case 11:case 15:bc(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ni(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function bc(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function wc(e,t,n){switch("function"==typeof qs&&qs(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Jo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Us(o,e)}}e=e.next}while(e!==r)}))}break;case 1:yc(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Us(e,t)}}(t,n);break;case 5:yc(t);break;case 4:Cc(e,t,n)}}function Ec(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&Ec(t)}function Sc(e){return 5===e.tag||3===e.tag||4===e.tag}function _c(e){e:{for(var t=e.return;null!==t;){if(Sc(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Sc(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i){var c=i?o.stateNode:o.stateNode.instance;if(n)if(r){var s=c;c=n,8===(i=t).nodeType?i.parentNode.insertBefore(s,c):i.insertBefore(s,c)}else t.insertBefore(c,n);else r?(8===(s=t).nodeType?(i=s.parentNode).insertBefore(c,s):(i=s).appendChild(c),null!=(s=s._reactRootContainer)||null!==i.onclick||(i.onclick=qn)):t.appendChild(c)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Cc(e,t,n){for(var r,o,i=t,c=!1;;){if(!c){c=i.return;e:for(;;){if(null===c)throw Error(a(160));switch(r=c.stateNode,c.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}c=c.return}c=!0}if(5===i.tag||6===i.tag){e:for(var s=e,u=i,l=n,f=u;;)if(wc(s,f,l),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===u)break;for(;null===f.sibling;){if(null===f.return||f.return===u)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(s=r,u=i.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(wc(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(c=!1)}i.sibling.return=i.return,i=i.sibling}}function kc(e,t){switch(t.tag){case 0:case 11:case 14:case 15:bc(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[lr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Oe(n,r),Hn(e,o),t=Hn(e,r),o=0;o<i.length;o+=2){var c=i[o],s=i[o+1];"style"===c?zn(n,s):"dangerouslySetInnerHTML"===c?He(n,s):"children"===c?We(n,s):Se(n,c,s,t)}switch(e){case"input":Pe(n,r);break;case"textarea":Le(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ne(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ne(n,!!r.multiple,r.defaultValue,!0):Ne(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,kt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,ts=Vo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=Fn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}xc(t);break;case 19:xc(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function xc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new mc),t.forEach((function(t){var r=Hs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Tc="function"==typeof WeakMap?WeakMap:Map;function Oc(e,t,n){(n=vi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){os||(os=!0,is=r),vc(e,t)},n}function Pc(e,t,n){(n=vi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return vc(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===as?as=new Set([this]):as.add(this),vc(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Rc,jc=Math.ceil,Dc=N.ReactCurrentDispatcher,Nc=N.ReactCurrentOwner,Ic=0,Mc=8,Lc=16,Ac=32,Fc=0,zc=1,Uc=2,Bc=3,Hc=4,Wc=5,qc=Ic,Gc=null,Vc=null,$c=0,Kc=Fc,Jc=null,Yc=1073741823,Xc=1073741823,Qc=null,Zc=0,es=!1,ts=0,ns=500,rs=null,os=!1,is=null,as=null,cs=!1,ss=null,us=90,ls=null,fs=0,ps=null,ds=0;function hs(){return(qc&(Lc|Ac))!==Ic?1073741821-(Vo()/10|0):0!==ds?ds:ds=1073741821-(Vo()/10|0)}function ms(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=$o();if(0==(4&t))return 99===r?1073741823:1073741822;if((qc&Lc)!==Ic)return $c;if(null!==n)e=ti(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=ti(e,150,100);break;case 97:case 96:e=ti(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Gc&&e===$c&&--e,e}function vs(e,t){if(50<fs)throw fs=0,ps=null,Error(a(185));if(null!==(e=ys(e,t))){var n=$o();1073741823===t?(qc&Mc)!==Ic&&(qc&(Lc|Ac))===Ic?Es(e):(bs(e),qc===Ic&&Qo()):bs(e),(4&qc)===Ic||98!==n&&99!==n||(null===ls?ls=new Map([[e,t]]):(void 0===(n=ls.get(e))||n>t)&&ls.set(e,t))}}function ys(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Gc===o&&(Os(t),Kc===Hc&&tu(o,$c)),nu(o,t)),o}function gs(e){var t=e.lastExpiredTime;return 0!==t?t:eu(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function bs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Xo(Es.bind(null,e));else{var t=gs(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hs();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Uo&&Ro(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Xo(Es.bind(null,e)):Yo(r,ws.bind(null,e),{timeout:10*(1073741821-t)-Vo()}),e.callbackNode=t}}}function ws(e,t){if(ds=0,t)return ru(e,t=hs()),bs(e),null;var n=gs(e);if(0!==n){if(t=e.callbackNode,(qc&(Lc|Ac))!==Ic)throw Error(a(327));if(As(),e===Gc&&n===$c||Cs(e,n),null!==Vc){var r=qc;qc|=Lc;for(var o=xs();;)try{Rs();break}catch(t){ks(e,t)}if(ci(),qc=r,Dc.current=o,Kc===zc)throw t=Jc,Cs(e,n),tu(e,n),bs(e),t;if(null===Vc)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Kc,Gc=null,r){case Fc:case zc:throw Error(a(345));case Uc:ru(e,2<n?2:n);break;case Bc:if(tu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ns(o)),1073741823===Yc&&10<(o=ts+ns-Vo())){if(es){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,Cs(e,n);break}}if(0!==(i=gs(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=or(Is.bind(null,e),o);break}Is(e);break;case Hc:if(tu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ns(o)),es&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,Cs(e,n);break}if(0!==(o=gs(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Xc?r=10*(1073741821-Xc)-Vo():1073741823===Yc?r=0:(r=10*(1073741821-Yc)-5e3,0>(r=(o=Vo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*jc(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=or(Is.bind(null,e),r);break}Is(e);break;case Wc:if(1073741823!==Yc&&null!==Qc){i=Yc;var c=Qc;if(0>=(r=0|c.busyMinDurationMs)?r=0:(o=0|c.busyDelayMs,r=(i=Vo()-(10*(1073741821-i)-(0|c.timeoutMs||5e3)))<=o?0:o+r-i),10<r){tu(e,n),e.timeoutHandle=or(Is.bind(null,e),r);break}}Is(e);break;default:throw Error(a(329))}if(bs(e),e.callbackNode===t)return ws.bind(null,e)}}return null}function Es(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Is(e);else{if((qc&(Lc|Ac))!==Ic)throw Error(a(327));if(As(),e===Gc&&t===$c||Cs(e,t),null!==Vc){var n=qc;qc|=Lc;for(var r=xs();;)try{Ps();break}catch(t){ks(e,t)}if(ci(),qc=n,Dc.current=r,Kc===zc)throw n=Jc,Cs(e,t),tu(e,t),bs(e),n;if(null!==Vc)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Gc=null,Is(e),bs(e)}}return null}function Ss(e,t){var n=qc;qc|=1;try{return e(t)}finally{(qc=n)===Ic&&Qo()}}function _s(e,t){var n=qc;qc&=-2,qc|=Mc;try{return e(t)}finally{(qc=n)===Ic&&Qo()}}function Cs(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ir(n)),null!==Vc)for(n=Vc.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&So();break;case 3:Gi(),_o();break;case 5:$i(r);break;case 4:Gi();break;case 13:case 19:ho(Ki);break;case 10:ui(r)}n=n.return}Gc=e,Vc=Ks(e.current,null),$c=t,Kc=Fc,Jc=null,Xc=Yc=1073741823,Qc=null,Zc=0,es=!1}function ks(e,t){for(;;){try{if(ci(),ma(),null===Vc||null===Vc.return)return Kc=zc,Jc=t,null;e:{var n=e,r=Vc.return,o=Vc,i=t;if(t=$c,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==i&&"object"==typeof i&&"function"==typeof i.then){var a=i,c=0!=(1&Ki.current),s=r;do{var u;if(u=13===s.tag){var l=s.memoizedState;if(null!==l)u=null!==l.dehydrated;else{var f=s.memoizedProps;u=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!c)}}if(u){var p=s.updateQueue;if(null===p){var d=new Set;d.add(a),s.updateQueue=d}else p.add(a);if(0==(2&s.mode)){if(s.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=vi(1073741823,null);h.tag=2,gi(o,h)}o.expirationTime=1073741823;break e}i=void 0,o=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new Tc,i=new Set,m.set(a,i)):void 0===(i=m.get(a))&&(i=new Set,m.set(a,i)),!i.has(o)){i.add(o);var v=Bs.bind(null,n,a,o);a.then(v,v)}s.effectTag|=4096,s.expirationTime=t;break e}s=s.return}while(null!==s);i=Error((X(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Q(o))}Kc!==Wc&&(Kc=Uc),i=hc(i,o),s=r;do{switch(s.tag){case 3:a=i,s.effectTag|=4096,s.expirationTime=t,bi(s,Oc(s,a,t));break e;case 1:a=i;var y=s.type,g=s.stateNode;if(0==(64&s.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===as||!as.has(g)))){s.effectTag|=4096,s.expirationTime=t,bi(s,Pc(s,a,t));break e}}s=s.return}while(null!==s)}Vc=Ds(Vc)}catch(e){t=e;continue}break}}function xs(){var e=Dc.current;return Dc.current=Da,null===e?Da:e}function Ts(e,t){e<Yc&&2<e&&(Yc=e),null!==t&&e<Xc&&2<e&&(Xc=e,Qc=t)}function Os(e){e>Zc&&(Zc=e)}function Ps(){for(;null!==Vc;)Vc=js(Vc)}function Rs(){for(;null!==Vc&&!jo();)Vc=js(Vc)}function js(e){var t=Rc(e.alternate,e,$c);return e.memoizedProps=e.pendingProps,null===t&&(t=Ds(e)),Nc.current=null,t}function Ds(e){Vc=e;do{var t=Vc.alternate;if(e=Vc.return,0==(2048&Vc.effectTag)){e:{var n=t,r=$c,i=(t=Vc).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Eo(t.type)&&So();break;case 3:Gi(),_o(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(null===n||null===n.child)&&Ha(t)&&fc(t),nc(t);break;case 5:$i(t),r=Wi(Hi.current);var c=t.type;if(null!==n&&null!=t.stateNode)rc(n,t,c,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var s=Wi(Ui.current);if(Ha(t)){var u=(i=t).stateNode;n=i.type;var l=i.memoizedProps,f=r;switch(u[ur]=i,u[lr]=l,c=void 0,r=u,n){case"iframe":case"object":case"embed":kn("load",r);break;case"video":case"audio":for(u=0;u<Ze.length;u++)kn(Ze[u],r);break;case"source":kn("error",r);break;case"img":case"image":case"link":kn("error",r),kn("load",r);break;case"form":kn("reset",r),kn("submit",r);break;case"details":kn("toggle",r);break;case"input":Te(r,l),kn("invalid",r),Wn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},kn("invalid",r),Wn(f,"onChange");break;case"textarea":Me(r,l),kn("invalid",r),Wn(f,"onChange")}for(c in Bn(n,l),u=null,l)l.hasOwnProperty(c)&&(s=l[c],"children"===c?"string"==typeof s?r.textContent!==s&&(u=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(u=["children",""+s]):d.hasOwnProperty(c)&&null!=s&&Wn(f,c));switch(n){case"input":Ce(r),Re(r,l,!0);break;case"textarea":Ce(r),Ae(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=qn)}c=u,i.updateQueue=c,(i=null!==c)&&fc(t)}else{n=t,f=c,l=i,u=9===r.nodeType?r:r.ownerDocument,s===Fe.html&&(s=ze(f)),s===Fe.html?"script"===f?((l=u.createElement("div")).innerHTML="<script><\/script>",u=l.removeChild(l.firstChild)):"string"==typeof l.is?u=u.createElement(f,{is:l.is}):(u=u.createElement(f),"select"===f&&(f=u,l.multiple?f.multiple=!0:l.size&&(f.size=l.size))):u=u.createElementNS(s,f),(l=u)[ur]=n,l[lr]=i,tc(l,t,!1,!1),t.stateNode=l;var p=r,h=Hn(f=c,n=i);switch(f){case"iframe":case"object":case"embed":kn("load",l),r=n;break;case"video":case"audio":for(r=0;r<Ze.length;r++)kn(Ze[r],l);r=n;break;case"source":kn("error",l),r=n;break;case"img":case"image":case"link":kn("error",l),kn("load",l),r=n;break;case"form":kn("reset",l),kn("submit",l),r=n;break;case"details":kn("toggle",l),r=n;break;case"input":Te(l,n),r=xe(l,n),kn("invalid",l),Wn(p,"onChange");break;case"option":r=De(l,n);break;case"select":l._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),kn("invalid",l),Wn(p,"onChange");break;case"textarea":Me(l,n),r=Ie(l,n),kn("invalid",l),Wn(p,"onChange");break;default:r=n}Bn(f,r),u=void 0,s=f;var m=l,v=r;for(u in v)if(v.hasOwnProperty(u)){var y=v[u];"style"===u?zn(m,y):"dangerouslySetInnerHTML"===u?null!=(y=y?y.__html:void 0)&&He(m,y):"children"===u?"string"==typeof y?("textarea"!==s||""!==y)&&We(m,y):"number"==typeof y&&We(m,""+y):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(d.hasOwnProperty(u)?null!=y&&Wn(p,u):null!=y&&Se(m,u,y,h))}switch(f){case"input":Ce(l),Re(l,n,!1);break;case"textarea":Ce(l),Ae(l);break;case"option":null!=n.value&&l.setAttribute("value",""+Ee(n.value));break;case"select":(r=l).multiple=!!n.multiple,null!=(l=n.value)?Ne(r,!!n.multiple,l,!1):null!=n.defaultValue&&Ne(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(l.onclick=qn)}(i=nr(c,i))&&fc(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)oc(n,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));r=Wi(Hi.current),Wi(Ui.current),Ha(t)?(c=(i=t).stateNode,r=i.memoizedProps,c[ur]=i,(i=c.nodeValue!==r)&&fc(t)):(c=t,(i=(9===r.nodeType?r:r.ownerDocument).createTextNode(i))[ur]=c,t.stateNode=i)}break;case 11:break;case 13:if(ho(Ki),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}i=null!==i,c=!1,null===n?void 0!==t.memoizedProps.fallback&&Ha(t):(c=null!==(r=n.memoizedState),i||null===r||null!==(r=n.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=r,r.nextEffect=l):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),i&&!c&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ki.current)?Kc===Fc&&(Kc=Bc):(Kc!==Fc&&Kc!==Bc||(Kc=Hc),0!==Zc&&null!==Gc&&(tu(Gc,$c),nu(Gc,Zc)))),(i||c)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Gi(),nc(t);break;case 10:ui(t);break;case 9:case 14:break;case 17:Eo(t.type)&&So();break;case 19:if(ho(Ki),null===(i=t.memoizedState))break;if(c=0!=(64&t.effectTag),null===(l=i.rendering)){if(c)pc(i,!1);else if(Kc!==Fc||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(l=Ji(n))){for(t.effectTag|=64,pc(i,!1),null!==(c=l.updateQueue)&&(t.updateQueue=c,t.effectTag|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=r,c=t.child;null!==c;)n=i,(r=c).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(l=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=l.childExpirationTime,r.expirationTime=l.expirationTime,r.child=l.child,r.memoizedProps=l.memoizedProps,r.memoizedState=l.memoizedState,r.updateQueue=l.updateQueue,n=l.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),c=c.sibling;mo(Ki,1&Ki.current|2),t=t.child;break e}n=n.sibling}}else{if(!c)if(null!==(n=Ji(l))){if(t.effectTag|=64,c=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),pc(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate){null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else Vo()>i.tailExpiration&&1<r&&(t.effectTag|=64,c=!0,pc(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=i.last)?r.sibling=l:t.child=l,i.last=l)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=Vo()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,i=Ki.current,mo(Ki,i=c?1&i|2:1&i),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(i=Vc,1===$c||1!==i.childExpirationTime){for(c=0,r=i.child;null!==r;)(n=r.expirationTime)>c&&(c=n),(l=r.childExpirationTime)>c&&(c=l),r=r.sibling;i.childExpirationTime=c}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Vc.firstEffect),null!==Vc.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Vc.firstEffect),e.lastEffect=Vc.lastEffect),1<Vc.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Vc:e.firstEffect=Vc,e.lastEffect=Vc))}else{if(null!==(t=dc(Vc)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Vc.sibling))return t;Vc=e}while(null!==Vc);return Kc===Fc&&(Kc=Wc),null}function Ns(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Is(e){var t=$o();return Jo(99,Ms.bind(null,e,t)),null}function Ms(e,t){do{As()}while(null!==ss);if((qc&(Lc|Ac))!==Ic)throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Ns(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Gc&&(Vc=Gc=null,$c=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=qc;qc|=Ac,Nc.current=null,er=Cn;var c=Kn();if(Jn(c)){if("selectionStart"in c)var s={start:c.selectionStart,end:c.selectionEnd};else e:{var u=(s=(s=c.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(u&&0!==u.rangeCount){s=u.anchorNode;var l=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var p=0,d=-1,h=-1,m=0,v=0,y=c,g=null;t:for(;;){for(var b;y!==s||0!==l&&3!==y.nodeType||(d=p+l),y!==f||0!==u&&3!==y.nodeType||(h=p+u),3===y.nodeType&&(p+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===c)break t;if(g===s&&++m===l&&(d=p),g===f&&++v===u&&(h=p),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}s=-1===d||-1===h?null:{start:d,end:h}}else s=null}s=s||{start:0,end:0}}else s=null;tr={focusedElem:c,selectionRange:s},Cn=!1,rs=o;do{try{Ls()}catch(e){if(null===rs)throw Error(a(330));Us(rs,e),rs=rs.nextEffect}}while(null!==rs);rs=o;do{try{for(c=e,s=t;null!==rs;){var w=rs.effectTag;if(16&w&&We(rs.stateNode,""),128&w){var E=rs.alternate;if(null!==E){var S=E.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&w){case 2:_c(rs),rs.effectTag&=-3;break;case 6:_c(rs),rs.effectTag&=-3,kc(rs.alternate,rs);break;case 1024:rs.effectTag&=-1025;break;case 1028:rs.effectTag&=-1025,kc(rs.alternate,rs);break;case 4:kc(rs.alternate,rs);break;case 8:Cc(c,l=rs,s),Ec(l)}rs=rs.nextEffect}}catch(e){if(null===rs)throw Error(a(330));Us(rs,e),rs=rs.nextEffect}}while(null!==rs);if(S=tr,E=Kn(),w=S.focusedElem,s=S.selectionRange,E!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==s&&Jn(w)&&(E=s.start,void 0===(S=s.end)&&(S=E),"selectionStart"in w?(w.selectionStart=E,w.selectionEnd=Math.min(S,w.value.length)):(S=(E=w.ownerDocument||document)&&E.defaultView||window).getSelection&&(S=S.getSelection(),l=w.textContent.length,c=Math.min(s.start,l),s=void 0===s.end?c:Math.min(s.end,l),!S.extend&&c>s&&(l=s,s=c,c=l),l=$n(w,c),f=$n(w,s),l&&f&&(1!==S.rangeCount||S.anchorNode!==l.node||S.anchorOffset!==l.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((E=E.createRange()).setStart(l.node,l.offset),S.removeAllRanges(),c>s?(S.addRange(E),S.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),S.addRange(E))))),E=[];for(S=w;S=S.parentNode;)1===S.nodeType&&E.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<E.length;w++)(S=E[w]).element.scrollLeft=S.left,S.element.scrollTop=S.top}tr=null,Cn=!!er,er=null,e.current=n,rs=o;do{try{for(w=r;null!==rs;){var _=rs.effectTag;if(36&_){var C=rs.alternate;switch(S=w,(E=rs).tag){case 0:case 11:case 15:bc(16,32,E);break;case 1:var k=E.stateNode;if(4&E.effectTag)if(null===C)k.componentDidMount();else{var x=E.elementType===E.type?C.memoizedProps:ni(E.type,C.memoizedProps);k.componentDidUpdate(x,C.memoizedState,k.__reactInternalSnapshotBeforeUpdate)}var T=E.updateQueue;null!==T&&_i(0,T,k);break;case 3:var O=E.updateQueue;if(null!==O){if(c=null,null!==E.child)switch(E.child.tag){case 5:c=E.child.stateNode;break;case 1:c=E.child.stateNode}_i(0,O,c)}break;case 5:var P=E.stateNode;null===C&&4&E.effectTag&&nr(E.type,E.memoizedProps)&&P.focus();break;case 6:case 4:case 12:break;case 13:if(null===E.memoizedState){var R=E.alternate;if(null!==R){var j=R.memoizedState;if(null!==j){var D=j.dehydrated;null!==D&&kt(D)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&_){E=void 0;var N=rs.ref;if(null!==N){var I=rs.stateNode;switch(rs.tag){case 5:E=I;break;default:E=I}"function"==typeof N?N(E):N.current=E}}rs=rs.nextEffect}}catch(e){if(null===rs)throw Error(a(330));Us(rs,e),rs=rs.nextEffect}}while(null!==rs);rs=null,Bo(),qc=i}else e.current=n;if(cs)cs=!1,ss=e,us=t;else for(rs=o;null!==rs;)t=rs.nextEffect,rs.nextEffect=null,rs=t;if(0===(t=e.firstPendingTime)&&(as=null),1073741823===t?e===ps?fs++:(fs=0,ps=e):fs=0,"function"==typeof Ws&&Ws(n.stateNode,r),bs(e),os)throw os=!1,e=is,is=null,e;return(qc&Mc)!==Ic?null:(Qo(),null)}function Ls(){for(;null!==rs;){var e=rs.effectTag;0!=(256&e)&&gc(rs.alternate,rs),0==(512&e)||cs||(cs=!0,Yo(97,(function(){return As(),null}))),rs=rs.nextEffect}}function As(){if(90!==us){var e=97<us?97:us;return us=90,Jo(e,Fs)}}function Fs(){if(null===ss)return!1;var e=ss;if(ss=null,(qc&(Lc|Ac))!==Ic)throw Error(a(331));var t=qc;for(qc|=Ac,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:bc(128,0,n),bc(0,64,n)}}catch(t){if(null===e)throw Error(a(330));Us(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return qc=t,Qo(),!0}function zs(e,t,n){gi(e,t=Oc(e,t=hc(n,t),1073741823)),null!==(e=ys(e,1073741823))&&bs(e)}function Us(e,t){if(3===e.tag)zs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){zs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===as||!as.has(r))){gi(n,e=Pc(n,e=hc(t,e),1073741823)),null!==(n=ys(n,1073741823))&&bs(n);break}}n=n.return}}function Bs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Gc===e&&$c===n?Kc===Hc||Kc===Bc&&1073741823===Yc&&Vo()-ts<ns?Cs(e,$c):es=!0:eu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),bs(e)))}function Hs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=ms(t=hs(),e,null)),null!==(e=ys(e,t))&&bs(e)}Rc=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||go.current)Ga=!0;else{if(r<n){switch(Ga=!1,t.tag){case 3:ec(t),Wa();break;case 5:if(Vi(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Eo(t.type)&&xo(t);break;case 4:qi(t,t.stateNode.containerInfo);break;case 10:si(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ac(e,t,n):(mo(Ki,1&Ki.current),null!==(t=lc(e,t,n))?t.sibling:null);mo(Ki,1&Ki.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return uc(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),mo(Ki,Ki.current),!r)return null}return lc(e,t,n)}Ga=!1}}else Ga=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=wo(t,yo.current),fi(t,n),o=ha(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,ma(),Eo(r)){var i=!0;xo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var c=r.getDerivedStateFromProps;"function"==typeof c&&Ti(t,r,c,e),o.updater=Oi,t.stateNode=o,o._reactInternalFiber=t,Di(t,r,e,n),t=Za(null,t,r,!0,i,n)}else t.tag=0,Va(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return $s(e)?1:0;if(null!=e){if((e=e.$$typeof)===q)return 11;if(e===$)return 14}return 2}(o),e=ni(o,e),i){case 0:t=Xa(null,t,o,e,n);break;case 1:t=Qa(null,t,o,e,n);break;case 11:t=$a(null,t,o,e,n);break;case 14:t=Ka(null,t,o,ni(o.type,e),r,n);break;default:throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Xa(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 1:return r=t.type,o=t.pendingProps,Qa(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 3:if(ec(t),null===(r=t.updateQueue))throw Error(a(282));if(o=null!==(o=t.memoizedState)?o.element:null,Si(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Wa(),t=lc(e,t,n);else{if((o=t.stateNode.hydrate)&&(La=ar(t.stateNode.containerInfo.firstChild),Ma=t,o=Aa=!0),o)for(n=Fi(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Va(e,t,r,n),Wa();t=t.child}return t;case 5:return Vi(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,c=o.children,rr(r,o)?c=null:null!==i&&rr(r,i)&&(t.effectTag|=16),Ya(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Va(e,t,c,n),t=t.child),t;case 6:return null===e&&Ua(t),null;case 13:return ac(e,t,n);case 4:return qi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ai(t,null,r,n):Va(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,$a(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 7:return Va(e,t,t.pendingProps,n),t.child;case 8:case 12:return Va(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,c=t.memoizedProps,si(t,i=o.value),null!==c){var s=c.value;if(0===(i=eo(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(c.children===o.children&&!go.current){t=lc(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){c=s.child;for(var l=u.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&i)){1===s.tag&&((l=vi(n,null)).tag=2,gi(s,l)),s.expirationTime<n&&(s.expirationTime=n),null!==(l=s.alternate)&&l.expirationTime<n&&(l.expirationTime=n),li(s.return,n),u.expirationTime<n&&(u.expirationTime=n);break}l=l.next}}else c=10===s.tag&&s.type===t.type?null:s.child;if(null!==c)c.return=s;else for(c=s;null!==c;){if(c===t){c=null;break}if(null!==(s=c.sibling)){s.return=c.return,c=s;break}c=c.return}s=c}}Va(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,fi(t,n),r=r(o=pi(o,i.unstable_observedBits)),t.effectTag|=1,Va(e,t,r,n),t.child;case 14:return i=ni(o=t.type,t.pendingProps),Ka(e,t,o,i=ni(o.type,i),r,n);case 15:return Ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ni(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Eo(r)?(e=!0,xo(t)):e=!1,fi(t,n),Ri(t,r,o),Di(t,r,o,n),Za(null,t,r,!0,e,n);case 19:return uc(e,t,n)}throw Error(a(156,t.tag))};var Ws=null,qs=null;function Gs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Vs(e,t,n,r){return new Gs(e,t,n,r)}function $s(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ks(e,t){var n=e.alternate;return null===n?((n=Vs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Js(e,t,n,r,o,i){var c=2;if(r=e,"function"==typeof e)$s(e)&&(c=1);else if("string"==typeof e)c=5;else e:switch(e){case F:return Ys(n.children,o,i,t);case W:c=8,o|=7;break;case z:c=8,o|=1;break;case U:return(e=Vs(12,n,t,8|o)).elementType=U,e.type=U,e.expirationTime=i,e;case G:return(e=Vs(13,n,t,o)).type=G,e.elementType=G,e.expirationTime=i,e;case V:return(e=Vs(19,n,t,o)).elementType=V,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:c=10;break e;case H:c=9;break e;case q:c=11;break e;case $:c=14;break e;case K:c=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Vs(c,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Ys(e,t,n,r){return(e=Vs(7,e,r,t)).expirationTime=n,e}function Xs(e,t,n){return(e=Vs(6,e,null,t)).expirationTime=n,e}function Qs(e,t,n){return(t=Vs(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zs(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function eu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function tu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function nu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function ru(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function ou(e,t,n,r){var o=t.current,i=hs(),c=ki.suspense;i=ms(i,o,c);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(Eo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var u=n.type;if(Eo(u)){n=ko(n,u,s);break e}}n=s}else n=vo;return null===t.context?t.context=n:t.pendingContext=n,(t=vi(i,c)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),gi(o,t),vs(o,i),i}function iu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function au(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function cu(e,t){au(e,t),(e=e.alternate)&&au(e,t)}function su(e,t,n){var r=new Zs(e,t,n=null!=n&&!0===n.hydrate),o=Vs(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=In(e);mt.forEach((function(n){Mn(n,e,t)})),vt.forEach((function(n){Mn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function uu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function lu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var c=o;o=function(){var e=iu(a);c.call(e)}}ou(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new su(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=iu(a);s.call(e)}}_s((function(){ou(t,a,e,o)}))}return iu(a)}function fu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!uu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}su.prototype.render=function(e,t){ou(e,this._internalRoot,null,void 0===t?null:t)},su.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;ou(null,t,null,(function(){r[fr]=null,null!==n&&n()}))},ot=function(e){if(13===e.tag){var t=ti(hs(),150,100);vs(e,t),cu(e,t)}},it=function(e){if(13===e.tag){hs();var t=ei++;vs(e,t),cu(e,t)}},at=function(e){if(13===e.tag){var t=hs();vs(e,t=ms(t,e,null)),cu(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Pe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=mr(r);if(!o)throw Error(a(90));ke(r),Pe(r,o)}}}break;case"textarea":Le(e,n);break;case"select":null!=(t=n.value)&&Ne(e,!!n.multiple,t,!1)}},ae=Ss,ce=function(e,t,n,r){var o=qc;qc|=4;try{return Jo(98,e.bind(null,t,n,r))}finally{(qc=o)===Ic&&Qo()}},se=function(){(qc&(1|Lc|Ac))===Ic&&(function(){if(null!==ls){var e=ls;ls=null,e.forEach((function(e,t){ru(t,e),bs(t)})),Qo()}}(),As())},ue=function(e,t){var n=qc;qc|=2;try{return e(t)}finally{(qc=n)===Ic&&Qo()}};var pu,du,hu={createPortal:fu,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!uu(t))throw Error(a(200));return lu(null,e,t,!0,n)},render:function(e,t,n){if(!uu(t))throw Error(a(200));return lu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!uu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return lu(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!uu(e))throw Error(a(40));return!!e._reactRootContainer&&(_s((function(){lu(null,null,e,!1,(function(){e._reactRootContainer=null,e[fr]=null}))})),!0)},unstable_createPortal:function(){return fu.apply(void 0,arguments)},unstable_batchedUpdates:Ss,flushSync:function(e,t){if((qc&(Lc|Ac))!==Ic)throw Error(a(187));var n=qc;qc|=1;try{return Jo(99,e.bind(null,t))}finally{qc=n,Qo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[dr,hr,mr,j.injectEventPluginsByName,p,Dt,function(e){T(e,jt)},oe,ie,Rn,R,As,{current:!1}]}};du=(pu={findFiberByHostInstance:pr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ws=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},qs=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},pu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:N.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return du?du(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var mu={default:hu},vu=mu&&hu||mu;e.exports=vu.default||vu},function(e,t,n){"use strict";e.exports=n(71)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,c;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,u=null,l=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(l,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(l,0))},o=function(e,t){u=setTimeout(e,t)},i=function(){clearTimeout(u)},a=function(){return!1},c=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var y=d.now();t.unstable_now=function(){return d.now()-y}}var g=!1,b=null,w=-1,E=5,S=0;a=function(){return t.unstable_now()>=S},c=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,C=_.port2;_.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();S=e+E;try{b(!0,e)?C.postMessage(null):(g=!1,b=null)}catch(e){throw C.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,C.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){m(w),w=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<O(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],c=i+1,s=e[c];if(void 0!==a&&0>O(a,n))void 0!==s&&0>O(s,a)?(e[r]=s,e[c]=n,r=c):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>O(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],R=[],j=1,D=null,N=3,I=!1,M=!1,L=!1;function A(e){for(var t=x(R);null!==t;){if(null===t.callback)T(R);else{if(!(t.startTime<=e))break;T(R),t.sortIndex=t.expirationTime,k(P,t)}t=x(R)}}function F(e){if(L=!1,A(e),!M)if(null!==x(P))M=!0,r(z);else{var t=x(R);null!==t&&o(F,t.startTime-e)}}function z(e,n){M=!1,L&&(L=!1,i()),I=!0;var r=N;try{for(A(n),D=x(P);null!==D&&(!(D.expirationTime>n)||e&&!a());){var c=D.callback;if(null!==c){D.callback=null,N=D.priorityLevel;var s=c(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?D.callback=s:D===x(P)&&T(P),A(n)}else T(P);D=x(P)}if(null!==D)var u=!0;else{var l=x(R);null!==l&&o(F,l.startTime-n),u=!1}return u}finally{D=null,N=r,I=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=c;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,a){var c=t.unstable_now();if("object"==typeof a&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?c+s:c,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),s=c;return e={id:j++,callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>c?(e.sortIndex=s,k(R,e),null===x(P)&&e===x(R)&&(L?i():L=!0,o(F,s-c))):(e.sortIndex=a,k(P,e),M||I||(M=!0,r(z))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_shouldYield=function(){var e=t.unstable_now();A(e);var n=x(P);return n!==D&&null!==D&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<D.expirationTime||a()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){M||I||(M=!0,r(z))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return x(P)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=n(73);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case s:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case d:case y:case v:case u:return e;default:return t}}case i:return t}}}function S(e){return E(e)===p}t.typeOf=E,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=l,t.ContextProvider=u,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=s,t.StrictMode=c,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===s||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===u||e.$$typeof===l||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w)},t.isAsyncMode=function(e){return S(e)||E(e)===f},t.isConcurrentMode=S,t.isContextConsumer=function(e){return E(e)===l},t.isContextProvider=function(e){return E(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===d},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===s},t.isStrictMode=function(e){return E(e)===c},t.isSuspense=function(e){return E(e)===h}},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=function(e,t,n){var r=l;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return P()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=C(a,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=u(e,t,n);if("normal"===s.type){if(r=n.done?d:f,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=d,n.method="throw",n.arg=s.arg)}}}(e,n,a),i}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var l="suspendedStart",f="suspendedYield",p="executing",d="completed",h={};function m(){}function v(){}function y(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(O([])));w&&w!==n&&r.call(w,i)&&(g=w);var E=y.prototype=m.prototype=Object.create(g);function S(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function _(e){var t;this._invoke=function(n,o){function i(){return new Promise((function(t,i){!function t(n,o,i,a){var c=u(e[n],e,o);if("throw"!==c.type){var s=c.arg,l=s.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then((function(e){t("next",e,i,a)}),(function(e){t("throw",e,i,a)})):Promise.resolve(l).then((function(e){s.value=e,i(s)}),(function(e){return t("throw",e,i,a)}))}a(c.arg)}(n,o,t,i)}))}return t=t?t.then(i,i):i()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:P}}function P(){return{value:t,done:!0}}return v.prototype=E.constructor=y,y.constructor=v,y[c]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c in e||(e[c]="GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},S(_.prototype),_.prototype[a]=function(){return this},e.AsyncIterator=_,e.async=function(t,n,r,o){var i=new _(s(t,n,r,o));return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(E),E[c]="Generator",E[i]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(x),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:O(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CopyToClipboard=void 0;var r=i(n(0)),o=i(n(78));function i(e){return e&&e.__esModule?e:{default:e}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,c=new Array(i),s=0;s<i;s++)c[s]=arguments[s];return n=function(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?f(e):t}(this,(e=l(t)).call.apply(e,[this].concat(c))),d(f(n),"onClick",(function(e){var t=n.props,i=t.text,a=t.onCopy,c=t.children,s=t.options,u=r.default.Children.only(c),l=(0,o.default)(i,s);a&&a(i,l),u&&u.props&&"function"==typeof u.props.onClick&&u.props.onClick(e)})),n}var n,i,h;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),n=t,(i=[{key:"render",value:function(){var e=this.props,t=(e.text,e.onCopy,e.options,e.children),n=s(e,["text","onCopy","options","children"]),o=r.default.Children.only(t);return r.default.cloneElement(o,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n,{onClick:this.onClick}))}}])&&u(n.prototype,i),h&&u(n,h),t}(r.default.PureComponent);t.CopyToClipboard=h,d(h,"defaultProps",{onCopy:void 0,options:void 0})},function(e,t,n){"use strict";var r=n(79),o="Copy to clipboard: #{key}, Enter";e.exports=function(e,t){var n,i,a,c,s,u,l=!1;t||(t={}),n=t.debug||!1;try{if(a=r(),c=document.createRange(),s=document.getSelection(),(u=document.createElement("span")).textContent=e,u.style.all="unset",u.style.position="fixed",u.style.top=0,u.style.clip="rect(0, 0, 0, 0)",u.style.whiteSpace="pre",u.style.webkitUserSelect="text",u.style.MozUserSelect="text",u.style.msUserSelect="text",u.style.userSelect="text",u.addEventListener("copy",(function(n){n.stopPropagation(),t.format&&(n.preventDefault(),n.clipboardData.clearData(),n.clipboardData.setData(t.format,e))})),document.body.appendChild(u),c.selectNodeContents(u),s.addRange(c),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");l=!0}catch(r){n&&console.error("unable to copy using execCommand: ",r),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),l=!0}catch(r){n&&console.error("unable to copy using clipboardData: ",r),n&&console.error("falling back to prompt"),i=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:o),window.prompt(i,e)}}finally{s&&("function"==typeof s.removeRange?s.removeRange(c):s.removeAllRanges()),u&&document.body.removeChild(u),a()}return l}},function(e,t){e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],r=0;r<e.rangeCount;r++)n.push(e.getRangeAt(r));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}},function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},function(e,t,n){var r=n(83),o=n(84),i=n(85),a=n(86),c=n(45);function s(e,t){this.typeNumber=e,this.errorCorrectLevel=t,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}var u=s.prototype;u.addData=function(e){var t=new r(e);this.dataList.push(t),this.dataCache=null},u.isDark=function(e,t){if(e<0||this.moduleCount<=e||t<0||this.moduleCount<=t)throw new Error(e+","+t);return this.modules[e][t]},u.getModuleCount=function(){return this.moduleCount},u.make=function(){if(this.typeNumber<1){var e=1;for(e=1;e<40;e++){for(var t=o.getRSBlocks(e,this.errorCorrectLevel),n=new i,r=0,c=0;c<t.length;c++)r+=t[c].dataCount;for(c=0;c<this.dataList.length;c++){var s=this.dataList[c];n.put(s.mode,4),n.put(s.getLength(),a.getLengthInBits(s.mode,e)),s.write(n)}if(n.getLengthInBits()<=8*r)break}this.typeNumber=e}this.makeImpl(!1,this.getBestMaskPattern())},u.makeImpl=function(e,t){this.moduleCount=4*this.typeNumber+17,this.modules=new Array(this.moduleCount);for(var n=0;n<this.moduleCount;n++){this.modules[n]=new Array(this.moduleCount);for(var r=0;r<this.moduleCount;r++)this.modules[n][r]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(e,t),this.typeNumber>=7&&this.setupTypeNumber(e),null==this.dataCache&&(this.dataCache=s.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,t)},u.setupPositionProbePattern=function(e,t){for(var n=-1;n<=7;n++)if(!(e+n<=-1||this.moduleCount<=e+n))for(var r=-1;r<=7;r++)t+r<=-1||this.moduleCount<=t+r||(this.modules[e+n][t+r]=0<=n&&n<=6&&(0==r||6==r)||0<=r&&r<=6&&(0==n||6==n)||2<=n&&n<=4&&2<=r&&r<=4)},u.getBestMaskPattern=function(){for(var e=0,t=0,n=0;n<8;n++){this.makeImpl(!0,n);var r=a.getLostPoint(this);(0==n||e>r)&&(e=r,t=n)}return t},u.createMovieClip=function(e,t,n){var r=e.createEmptyMovieClip(t,n);this.make();for(var o=0;o<this.modules.length;o++)for(var i=1*o,a=0;a<this.modules[o].length;a++){var c=1*a;this.modules[o][a]&&(r.beginFill(0,100),r.moveTo(c,i),r.lineTo(c+1,i),r.lineTo(c+1,i+1),r.lineTo(c,i+1),r.endFill())}return r},u.setupTimingPattern=function(){for(var e=8;e<this.moduleCount-8;e++)null==this.modules[e][6]&&(this.modules[e][6]=e%2==0);for(var t=8;t<this.moduleCount-8;t++)null==this.modules[6][t]&&(this.modules[6][t]=t%2==0)},u.setupPositionAdjustPattern=function(){for(var e=a.getPatternPosition(this.typeNumber),t=0;t<e.length;t++)for(var n=0;n<e.length;n++){var r=e[t],o=e[n];if(null==this.modules[r][o])for(var i=-2;i<=2;i++)for(var c=-2;c<=2;c++)this.modules[r+i][o+c]=-2==i||2==i||-2==c||2==c||0==i&&0==c}},u.setupTypeNumber=function(e){for(var t=a.getBCHTypeNumber(this.typeNumber),n=0;n<18;n++){var r=!e&&1==(t>>n&1);this.modules[Math.floor(n/3)][n%3+this.moduleCount-8-3]=r}for(n=0;n<18;n++){r=!e&&1==(t>>n&1);this.modules[n%3+this.moduleCount-8-3][Math.floor(n/3)]=r}},u.setupTypeInfo=function(e,t){for(var n=this.errorCorrectLevel<<3|t,r=a.getBCHTypeInfo(n),o=0;o<15;o++){var i=!e&&1==(r>>o&1);o<6?this.modules[o][8]=i:o<8?this.modules[o+1][8]=i:this.modules[this.moduleCount-15+o][8]=i}for(o=0;o<15;o++){i=!e&&1==(r>>o&1);o<8?this.modules[8][this.moduleCount-o-1]=i:o<9?this.modules[8][15-o-1+1]=i:this.modules[8][15-o-1]=i}this.modules[this.moduleCount-8][8]=!e},u.mapData=function(e,t){for(var n=-1,r=this.moduleCount-1,o=7,i=0,c=this.moduleCount-1;c>0;c-=2)for(6==c&&c--;;){for(var s=0;s<2;s++)if(null==this.modules[r][c-s]){var u=!1;i<e.length&&(u=1==(e[i]>>>o&1)),a.getMask(t,r,c-s)&&(u=!u),this.modules[r][c-s]=u,-1==--o&&(i++,o=7)}if((r+=n)<0||this.moduleCount<=r){r-=n,n=-n;break}}},s.PAD0=236,s.PAD1=17,s.createData=function(e,t,n){for(var r=o.getRSBlocks(e,t),c=new i,u=0;u<n.length;u++){var l=n[u];c.put(l.mode,4),c.put(l.getLength(),a.getLengthInBits(l.mode,e)),l.write(c)}var f=0;for(u=0;u<r.length;u++)f+=r[u].dataCount;if(c.getLengthInBits()>8*f)throw new Error("code length overflow. ("+c.getLengthInBits()+">"+8*f+")");for(c.getLengthInBits()+4<=8*f&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;!(c.getLengthInBits()>=8*f||(c.put(s.PAD0,8),c.getLengthInBits()>=8*f));)c.put(s.PAD1,8);return s.createBytes(c,r)},s.createBytes=function(e,t){for(var n=0,r=0,o=0,i=new Array(t.length),s=new Array(t.length),u=0;u<t.length;u++){var l=t[u].dataCount,f=t[u].totalCount-l;r=Math.max(r,l),o=Math.max(o,f),i[u]=new Array(l);for(var p=0;p<i[u].length;p++)i[u][p]=255&e.buffer[p+n];n+=l;var d=a.getErrorCorrectPolynomial(f),h=new c(i[u],d.getLength()-1).mod(d);s[u]=new Array(d.getLength()-1);for(p=0;p<s[u].length;p++){var m=p+h.getLength()-s[u].length;s[u][p]=m>=0?h.get(m):0}}var v=0;for(p=0;p<t.length;p++)v+=t[p].totalCount;var y=new Array(v),g=0;for(p=0;p<r;p++)for(u=0;u<t.length;u++)p<i[u].length&&(y[g++]=i[u][p]);for(p=0;p<o;p++)for(u=0;u<t.length;u++)p<s[u].length&&(y[g++]=s[u][p]);return y},e.exports=s},function(e,t,n){var r=n(43);function o(e){this.mode=r.MODE_8BIT_BYTE,this.data=e}o.prototype={getLength:function(e){return this.data.length},write:function(e){for(var t=0;t<this.data.length;t++)e.put(this.data.charCodeAt(t),8)}},e.exports=o},function(e,t,n){var r=n(44);function o(e,t){this.totalCount=e,this.dataCount=t}o.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],o.getRSBlocks=function(e,t){var n=o.getRsBlockTable(e,t);if(null==n)throw new Error("bad rs block @ typeNumber:"+e+"/errorCorrectLevel:"+t);for(var r=n.length/3,i=new Array,a=0;a<r;a++)for(var c=n[3*a+0],s=n[3*a+1],u=n[3*a+2],l=0;l<c;l++)i.push(new o(s,u));return i},o.getRsBlockTable=function(e,t){switch(t){case r.L:return o.RS_BLOCK_TABLE[4*(e-1)+0];case r.M:return o.RS_BLOCK_TABLE[4*(e-1)+1];case r.Q:return o.RS_BLOCK_TABLE[4*(e-1)+2];case r.H:return o.RS_BLOCK_TABLE[4*(e-1)+3];default:return}},e.exports=o},function(e,t){function n(){this.buffer=new Array,this.length=0}n.prototype={get:function(e){var t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(var n=0;n<t;n++)this.putBit(1==(e>>>t-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){var t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=n},function(e,t,n){var r=n(43),o=n(45),i=n(46),a=0,c=1,s=2,u=3,l=4,f=5,p=6,d=7,h={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(e){for(var t=e<<10;h.getBCHDigit(t)-h.getBCHDigit(h.G15)>=0;)t^=h.G15<<h.getBCHDigit(t)-h.getBCHDigit(h.G15);return(e<<10|t)^h.G15_MASK},getBCHTypeNumber:function(e){for(var t=e<<12;h.getBCHDigit(t)-h.getBCHDigit(h.G18)>=0;)t^=h.G18<<h.getBCHDigit(t)-h.getBCHDigit(h.G18);return e<<12|t},getBCHDigit:function(e){for(var t=0;0!=e;)t++,e>>>=1;return t},getPatternPosition:function(e){return h.PATTERN_POSITION_TABLE[e-1]},getMask:function(e,t,n){switch(e){case a:return(t+n)%2==0;case c:return t%2==0;case s:return n%3==0;case u:return(t+n)%3==0;case l:return(Math.floor(t/2)+Math.floor(n/3))%2==0;case f:return t*n%2+t*n%3==0;case p:return(t*n%2+t*n%3)%2==0;case d:return(t*n%3+(t+n)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}},getErrorCorrectPolynomial:function(e){for(var t=new o([1],0),n=0;n<e;n++)t=t.multiply(new o([1,i.gexp(n)],0));return t},getLengthInBits:function(e,t){if(1<=t&&t<10)switch(e){case r.MODE_NUMBER:return 10;case r.MODE_ALPHA_NUM:return 9;case r.MODE_8BIT_BYTE:case r.MODE_KANJI:return 8;default:throw new Error("mode:"+e)}else if(t<27)switch(e){case r.MODE_NUMBER:return 12;case r.MODE_ALPHA_NUM:return 11;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 10;default:throw new Error("mode:"+e)}else{if(!(t<41))throw new Error("type:"+t);switch(e){case r.MODE_NUMBER:return 14;case r.MODE_ALPHA_NUM:return 13;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 12;default:throw new Error("mode:"+e)}}},getLostPoint:function(e){for(var t=e.getModuleCount(),n=0,r=0;r<t;r++)for(var o=0;o<t;o++){for(var i=0,a=e.isDark(r,o),c=-1;c<=1;c++)if(!(r+c<0||t<=r+c))for(var s=-1;s<=1;s++)o+s<0||t<=o+s||0==c&&0==s||a==e.isDark(r+c,o+s)&&i++;i>5&&(n+=3+i-5)}for(r=0;r<t-1;r++)for(o=0;o<t-1;o++){var u=0;e.isDark(r,o)&&u++,e.isDark(r+1,o)&&u++,e.isDark(r,o+1)&&u++,e.isDark(r+1,o+1)&&u++,0!=u&&4!=u||(n+=3)}for(r=0;r<t;r++)for(o=0;o<t-6;o++)e.isDark(r,o)&&!e.isDark(r,o+1)&&e.isDark(r,o+2)&&e.isDark(r,o+3)&&e.isDark(r,o+4)&&!e.isDark(r,o+5)&&e.isDark(r,o+6)&&(n+=40);for(o=0;o<t;o++)for(r=0;r<t-6;r++)e.isDark(r,o)&&!e.isDark(r+1,o)&&e.isDark(r+2,o)&&e.isDark(r+3,o)&&e.isDark(r+4,o)&&!e.isDark(r+5,o)&&e.isDark(r+6,o)&&(n+=40);var l=0;for(o=0;o<t;o++)for(r=0;r<t;r++)e.isDark(r,o)&&l++;return n+=10*(Math.abs(100*l/t/t-50)/5)}};e.exports=h},function(e,t,n){"use strict";var r=n(9),o=n(47),i=n(89),a=n(53);function c(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var s=c(n(50));s.Axios=i,s.create=function(e){return c(a(s.defaults,e))},s.Cancel=n(54),s.CancelToken=n(101),s.isCancel=n(49),s.all=function(e){return Promise.all(e)},s.spread=n(102),e.exports=s,e.exports.default=s},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(9),o=n(48),i=n(90),a=n(91),c=n(53);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=c(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},s.prototype.getUri=function(e){return e=c(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=s},function(e,t,n){"use strict";var r=n(9);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(9),o=n(92),i=n(49),a=n(50),c=n(99),s=n(100);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!c(e.url)&&(e.url=s(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(52);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(9),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(9);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(9);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var c=[];c.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&c.push("expires="+new Date(n).toGMTString()),r.isString(o)&&c.push("path="+o),r.isString(i)&&c.push("domain="+i),!0===a&&c.push("secure"),document.cookie=c.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(54);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"shimGetUserMedia",(function(){return T})),n.d(r,"shimGetDisplayMedia",(function(){return O})),n.d(r,"shimMediaStream",(function(){return P})),n.d(r,"shimOnTrack",(function(){return R})),n.d(r,"shimGetSendersWithDtmf",(function(){return j})),n.d(r,"shimGetStats",(function(){return D})),n.d(r,"shimSenderReceiverGetStats",(function(){return N})),n.d(r,"shimAddTrackRemoveTrackWithNative",(function(){return I})),n.d(r,"shimAddTrackRemoveTrack",(function(){return M})),n.d(r,"shimPeerConnection",(function(){return L})),n.d(r,"fixNegotiationNeeded",(function(){return A}));var o={};n.r(o),n.d(o,"shimGetUserMedia",(function(){return U})),n.d(o,"shimGetDisplayMedia",(function(){return B})),n.d(o,"shimPeerConnection",(function(){return H})),n.d(o,"shimReplaceTrack",(function(){return W}));var i={};n.r(i),n.d(i,"shimGetUserMedia",(function(){return q})),n.d(i,"shimGetDisplayMedia",(function(){return G})),n.d(i,"shimOnTrack",(function(){return V})),n.d(i,"shimPeerConnection",(function(){return $})),n.d(i,"shimSenderGetStats",(function(){return K})),n.d(i,"shimReceiverGetStats",(function(){return J})),n.d(i,"shimRemoveStream",(function(){return Y})),n.d(i,"shimRTCDataChannel",(function(){return X})),n.d(i,"shimAddTransceiver",(function(){return Q})),n.d(i,"shimCreateOffer",(function(){return Z})),n.d(i,"shimCreateAnswer",(function(){return ee}));var a={};n.r(a),n.d(a,"shimLocalStreamsAPI",(function(){return te})),n.d(a,"shimRemoteStreamsAPI",(function(){return ne})),n.d(a,"shimCallbacksAPI",(function(){return re})),n.d(a,"shimGetUserMedia",(function(){return oe})),n.d(a,"shimConstraints",(function(){return ie})),n.d(a,"shimRTCIceServerUrls",(function(){return ae})),n.d(a,"shimTrackEventTransceiver",(function(){return ce})),n.d(a,"shimCreateOfferLegacy",(function(){return se}));var c={};n.r(c),n.d(c,"shimRTCIceCandidate",(function(){return fe})),n.d(c,"shimMaxMessageSize",(function(){return pe})),n.d(c,"shimSendThrowTypeError",(function(){return de})),n.d(c,"shimConnectionState",(function(){return he})),n.d(c,"removeAllowExtmapMixed",(function(){return me}));var s={};n.r(s),n.d(s,"FunctionToString",(function(){return jt})),n.d(s,"InboundFilters",(function(){return zt}));var u={};n.r(u),n.d(u,"initialize",(function(){return zr})),n.d(u,"ga",(function(){return Ur})),n.d(u,"set",(function(){return Br})),n.d(u,"send",(function(){return Hr})),n.d(u,"pageview",(function(){return Wr})),n.d(u,"modalview",(function(){return qr})),n.d(u,"timing",(function(){return Gr})),n.d(u,"event",(function(){return Vr})),n.d(u,"exception",(function(){return $r})),n.d(u,"plugin",(function(){return Kr})),n.d(u,"outboundLink",(function(){return Jr})),n.d(u,"testModeAPI",(function(){return Yr})),n.d(u,"default",(function(){return Xr}));n(67);var l=n(0),f=n.n(l),p=n(17),d=n.n(p);let h=!0,m=!0;function v(e,t,n){const r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}function y(e,t,n){if(!e.RTCPeerConnection)return;const r=e.RTCPeerConnection.prototype,o=r.addEventListener;r.addEventListener=function(e,r){if(e!==t)return o.apply(this,arguments);const i=e=>{const t=n(e);t&&r(t)};return this._eventMap=this._eventMap||{},this._eventMap[r]=i,o.apply(this,[e,i])};const i=r.removeEventListener;r.removeEventListener=function(e,n){if(e!==t||!this._eventMap||!this._eventMap[n])return i.apply(this,arguments);const r=this._eventMap[n];return delete this._eventMap[n],i.apply(this,[e,r])},Object.defineProperty(r,"on"+t,{get(){return this["_on"+t]},set(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)},enumerable:!0,configurable:!0})}function g(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(h=e,e?"adapter.js logging disabled":"adapter.js logging enabled")}function b(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(m=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))}function w(){if("object"==typeof window){if(h)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}}function E(e,t){m&&console.warn(e+" is deprecated, please use "+t+" instead.")}function S(e){const{navigator:t}=e,n={browser:null,version:null};if(void 0===e||!e.navigator)return n.browser="Not a browser.",n;if(t.mozGetUserMedia)n.browser="firefox",n.version=v(t.userAgent,/Firefox\/(\d+)\./,1);else if(t.webkitGetUserMedia||!1===e.isSecureContext&&e.webkitRTCPeerConnection&&!e.RTCIceGatherer)n.browser="chrome",n.version=v(t.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(t.mediaDevices&&t.userAgent.match(/Edge\/(\d+).(\d+)$/))n.browser="edge",n.version=v(t.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!e.RTCPeerConnection||!t.userAgent.match(/AppleWebKit\/(\d+)\./))return n.browser="Not a supported browser.",n;n.browser="safari",n.version=v(t.userAgent,/AppleWebKit\/(\d+)\./,1),n.supportsUnifiedPlan=e.RTCRtpTransceiver&&"currentDirection"in e.RTCRtpTransceiver.prototype}return n}function _(e){return"[object Object]"===Object.prototype.toString.call(e)}function C(e){return _(e)?Object.keys(e).reduce((function(t,n){const r=_(e[n]),o=r?C(e[n]):e[n],i=r&&!Object.keys(o).length;return void 0===o||i?t:Object.assign(t,{[n]:o})}),{}):e}function k(e,t,n){const r=n?"outbound-rtp":"inbound-rtp",o=new Map;if(null===t)return o;const i=[];return e.forEach(e=>{"track"===e.type&&e.trackIdentifier===t.id&&i.push(e)}),i.forEach(t=>{e.forEach(n=>{n.type===r&&n.trackId===t.id&&function e(t,n,r){n&&!r.has(n.id)&&(r.set(n.id,n),Object.keys(n).forEach(o=>{o.endsWith("Id")?e(t,t.get(n[o]),r):o.endsWith("Ids")&&n[o].forEach(n=>{e(t,t.get(n),r)})}))}(e,n,o)})}),o}const x=w;function T(e){const t=e&&e.navigator;if(!t.mediaDevices)return;const n=S(e),r=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;const t={};return Object.keys(e).forEach(n=>{if("require"===n||"advanced"===n||"mediaSource"===n)return;const r="object"==typeof e[n]?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);const o=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];let e={};"number"==typeof r.ideal?(e[o("min",n)]=r.ideal,t.optional.push(e),(e={})[o("max",n)]=r.ideal,t.optional.push(e)):(e[o("",n)]=r.ideal,t.optional.push(e))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[o("",n)]=r.exact):["min","max"].forEach(e=>{void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[o(e,n)]=r[e])})}),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},o=function(e,o){if(n.version>=61)return o(e);if((e=JSON.parse(JSON.stringify(e)))&&"object"==typeof e.audio){const t=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])};t((e=JSON.parse(JSON.stringify(e))).audio,"autoGainControl","googAutoGainControl"),t(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=r(e.audio)}if(e&&"object"==typeof e.video){let i=e.video.facingMode;i=i&&("object"==typeof i?i:{ideal:i});const a=n.version<66;if(i&&("user"===i.exact||"environment"===i.exact||"user"===i.ideal||"environment"===i.ideal)&&(!t.mediaDevices.getSupportedConstraints||!t.mediaDevices.getSupportedConstraints().facingMode||a)){let n;if(delete e.video.facingMode,"environment"===i.exact||"environment"===i.ideal?n=["back","rear"]:"user"!==i.exact&&"user"!==i.ideal||(n=["front"]),n)return t.mediaDevices.enumerateDevices().then(t=>{let a=(t=t.filter(e=>"videoinput"===e.kind)).find(e=>n.some(t=>e.label.toLowerCase().includes(t)));return!a&&t.length&&n.includes("back")&&(a=t[t.length-1]),a&&(e.video.deviceId=i.exact?{exact:a.deviceId}:{ideal:a.deviceId}),e.video=r(e.video),x("chrome: "+JSON.stringify(e)),o(e)})}e.video=r(e.video)}return x("chrome: "+JSON.stringify(e)),o(e)},i=function(e){return n.version>=64?e:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString(){return this.name+(this.message&&": ")+this.message}}};if(t.getUserMedia=function(e,n,r){o(e,e=>{t.webkitGetUserMedia(e,n,e=>{r&&r(i(e))})})}.bind(t),t.mediaDevices.getUserMedia){const e=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(t){return o(t,t=>e(t).then(e=>{if(t.audio&&!e.getAudioTracks().length||t.video&&!e.getVideoTracks().length)throw e.getTracks().forEach(e=>{e.stop()}),new DOMException("","NotFoundError");return e},e=>Promise.reject(i(e))))}}}function O(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&("function"==typeof t?e.navigator.mediaDevices.getDisplayMedia=function(n){return t(n).then(t=>{const r=n.video&&n.video.width,o=n.video&&n.video.height,i=n.video&&n.video.frameRate;return n.video={mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:t,maxFrameRate:i||3}},r&&(n.video.mandatory.maxWidth=r),o&&(n.video.mandatory.maxHeight=o),e.navigator.mediaDevices.getUserMedia(n)})}:console.error("shimGetDisplayMedia: getSourceId argument is not a function"))}function P(e){e.MediaStream=e.MediaStream||e.webkitMediaStream}function R(e){if("object"!=typeof e||!e.RTCPeerConnection||"ontrack"in e.RTCPeerConnection.prototype)y(e,"track",e=>(e.transceiver||Object.defineProperty(e,"transceiver",{value:{receiver:e.receiver}}),e));else{Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get(){return this._ontrack},set(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)},enumerable:!0,configurable:!0});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){return this._ontrackpoly||(this._ontrackpoly=t=>{t.stream.addEventListener("addtrack",n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find(e=>e.track&&e.track.id===n.track.id):{track:n.track};const o=new Event("track");o.track=n.track,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)}),t.stream.getTracks().forEach(n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find(e=>e.track&&e.track.id===n.id):{track:n};const o=new Event("track");o.track=n,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)})},this.addEventListener("addstream",this._ontrackpoly)),t.apply(this,arguments)}}}function j(e){if("object"==typeof e&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){const t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};const n=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,r){let o=n.apply(this,arguments);return o||(o=t(this,e),this._senders.push(o)),o};const r=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){r.apply(this,arguments);const t=this._senders.indexOf(e);-1!==t&&this._senders.splice(t,1)}}const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._senders=this._senders||[],n.apply(this,[e]),e.getTracks().forEach(e=>{this._senders.push(t(this,e))})};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){this._senders=this._senders||[],r.apply(this,[e]),e.getTracks().forEach(e=>{const t=this._senders.find(t=>t.track===e);t&&this._senders.splice(this._senders.indexOf(t),1)})}}else if("object"==typeof e&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}}function D(e){if(!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,n,r]=arguments;if(arguments.length>0&&"function"==typeof e)return t.apply(this,arguments);if(0===t.length&&(0===arguments.length||"function"!=typeof e))return t.apply(this,[]);const o=function(e){const t={};return e.result().forEach(e=>{const n={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach(t=>{n[t]=e.stat(t)}),t[n.id]=n}),t},i=function(e){return new Map(Object.keys(e).map(t=>[t,e[t]]))};if(arguments.length>=2){const r=function(e){n(i(o(e)))};return t.apply(this,[r,e])}return new Promise((e,n)=>{t.apply(this,[function(t){e(i(o(t)))},n])}).then(n,r)}}function N(e){if(!("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver))return;if(!("getStats"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){const e=this;return this._pc.getStats().then(t=>k(t,e.track,!0))}}if(!("getStats"in e.RTCRtpReceiver.prototype)){const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e}),y(e,"track",e=>(e.receiver._pc=e.srcElement,e)),e.RTCRtpReceiver.prototype.getStats=function(){const e=this;return this._pc.getStats().then(t=>k(t,e.track,!1))}}if(!("getStats"in e.RTCRtpSender.prototype&&"getStats"in e.RTCRtpReceiver.prototype))return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){const e=arguments[0];let t,n,r;return this.getSenders().forEach(n=>{n.track===e&&(t?r=!0:t=n)}),this.getReceivers().forEach(t=>(t.track===e&&(n?r=!0:n=t),t.track===e)),r||t&&n?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):t?t.getStats():n?n.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return t.apply(this,arguments)}}function I(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map(e=>this._shimmedLocalStreams[e][0])};const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){if(!n)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};const r=t.apply(this,arguments);return this._shimmedLocalStreams[n.id]?-1===this._shimmedLocalStreams[n.id].indexOf(r)&&this._shimmedLocalStreams[n.id].push(r):this._shimmedLocalStreams[n.id]=[n,r],r};const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._shimmedLocalStreams=this._shimmedLocalStreams||{},e.getTracks().forEach(e=>{if(this.getSenders().find(t=>t.track===e))throw new DOMException("Track already exists.","InvalidAccessError")});const t=this.getSenders();n.apply(this,arguments);const r=this.getSenders().filter(e=>-1===t.indexOf(e));this._shimmedLocalStreams[e.id]=[e].concat(r)};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[e.id],r.apply(this,arguments)};const o=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},e&&Object.keys(this._shimmedLocalStreams).forEach(t=>{const n=this._shimmedLocalStreams[t].indexOf(e);-1!==n&&this._shimmedLocalStreams[t].splice(n,1),1===this._shimmedLocalStreams[t].length&&delete this._shimmedLocalStreams[t]}),o.apply(this,arguments)}}function M(e){if(!e.RTCPeerConnection)return;const t=S(e);if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return I(e);const n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){const e=n.apply(this);return this._reverseStreams=this._reverseStreams||{},e.map(e=>this._reverseStreams[e.id])};const r=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){if(this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},t.getTracks().forEach(e=>{if(this.getSenders().find(t=>t.track===e))throw new DOMException("Track already exists.","InvalidAccessError")}),!this._reverseStreams[t.id]){const n=new e.MediaStream(t.getTracks());this._streams[t.id]=n,this._reverseStreams[n.id]=t,t=n}r.apply(this,[t])};const o=e.RTCPeerConnection.prototype.removeStream;function i(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(o.id,"g"),r.id)}),new RTCSessionDescription({type:t.type,sdp:n})}function a(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(r.id,"g"),o.id)}),new RTCSessionDescription({type:t.type,sdp:n})}e.RTCPeerConnection.prototype.removeStream=function(e){this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},o.apply(this,[this._streams[e.id]||e]),delete this._reverseStreams[this._streams[e.id]?this._streams[e.id].id:e.id],delete this._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,n){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");const r=[].slice.call(arguments,1);if(1!==r.length||!r[0].getTracks().find(e=>e===t))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");const o=this.getSenders().find(e=>e.track===t);if(o)throw new DOMException("Track already exists.","InvalidAccessError");this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{};const i=this._streams[n.id];if(i)i.addTrack(t),Promise.resolve().then(()=>{this.dispatchEvent(new Event("negotiationneeded"))});else{const r=new e.MediaStream([t]);this._streams[n.id]=r,this._reverseStreams[r.id]=n,this.addStream(r)}return this.getSenders().find(e=>e.track===t)},["createOffer","createAnswer"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){const e=arguments;return arguments.length&&"function"==typeof arguments[0]?n.apply(this,[t=>{const n=i(this,t);e[0].apply(null,[n])},t=>{e[1]&&e[1].apply(null,t)},arguments[2]]):n.apply(this,arguments).then(e=>i(this,e))}};e.RTCPeerConnection.prototype[t]=r[t]}));const c=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return arguments.length&&arguments[0].type?(arguments[0]=a(this,arguments[0]),c.apply(this,arguments)):c.apply(this,arguments)};const s=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get(){const e=s.get.apply(this);return""===e.type?e:i(this,e)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(!(e._pc===this))throw new DOMException("Sender was not created by this connection.","InvalidAccessError");let t;this._streams=this._streams||{},Object.keys(this._streams).forEach(n=>{this._streams[n].getTracks().find(t=>e.track===t)&&(t=this._streams[n])}),t&&(1===t.getTracks().length?this.removeStream(this._reverseStreams[t.id]):t.removeTrack(e.track),this.dispatchEvent(new Event("negotiationneeded")))}}function L(e){const t=S(e);if(!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=e.webkitRTCPeerConnection),!e.RTCPeerConnection)return;t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]}));const n=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?t.version<78&&arguments[0]&&""===arguments[0].candidate?Promise.resolve():n.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}function A(e){y(e,"negotiationneeded",e=>{if("stable"===e.target.signalingState)return e})}var F=n(55),z=n.n(F);function U(e){const t=e&&e.navigator,n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch(e=>Promise.reject(function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString(){return this.name}}}(e)))}}function B(e){"getDisplayMedia"in e.navigator&&e.navigator.mediaDevices&&(e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||(e.navigator.mediaDevices.getDisplayMedia=e.navigator.getDisplayMedia.bind(e.navigator)))}function H(e){const t=S(e);if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){const t=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set(e){t.set.call(this,e);const n=new Event("enabled");n.enabled=e,this.dispatchEvent(n)}})}!e.RTCRtpSender||"dtmf"in e.RTCRtpSender.prototype||Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCDtmfSender&&!e.RTCDTMFSender&&(e.RTCDTMFSender=e.RTCDtmfSender);const n=z()(e,t.version);e.RTCPeerConnection=function(e){return e&&e.iceServers&&(e.iceServers=function(e,t){let n=!1;return(e=JSON.parse(JSON.stringify(e))).filter(e=>{if(e&&(e.urls||e.url)){var t=e.urls||e.url;e.url&&!e.urls&&E("RTCIceServer.url","RTCIceServer.urls");const r="string"==typeof t;return r&&(t=[t]),t=t.filter(e=>{if(0===e.indexOf("stun:"))return!1;const t=e.startsWith("turn")&&!e.startsWith("turn:[")&&e.includes("transport=udp");return t&&!n?(n=!0,!0):t&&!n}),delete e.url,e.urls=r?t[0]:t,!!t.length}})}(e.iceServers,t.version),w("ICE servers after filtering:",e.iceServers)),new n(e)},e.RTCPeerConnection.prototype=n.prototype}function W(e){!e.RTCRtpSender||"replaceTrack"in e.RTCRtpSender.prototype||(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)}function q(e){const t=S(e),n=e&&e.navigator,r=e&&e.MediaStreamTrack;if(n.getUserMedia=function(e,t,r){E("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(e).then(t,r)},!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){const e=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])},t=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(n){return"object"==typeof n&&"object"==typeof n.audio&&(n=JSON.parse(JSON.stringify(n)),e(n.audio,"autoGainControl","mozAutoGainControl"),e(n.audio,"noiseSuppression","mozNoiseSuppression")),t(n)},r&&r.prototype.getSettings){const t=r.prototype.getSettings;r.prototype.getSettings=function(){const n=t.apply(this,arguments);return e(n,"mozAutoGainControl","autoGainControl"),e(n,"mozNoiseSuppression","noiseSuppression"),n}}if(r&&r.prototype.applyConstraints){const t=r.prototype.applyConstraints;r.prototype.applyConstraints=function(n){return"audio"===this.kind&&"object"==typeof n&&(n=JSON.parse(JSON.stringify(n)),e(n,"autoGainControl","mozAutoGainControl"),e(n,"noiseSuppression","mozNoiseSuppression")),t.apply(this,[n])}}}}function G(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&(e.navigator.mediaDevices.getDisplayMedia=function(n){if(!n||!n.video){const e=new DOMException("getDisplayMedia without video constraints is undefined");return e.name="NotFoundError",e.code=8,Promise.reject(e)}return!0===n.video?n.video={mediaSource:t}:n.video.mediaSource=t,e.navigator.mediaDevices.getUserMedia(n)})}function V(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function $(e){const t=S(e);if("object"!=typeof e||!e.RTCPeerConnection&&!e.mozRTCPeerConnection)return;if(!e.RTCPeerConnection&&e.mozRTCPeerConnection&&(e.RTCPeerConnection=e.mozRTCPeerConnection),t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]})),t.version<68){const t=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?arguments[0]&&""===arguments[0].candidate?Promise.resolve():t.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}const n={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},r=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,o,i]=arguments;return r.apply(this,[e||null]).then(e=>{if(t.version<53&&!o)try{e.forEach(e=>{e.type=n[e.type]||e.type})}catch(t){if("TypeError"!==t.name)throw t;e.forEach((t,r)=>{e.set(r,Object.assign({},t,{type:n[t.type]||t.type}))})}return e}).then(o,i)}}function K(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpSender.prototype)return;const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}function J(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpReceiver.prototype)return;const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e}),y(e,"track",e=>(e.receiver._pc=e.srcElement,e)),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}function Y(e){!e.RTCPeerConnection||"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){E("removeStream","removeTrack"),this.getSenders().forEach(t=>{t.track&&e.getTracks().includes(t.track)&&this.removeTrack(t)})})}function X(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)}function Q(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.addTransceiver;t&&(e.RTCPeerConnection.prototype.addTransceiver=function(){this.setParametersPromises=[];const e=arguments[1],n=e&&"sendEncodings"in e;n&&e.sendEncodings.forEach(e=>{if("rid"in e){if(!/^[a-z0-9]{0,16}$/i.test(e.rid))throw new TypeError("Invalid RID value provided.")}if("scaleResolutionDownBy"in e&&!(parseFloat(e.scaleResolutionDownBy)>=1))throw new RangeError("scale_resolution_down_by must be >= 1.0");if("maxFramerate"in e&&!(parseFloat(e.maxFramerate)>=0))throw new RangeError("max_framerate must be >= 0.0")});const r=t.apply(this,arguments);if(n){const{sender:t}=r,n=t.getParameters();"encodings"in n||(n.encodings=e.sendEncodings,this.setParametersPromises.push(t.setParameters(n).catch(()=>{})))}return r})}function Z(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}function ee(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createAnswer;e.RTCPeerConnection.prototype.createAnswer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}function te(e){if("object"==typeof e&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),!("addStream"in e.RTCPeerConnection.prototype)){const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){this._localStreams||(this._localStreams=[]),this._localStreams.includes(e)||this._localStreams.push(e),e.getAudioTracks().forEach(n=>t.call(this,n,e)),e.getVideoTracks().forEach(n=>t.call(this,n,e))},e.RTCPeerConnection.prototype.addTrack=function(e){const n=arguments[1];return n&&(this._localStreams?this._localStreams.includes(n)||this._localStreams.push(n):this._localStreams=[n]),t.apply(this,arguments)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){this._localStreams||(this._localStreams=[]);const t=this._localStreams.indexOf(e);if(-1===t)return;this._localStreams.splice(t,1);const n=e.getTracks();this.getSenders().forEach(e=>{n.includes(e.track)&&this.removeTrack(e)})})}}function ne(e){if("object"==typeof e&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get(){return this._onaddstream},set(e){this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=e),this.addEventListener("track",this._onaddstreampoly=e=>{e.streams.forEach(e=>{if(this._remoteStreams||(this._remoteStreams=[]),this._remoteStreams.includes(e))return;this._remoteStreams.push(e);const t=new Event("addstream");t.stream=e,this.dispatchEvent(t)})})}});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){const e=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(t){t.streams.forEach(t=>{if(e._remoteStreams||(e._remoteStreams=[]),e._remoteStreams.indexOf(t)>=0)return;e._remoteStreams.push(t);const n=new Event("addstream");n.stream=t,e.dispatchEvent(n)})}),t.apply(e,arguments)}}}function re(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,o=t.setLocalDescription,i=t.setRemoteDescription,a=t.addIceCandidate;t.createOffer=function(e,t){const r=arguments.length>=2?arguments[2]:arguments[0],o=n.apply(this,[r]);return t?(o.then(e,t),Promise.resolve()):o},t.createAnswer=function(e,t){const n=arguments.length>=2?arguments[2]:arguments[0],o=r.apply(this,[n]);return t?(o.then(e,t),Promise.resolve()):o};let c=function(e,t,n){const r=o.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r};t.setLocalDescription=c,c=function(e,t,n){const r=i.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.setRemoteDescription=c,c=function(e,t,n){const r=a.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.addIceCandidate=c}function oe(e){const t=e&&e.navigator;if(t.mediaDevices&&t.mediaDevices.getUserMedia){const e=t.mediaDevices,n=e.getUserMedia.bind(e);t.mediaDevices.getUserMedia=e=>n(ie(e))}!t.getUserMedia&&t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,n,r){t.mediaDevices.getUserMedia(e).then(n,r)}.bind(t))}function ie(e){return e&&void 0!==e.video?Object.assign({},e,{video:C(e.video)}):e}function ae(e){const t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,n){if(e&&e.iceServers){const t=[];for(let n=0;n<e.iceServers.length;n++){let r=e.iceServers[n];!r.hasOwnProperty("urls")&&r.hasOwnProperty("url")?(E("RTCIceServer.url","RTCIceServer.urls"),(r=JSON.parse(JSON.stringify(r))).urls=r.url,delete r.url,t.push(r)):t.push(e.iceServers[n])}e.iceServers=t}return new t(e,n)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in e.RTCPeerConnection&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:()=>t.generateCertificate})}function ce(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function se(e){const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(e){if(e){void 0!==e.offerToReceiveAudio&&(e.offerToReceiveAudio=!!e.offerToReceiveAudio);const t=this.getTransceivers().find(e=>"audio"===e.receiver.track.kind);!1===e.offerToReceiveAudio&&t?"sendrecv"===t.direction?t.setDirection?t.setDirection("sendonly"):t.direction="sendonly":"recvonly"===t.direction&&(t.setDirection?t.setDirection("inactive"):t.direction="inactive"):!0!==e.offerToReceiveAudio||t||this.addTransceiver("audio"),void 0!==e.offerToReceiveVideo&&(e.offerToReceiveVideo=!!e.offerToReceiveVideo);const n=this.getTransceivers().find(e=>"video"===e.receiver.track.kind);!1===e.offerToReceiveVideo&&n?"sendrecv"===n.direction?n.setDirection?n.setDirection("sendonly"):n.direction="sendonly":"recvonly"===n.direction&&(n.setDirection?n.setDirection("inactive"):n.direction="inactive"):!0!==e.offerToReceiveVideo||n||this.addTransceiver("video")}return t.apply(this,arguments)}}var ue=n(23),le=n.n(ue);function fe(e){if(!e.RTCIceCandidate||e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)return;const t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){if("object"==typeof e&&e.candidate&&0===e.candidate.indexOf("a=")&&((e=JSON.parse(JSON.stringify(e))).candidate=e.candidate.substr(2)),e.candidate&&e.candidate.length){const n=new t(e),r=le.a.parseCandidate(e.candidate),o=Object.assign(n,r);return o.toJSON=function(){return{candidate:o.candidate,sdpMid:o.sdpMid,sdpMLineIndex:o.sdpMLineIndex,usernameFragment:o.usernameFragment}},o}return new t(e)},e.RTCIceCandidate.prototype=t.prototype,y(e,"icecandidate",t=>(t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t))}function pe(e){if(!e.RTCPeerConnection)return;const t=S(e);"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get(){return void 0===this._sctp?null:this._sctp}});const n=function(e){if(!e||!e.sdp)return!1;const t=le.a.splitSections(e.sdp);return t.shift(),t.some(e=>{const t=le.a.parseMLine(e);return t&&"application"===t.kind&&-1!==t.protocol.indexOf("SCTP")})},r=function(e){const t=e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(null===t||t.length<2)return-1;const n=parseInt(t[1],10);return n!=n?-1:n},o=function(e){let n=65536;return"firefox"===t.browser&&(n=t.version<57?-1===e?16384:2147483637:t.version<60?57===t.version?65535:65536:2147483637),n},i=function(e,n){let r=65536;"firefox"===t.browser&&57===t.version&&(r=65535);const o=le.a.matchPrefix(e.sdp,"a=max-message-size:");return o.length>0?r=parseInt(o[0].substr(19),10):"firefox"===t.browser&&-1!==n&&(r=2147483637),r},a=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){if(this._sctp=null,"chrome"===t.browser&&t.version>=76){const{sdpSemantics:e}=this.getConfiguration();"plan-b"===e&&Object.defineProperty(this,"sctp",{get(){return void 0===this._sctp?null:this._sctp},enumerable:!0,configurable:!0})}if(n(arguments[0])){const e=r(arguments[0]),t=o(e),n=i(arguments[0],e);let a;a=0===t&&0===n?Number.POSITIVE_INFINITY:0===t||0===n?Math.max(t,n):Math.min(t,n);const c={};Object.defineProperty(c,"maxMessageSize",{get:()=>a}),this._sctp=c}return a.apply(this,arguments)}}function de(e){if(!(e.RTCPeerConnection&&"createDataChannel"in e.RTCPeerConnection.prototype))return;function t(e,t){const n=e.send;e.send=function(){const r=arguments[0],o=r.length||r.size||r.byteLength;if("open"===e.readyState&&t.sctp&&o>t.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+t.sctp.maxMessageSize+" bytes)");return n.apply(e,arguments)}}const n=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){const e=n.apply(this,arguments);return t(e,this),e},y(e,"datachannel",e=>(t(e.channel,e.target),e))}function he(e){if(!e.RTCPeerConnection||"connectionState"in e.RTCPeerConnection.prototype)return;const t=e.RTCPeerConnection.prototype;Object.defineProperty(t,"connectionState",{get(){return{completed:"connected",checking:"connecting"}[this.iceConnectionState]||this.iceConnectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t,"onconnectionstatechange",{get(){return this._onconnectionstatechange||null},set(e){this._onconnectionstatechange&&(this.removeEventListener("connectionstatechange",this._onconnectionstatechange),delete this._onconnectionstatechange),e&&this.addEventListener("connectionstatechange",this._onconnectionstatechange=e)},enumerable:!0,configurable:!0}),["setLocalDescription","setRemoteDescription"].forEach(e=>{const n=t[e];t[e]=function(){return this._connectionstatechangepoly||(this._connectionstatechangepoly=e=>{const t=e.target;if(t._lastConnectionState!==t.connectionState){t._lastConnectionState=t.connectionState;const n=new Event("connectionstatechange",e);t.dispatchEvent(n)}return e},this.addEventListener("iceconnectionstatechange",this._connectionstatechangepoly)),n.apply(this,arguments)}})}function me(e){if(!e.RTCPeerConnection)return;const t=S(e);if("chrome"===t.browser&&t.version>=71)return;const n=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(e){return e&&e.sdp&&-1!==e.sdp.indexOf("\na=extmap-allow-mixed")&&(e.sdp=e.sdp.split("\n").filter(e=>"a=extmap-allow-mixed"!==e.trim()).join("\n")),n.apply(this,arguments)}}!function({window:e}={},t={shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0}){const n=w,s=S(e),u={browserDetails:s,commonShim:c,extractVersion:v,disableLog:g,disableWarnings:b};switch(s.browser){case"chrome":if(!r||!L||!t.shimChrome)return n("Chrome shim is not included in this adapter release."),u;n("adapter.js shimming chrome."),u.browserShim=r,T(e),P(e),L(e),R(e),M(e),j(e),D(e),N(e),A(e),fe(e),he(e),pe(e),de(e),me(e);break;case"firefox":if(!i||!$||!t.shimFirefox)return n("Firefox shim is not included in this adapter release."),u;n("adapter.js shimming firefox."),u.browserShim=i,q(e),$(e),V(e),Y(e),K(e),J(e),X(e),Q(e),Z(e),ee(e),fe(e),he(e),pe(e),de(e);break;case"edge":if(!o||!H||!t.shimEdge)return n("MS edge shim is not included in this adapter release."),u;n("adapter.js shimming edge."),u.browserShim=o,U(e),B(e),H(e),W(e),pe(e),de(e);break;case"safari":if(!a||!t.shimSafari)return n("Safari shim is not included in this adapter release."),u;n("adapter.js shimming safari."),u.browserShim=a,ae(e),se(e),re(e),te(e),ne(e),ce(e),oe(e),fe(e),pe(e),de(e),me(e);break;default:n("Unsupported browser!")}}({window:window});var ve=n(2),ye=n.n(ve),ge=f.a.createContext(null);var be=function(e){e()},we=function(){return be},Ee=null,Se={notify:function(){}};var _e=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=Se,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=we(),t=[],n=[],{clear:function(){n=Ee,t=Ee},notify:function(){var r=t=n;e((function(){for(var e=0;e<r.length;e++)r[e]()}))},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==Ee&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=Se)},e}();function Ce(e){var t=e.store,n=e.context,r=e.children,o=Object(l.useMemo)((function(){var e=new _e(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),i=Object(l.useMemo)((function(){return t.getState()}),[t]);Object(l.useEffect)((function(){var e=o.subscription;return e.trySubscribe(),i!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,i]);var a=n||ge;return f.a.createElement(a.Provider,{value:o},r)}Ce.propTypes={store:ye.a.shape({subscribe:ye.a.func.isRequired,dispatch:ye.a.func.isRequired,getState:ye.a.func.isRequired}),context:ye.a.object,children:ye.a.any};var ke=Ce;function xe(){return(xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Te(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var Oe=n(26),Pe=n.n(Oe),Re=n(15),je=n.n(Re),De=n(31),Ne="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect,Ie=[],Me=[null,null];function Le(e,t){var n=e[1];return[t.payload,n+1]}var Ae=function(){return[null,0]};function Fe(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,i=n.methodName,a=void 0===i?"connectAdvanced":i,c=n.renderCountProp,s=void 0===c?void 0:c,u=n.shouldHandleStateChanges,p=void 0===u||u,d=n.storeKey,h=void 0===d?"store":d,m=n.withRef,v=void 0!==m&&m,y=n.forwardRef,g=void 0!==y&&y,b=n.context,w=void 0===b?ge:b,E=Te(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);je()(void 0===s,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),je()(!v,"withRef is removed. To access the wrapped instance, use a ref on the connected component");je()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var S=w;return function(t){var n=t.displayName||t.name||"Component",r=o(n),i=xe({},E,{getDisplayName:o,methodName:a,renderCountProp:s,shouldHandleStateChanges:p,storeKey:h,displayName:r,wrappedComponentName:n,WrappedComponent:t}),c=E.pure;var u=c?l.useMemo:function(e){return e()};function d(n){var o=Object(l.useMemo)((function(){var e=n.forwardedRef,t=Te(n,["forwardedRef"]);return[n.context,e,t]}),[n]),a=o[0],c=o[1],s=o[2],d=Object(l.useMemo)((function(){return a&&a.Consumer&&Object(De.isContextConsumer)(f.a.createElement(a.Consumer,null))?a:S}),[a,S]),h=Object(l.useContext)(d),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch),v=Boolean(h)&&Boolean(h.store);je()(m||v,'Could not find "store" in the context of "'+r+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+r+" in connect options.");var y=m?n.store:h.store,g=Object(l.useMemo)((function(){return function(t){return e(t.dispatch,i)}(y)}),[y]),b=Object(l.useMemo)((function(){if(!p)return Me;var e=new _e(y,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[y,m,h]),w=b[0],E=b[1],_=Object(l.useMemo)((function(){return m?h:xe({},h,{subscription:w})}),[m,h,w]),C=Object(l.useReducer)(Le,Ie,Ae),k=C[0][0],x=C[1];if(k&&k.error)throw k.error;var T=Object(l.useRef)(),O=Object(l.useRef)(s),P=Object(l.useRef)(),R=Object(l.useRef)(!1),j=u((function(){return P.current&&s===O.current?P.current:g(y.getState(),s)}),[y,k,s]);Ne((function(){O.current=s,T.current=j,R.current=!1,P.current&&(P.current=null,E())})),Ne((function(){if(p){var e=!1,t=null,n=function(){if(!e){var n,r,o=y.getState();try{n=g(o,O.current)}catch(e){r=e,t=e}r||(t=null),n===T.current?R.current||E():(T.current=n,P.current=n,R.current=!0,x({type:"STORE_UPDATED",payload:{error:r}}))}};w.onStateChange=n,w.trySubscribe(),n();return function(){if(e=!0,w.tryUnsubscribe(),w.onStateChange=null,t)throw t}}}),[y,w,g]);var D=Object(l.useMemo)((function(){return f.a.createElement(t,xe({},j,{ref:c}))}),[c,t,j]);return Object(l.useMemo)((function(){return p?f.a.createElement(d.Provider,{value:_},D):D}),[d,D,_])}var m=c?f.a.memo(d):d;if(m.WrappedComponent=t,m.displayName=r,g){var v=f.a.forwardRef((function(e,t){return f.a.createElement(m,xe({},e,{forwardedRef:t}))}));return v.displayName=r,v.WrappedComponent=t,Pe()(v,t)}return Pe()(m,t)}}var ze=Object.prototype.hasOwnProperty;function Ue(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function Be(e,t){if(Ue(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!ze.call(t,n[o])||!Ue(e[n[o]],t[n[o]]))return!1;return!0}var He=n(37),We=function(){return Math.random().toString(36).substring(7).split("").join(".")},qe={INIT:"@@redux/INIT"+We(),REPLACE:"@@redux/REPLACE"+We(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+We()}};function Ge(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Ve(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(Ve)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],c=a,s=!1;function u(){c===a&&(c=a.slice())}function l(){if(s)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(s)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return u(),c.push(e),function(){if(t){if(s)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,u();var n=c.indexOf(e);c.splice(n,1)}}}function p(e){if(!Ge(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(s)throw new Error("Reducers may not dispatch actions.");try{s=!0,i=o(i,e)}finally{s=!1}for(var t=a=c,n=0;n<t.length;n++){(0,t[n])()}return e}return p({type:qe.INIT}),(r={dispatch:p,subscribe:f,getState:l,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,p({type:qe.REPLACE})}})[He.a]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(l())}return n(),{unsubscribe:t(n)}}})[He.a]=function(){return this},e},r}function $e(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function Ke(e,t){return function(){return t(e.apply(this,arguments))}}function Je(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ye(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function Xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ye(n,!0).forEach((function(t){Je(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ye(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function Ze(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return Xe({},n,{dispatch:r=Qe.apply(void 0,i)(n.dispatch)})}}}function et(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function tt(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function nt(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=tt(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=tt(o),o=r(t,n)),o},r}}var rt=[function(e){return"function"==typeof e?nt(e):void 0},function(e){return e?void 0:et((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?et((function(t){return function(e,t){if("function"==typeof e)return Ke(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=Ke(o,t))}return n}(e,t)})):void 0}];var ot=[function(e){return"function"==typeof e?nt(e):void 0},function(e){return e?void 0:et((function(){return{}}))}];function it(e,t,n){return xe({},n,{},e,{},t)}var at=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,c){var s=e(t,n,c);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return it}}];function ct(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function st(e,t,n,r,o){var i,a,c,s,u,l=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,v=!f(d,a),y=!l(o,i);return i=o,a=d,v&&y?(c=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):v?(e.dependsOnOwnProps&&(c=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):y?(h=e(i,a),m=!p(h,c),c=h,m&&(u=n(c,s,a)),u):u}return function(o,l){return d?h(o,l):(c=e(i=o,a=l),s=t(r,a),u=n(c,s,a),d=!0,u)}}function ut(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Te(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),c=r(e,i),s=o(e,i);return(i.pure?st:ct)(a,c,s,e,i)}function lt(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function ft(e,t){return e===t}var pt,dt,ht,mt,vt,yt,gt,bt,wt,Et,St,_t,Ct=(ht=(dt=void 0===pt?{}:pt).connectHOC,mt=void 0===ht?Fe:ht,vt=dt.mapStateToPropsFactories,yt=void 0===vt?ot:vt,gt=dt.mapDispatchToPropsFactories,bt=void 0===gt?rt:gt,wt=dt.mergePropsFactories,Et=void 0===wt?at:wt,St=dt.selectorFactory,_t=void 0===St?ut:St,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,c=o.areStatesEqual,s=void 0===c?ft:c,u=o.areOwnPropsEqual,l=void 0===u?Be:u,f=o.areStatePropsEqual,p=void 0===f?Be:f,d=o.areMergedPropsEqual,h=void 0===d?Be:d,m=Te(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=lt(e,yt,"mapStateToProps"),y=lt(t,bt,"mapDispatchToProps"),g=lt(n,Et,"mergeProps");return mt(_t,xe({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:y,initMergeProps:g,pure:a,areStatesEqual:s,areOwnPropsEqual:l,areStatePropsEqual:p,areMergedPropsEqual:h},m))});function kt(){var e=Object(l.useContext)(ge);return je()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function xt(e){void 0===e&&(e=ge);var t=e===ge?kt:function(){return Object(l.useContext)(e)};return function(){return t().store}}var Tt=xt();!function(e){void 0===e&&(e=ge);var t=e===ge?Tt:xt(e)}();var Ot=function(e,t){return e===t};var Pt,Rt;!function(e){void 0===e&&(e=ge);var t=e===ge?kt:function(){return Object(l.useContext)(e)}}();Pt=p.unstable_batchedUpdates,be=Pt;var jt=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){Rt=Function.prototype.toString,Function.prototype.toString=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.__sentry_original__||this;return Rt.apply(n,e)}},e.id="FunctionToString",e}(),Dt=n(1),Nt=n(34),It=n(109),Mt=n(21),Lt=n(4),At=n(20),Ft=[/^Script error\.?$/,/^Javascript error: Script error\.? on line 0$/],zt=function(){function e(t){void 0===t&&(t={}),this._options=t,this.name=e.id}return e.prototype.setupOnce=function(){Object(Nt.b)((function(t){var n=Object(It.a)();if(!n)return t;var r=n.getIntegration(e);if(r){var o=n.getClient(),i=o?o.getOptions():{},a=r._mergeOptions(i);if(r._shouldDropEvent(t,a))return null}return t}))},e.prototype._shouldDropEvent=function(e,t){return this._isSentryError(e,t)?(Mt.a.warn("Event dropped due to being internal Sentry Error.\nEvent: "+Object(Lt.e)(e)),!0):this._isIgnoredError(e,t)?(Mt.a.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: "+Object(Lt.e)(e)),!0):this._isBlacklistedUrl(e,t)?(Mt.a.warn("Event dropped due to being matched by `blacklistUrls` option.\nEvent: "+Object(Lt.e)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0):!this._isWhitelistedUrl(e,t)&&(Mt.a.warn("Event dropped due to not being matched by `whitelistUrls` option.\nEvent: "+Object(Lt.e)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0)},e.prototype._isSentryError=function(e,t){if(void 0===t&&(t={}),!t.ignoreInternal)return!1;try{return e&&e.exception&&e.exception.values&&e.exception.values[0]&&"SentryError"===e.exception.values[0].type||!1}catch(e){return!1}},e.prototype._isIgnoredError=function(e,t){return void 0===t&&(t={}),!(!t.ignoreErrors||!t.ignoreErrors.length)&&this._getPossibleEventMessages(e).some((function(e){return t.ignoreErrors.some((function(t){return Object(At.a)(e,t)}))}))},e.prototype._isBlacklistedUrl=function(e,t){if(void 0===t&&(t={}),!t.blacklistUrls||!t.blacklistUrls.length)return!1;var n=this._getEventFilterUrl(e);return!!n&&t.blacklistUrls.some((function(e){return Object(At.a)(n,e)}))},e.prototype._isWhitelistedUrl=function(e,t){if(void 0===t&&(t={}),!t.whitelistUrls||!t.whitelistUrls.length)return!0;var n=this._getEventFilterUrl(e);return!n||t.whitelistUrls.some((function(e){return Object(At.a)(n,e)}))},e.prototype._mergeOptions=function(e){return void 0===e&&(e={}),{blacklistUrls:Dt.f(this._options.blacklistUrls||[],e.blacklistUrls||[]),ignoreErrors:Dt.f(this._options.ignoreErrors||[],e.ignoreErrors||[],Ft),ignoreInternal:void 0===this._options.ignoreInternal||this._options.ignoreInternal,whitelistUrls:Dt.f(this._options.whitelistUrls||[],e.whitelistUrls||[])}},e.prototype._getPossibleEventMessages=function(e){if(e.message)return[e.message];if(e.exception)try{var t=e.exception.values&&e.exception.values[0]||{},n=t.type,r=void 0===n?"":n,o=t.value,i=void 0===o?"":o;return[""+i,r+": "+i]}catch(t){return Mt.a.error("Cannot extract message for event "+Object(Lt.e)(e)),[]}return[]},e.prototype._getEventFilterUrl=function(e){try{if(e.stacktrace){var t=e.stacktrace.frames;return t&&t[t.length-1].filename||null}if(e.exception){var n=e.exception.values&&e.exception.values[0].stacktrace&&e.exception.values[0].stacktrace.frames;return n&&n[n.length-1].filename||null}return null}catch(t){return Mt.a.error("Cannot extract url for event "+Object(Lt.e)(e)),null}},e.id="InboundFilters",e}();var Ut=n(28),Bt=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n]);return e});var Ht=function(e){function t(t){var n=this.constructor,r=e.call(this,t)||this;return r.message=t,r.name=n.prototype.constructor.name,Bt(r,n.prototype),r}return Dt.c(t,e),t}(Error),Wt=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w\.-]+)(?::(\d+))?\/(.+)/,qt=function(){function e(e){"string"==typeof e?this._fromString(e):this._fromComponents(e),this._validate()}return e.prototype.toString=function(e){void 0===e&&(e=!1);var t=this,n=t.host,r=t.path,o=t.pass,i=t.port,a=t.projectId;return t.protocol+"://"+t.user+(e&&o?":"+o:"")+"@"+n+(i?":"+i:"")+"/"+(r?r+"/":r)+a},e.prototype._fromString=function(e){var t=Wt.exec(e);if(!t)throw new Ht("Invalid Dsn");var n=Dt.e(t.slice(1),6),r=n[0],o=n[1],i=n[2],a=void 0===i?"":i,c=n[3],s=n[4],u=void 0===s?"":s,l="",f=n[5],p=f.split("/");p.length>1&&(l=p.slice(0,-1).join("/"),f=p.pop()),this._fromComponents({host:c,pass:a,path:l,projectId:f,port:u,protocol:r,user:o})},e.prototype._fromComponents=function(e){this.protocol=e.protocol,this.user=e.user,this.pass=e.pass||"",this.host=e.host,this.port=e.port||"",this.path=e.path||"",this.projectId=e.projectId},e.prototype._validate=function(){var e=this;if(["protocol","user","host","projectId"].forEach((function(t){if(!e[t])throw new Ht("Invalid Dsn")})),"http"!==this.protocol&&"https"!==this.protocol)throw new Ht("Invalid Dsn");if(this.port&&isNaN(parseInt(this.port,10)))throw new Ht("Invalid Dsn")},e}(),Gt=n(6),Vt=function(){function e(e){this.dsn=e,this._dsnObject=new qt(e)}return e.prototype.getDsn=function(){return this._dsnObject},e.prototype.getStoreEndpoint=function(){return""+this._getBaseUrl()+this.getStoreEndpointPath()},e.prototype.getStoreEndpointWithUrlEncodedAuth=function(){var e={sentry_key:this._dsnObject.user,sentry_version:"7"};return this.getStoreEndpoint()+"?"+Object(Gt.e)(e)},e.prototype._getBaseUrl=function(){var e=this._dsnObject,t=e.protocol?e.protocol+":":"",n=e.port?":"+e.port:"";return t+"//"+e.host+n},e.prototype.getStoreEndpointPath=function(){var e=this._dsnObject;return(e.path?"/"+e.path:"")+"/api/"+e.projectId+"/store/"},e.prototype.getRequestHeaders=function(e,t){var n=this._dsnObject,r=["Sentry sentry_version=7"];return r.push("sentry_timestamp="+Object(Lt.m)()),r.push("sentry_client="+e+"/"+t),r.push("sentry_key="+n.user),n.pass&&r.push("sentry_secret="+n.pass),{"Content-Type":"application/json","X-Sentry-Auth":r.join(", ")}},e.prototype.getReportDialogEndpoint=function(e){void 0===e&&(e={});var t=this._dsnObject,n=this._getBaseUrl()+(t.path?"/"+t.path:"")+"/api/embed/error-page/",r=[];for(var o in r.push("dsn="+t.toString()),e)if("user"===o){if(!e.user)continue;e.user.name&&r.push("name="+encodeURIComponent(e.user.name)),e.user.email&&r.push("email="+encodeURIComponent(e.user.email))}else r.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return r.length?n+"?"+r.join("&"):n},e}(),$t=n(8),Kt=[];function Jt(e){var t={};return function(e){var t=e.defaultIntegrations&&Dt.f(e.defaultIntegrations)||[],n=e.integrations,r=[];if(Array.isArray(n)){var o=n.map((function(e){return e.name})),i=[];t.forEach((function(e){-1===o.indexOf(e.name)&&-1===i.indexOf(e.name)&&(r.push(e),i.push(e.name))})),n.forEach((function(e){-1===i.indexOf(e.name)&&(r.push(e),i.push(e.name))}))}else"function"==typeof n?(r=n(t),r=Array.isArray(r)?r:[r]):r=Dt.f(t);var a=r.map((function(e){return e.name}));return-1!==a.indexOf("Debug")&&r.push.apply(r,Dt.f(r.splice(a.indexOf("Debug"),1))),r}(e).forEach((function(e){t[e.name]=e,function(e){-1===Kt.indexOf(e.name)&&(e.setupOnce(Nt.b,It.a),Kt.push(e.name),Mt.a.log("Integration installed: "+e.name))}(e)})),t}var Yt,Xt=function(){function e(e,t){this._integrations={},this._processing=!1,this._backend=new e(t),this._options=t,t.dsn&&(this._dsn=new qt(t.dsn)),this._isEnabled()&&(this._integrations=Jt(this._options))}return e.prototype.captureException=function(e,t,n){var r=this,o=t&&t.event_id;return this._processing=!0,this._getBackend().eventFromException(e,t).then((function(e){return r._processEvent(e,t,n)})).then((function(e){o=e&&e.event_id,r._processing=!1})).then(null,(function(e){Mt.a.error(e),r._processing=!1})),o},e.prototype.captureMessage=function(e,t,n,r){var o=this,i=n&&n.event_id;return this._processing=!0,(Object($t.i)(e)?this._getBackend().eventFromMessage(""+e,t,n):this._getBackend().eventFromException(e,n)).then((function(e){return o._processEvent(e,n,r)})).then((function(e){i=e&&e.event_id,o._processing=!1})).then(null,(function(e){Mt.a.error(e),o._processing=!1})),i},e.prototype.captureEvent=function(e,t,n){var r=this,o=t&&t.event_id;return this._processing=!0,this._processEvent(e,t,n).then((function(e){o=e&&e.event_id,r._processing=!1})).then(null,(function(e){Mt.a.error(e),r._processing=!1})),o},e.prototype.getDsn=function(){return this._dsn},e.prototype.getOptions=function(){return this._options},e.prototype.flush=function(e){var t=this;return this._isClientProcessing(e).then((function(n){return clearInterval(n.interval),t._getBackend().getTransport().close(e).then((function(e){return n.ready&&e}))}))},e.prototype.close=function(e){var t=this;return this.flush(e).then((function(e){return t.getOptions().enabled=!1,e}))},e.prototype.getIntegrations=function(){return this._integrations||{}},e.prototype.getIntegration=function(e){try{return this._integrations[e.id]||null}catch(t){return Mt.a.warn("Cannot retrieve integration "+e.id+" from the current Client"),null}},e.prototype._isClientProcessing=function(e){var t=this;return new Ut.a((function(n){var r=0,o=0;clearInterval(o),o=setInterval((function(){t._processing?(r+=1,e&&r>=e&&n({interval:o,ready:!1})):n({interval:o,ready:!0})}),1)}))},e.prototype._getBackend=function(){return this._backend},e.prototype._isEnabled=function(){return!1!==this.getOptions().enabled&&void 0!==this._dsn},e.prototype._prepareEvent=function(e,t,n){var r=this.getOptions(),o=r.environment,i=r.release,a=r.dist,c=r.maxValueLength,s=void 0===c?250:c,u=Dt.a({},e);void 0===u.environment&&void 0!==o&&(u.environment=o),void 0===u.release&&void 0!==i&&(u.release=i),void 0===u.dist&&void 0!==a&&(u.dist=a),u.message&&(u.message=Object(At.d)(u.message,s));var l=u.exception&&u.exception.values&&u.exception.values[0];l&&l.value&&(l.value=Object(At.d)(l.value,s));var f=u.request;f&&f.url&&(f.url=Object(At.d)(f.url,s)),void 0===u.event_id&&(u.event_id=Object(Lt.n)()),this._addIntegrations(u.sdk);var p=Ut.a.resolve(u);return t&&(p=t.applyToEvent(u,n)),p},e.prototype._addIntegrations=function(e){var t=Object.keys(this._integrations);e&&t.length>0&&(e.integrations=t)},e.prototype._processEvent=function(e,t,n){var r=this,o=this.getOptions(),i=o.beforeSend,a=o.sampleRate;return this._isEnabled()?"number"==typeof a&&Math.random()>a?Ut.a.reject("This event has been sampled, will not send event."):new Ut.a((function(o,a){r._prepareEvent(e,n,t).then((function(e){if(null!==e){var n=e;try{if(t&&t.data&&!0===t.data.__sentry__||!i)return r._getBackend().sendEvent(n),void o(n);var c=i(e,t);if(void 0===c)Mt.a.error("`beforeSend` method has to return `null` or a valid event.");else if(Object($t.m)(c))r._handleAsyncBeforeSend(c,o,a);else{if(null===(n=c))return Mt.a.log("`beforeSend` returned `null`, will not send event."),void o(null);r._getBackend().sendEvent(n),o(n)}}catch(e){r.captureException(e,{data:{__sentry__:!0},originalException:e}),a("`beforeSend` threw an error, will not send event.")}}else a("An event processor returned null, will not send event.")})).then(null,(function(){a("`beforeSend` threw an error, will not send event.")}))})):Ut.a.reject("SDK not enabled, will not send event.")},e.prototype._handleAsyncBeforeSend=function(e,t,n){var r=this;e.then((function(e){null!==e?(r._getBackend().sendEvent(e),t(e)):n("`beforeSend` returned `null`, will not send event.")})).then(null,(function(e){n("beforeSend rejected with "+e)}))},e}();!function(e){e.Unknown="unknown",e.Skipped="skipped",e.Success="success",e.RateLimit="rate_limit",e.Invalid="invalid",e.Failed="failed"}(Yt||(Yt={})),function(e){e.fromHttpCode=function(t){return t>=200&&t<300?e.Success:429===t?e.RateLimit:t>=400&&t<500?e.Invalid:t>=500?e.Failed:e.Unknown}}(Yt||(Yt={}));var Qt,Zt=function(){function e(){}return e.prototype.sendEvent=function(e){return Ut.a.resolve({reason:"NoopTransport: Event has been skipped because no Dsn is configured.",status:Yt.Skipped})},e.prototype.close=function(e){return Ut.a.resolve(!0)},e}(),en=function(){function e(e){this._options=e,this._options.dsn||Mt.a.warn("No DSN provided, backend will not do anything."),this._transport=this._setupTransport()}return e.prototype._setupTransport=function(){return new Zt},e.prototype.eventFromException=function(e,t){throw new Ht("Backend has to implement `eventFromException` method")},e.prototype.eventFromMessage=function(e,t,n){throw new Ht("Backend has to implement `eventFromMessage` method")},e.prototype.sendEvent=function(e){this._transport.sendEvent(e).then(null,(function(e){Mt.a.error("Error while sending event: "+e)}))},e.prototype.getTransport=function(){return this._transport},e}();function tn(){if(!("fetch"in Object(Lt.g)()))return!1;try{return new Headers,new Request(""),new Response,!0}catch(e){return!1}}function nn(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}function rn(){if(!tn())return!1;try{return new Request("_",{referrerPolicy:"origin"}),!0}catch(e){return!1}}!function(e){e.Fatal="fatal",e.Error="error",e.Warning="warning",e.Log="log",e.Info="info",e.Debug="debug",e.Critical="critical"}(Qt||(Qt={})),function(e){e.fromString=function(t){switch(t){case"debug":return e.Debug;case"info":return e.Info;case"warn":case"warning":return e.Warning;case"error":return e.Error;case"fatal":return e.Fatal;case"critical":return e.Critical;case"log":default:return e.Log}}}(Qt||(Qt={}));var on="?",an=/^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[-a-z]+:|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,cn=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js))(?::(\d+))?(?::(\d+))?\s*$/i,sn=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,un=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,ln=/\((\S*)(?::(\d+))(?::(\d+))\)/;function fn(e){var t=null,n=e&&e.framesToPop;try{if(t=function(e){if(!e||!e.stacktrace)return null;for(var t,n=e.stacktrace,r=/ line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,o=/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\))? in (.*):\s*$/i,i=n.split("\n"),a=[],c=0;c<i.length;c+=2){var s=null;(t=r.exec(i[c]))?s={url:t[2],func:t[3],args:[],line:+t[1],column:null}:(t=o.exec(i[c]))&&(s={url:t[6],func:t[3]||t[4],args:t[5]?t[5].split(","):[],line:+t[1],column:+t[2]}),s&&(!s.func&&s.line&&(s.func=on),a.push(s))}if(!a.length)return null;return{message:dn(e),name:e.name,stack:a}}(e))return pn(t,n)}catch(e){}try{if(t=function(e){if(!e||!e.stack)return null;for(var t,n,r,o=[],i=e.stack.split("\n"),a=0;a<i.length;++a){if(n=an.exec(i[a])){var c=n[2]&&0===n[2].indexOf("native");n[2]&&0===n[2].indexOf("eval")&&(t=ln.exec(n[2]))&&(n[2]=t[1],n[3]=t[2],n[4]=t[3]),r={url:n[2],func:n[1]||on,args:c?[n[2]]:[],line:n[3]?+n[3]:null,column:n[4]?+n[4]:null}}else if(n=sn.exec(i[a]))r={url:n[2],func:n[1]||on,args:[],line:+n[3],column:n[4]?+n[4]:null};else{if(!(n=cn.exec(i[a])))continue;n[3]&&n[3].indexOf(" > eval")>-1&&(t=un.exec(n[3]))?(n[1]=n[1]||"eval",n[3]=t[1],n[4]=t[2],n[5]=""):0!==a||n[5]||void 0===e.columnNumber||(o[0].column=e.columnNumber+1),r={url:n[3],func:n[1]||on,args:n[2]?n[2].split(","):[],line:n[4]?+n[4]:null,column:n[5]?+n[5]:null}}!r.func&&r.line&&(r.func=on),o.push(r)}if(!o.length)return null;return{message:dn(e),name:e.name,stack:o}}(e))return pn(t,n)}catch(e){}return{message:dn(e),name:e&&e.name,stack:[],failed:!0}}function pn(e,t){try{return Dt.a({},e,{stack:e.stack.slice(t)})}catch(t){return e}}function dn(e){var t=e&&e.message;return t?t.error&&"string"==typeof t.error.message?t.error.message:t:"No error message"}var hn=50;function mn(e){var t=yn(e.stack),n={type:e.name,value:e.message};return t&&t.length&&(n.stacktrace={frames:t}),void 0===n.type&&""===n.value&&(n.value="Unrecoverable error caught"),n}function vn(e){return{exception:{values:[mn(e)]}}}function yn(e){if(!e||!e.length)return[];var t=e,n=t[0].func||"",r=t[t.length-1].func||"";return-1===n.indexOf("captureMessage")&&-1===n.indexOf("captureException")||(t=t.slice(1)),-1!==r.indexOf("sentryWrapped")&&(t=t.slice(0,-1)),t.map((function(e){return{colno:null===e.column?void 0:e.column,filename:e.url||t[0].url,function:e.func||"?",in_app:!0,lineno:null===e.line?void 0:e.line}})).slice(0,hn).reverse()}function gn(e,t,n){var r;if(void 0===n&&(n={}),Object($t.e)(e)&&e.error)return r=vn(fn(e=e.error));if(Object($t.a)(e)||Object($t.b)(e)){var o=e,i=o.name||(Object($t.a)(o)?"DOMError":"DOMException"),a=o.message?i+": "+o.message:i;return r=bn(a,t,n),Object(Lt.b)(r,a),r}return Object($t.d)(e)?r=vn(fn(e)):Object($t.h)(e)||Object($t.f)(e)?(r=function(e,t,n){var r={exception:{values:[{type:Object($t.f)(e)?e.constructor.name:n?"UnhandledRejection":"Error",value:"Non-Error "+(n?"promise rejection":"exception")+" captured with keys: "+Object(Gt.a)(e)}]},extra:{__serialized__:Object(Gt.d)(e)}};if(t){var o=yn(fn(t).stack);r.stacktrace={frames:o}}return r}(e,t,n.rejection),Object(Lt.a)(r,{synthetic:!0}),r):(r=bn(e,t,n),Object(Lt.b)(r,""+e,void 0),Object(Lt.a)(r,{synthetic:!0}),r)}function bn(e,t,n){void 0===n&&(n={});var r={message:e};if(n.attachStacktrace&&t){var o=yn(fn(t).stack);r.stacktrace={frames:o}}return r}var wn=function(){function e(e){this._limit=e,this._buffer=[]}return e.prototype.isReady=function(){return void 0===this._limit||this.length()<this._limit},e.prototype.add=function(e){var t=this;return this.isReady()?(-1===this._buffer.indexOf(e)&&this._buffer.push(e),e.then((function(){return t.remove(e)})).then(null,(function(){return t.remove(e).then(null,(function(){}))})),e):Ut.a.reject(new Ht("Not adding Promise due to buffer limit reached."))},e.prototype.remove=function(e){return this._buffer.splice(this._buffer.indexOf(e),1)[0]},e.prototype.length=function(){return this._buffer.length},e.prototype.drain=function(e){var t=this;return new Ut.a((function(n){var r=setTimeout((function(){e&&e>0&&n(!1)}),e);Ut.a.all(t._buffer).then((function(){clearTimeout(r),n(!0)})).then(null,(function(){n(!0)}))}))},e}(),En=function(){function e(e){this.options=e,this._buffer=new wn(30),this.url=new Vt(this.options.dsn).getStoreEndpointWithUrlEncodedAuth()}return e.prototype.sendEvent=function(e){throw new Ht("Transport Class has to implement `sendEvent` method")},e.prototype.close=function(e){return this._buffer.drain(e)},e}(),Sn=Object(Lt.g)(),_n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._disabledUntil=new Date(Date.now()),t}return Dt.c(t,e),t.prototype.sendEvent=function(e){var t=this;if(new Date(Date.now())<this._disabledUntil)return Promise.reject({event:e,reason:"Transport locked till "+this._disabledUntil+" due to too many requests.",status:429});var n={body:JSON.stringify(e),method:"POST",referrerPolicy:rn()?"origin":""};return void 0!==this.options.headers&&(n.headers=this.options.headers),this._buffer.add(new Ut.a((function(e,r){Sn.fetch(t.url,n).then((function(n){var o=Yt.fromHttpCode(n.status);if(o!==Yt.Success){if(o===Yt.RateLimit){var i=Date.now();t._disabledUntil=new Date(i+Object(Lt.k)(i,n.headers.get("Retry-After"))),Mt.a.warn("Too many requests, backing off till: "+t._disabledUntil)}r(n)}else e({status:o})})).catch(r)})))},t}(En),Cn=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._disabledUntil=new Date(Date.now()),t}return Dt.c(t,e),t.prototype.sendEvent=function(e){var t=this;return new Date(Date.now())<this._disabledUntil?Promise.reject({event:e,reason:"Transport locked till "+this._disabledUntil+" due to too many requests.",status:429}):this._buffer.add(new Ut.a((function(n,r){var o=new XMLHttpRequest;for(var i in o.onreadystatechange=function(){if(4===o.readyState){var e=Yt.fromHttpCode(o.status);if(e!==Yt.Success){if(e===Yt.RateLimit){var i=Date.now();t._disabledUntil=new Date(i+Object(Lt.k)(i,o.getResponseHeader("Retry-After"))),Mt.a.warn("Too many requests, backing off till: "+t._disabledUntil)}r(o)}else n({status:e})}},o.open("POST",t.url),t.options.headers)t.options.headers.hasOwnProperty(i)&&o.setRequestHeader(i,t.options.headers[i]);o.send(JSON.stringify(e))})))},t}(En),kn=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Dt.c(t,e),t.prototype._setupTransport=function(){if(!this._options.dsn)return e.prototype._setupTransport.call(this);var t=Dt.a({},this._options.transportOptions,{dsn:this._options.dsn});return this._options.transport?new this._options.transport(t):tn()?new _n(t):new Cn(t)},t.prototype.eventFromException=function(e,t){var n=gn(e,t&&t.syntheticException||void 0,{attachStacktrace:this._options.attachStacktrace});return Object(Lt.a)(n,{handled:!0,type:"generic"}),n.level=Qt.Error,t&&t.event_id&&(n.event_id=t.event_id),Ut.a.resolve(n)},t.prototype.eventFromMessage=function(e,t,n){void 0===t&&(t=Qt.Info);var r=bn(e,n&&n.syntheticException||void 0,{attachStacktrace:this._options.attachStacktrace});return r.level=t,n&&n.event_id&&(r.event_id=n.event_id),Ut.a.resolve(r)},t}(en),xn=function(e){function t(t){return void 0===t&&(t={}),e.call(this,kn,t)||this}return Dt.c(t,e),t.prototype._prepareEvent=function(t,n,r){return t.platform=t.platform||"javascript",t.sdk=Dt.a({},t.sdk,{name:"sentry.javascript.browser",packages:Dt.f(t.sdk&&t.sdk.packages||[],[{name:"npm:@sentry/browser",version:"5.11.1"}]),version:"5.11.1"}),e.prototype._prepareEvent.call(this,t,n,r)},t.prototype.showReportDialog=function(e){void 0===e&&(e={});var t=Object(Lt.g)().document;if(t)if(this._isEnabled()){var n=e.dsn||this.getDsn();if(e.eventId)if(n){var r=t.createElement("script");r.async=!0,r.src=new Vt(n).getReportDialogEndpoint(e),e.onLoad&&(r.onload=e.onLoad),(t.head||t.body).appendChild(r)}else Mt.a.error("Missing `Dsn` option in showReportDialog call");else Mt.a.error("Missing `eventId` option in showReportDialog call")}else Mt.a.error("Trying to call showReportDialog with Sentry Client is disabled")},t}(Xt);function Tn(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Object(It.a)();if(r&&r[e])return r[e].apply(r,Dt.f(t));throw new Error("No hub defined or "+e+" was not found on the hub, please open a bug report.")}function On(e){var t;try{throw new Error("Sentry syntheticException")}catch(e){t=e}return Tn("captureException",e,{originalException:e,syntheticException:t})}function Pn(e){Tn("withScope",e)}var Rn=0;function jn(){return Rn>0}function Dn(){Rn+=1,setTimeout((function(){Rn-=1}))}function Nn(e,t,n){if(void 0===t&&(t={}),"function"!=typeof e)return e;try{if(e.__sentry__)return e;if(e.__sentry_wrapped__)return e.__sentry_wrapped__}catch(t){return e}var r=function(){var r=Array.prototype.slice.call(arguments);try{n&&"function"==typeof n&&n.apply(this,arguments);var o=r.map((function(e){return Nn(e,t)}));return e.handleEvent?e.handleEvent.apply(this,o):e.apply(this,o)}catch(e){throw Dn(),Pn((function(n){n.addEventProcessor((function(e){var n=Dt.a({},e);return t.mechanism&&(Object(Lt.b)(n,void 0,void 0),Object(Lt.a)(n,t.mechanism)),n.extra=Dt.a({},n.extra,{arguments:Object(Gt.c)(r,3)}),n})),On(e)})),e}};try{for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(r[o]=e[o])}catch(e){}e.prototype=e.prototype||{},r.prototype=e.prototype,Object.defineProperty(e,"__sentry_wrapped__",{enumerable:!1,value:r}),Object.defineProperties(r,{__sentry__:{enumerable:!1,value:!0},__sentry_original__:{enumerable:!1,value:e}});try{Object.getOwnPropertyDescriptor(r,"name").configurable&&Object.defineProperty(r,"name",{get:function(){return e.name}})}catch(e){}return r}var In,Mn=function(){function e(){this._ignoreOnError=0,this.name=e.id}return e.prototype._wrapTimeFunction=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[0];return t[0]=Nn(r,{mechanism:{data:{function:Object(Lt.f)(e)},handled:!0,type:"instrument"}}),e.apply(this,t)}},e.prototype._wrapRAF=function(e){return function(t){return e(Nn(t,{mechanism:{data:{function:"requestAnimationFrame",handler:Object(Lt.f)(e)},handled:!0,type:"instrument"}}))}},e.prototype._wrapEventTarget=function(e){var t=Object(Lt.g)(),n=t[e]&&t[e].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&(Object(Gt.b)(n,"addEventListener",(function(t){return function(n,r,o){try{"function"==typeof r.handleEvent&&(r.handleEvent=Nn(r.handleEvent.bind(r),{mechanism:{data:{function:"handleEvent",handler:Object(Lt.f)(r),target:e},handled:!0,type:"instrument"}}))}catch(e){}return t.call(this,n,Nn(r,{mechanism:{data:{function:"addEventListener",handler:Object(Lt.f)(r),target:e},handled:!0,type:"instrument"}}),o)}})),Object(Gt.b)(n,"removeEventListener",(function(e){return function(t,n,r){var o=n;try{o=o&&(o.__sentry_wrapped__||o)}catch(e){}return e.call(this,t,o,r)}})))},e.prototype._wrapXHR=function(e){return function(){for(var t=this,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=this,i=["onload","onerror","onprogress"];return i.forEach((function(e){e in t&&"function"==typeof t[e]&&Object(Gt.b)(t,e,(function(t){return Nn(t,{mechanism:{data:{function:e,handler:Object(Lt.f)(t)},handled:!0,type:"instrument"}})}))})),"onreadystatechange"in o&&"function"==typeof o.onreadystatechange&&Object(Gt.b)(o,"onreadystatechange",(function(e){var t={mechanism:{data:{function:"onreadystatechange",handler:Object(Lt.f)(e)},handled:!0,type:"instrument"}};return e.__sentry_original__&&(t.mechanism.data.handler=Object(Lt.f)(e.__sentry_original__)),Nn(e,t)})),e.apply(this,n)}},e.prototype.setupOnce=function(){this._ignoreOnError=this._ignoreOnError;var e=Object(Lt.g)();Object(Gt.b)(e,"setTimeout",this._wrapTimeFunction.bind(this)),Object(Gt.b)(e,"setInterval",this._wrapTimeFunction.bind(this)),Object(Gt.b)(e,"requestAnimationFrame",this._wrapRAF.bind(this)),"XMLHttpRequest"in e&&Object(Gt.b)(XMLHttpRequest.prototype,"send",this._wrapXHR.bind(this)),["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"].forEach(this._wrapEventTarget.bind(this))},e.id="TryCatch",e}(),Ln=Object(Lt.g)(),An={},Fn={};function zn(e){if(!Fn[e])switch(Fn[e]=!0,e){case"console":!function(){if(!("console"in Ln))return;["debug","info","warn","error","log","assert"].forEach((function(e){e in Ln.console&&Object(Gt.b)(Ln.console,e,(function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Bn("console",{args:n,level:e}),t&&Function.prototype.apply.call(t,Ln.console,n)}}))}))}();break;case"dom":!function(){if(!("document"in Ln))return;Ln.document.addEventListener("click",Kn("click",Bn.bind(null,"dom")),!1),Ln.document.addEventListener("keypress",Jn(Bn.bind(null,"dom")),!1),["EventTarget","Node"].forEach((function(e){var t=Ln[e]&&Ln[e].prototype;t&&t.hasOwnProperty&&t.hasOwnProperty("addEventListener")&&(Object(Gt.b)(t,"addEventListener",(function(e){return function(t,n,r){return n&&n.handleEvent?("click"===t&&Object(Gt.b)(n,"handleEvent",(function(e){return function(t){return Kn("click",Bn.bind(null,"dom"))(t),e.call(this,t)}})),"keypress"===t&&Object(Gt.b)(n,"handleEvent",(function(e){return function(t){return Jn(Bn.bind(null,"dom"))(t),e.call(this,t)}}))):("click"===t&&Kn("click",Bn.bind(null,"dom"),!0)(this),"keypress"===t&&Jn(Bn.bind(null,"dom"))(this)),e.call(this,t,n,r)}})),Object(Gt.b)(t,"removeEventListener",(function(e){return function(t,n,r){var o=n;try{o=o&&(o.__sentry_wrapped__||o)}catch(e){}return e.call(this,t,o,r)}})))}))}();break;case"xhr":!function(){if(!("XMLHttpRequest"in Ln))return;var e=XMLHttpRequest.prototype;Object(Gt.b)(e,"open",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[1];return this.__sentry_xhr__={method:Object($t.k)(t[0])?t[0].toUpperCase():t[0],url:t[1]},Object($t.k)(r)&&"POST"===this.__sentry_xhr__.method&&r.match(/sentry_key/)&&(this.__sentry_own_request__=!0),e.apply(this,t)}})),Object(Gt.b)(e,"send",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this,o={args:t,startTimestamp:Date.now(),xhr:r};function i(){if(4===r.readyState){try{r.__sentry_xhr__&&(r.__sentry_xhr__.status_code=r.status)}catch(e){}Bn("xhr",Dt.a({},o,{endTimestamp:Date.now()}))}}return Bn("xhr",Dt.a({},o)),"onreadystatechange"in r&&"function"==typeof r.onreadystatechange?Object(Gt.b)(r,"onreadystatechange",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return i(),e.apply(r,t)}})):r.onreadystatechange=i,e.apply(this,t)}}))}();break;case"fetch":!function(){if(!function(){if(!tn())return!1;var e=Object(Lt.g)();if(nn(e.fetch))return!0;var t=!1,n=e.document;if(n){var r=n.createElement("iframe");r.hidden=!0;try{n.head.appendChild(r),r.contentWindow&&r.contentWindow.fetch&&(t=nn(r.contentWindow.fetch)),n.head.removeChild(r)}catch(e){Mt.a.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}}return t}())return;Object(Gt.b)(Ln,"fetch",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r={args:t,fetchData:{method:Hn(t),url:Wn(t)},startTimestamp:Date.now()};return Bn("fetch",Dt.a({},r)),e.apply(Ln,t).then((function(e){return Bn("fetch",Dt.a({},r,{endTimestamp:Date.now(),response:e})),e}),(function(e){throw Bn("fetch",Dt.a({},r,{endTimestamp:Date.now(),error:e})),e}))}}))}();break;case"history":!function(){if(e=Object(Lt.g)(),t=e.chrome,n=t&&t.app&&t.app.runtime,r="history"in e&&!!e.history.pushState&&!!e.history.replaceState,n||!r)return;var e,t,n,r;var o=Ln.onpopstate;function i(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length>2?t[2]:void 0;if(r){var o=In,i=String(r);In=i,Bn("history",{from:o,to:i})}return e.apply(this,t)}}Ln.onpopstate=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ln.location.href,r=In;if(In=n,Bn("history",{from:r,to:n}),o)return o.apply(this,e)},Object(Gt.b)(Ln.history,"pushState",i),Object(Gt.b)(Ln.history,"replaceState",i)}();break;default:Mt.a.warn("unknown instrumentation type:",e)}}function Un(e){e&&"string"==typeof e.type&&"function"==typeof e.callback&&(An[e.type]=An[e.type]||[],An[e.type].push(e.callback),zn(e.type))}function Bn(e,t){var n,r;if(e&&An[e])try{for(var o=Dt.g(An[e]||[]),i=o.next();!i.done;i=o.next()){var a=i.value;try{a(t)}catch(t){Mt.a.error("Error while triggering instrumentation handler.\nType: "+e+"\nName: "+Object(Lt.f)(a)+"\nError: "+t)}}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}function Hn(e){return void 0===e&&(e=[]),"Request"in Ln&&Object($t.g)(e[0],Request)&&e[0].method?String(e[0].method).toUpperCase():e[1]&&e[1].method?String(e[1].method).toUpperCase():"GET"}function Wn(e){return void 0===e&&(e=[]),"string"==typeof e[0]?e[0]:"Request"in Ln&&Object($t.g)(e[0],Request)?e[0].url:String(e[0])}var qn,Gn,Vn=1e3,$n=0;function Kn(e,t,n){return void 0===n&&(n=!1),function(r){qn=void 0,r&&Gn!==r&&(Gn=r,$n&&clearTimeout($n),n?$n=setTimeout((function(){t({event:r,name:e})})):t({event:r,name:e}))}}function Jn(e){return function(t){var n;try{n=t.target}catch(e){return}var r=n&&n.tagName;r&&("INPUT"===r||"TEXTAREA"===r||n.isContentEditable)&&(qn||Kn("input",e)(t),clearTimeout(qn),qn=setTimeout((function(){qn=void 0}),Vn))}}var Yn=function(){function e(t){this.name=e.id,this._options=Dt.a({console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0},t)}return e.prototype._consoleBreadcrumb=function(e){var t={category:"console",data:{extra:{arguments:Object(Gt.c)(e.args,3)},logger:"console"},level:Qt.fromString(e.level),message:Object(At.b)(e.args," ")};if("assert"===e.level){if(!1!==e.args[0])return;t.message="Assertion failed: "+(Object(At.b)(e.args.slice(1)," ")||"console.assert"),t.data.extra.arguments=Object(Gt.c)(e.args.slice(1),3)}Object(It.a)().addBreadcrumb(t,{input:e.args,level:e.level})},e.prototype._domBreadcrumb=function(e){var t;try{t=e.event.target?Object(Lt.i)(e.event.target):Object(Lt.i)(e.event)}catch(e){t="<unknown>"}0!==t.length&&Object(It.a)().addBreadcrumb({category:"ui."+e.name,message:t},{event:event,name:e.name})},e.prototype._xhrBreadcrumb=function(e){if(e.endTimestamp){if(e.xhr.__sentry_own_request__)return;Object(It.a)().addBreadcrumb({category:"xhr",data:e.xhr.__sentry_xhr__,type:"http"},{xhr:e.xhr})}else e.xhr.__sentry_own_request__&&Xn(e.args[0])},e.prototype._fetchBreadcrumb=function(e){if(e.endTimestamp){var t=Object(It.a)().getClient(),n=t&&t.getDsn();if(n){var r=new Vt(n).getStoreEndpoint();if(r&&-1!==e.fetchData.url.indexOf(r)&&"POST"===e.fetchData.method&&e.args[1]&&e.args[1].body)return void Xn(e.args[1].body)}e.error?Object(It.a)().addBreadcrumb({category:"fetch",data:Dt.a({},e.fetchData,{status_code:e.response.status}),level:Qt.Error,type:"http"},{data:e.error,input:e.args}):Object(It.a)().addBreadcrumb({category:"fetch",data:Dt.a({},e.fetchData,{status_code:e.response.status}),type:"http"},{input:e.args,response:e.response})}},e.prototype._historyBreadcrumb=function(e){var t=Object(Lt.g)(),n=e.from,r=e.to,o=Object(Lt.l)(t.location.href),i=Object(Lt.l)(n),a=Object(Lt.l)(r);i.path||(i=o),o.protocol===a.protocol&&o.host===a.host&&(r=a.relative),o.protocol===i.protocol&&o.host===i.host&&(n=i.relative),Object(It.a)().addBreadcrumb({category:"navigation",data:{from:n,to:r}})},e.prototype.setupOnce=function(){var e=this;this._options.console&&Un({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._consoleBreadcrumb.apply(e,Dt.f(t))},type:"console"}),this._options.dom&&Un({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._domBreadcrumb.apply(e,Dt.f(t))},type:"dom"}),this._options.xhr&&Un({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._xhrBreadcrumb.apply(e,Dt.f(t))},type:"xhr"}),this._options.fetch&&Un({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._fetchBreadcrumb.apply(e,Dt.f(t))},type:"fetch"}),this._options.history&&Un({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._historyBreadcrumb.apply(e,Dt.f(t))},type:"history"})},e.id="Breadcrumbs",e}();function Xn(e){try{var t=JSON.parse(e);Object(It.a)().addBreadcrumb({category:"sentry",event_id:t.event_id,level:t.level||Qt.fromString("error"),message:Object(Lt.e)(t)},{event:t})}catch(e){Mt.a.error("Error while adding sentry type breadcrumb")}}var Qn=function(){function e(t){this.name=e.id,this._global=Object(Lt.g)(),this._oldOnErrorHandler=null,this._oldOnUnhandledRejectionHandler=null,this._onErrorHandlerInstalled=!1,this._onUnhandledRejectionHandlerInstalled=!1,this._options=Dt.a({onerror:!0,onunhandledrejection:!0},t)}return e.prototype.setupOnce=function(){Error.stackTraceLimit=50,this._options.onerror&&(Mt.a.log("Global Handler attached: onerror"),this._installGlobalOnErrorHandler()),this._options.onunhandledrejection&&(Mt.a.log("Global Handler attached: onunhandledrejection"),this._installGlobalOnUnhandledRejectionHandler())},e.prototype._installGlobalOnErrorHandler=function(){if(!this._onErrorHandlerInstalled){var t=this;this._oldOnErrorHandler=this._global.onerror,this._global.onerror=function(n,r,o,i,a){var c=Object(It.a)(),s=c.getIntegration(e),u=a&&!0===a.__sentry_own_request__;if(!s||jn()||u)return!!t._oldOnErrorHandler&&t._oldOnErrorHandler.apply(this,arguments);var l=c.getClient(),f=Object($t.i)(a)?t._eventFromIncompleteOnError(n,r,o,i):t._enhanceEventWithInitialFrame(gn(a,void 0,{attachStacktrace:l&&l.getOptions().attachStacktrace,rejection:!1}),r,o,i);return Object(Lt.a)(f,{handled:!1,type:"onerror"}),c.captureEvent(f,{originalException:a}),!!t._oldOnErrorHandler&&t._oldOnErrorHandler.apply(this,arguments)},this._onErrorHandlerInstalled=!0}},e.prototype._installGlobalOnUnhandledRejectionHandler=function(){if(!this._onUnhandledRejectionHandlerInstalled){var t=this;this._oldOnUnhandledRejectionHandler=this._global.onunhandledrejection,this._global.onunhandledrejection=function(n){var r=n;try{r=n&&"reason"in n?n.reason:n}catch(e){}var o=Object(It.a)(),i=o.getIntegration(e),a=r&&!0===r.__sentry_own_request__;if(!i||jn()||a)return!t._oldOnUnhandledRejectionHandler||t._oldOnUnhandledRejectionHandler.apply(this,arguments);var c=o.getClient(),s=Object($t.i)(r)?t._eventFromIncompleteRejection(r):gn(r,void 0,{attachStacktrace:c&&c.getOptions().attachStacktrace,rejection:!0});return s.level=Qt.Error,Object(Lt.a)(s,{handled:!1,type:"onunhandledrejection"}),o.captureEvent(s,{originalException:r}),!t._oldOnUnhandledRejectionHandler||t._oldOnUnhandledRejectionHandler.apply(this,arguments)},this._onUnhandledRejectionHandlerInstalled=!0}},e.prototype._eventFromIncompleteOnError=function(e,t,n,r){var o,i=Object($t.e)(e)?e.message:e;if(Object($t.k)(i)){var a=i.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);a&&(o=a[1],i=a[2])}var c={exception:{values:[{type:o||"Error",value:i}]}};return this._enhanceEventWithInitialFrame(c,t,n,r)},e.prototype._eventFromIncompleteRejection=function(e){return{exception:{values:[{type:"UnhandledRejection",value:"Non-Error promise rejection captured with value: "+e}]}}},e.prototype._enhanceEventWithInitialFrame=function(e,t,n,r){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].stacktrace=e.exception.values[0].stacktrace||{},e.exception.values[0].stacktrace.frames=e.exception.values[0].stacktrace.frames||[];var o=isNaN(parseInt(r,10))?void 0:r,i=isNaN(parseInt(n,10))?void 0:n,a=Object($t.k)(t)&&t.length>0?t:Object(Lt.h)();return 0===e.exception.values[0].stacktrace.frames.length&&e.exception.values[0].stacktrace.frames.push({colno:o,filename:a,function:"?",in_app:!0,lineno:i}),e},e.id="GlobalHandlers",e}(),Zn="cause",er=5,tr=function(){function e(t){void 0===t&&(t={}),this.name=e.id,this._key=t.key||Zn,this._limit=t.limit||er}return e.prototype.setupOnce=function(){Object(Nt.b)((function(t,n){var r=Object(It.a)().getIntegration(e);return r?r._handler(t,n):t}))},e.prototype._handler=function(e,t){if(!(e.exception&&e.exception.values&&t&&Object($t.g)(t.originalException,Error)))return e;var n=this._walkErrorTree(t.originalException,this._key);return e.exception.values=Dt.f(n,e.exception.values),e},e.prototype._walkErrorTree=function(e,t,n){if(void 0===n&&(n=[]),!Object($t.g)(e[t],Error)||n.length+1>=this._limit)return n;var r=mn(fn(e[t]));return this._walkErrorTree(e[t],t,Dt.f([r],n))},e.id="LinkedErrors",e}(),nr=Object(Lt.g)(),rr=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){Object(Nt.b)((function(t){if(Object(It.a)().getIntegration(e)){if(!nr.navigator||!nr.location)return t;var n=t.request||{};return n.url=n.url||nr.location.href,n.headers=n.headers||{},n.headers["User-Agent"]=nr.navigator.userAgent,Dt.a({},t,{request:n})}return t}))},e.id="UserAgent",e}(),or=[new s.InboundFilters,new s.FunctionToString,new Mn,new Yn,new Qn,new tr,new rr];function ir(e){console.warn("[react-ga]",e)}function ar(e){return(ar="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function cr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function ur(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function lr(e){return(lr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function fr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function pr(e,t){return(pr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function dr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var hr="_blank",mr=1,vr=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=function(e,t){return!t||"object"!==ar(t)&&"function"!=typeof t?fr(e):t}(this,(e=lr(t)).call.apply(e,[this].concat(o))),dr(fr(n),"handleClick",(function(e){var r=n.props,o=r.target,i=r.eventLabel,a=r.to,c=r.onClick,s=r.trackerNames,u={label:i},l=o!==hr,f=!(e.ctrlKey||e.shiftKey||e.metaKey||e.button===mr);l&&f?(e.preventDefault(),t.trackLink(u,(function(){window.location.href=a}),s)):t.trackLink(u,(function(){}),s),c&&c(e)})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pr(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.to,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?cr(n,!0).forEach((function(t){dr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):cr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},sr(e,["to"]),{href:t,onClick:this.handleClick});return this.props.target===hr&&(n.rel="noopener noreferrer"),delete n.eventLabel,delete n.trackerNames,f.a.createElement("a",n)}}])&&ur(n.prototype,r),o&&ur(n,o),t}(l.Component);function yr(e){return e.replace(/^\s+|\s+$/g,"")}dr(vr,"trackLink",(function(){ir("ga tracking not enabled")})),dr(vr,"propTypes",{eventLabel:ye.a.string.isRequired,target:ye.a.string,to:ye.a.string,onClick:ye.a.func,trackerNames:ye.a.arrayOf(ye.a.string)}),dr(vr,"defaultProps",{target:null,to:null,onClick:null,trackerNames:null});var gr=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;var br="REDACTED (Potential Email Address)";function wr(e,t){return function(e){return"string"==typeof e&&-1!==e.indexOf("@")}(e)?(ir("This arg looks like an email address, redacting."),br):t?yr(e).replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,(function(e,t,n){return t>0&&t+e.length!==n.length&&e.search(gr)>-1&&":"!==n.charAt(t-2)&&("-"!==n.charAt(t+e.length)||"-"===n.charAt(t-1))&&n.charAt(t-1).search(/[^\s-]/)<0?e.toLowerCase():e.substr(1).search(/[A-Z]|\../)>-1?e:e.charAt(0).toUpperCase()+e.substr(1)})):e}var Er=function(e){var t,n,r,o,i,a,c,s="https://www.google-analytics.com/analytics.js";e&&e.gaAddress?s=e.gaAddress:e&&e.debug&&(s="https://www.google-analytics.com/analytics_debug.js"),t=window,n=document,r="script",o=s,i="ga",t.GoogleAnalyticsObject=i,t.ga=t.ga||function(){(t.ga.q=t.ga.q||[]).push(arguments)},t.ga.l=1*new Date,a=n.createElement(r),c=n.getElementsByTagName(r)[0],a.async=1,a.src=o,c.parentNode.insertBefore(a,c)};function Sr(e){console.info("[react-ga]",e)}var _r=[],Cr={calls:_r,ga:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];_r.push([].concat(t))},resetCalls:function(){_r.length=0}};function kr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function xr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Tr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Or(e){return(Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pr(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Rr="undefined"==typeof window||"undefined"==typeof document,jr=!1,Dr=!0,Nr=!1,Ir=!0,Mr=function(){var e;return Nr?Cr.ga.apply(Cr,arguments):!Rr&&(window.ga?(e=window).ga.apply(e,arguments):ir("ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually"))};function Lr(e){return wr(e,Dr)}function Ar(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=n[0];if("function"==typeof Mr){if("string"!=typeof o)return void ir("ga command must be a string");!Ir&&Array.isArray(e)||Mr.apply(void 0,n),Array.isArray(e)&&e.forEach((function(e){Mr.apply(void 0,Pr(["".concat(e,".").concat(o)].concat(n.slice(1))))}))}}function Fr(e,t){e?t&&(t.debug&&!0===t.debug&&(jr=!0),!1===t.titleCase&&(Dr=!1),t.useExistingGa)||(t&&t.gaOptions?Mr("create",e,t.gaOptions):Mr("create",e,"auto")):ir("gaTrackingID is required in initialize()")}function zr(e,t){if(t&&!0===t.testMode)Nr=!0;else{if(Rr)return!1;t&&!0===t.standardImplementation||Er(t)}return Ir=!t||"boolean"!=typeof t.alwaysSendToDefaultTracker||t.alwaysSendToDefaultTracker,Array.isArray(e)?e.forEach((function(e){"object"===Or(e)?Fr(e.trackingId,e):ir("All configs must be an object")})):Fr(e,t),!0}function Ur(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.length>0&&(Mr.apply(void 0,t),jr&&(Sr("called ga('arguments');"),Sr("with arguments: ".concat(JSON.stringify(t))))),window.ga}function Br(e,t){e?"object"===Or(e)?(0===Object.keys(e).length&&ir("empty `fieldsObject` given to .set()"),Ar(t,"set",e),jr&&(Sr("called ga('set', fieldsObject);"),Sr("with fieldsObject: ".concat(JSON.stringify(e))))):ir("Expected `fieldsObject` arg to be an Object"):ir("`fieldsObject` is required in .set()")}function Hr(e,t){Ar(t,"send",e),jr&&(Sr("called ga('send', fieldObject);"),Sr("with fieldObject: ".concat(JSON.stringify(e))),Sr("with trackers: ".concat(JSON.stringify(t))))}function Wr(e,t,n){if(e){var r=yr(e);if(""!==r){var o={};if(n&&(o.title=n),Ar(t,"send",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xr(n,!0).forEach((function(t){Tr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({hitType:"pageview",page:r},o)),jr){Sr("called ga('send', 'pageview', path);");var i="";n&&(i=" and title: ".concat(n)),Sr("with path: ".concat(r).concat(i))}}else ir("path cannot be an empty string in .pageview()")}else ir("path is required in .pageview()")}function qr(e,t){if(e){var n,r="/"===(n=yr(e)).substring(0,1)?n.substring(1):n;if(""!==r){var o="/modal/".concat(r);Ar(t,"send","pageview",o),jr&&(Sr("called ga('send', 'pageview', path);"),Sr("with path: ".concat(o)))}else ir("modalName cannot be an empty string or a single / in .modalview()")}else ir("modalName is required in .modalview(modalName)")}function Gr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.variable,r=e.value,o=e.label,i=arguments.length>1?arguments[1]:void 0;if(t&&n&&r&&"number"==typeof r){var a={hitType:"timing",timingCategory:Lr(t),timingVar:Lr(n),timingValue:r};o&&(a.timingLabel=Lr(o)),Hr(a,i)}else ir("args.category, args.variable AND args.value are required in timing() AND args.value has to be a number")}function Vr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.action,r=e.label,o=e.value,i=e.nonInteraction,a=e.transport,c=kr(e,["category","action","label","value","nonInteraction","transport"]),s=arguments.length>1?arguments[1]:void 0;if(t&&n){var u={hitType:"event",eventCategory:Lr(t),eventAction:Lr(n)};r&&(u.eventLabel=Lr(r)),void 0!==o&&("number"!=typeof o?ir("Expected `args.value` arg to be a Number."):u.eventValue=o),void 0!==i&&("boolean"!=typeof i?ir("`args.nonInteraction` must be a boolean."):u.nonInteraction=i),void 0!==a&&("string"!=typeof a?ir("`args.transport` must be a string."):(-1===["beacon","xhr","image"].indexOf(a)&&ir("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"),u.transport=a)),Object.keys(c).filter((function(e){return"dimension"===e.substr(0,"dimension".length)})).forEach((function(e){u[e]=c[e]})),Object.keys(c).filter((function(e){return"metric"===e.substr(0,"metric".length)})).forEach((function(e){u[e]=c[e]})),Hr(u,s)}else ir("args.category AND args.action are required in event()")}function $r(e,t){var n=e.description,r=e.fatal,o={hitType:"exception"};n&&(o.exDescription=Lr(n)),void 0!==r&&("boolean"!=typeof r?ir("`args.fatal` must be a boolean."):o.exFatal=r),Hr(o,t)}var Kr={require:function(e,t,n){if(e){var r=yr(e);if(""!==r){var o=n?"".concat(n,".require"):"require";if(t){if("object"!==Or(t))return void ir("Expected `options` arg to be an Object");0===Object.keys(t).length&&ir("Empty `options` given to .require()"),Ur(o,r,t),jr&&Sr("called ga('require', '".concat(r,"', ").concat(JSON.stringify(t)))}else Ur(o,r),jr&&Sr("called ga('require', '".concat(r,"');"))}else ir("`name` cannot be an empty string in .require()")}else ir("`name` is required in .require()")},execute:function(e,t){var n,r;if(1==(arguments.length<=2?0:arguments.length-2)?n=arguments.length<=2?void 0:arguments[2]:(r=arguments.length<=2?void 0:arguments[2],n=arguments.length<=3?void 0:arguments[3]),"string"!=typeof e)ir("Expected `pluginName` arg to be a String.");else if("string"!=typeof t)ir("Expected `action` arg to be a String.");else{var o="".concat(e,":").concat(t);n=n||null,r&&n?(Ur(o,r,n),jr&&(Sr("called ga('".concat(o,"');")),Sr('actionType: "'.concat(r,'" with payload: ').concat(JSON.stringify(n))))):n?(Ur(o,n),jr&&(Sr("called ga('".concat(o,"');")),Sr("with payload: ".concat(JSON.stringify(n))))):(Ur(o),jr&&Sr("called ga('".concat(o,"');")))}}};function Jr(e,t,n){if("function"==typeof t)if(e&&e.label){var r={hitType:"event",eventCategory:"Outbound",eventAction:"Click",eventLabel:Lr(e.label)},o=!1,i=setTimeout((function(){o=!0,t()}),250);r.hitCallback=function(){clearTimeout(i),o||t()},Hr(r,n)}else ir("args.label is required in outboundLink()");else ir("hitCallback function is required")}var Yr=Cr,Xr={initialize:zr,ga:Ur,set:Br,send:Hr,pageview:Wr,modalview:qr,timing:Gr,event:Vr,exception:$r,plugin:Kr,outboundLink:Jr,testModeAPI:Cr};function Qr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}vr.origTrackLink=vr.trackLink,vr.trackLink=Jr;var eo=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qr(n,!0).forEach((function(t){Zr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},u,{OutboundLink:vr});function to(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function no(e){return"/"===e.charAt(0)}function ro(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var oo=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&no(e),a=t&&no(t),c=i||a;if(e&&no(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var u=0,l=o.length;l>=0;l--){var f=o[l];"."===f?ro(o,l):".."===f?(ro(o,l),u++):u&&(ro(o,l),u--)}if(!c)for(;u--;u)o.unshift("..");!c||""===o[0]||o[0]&&no(o[0])||o.unshift("");var p=o.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p};function io(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var ao=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=io(t),o=io(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},co=!0,so="Invariant failed";var uo=function(e,t){if(!e)throw co?new Error(so):new Error(so+": "+(t||""))};function lo(e){return"/"===e.charAt(0)?e:"/"+e}function fo(e){return"/"===e.charAt(0)?e.substr(1):e}function po(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function ho(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function mo(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function vo(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=xe({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=oo(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function yo(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var go=!("undefined"==typeof window||!window.document||!window.document.createElement);function bo(e,t){t(window.confirm(e))}var wo="popstate",Eo="hashchange";function So(){try{return window.history.state||{}}catch(e){return{}}}function _o(e){void 0===e&&(e={}),go||uo(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,c=void 0!==a&&a,s=i.getUserConfirmation,u=void 0===s?bo:s,l=i.keyLength,f=void 0===l?6:l,p=e.basename?ho(lo(e.basename)):"";function d(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=po(i,p)),vo(i,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=yo();function v(e){xe(O,e),O.length=n.length,m.notifyListeners(O.location,O.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||w(d(e.state))}function g(){w(d(So()))}var b=!1;function w(e){if(b)b=!1,v();else{m.confirmTransitionTo(e,"POP",u,(function(t){t?v({action:"POP",location:e}):function(e){var t=O.location,n=S.indexOf(t.key);-1===n&&(n=0);var r=S.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,C(o))}(e)}))}}var E=d(So()),S=[E.key];function _(e){return p+mo(e)}function C(e){n.go(e)}var k=0;function x(e){1===(k+=e)&&1===e?(window.addEventListener(wo,y),o&&window.addEventListener(Eo,g)):0===k&&(window.removeEventListener(wo,y),o&&window.removeEventListener(Eo,g))}var T=!1;var O={length:n.length,action:"POP",location:E,createHref:_,push:function(e,t){var o=vo(e,t,h(),O.location);m.confirmTransitionTo(o,"PUSH",u,(function(e){if(e){var t=_(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),c)window.location.href=t;else{var s=S.indexOf(O.location.key),u=S.slice(0,s+1);u.push(o.key),S=u,v({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=vo(e,t,h(),O.location);m.confirmTransitionTo(o,"REPLACE",u,(function(e){if(e){var t=_(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),c)window.location.replace(t);else{var s=S.indexOf(O.location.key);-1!==s&&(S[s]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:C,goBack:function(){C(-1)},goForward:function(){C(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return T||(x(1),T=!0),function(){return T&&(T=!1,x(-1)),t()}},listen:function(e){var t=m.appendListener(e);return x(1),function(){x(-1),t()}}};return O}var Co="hashchange",ko={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+fo(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:fo,decodePath:lo},slash:{encodePath:lo,decodePath:lo}};function xo(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function To(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function Oo(e){window.location.replace(xo(window.location.href)+"#"+e)}function Po(e){void 0===e&&(e={}),go||uo(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?bo:r,i=n.hashType,a=void 0===i?"slash":i,c=e.basename?ho(lo(e.basename)):"",s=ko[a],u=s.encodePath,l=s.decodePath;function f(){var e=l(To());return c&&(e=po(e,c)),vo(e)}var p=yo();function d(e){xe(k,e),k.length=t.length,p.notifyListeners(k.location,k.action)}var h=!1,m=null;function v(){var e,t,n=To(),r=u(n);if(n!==r)Oo(r);else{var i=f(),a=k.location;if(!h&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===mo(i))return;m=null,function(e){if(h)h=!1,d();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?d({action:"POP",location:e}):function(e){var t=k.location,n=w.lastIndexOf(mo(t));-1===n&&(n=0);var r=w.lastIndexOf(mo(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,E(o))}(e)}))}}(i)}}var y=To(),g=u(y);y!==g&&Oo(g);var b=f(),w=[mo(b)];function E(e){t.go(e)}var S=0;function _(e){1===(S+=e)&&1===e?window.addEventListener(Co,v):0===S&&window.removeEventListener(Co,v)}var C=!1;var k={length:t.length,action:"POP",location:b,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=xo(window.location.href)),n+"#"+u(c+mo(e))},push:function(e,t){var n=vo(e,void 0,void 0,k.location);p.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=mo(n),r=u(c+t);if(To()!==r){m=t,function(e){window.location.hash=e}(r);var o=w.lastIndexOf(mo(k.location)),i=w.slice(0,o+1);i.push(t),w=i,d({action:"PUSH",location:n})}else d()}}))},replace:function(e,t){var n=vo(e,void 0,void 0,k.location);p.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=mo(n),r=u(c+t);To()!==r&&(m=t,Oo(r));var o=w.indexOf(mo(k.location));-1!==o&&(w[o]=t),d({action:"REPLACE",location:n})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return C||(_(1),C=!0),function(){return C&&(C=!1,_(-1)),t()}},listen:function(e){var t=p.appendListener(e);return _(1),function(){_(-1),t()}}};return k}function Ro(e,t,n){return Math.min(Math.max(e,t),n)}var jo=n(38),Do=n.n(jo),No=n(57),Io=n.n(No),Mo=1073741823;var Lo=f.a.createContext||function(e,t){var n,r,o="__create-react-context-"+Io()()+"__",i=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=function(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}(t.props.value),t}Do()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):Mo,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(l.Component);i.childContextTypes=((n={})[o]=ye.a.object.isRequired,n);var a=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Do()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?Mo:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?Mo:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(l.Component);return a.contextTypes=((r={})[o]=ye.a.object,r),{Provider:i,Consumer:a}},Ao=n(39),Fo=n.n(Ao),zo=function(e){var t=Lo();return t.displayName=e,t}("Router"),Uo=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}to(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return f.a.createElement(zo.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(f.a.Component);f.a.Component;var Bo=function(e){function t(){return e.apply(this,arguments)||this}to(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(f.a.Component);var Ho={},Wo=1e4,qo=0;function Go(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(Ho[e])return Ho[e];var t=Fo.a.compile(e);return qo<Wo&&(Ho[e]=t,qo++),t}(e)(t,{pretty:!0})}function Vo(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return f.a.createElement(zo.Consumer,null,(function(e){e||uo(!1);var r=e.history,i=e.staticContext,a=o?r.push:r.replace,c=vo(t?"string"==typeof n?Go(n,t.params):xe({},n,{pathname:Go(n.pathname,t.params)}):n);return i?(a(c),null):f.a.createElement(Bo,{onMount:function(){a(c)},onUpdate:function(e,t){var n,r,o=vo(t.to);n=o,r=xe({},c,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&ao(n.state,r.state)||a(c)},to:n})}))}var $o={},Ko=1e4,Jo=0;function Yo(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,c=void 0!==a&&a,s=n.sensitive,u=void 0!==s&&s;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=$o[n]||($o[n]={});if(r[e])return r[e];var o=[],i={regexp:Fo()(e,o,t),keys:o};return Jo<Ko&&(r[e]=i,Jo++),i}(n,{end:i,strict:c,sensitive:u}),o=r.regexp,a=r.keys,s=o.exec(e);if(!s)return null;var l=s[0],f=s.slice(1),p=e===l;return i&&!p?null:{path:n,url:"/"===n&&""===l?"/":l,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var Xo=function(e){function t(){return e.apply(this,arguments)||this}return to(t,e),t.prototype.render=function(){var e=this;return f.a.createElement(zo.Consumer,null,(function(t){t||uo(!1);var n=e.props.location||t.location,r=xe({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?Yo(n.pathname,e.props):t.match}),o=e.props,i=o.children,a=o.component,c=o.render;return Array.isArray(i)&&0===i.length&&(i=null),f.a.createElement(zo.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:a?f.a.createElement(a,r):c?c(r):null:"function"==typeof i?i(r):null)}))},t}(f.a.Component);function Qo(e){return"/"===e.charAt(0)?e:"/"+e}function Zo(e,t){if(!e)return t;var n=Qo(e);return 0!==t.pathname.indexOf(n)?t:xe({},t,{pathname:t.pathname.substr(n.length)})}function ei(e){return"string"==typeof e?e:mo(e)}function ti(e){return function(){uo(!1)}}function ni(){}f.a.Component;var ri=function(e){function t(){return e.apply(this,arguments)||this}return to(t,e),t.prototype.render=function(){var e=this;return f.a.createElement(zo.Consumer,null,(function(t){t||uo(!1);var n,r,o=e.props.location||t.location;return f.a.Children.forEach(e.props.children,(function(e){if(null==r&&f.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?Yo(o.pathname,xe({},e.props,{path:i})):t.match}})),r?f.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(f.a.Component);function oi(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Te(t,["wrappedComponentRef"]);return f.a.createElement(zo.Consumer,null,(function(t){return t||uo(!1),f.a.createElement(e,xe({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,Pe()(n,e)}f.a.useContext;var ii=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=_o(t.props),t}return to(t,e),t.prototype.render=function(){return f.a.createElement(Uo,{history:this.history,children:this.props.children})},t}(f.a.Component);f.a.Component;var ai=function(e,t){return"function"==typeof e?e(t):e},ci=function(e,t){return"string"==typeof e?vo(e,null,null,t):e},si=function(e){return e},ui=f.a.forwardRef;void 0===ui&&(ui=si);var li=ui((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=Te(e,["innerRef","navigate","onClick"]),a=i.target,c=xe({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||a&&"_self"!==a||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=si!==ui&&t||n,f.a.createElement("a",c)}));var fi=ui((function(e,t){var n=e.component,r=void 0===n?li:n,o=e.replace,i=e.to,a=e.innerRef,c=Te(e,["component","replace","to","innerRef"]);return f.a.createElement(zo.Consumer,null,(function(e){e||uo(!1);var n=e.history,s=ci(ai(i,e.location),e.location),u=s?n.createHref(s):"",l=xe({},c,{href:u,navigate:function(){var t=ai(i,e.location);(o?n.replace:n.push)(t)}});return si!==ui?l.ref=t||a:l.innerRef=a,f.a.createElement(r,l)}))})),pi=function(e){return e},di=f.a.forwardRef;void 0===di&&(di=pi);di((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,a=e.activeStyle,c=e.className,s=e.exact,u=e.isActive,l=e.location,p=e.strict,d=e.style,h=e.to,m=e.innerRef,v=Te(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return f.a.createElement(zo.Consumer,null,(function(e){e||uo(!1);var n=l||e.location,o=ci(ai(h,n),n),y=o.pathname,g=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),b=g?Yo(n.pathname,{path:g,exact:s,strict:p}):null,w=!!(u?u(b,n):b),E=w?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,i):c,S=w?xe({},d,{},a):d,_=xe({"aria-current":w&&r||null,className:E,style:S,to:o},v);return pi!==di?_.ref=t||m:_.innerRef=m,f.a.createElement(fi,_)}))}));function hi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function mi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function vi(e,t,n){return t&&mi(e.prototype,t),n&&mi(e,n),e}function yi(e){return(yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gi(e){return(gi="function"==typeof Symbol&&"symbol"===yi(Symbol.iterator)?function(e){return yi(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":yi(e)})(e)}function bi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function wi(e,t){return!t||"object"!==gi(t)&&"function"!=typeof t?bi(e):t}function Ei(e){return(Ei=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Si(e,t){return(Si=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Si(e,t)}function Ci(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ki=n(13),xi=n.n(ki);function Ti(e,t,n,r,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function Oi(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ti(i,r,o,a,c,"next",e)}function c(e){Ti(i,r,o,a,c,"throw",e)}a(void 0)}))}}var Pi=null,Ri=new Map;function ji(e){if("string"==typeof e.data){var t=JSON.parse(e.data),n=t.type,r=t.payload,o=Ri.get(n);if(!o)return;for(var i=0;i<o.length;i++){var a=o[i];try{a(r)}catch(e){console.error("websocket message handler error: ",e)}}}else console.log("received not string ws msg")}function Di(){return new Promise((function(e,t){var n,r,o=(n=window.location,r="","https:"===n.protocol?r+="wss://":r+="ws://",r+=n.host,r+="/ws");if(Pi&&1===Pi.readyState)return e();(Pi=new window.WebSocket(o)).onopen=function(){e()},Pi.onerror=function(e){console.log("connect web socket error: ",e),t(e)},Pi.onclose=function(){console.log("websocket closed")},Pi.onmessage=ji}))}function Ni(e){return Ii.apply(this,arguments)}function Ii(){return(Ii=Oi(xi.a.mark((function e(t){return xi.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Pi&&1===Pi.readyState){e.next=3;break}return e.next=3,Di();case 3:Pi.send(t);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Mi(){return(Mi=Oi(xi.a.mark((function e(t){return xi.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ni(JSON.stringify(t));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Li={sendJSON:function(e){return Mi.apply(this,arguments)},registerMessageHandler:function(e,t){var n=Ri.get(e)||[];n.push(t),Ri.set(e,n)},removeMessageHandler:function(e,t){var n=(Ri.get(e)||[]).filter((function(e){return e!==t}));0===n.length?Ri.delete(e):Ri.set(e,n)}},Ai=n(7),Fi=n.n(Ai),zi=n(11),Ui=n.n(zi);function Bi(e){var t=e.location.pathname,n=Yo(t,"/recv/:recvCode?");return f.a.createElement("div",{className:Ui.a.base},f.a.createElement("a",{href:"/"},f.a.createElement("img",{src:"/images/logo.png",alt:"logo",className:Ui.a.logo})),f.a.createElement("div",{className:Ui.a.slogan},"简单安全高效的P2P文件传输服务"),f.a.createElement("div",{className:Ui.a.menus},f.a.createElement(fi,{to:"/send"},f.a.createElement("span",{className:Fi()(Ui.a.menu,"/send"===t&&Ui.a.active)},"发送文件")),f.a.createElement(fi,{to:"/recv"},f.a.createElement("span",{className:Fi()(Ui.a.menu,n&&Ui.a.active)},"接收文件")),f.a.createElement(fi,{to:"/contact"},f.a.createElement("span",{className:Fi()(Ui.a.menu,"/contact"===t&&Ui.a.active)},"联系我们"))))}Bi.defaultProps={};var Hi=oi(Bi),Wi=n(40),qi=n.n(Wi),Gi=n(16),Vi=n.n(Gi),$i=n(32),Ki=n.n($i),Ji=n(58),Yi=n.n(Ji),Xi=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function Qi(e,t){var n=function(e){var t=e.name;if(t&&-1!==t.lastIndexOf(".")&&!e.type){var n=t.split(".").pop().toLowerCase(),r=Xi.get(n);r&&Object.defineProperty(e,"type",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if("string"!=typeof n.path){var r=e.webkitRelativePath;Object.defineProperty(n,"path",{value:"string"==typeof t?t:"string"==typeof r&&r.length>0?r:e.name,writable:!1,configurable:!1,enumerable:!0})}return n}var Zi=[".DS_Store","Thumbs.db"];function ea(e){return Dt.b(this,void 0,void 0,(function(){return Dt.d(this,(function(t){return[2,(n=e,n.dataTransfer&&e.dataTransfer?na(e.dataTransfer,e.type):ta(e))];var n}))}))}function ta(e){return(null!==e.target&&e.target.files?oa(e.target.files):[]).map((function(e){return Qi(e)}))}function na(e,t){return Dt.b(this,void 0,void 0,(function(){var n;return Dt.d(this,(function(r){switch(r.label){case 0:return e.items?(n=oa(e.items).filter((function(e){return"file"===e.kind})),"drop"!==t?[2,n]:[4,Promise.all(n.map(ia))]):[3,2];case 1:return[2,ra(aa(r.sent()))];case 2:return[2,ra(oa(e.files).map((function(e){return Qi(e)})))]}}))}))}function ra(e){return e.filter((function(e){return-1===Zi.indexOf(e.name)}))}function oa(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r)}return t}function ia(e){if("function"!=typeof e.webkitGetAsEntry)return ca(e);var t=e.webkitGetAsEntry();return t&&t.isDirectory?ua(t):ca(e)}function aa(e){return e.reduce((function(e,t){return Dt.f(e,Array.isArray(t)?aa(t):[t])}),[])}function ca(e){var t=e.getAsFile();if(!t)return Promise.reject(e+" is not a File");var n=Qi(t);return Promise.resolve(n)}function sa(e){return Dt.b(this,void 0,void 0,(function(){return Dt.d(this,(function(t){return[2,e.isDirectory?ua(e):la(e)]}))}))}function ua(e){var t=e.createReader();return new Promise((function(e,n){var r=[];!function o(){var i=this;t.readEntries((function(t){return Dt.b(i,void 0,void 0,(function(){var i,a,c;return Dt.d(this,(function(s){switch(s.label){case 0:if(t.length)return[3,5];s.label=1;case 1:return s.trys.push([1,3,,4]),[4,Promise.all(r)];case 2:return i=s.sent(),e(i),[3,4];case 3:return a=s.sent(),n(a),[3,4];case 4:return[3,6];case 5:c=Promise.all(t.map(sa)),r.push(c),o(),s.label=6;case 6:return[2]}}))}))}),(function(e){n(e)}))}()}))}function la(e){return Dt.b(this,void 0,void 0,(function(){return Dt.d(this,(function(t){return[2,new Promise((function(t,n){e.file((function(n){var r=Qi(n,e.fullPath);t(r)}),(function(e){n(e)}))}))]}))}))}var fa=n(59),pa=n.n(fa);function da(e,t){return"application/x-moz-file"===e.type||pa()(e,t)}function ha(e,t,n){if(ma(e.size)){if(ma(t)&&ma(n))return e.size>=t&&e.size<=n;if(ma(t))return e.size>=t;if(ma(n))return e.size<=n}return!0}function ma(e){return null!=e}function va(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function ya(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,(function(e){return"Files"===e||"application/x-moz-file"===e})):!!e.target&&!!e.target.files}function ga(e){e.preventDefault()}function ba(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return t.some((function(t){return!va(e)&&t&&t.apply(void 0,[e].concat(r)),va(e)}))}}function wa(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Ea(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Sa(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sa(n,!0).forEach((function(t){Ca(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sa(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ca(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ka(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var xa=Object(l.forwardRef)((function(e,t){var n=e.children,r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.accept,n=e.disabled,r=void 0!==n&&n,o=e.getFilesFromEvent,i=void 0===o?ea:o,a=e.maxSize,c=void 0===a?1/0:a,s=e.minSize,u=void 0===s?0:s,f=e.multiple,p=void 0===f||f,d=e.onDragEnter,h=e.onDragLeave,m=e.onDragOver,v=e.onDrop,y=e.onDropAccepted,g=e.onDropRejected,b=e.onFileDialogCancel,w=e.preventDropOnDocument,E=void 0===w||w,S=e.noClick,_=void 0!==S&&S,C=e.noKeyboard,k=void 0!==C&&C,x=e.noDrag,T=void 0!==x&&x,O=e.noDragEventsBubbling,P=void 0!==O&&O,R=Object(l.useRef)(null),j=Object(l.useRef)(null),D=Ea(Object(l.useReducer)(Pa,Oa),2),N=D[0],I=D[1],M=N.isFocused,L=N.isFileDialogActive,A=N.draggedFiles,F=Object(l.useCallback)((function(){j.current&&(I({type:"openDialog"}),j.current.value=null,j.current.click())}),[I]),z=function(){L&&setTimeout((function(){j.current&&(j.current.files.length||(I({type:"closeDialog"}),"function"==typeof b&&b()))}),300)};Object(l.useEffect)((function(){return window.addEventListener("focus",z,!1),function(){window.removeEventListener("focus",z,!1)}}),[j,L,b]);var U=Object(l.useCallback)((function(e){R.current&&R.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),F()))}),[R,j]),B=Object(l.useCallback)((function(){I({type:"focus"})}),[]),H=Object(l.useCallback)((function(){I({type:"blur"})}),[]),W=Object(l.useCallback)((function(){_||(!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.navigator.userAgent;return function(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}(e)||function(e){return-1!==e.indexOf("Edge/")}(e)}()?F():setTimeout(F,0))}),[j,_]),q=Object(l.useRef)([]),G=function(e){R.current&&R.current.contains(e.target)||(e.preventDefault(),q.current=[])};Object(l.useEffect)((function(){return E&&(document.addEventListener("dragover",ga,!1),document.addEventListener("drop",G,!1)),function(){E&&(document.removeEventListener("dragover",ga),document.removeEventListener("drop",G))}}),[R,E]);var V=Object(l.useCallback)((function(e){e.preventDefault(),e.persist(),Z(e),-1===q.current.indexOf(e.target)&&(q.current=[].concat(wa(q.current),[e.target])),ya(e)&&Promise.resolve(i(e)).then((function(t){va(e)&&!P||(I({draggedFiles:t,isDragActive:!0,type:"setDraggedFiles"}),d&&d(e))}))}),[i,d,P]),$=Object(l.useCallback)((function(e){if(e.preventDefault(),e.persist(),Z(e),e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return ya(e)&&m&&m(e),!1}),[m,P]),K=Object(l.useCallback)((function(e){e.preventDefault(),e.persist(),Z(e);var t=q.current.filter((function(t){return t!==e.target&&R.current&&R.current.contains(t)}));q.current=t,t.length>0||(I({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),ya(e)&&h&&h(e))}),[R,h,P]),J=Object(l.useCallback)((function(e){e.preventDefault(),e.persist(),Z(e),q.current=[],I({type:"reset"}),ya(e)&&Promise.resolve(i(e)).then((function(n){if(!va(e)||P){var r=[],o=[];n.forEach((function(e){da(e,t)&&ha(e,u,c)?r.push(e):o.push(e)})),!p&&r.length>1&&o.push.apply(o,wa(r.splice(0))),I({acceptedFiles:r,rejectedFiles:o,type:"setFiles"}),v&&v(r,o,e),o.length>0&&g&&g(o,e),r.length>0&&y&&y(r,e)}}))}),[p,t,u,c,i,v,y,g,P]),Y=function(e){return r?null:e},X=function(e){return k?null:Y(e)},Q=function(e){return T?null:Y(e)},Z=function(e){P&&e.stopPropagation()},ee=Object(l.useMemo)((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,o=e.onKeyDown,i=e.onFocus,a=e.onBlur,c=e.onClick,s=e.onDragEnter,u=e.onDragOver,l=e.onDragLeave,f=e.onDrop,p=ka(e,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return _a(Ca({onKeyDown:X(ba(o,U)),onFocus:X(ba(i,B)),onBlur:X(ba(a,H)),onClick:Y(ba(c,W)),onDragEnter:Q(ba(s,V)),onDragOver:Q(ba(u,$)),onDragLeave:Q(ba(l,K)),onDrop:Q(ba(f,J))},n,R),r||k?{}:{tabIndex:0},{},p)}}),[R,U,B,H,W,V,$,K,J,k,T,r]),te=Object(l.useCallback)((function(e){e.stopPropagation()}),[]),ne=Object(l.useMemo)((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,r=void 0===n?"ref":n,o=e.onChange,i=e.onClick,a=ka(e,["refKey","onChange","onClick"]),c=Ca({accept:t,multiple:p,type:"file",style:{display:"none"},onChange:Y(ba(o,J)),onClick:Y(ba(i,te)),autoComplete:"off",tabIndex:-1},r,j);return _a({},c,{},a)}}),[j,t,p,J,r]),re=A.length,oe=p||re<=1,ie=re>0&&function(e,t,n,r){return e.every((function(e){return da(e,t)&&ha(e,n,r)}))}(A,t,u,c);return _a({},N,{isDragAccept:ie,isDragReject:re>0&&(!ie||!oe),isFocused:M&&!r,getRootProps:ee,getInputProps:ne,rootRef:R,inputRef:j,open:Y(F)})}(ka(e,["children"])),o=r.open,i=ka(r,["open"]);return Object(l.useImperativeHandle)(t,(function(){return{open:o}}),[o]),f.a.createElement(l.Fragment,null,n(_a({},i,{open:o})))}));xa.displayName="Dropzone",xa.propTypes={children:ye.a.func,accept:ye.a.oneOfType([ye.a.string,ye.a.arrayOf(ye.a.string)]),multiple:ye.a.bool,preventDropOnDocument:ye.a.bool,noClick:ye.a.bool,noKeyboard:ye.a.bool,noDrag:ye.a.bool,noDragEventsBubbling:ye.a.bool,minSize:ye.a.number,maxSize:ye.a.number,disabled:ye.a.bool,getFilesFromEvent:ye.a.func,onFileDialogCancel:ye.a.func,onDragEnter:ye.a.func,onDragLeave:ye.a.func,onDragOver:ye.a.func,onDrop:ye.a.func,onDropAccepted:ye.a.func,onDropRejected:ye.a.func};var Ta=xa,Oa={isFocused:!1,isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],rejectedFiles:[]};function Pa(e,t){switch(t.type){case"focus":return _a({},e,{isFocused:!0});case"blur":return _a({},e,{isFocused:!1});case"openDialog":return _a({},e,{isFileDialogActive:!0});case"closeDialog":return _a({},e,{isFileDialogActive:!1});case"setDraggedFiles":var n=t.isDragActive;return _a({},e,{draggedFiles:t.draggedFiles,isDragActive:n});case"setFiles":return _a({},e,{acceptedFiles:t.acceptedFiles,rejectedFiles:t.rejectedFiles});case"reset":return _a({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[]});default:return e}}var Ra=function(e){function t(e){return hi(this,t),wi(this,Ei(t).call(this,e))}return _i(t,e),vi(t,[{key:"render",value:function(){var e=this.props,t=e.className,n=e.name,r=e.tooltip,o=e.onClick,i=f.a.createElement("i",{className:Fi()("iconfont","icon-".concat(n),t),onClick:o});return r?f.a.createElement("span",{className:Fi()("tooltip--top"),"aria-label":r},i):i}}]),t}(l.Component);Ra.defaultProps={className:null,name:null,onClick:null};var ja=Ra,Da=n(60),Na=n.n(Da),Ia=n(61),Ma=n.n(Ia),La=Na.a.bind(Ma.a),Aa=function(e){function t(){return hi(this,t),wi(this,Ei(t).apply(this,arguments))}return _i(t,e),vi(t,[{key:"render",value:function(){var e=this.props,t=e.type,n=e.style,r=e.disabled,o=e.children,i=e.href,a=e.onClick,c=Fi()(La("btn-".concat(t),{"btn-disabled":r}),this.props.className);return i?f.a.createElement(fi,{to:i,style:n,className:c},o):f.a.createElement("button",{type:"button",style:n,className:c,onClick:a,disabled:r},o)}}]),t}(l.Component);Aa.defaultProps={disabled:!1,style:null,className:null,onClick:null,children:null,href:null};var Fa=Aa,za=n(18),Ua=n.n(za),Ba=function(e){function t(e){return hi(this,t),wi(this,Ei(t).call(this,e))}return _i(t,e),vi(t,[{key:"render",value:function(){return f.a.createElement("div",{className:Ua.a.steps},this.props.children)}}]),t}(l.Component),Ha=function(e){function t(e){return hi(this,t),wi(this,Ei(t).call(this,e))}return _i(t,e),vi(t,[{key:"render",value:function(){var e=this.props,t=e.title,n=e.index,r=e.active;return f.a.createElement("span",{className:Fi()(Ua.a.step,r&&Ua.a.active)},f.a.createElement("span",{className:Fi()(Ua.a.indexWrapper,r&&Ua.a.active)},f.a.createElement("span",{className:Ua.a.index},n)),f.a.createElement("span",{className:Ua.a.title},t))}}]),t}(l.Component);Ba.Step=Ha;var Wa=Ba;function qa(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Ga(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Va=f.a.createContext(null);function $a(e,t){var n=Object.create(null);return e&&l.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(l.isValidElement)(e)?t(e):e}(e)})),n}function Ka(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Ja(e,t,n){var r=$a(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var c={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];c[o[s][r]]=n(u)}c[s]=n(s)}for(r=0;r<i.length;r++)c[i[r]]=n(i[r]);return c}(t,r);return Object.keys(o).forEach((function(i){var a=o[i];if(Object(l.isValidElement)(a)){var c=i in t,s=i in r,u=t[i],f=Object(l.isValidElement)(u)&&!u.props.in;!s||c&&!f?s||!c||f?s&&c&&Object(l.isValidElement)(u)&&(o[i]=Object(l.cloneElement)(a,{onExited:n.bind(null,a),in:u.props.in,exit:Ka(a,"exit",e),enter:Ka(a,"enter",e)})):o[i]=Object(l.cloneElement)(a,{in:!1}):o[i]=Object(l.cloneElement)(a,{onExited:n.bind(null,a),in:!0,exit:Ka(a,"exit",e),enter:Ka(a,"enter",e)})}})),o}var Ya=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Xa=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Ga(Ga(r)));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}to(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,r=i,$a(n.children,(function(e){return Object(l.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:Ka(e,"appear",n),enter:Ka(e,"enter",n),exit:Ka(e,"exit",n)})}))):Ja(e,o,i),firstRender:!1}},n.handleExited=function(e,t){var n=$a(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=xe({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Te(e,["component","childFactory"]),o=this.state.contextValue,i=Ya(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?f.a.createElement(Va.Provider,{value:o},i):f.a.createElement(Va.Provider,{value:o},f.a.createElement(t,r,i))},t}(f.a.Component);Xa.propTypes={},Xa.defaultProps={component:"div",childFactory:function(e){return e}};var Qa=Xa;function Za(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}var ec=!1,tc="unmounted",nc="exited",rc="entering",oc="entered",ic=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=nc,r.appearStatus=rc):o=oc:o=t.unmountOnExit||t.mountOnEnter?tc:nc,r.state={status:o},r.nextCallback=null,r}to(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===tc?{status:nc}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==rc&&n!==oc&&(t=rc):n!==rc&&n!==oc||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=d.a.findDOMNode(this);t===rc?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===nc&&this.setState({status:tc})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:t,i=this.getTimeouts(),a=o?i.appear:i.enter;!t&&!r||ec?this.safeSetState({status:oc},(function(){n.props.onEntered(e)})):(this.props.onEnter(e,o),this.safeSetState({status:rc},(function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a,(function(){n.safeSetState({status:oc},(function(){n.props.onEntered(e,o)}))}))})))},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n&&!ec?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,(function(){t.safeSetState({status:nc},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:nc},(function(){t.props.onExited(e)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===tc)return null;var t=this.props,n=t.children,r=Te(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return f.a.createElement(Va.Provider,{value:null},n(e,r));var o=f.a.Children.only(n);return(f.a.createElement(Va.Provider,{value:null},f.a.cloneElement(o,r)))},t}(f.a.Component);function ac(){}ic.contextType=Va,ic.propTypes={},ic.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:ac,onEntering:ac,onEntered:ac,onExit:ac,onExiting:ac,onExited:ac},ic.UNMOUNTED=0,ic.EXITED=1,ic.ENTERING=2,ic.ENTERED=3,ic.EXITING=4;var cc=ic,sc=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.remove(r):"string"==typeof n.className?n.className=Za(n.className,r):n.setAttribute("class",Za(n.className&&n.className.baseVal||"",r)));var n,r}))},uc=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).appliedClasses={appear:{},enter:{},exit:{}},t.onEnter=function(e,n){t.removeClasses(e,"exit"),t.addClass(e,n?"appear":"enter","base"),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var r=n?"appear":"enter";t.addClass(e,r,"active"),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var r=n?"appear":"enter";t.removeClasses(e,r),t.addClass(e,r,"done"),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){t.removeClasses(e,"appear"),t.removeClasses(e,"enter"),t.addClass(e,"exit","base"),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){t.addClass(e,"exit","active"),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){t.removeClasses(e,"exit"),t.addClass(e,"exit","done"),t.props.onExited&&t.props.onExited(e)},t.getClassNames=function(e){var n=t.props.classNames,r="string"==typeof n,o=r?""+(r&&n?n+"-":"")+e:n[e];return{baseClassName:o,activeClassName:r?o+"-active":n[e+"Active"],doneClassName:r?o+"-done":n[e+"Done"]}},t}to(t,e);var n=t.prototype;return n.addClass=function(e,t,n){var r=this.getClassNames(t)[n+"ClassName"];"appear"===t&&"done"===n&&(r+=" "+this.getClassNames("enter").doneClassName),"active"===n&&e&&e.scrollTop,this.appliedClasses[t][n]=r,function(e,t){e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.add(r):function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")}(n,r)||("string"==typeof n.className?n.className=n.className+" "+r:n.setAttribute("class",(n.className&&n.className.baseVal||"")+" "+r)));var n,r}))}(e,r)},n.removeClasses=function(e,t){var n=this.appliedClasses[t],r=n.base,o=n.active,i=n.done;this.appliedClasses[t]={},r&&sc(e,r),o&&sc(e,o),i&&sc(e,i)},n.render=function(){var e=this.props,t=(e.classNames,Te(e,["classNames"]));return f.a.createElement(cc,xe({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(f.a.Component);uc.defaultProps={classNames:""},uc.propTypes={};var lc=uc,fc=n(19),pc=n.n(fc),dc=1,hc=2,mc=3,vc=function(e){function t(e){var n;return hi(this,t),(n=wi(this,Ei(t).call(this,e))).state={toasts:[]},n}return _i(t,e),vi(t,[{key:"add",value:function(e,t){var n=this,r=Ki()(),o={id:r,type:e,title:t};setTimeout((function(){n.setState((function(e){return{toasts:e.toasts.filter((function(e){return e.id!==r}))}}))}),2e3),this.setState((function(e){return{toasts:[].concat(qa(e.toasts),[o])}}))}},{key:"render",value:function(){var e,t,n=this.state.toasts,r=void 0===n?[]:n,o=(Ci(e={},dc,"check"),Ci(e,hc,"close"),Ci(e,mc,"info"),e),i=(Ci(t={},dc,pc.a.success),Ci(t,hc,pc.a.error),Ci(t,mc,pc.a.info),t);return f.a.createElement("div",{className:pc.a.container},f.a.createElement(Qa,{component:null},r.map((function(e){var t=e.type;return f.a.createElement(lc,{key:e.id,classNames:"toast-animation",timeout:220},f.a.createElement("div",{className:Fi()(pc.a.toast,i[t])},f.a.createElement("div",{className:Fi()(pc.a.iconWrapper,i[t])},f.a.createElement(ja,{name:o[t]})),f.a.createElement("div",{key:e.id,className:Fi()(pc.a.content,i[t])},e.title)))}))))}}]),t}(l.Component),yc=document.createElement("div");document.body.appendChild(yc);var gc=f.a.createRef();d.a.render(f.a.createElement(vc,{ref:gc}),yc),vc.success=function(e){gc.current.add(dc,e)},vc.error=function(e){gc.current.add(hc,e)},vc.info=function(e){gc.current.add(mc,e)};var bc=vc,wc=n(10),Ec=n.n(wc),Sc=function(e){function t(){return hi(this,t),wi(this,Ei(t).apply(this,arguments))}return _i(t,e),vi(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.files,r=t.removable,o=t.curFileId;return f.a.createElement("div",{className:Ec.a.container},n.map((function(t){var n=t.uid,i=t.name,a=t.size,c=t.downloadUrl,s=t.pct,u=null;return u=c?f.a.createElement("a",{href:c,download:i,className:Ec.a.download},"下载"):s>=100?f.a.createElement("span",{className:Ec.a.completed},"完成"):n===o?f.a.createElement("span",null,s,"%"):f.a.createElement("span",{className:Ec.a.waiting},"等待"),f.a.createElement("div",{key:t.uid,className:Ec.a.fileRow},f.a.createElement("div",{className:Ec.a.left},f.a.createElement(ja,{name:"file",className:Ec.a.fileIcon}),f.a.createElement("div",{className:Ec.a.fileInfo},f.a.createElement("div",{className:Ec.a.fileName},i),f.a.createElement("div",{className:Ec.a.fileSize},Vi()(a)))),f.a.createElement("div",{className:Ec.a.right},!r&&u,r&&f.a.createElement(ja,{name:"close",onClick:e.props.onRemoveFile(t.uid),className:Ec.a.closeIcon})))})))}}]),t}(l.Component),_c=n(62),Cc=function(e){function t(){var e;return hi(this,t),(e=wi(this,Ei(t).call(this))).id=null,e.targetId=null,e.pc=null,e.dc=null,e.waitingCallback=null,e.onIceCandidate=e.onIceCandidate.bind(bi(e)),e.onDescription=e.onDescription.bind(bi(e)),e.connectPeer=e.connectPeer.bind(bi(e)),e.onConnectionStateChange=e.onConnectionStateChange.bind(bi(e)),e.onRTCMessage=e.onRTCMessage.bind(bi(e)),e.onChannelOpen=e.onChannelOpen.bind(bi(e)),e.onChannelClose=e.onChannelClose.bind(bi(e)),e.onBufferedAmountLow=e.onBufferedAmountLow.bind(bi(e)),e.onS2cSignal=e.onS2cSignal.bind(bi(e)),e.onS2cOpen=e.onS2cOpen.bind(bi(e)),Li.registerMessageHandler("s2c_open",e.onS2cOpen),Li.registerMessageHandler("s2c_signal",e.onS2cSignal),e}return _i(t,e),vi(t,[{key:"onS2cOpen",value:function(e){this.id=e.id,this.emit("peerId",this.id)}},{key:"onS2cSignal",value:function(e){var t=this;this.targetId||(this.targetId=e.srcId),this.pc||this.createRTCConnection(!1),e.sdp?this.pc.setRemoteDescription(new RTCSessionDescription(e.sdp)).then((function(n){if("offer"===e.sdp.type)return t.pc.createAnswer().then((function(e){return t.onDescription(e)}))})):e.ice&&this.pc.addIceCandidate(new RTCIceCandidate(e.ice))}},{key:"onDescription",value:function(e){var t=this;this.pc.setLocalDescription(e).then((function(){Li.sendJSON({type:"c2s_signal",payload:{targetId:t.targetId,sdp:e}})})).catch((function(e){return console.log("onDescription error: ",e)}))}},{key:"onConnectionStateChange",value:function(){"disconnected"===this.pc.connectionState?(this.dc&&this.dc.close(),this.waitingCallback&&(this.waitingCallback(new Error("peer disconnected, cannot send")),this.waitingCallback=null),this.emit("disconnected")):"connected"===this.pc.connectionState?this.emit("connected"):"connecting"===this.pc.connectionState?this.emit("connecting"):"failed"===this.pc.connectionState&&this.emit("connectFailed"),console.log("onConnectionStateChange: ",this.pc.connectionState)}},{key:"onRTCMessage",value:function(e){this.emit("data",e.data)}},{key:"createRTCConnection",value:function(e){var t=this,n=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"turn:0.peerjs.com:3478",username:"peerjs",credential:"peerjsp"}]});if(this.pc=n,n.onicecandidate=this.onIceCandidate,n.onconnectionstatechange=function(e){return t.onConnectionStateChange(e)},n.onnegotiationneeded=function(e){return t.onNegotiationNeeded(e)},e){var r=n.createDataChannel("file-transfer",{reliable:!0});this.setupDataChannel(r)}else this.pc.ondatachannel=function(e){var n=e.channel||e.target;t.setupDataChannel(n)}}},{key:"setupDataChannel",value:function(e){this.dc=e,e.bufferedAmountLowThreshold=14680064,e.binaryType="arraybuffer",e.onopen=this.onChannelOpen,e.onclose=this.onChannelClose,e.onerror=this.onChannelError,e.onbufferedamountlow=this.onBufferedAmountLow}},{key:"onNegotiationNeeded",value:function(e){var t=this;this.pc.createOffer().then((function(e){return t.onDescription(e)}))}},{key:"connectPeer",value:function(e){this.targetId=e,this.createRTCConnection(!0)}},{key:"destroy",value:function(){this.targetId=null,this.waitingCallback=null,this.pc&&(this.pc.close(),this.pc=null),this.dc&&(this.dc.close(),this.dc=null)}},{key:"onIceCandidate",value:function(e){e.candidate&&Li.sendJSON({type:"c2s_signal",payload:{targetId:this.targetId,ice:e.candidate}})}},{key:"onChannelOpen",value:function(e){this.emit("channelOpen"),this.dc.onmessage=this.onRTCMessage}},{key:"onChannelClose",value:function(e){console.log("## channel close: ",e)}},{key:"onChannelError",value:function(e){console.log("## channel error: ",e)}},{key:"onBufferedAmountLow",value:function(){this.waitingCallback&&(this.waitingCallback(),this.waitingCallback=null)}},{key:"send",value:function(e){var t=this;return new Promise((function(n,r){if("open"===t.dc.readyState)if(t.dc.bufferedAmount>=15728640)t.waitingCallback=function(e){e?r(e):n()};else try{t.dc.send(e),n()}catch(e){console.error("send error: ",e),r(e)}else{var o="send but channel is not open, now state is: "+t.dc.readyState;console.error(o),r(new Error(o))}}))}},{key:"sendJSON",value:function(e){return this.send(JSON.stringify(e))}}]),t}(n.n(_c).a),kc=function(){function e(t){hi(this,e),this.file=t,this.reader=new FileReader,this.offset=0}return vi(e,[{key:"getNextChunk",value:function(){var e=this;return new Promise((function(t,n){e.offset>=e.file.size&&t({done:!0}),e.reader.onload=function(n){e.offset+=16384,t({done:e.offset>=e.file.size,chunk:n.target.result,offset:e.offset})},e.reader.onabort=function(){n(new Error("FileReader abort"))},e.reader.onerror=function(e){n(new Error("FileReader onerror"+e))};var r=e.file.slice(e.offset,e.offset+16384);e.reader.readAsArrayBuffer(r)}))}}]),e}();function xc(e,t){return(e/t*100).toFixed(1)}function Tc(e){Li.sendJSON({type:"c2s_delete_recv_code",payload:{recvCode:e}})}function Oc(e){Li.sendJSON({type:"c2s_prepare_recv",payload:{recvCode:e}})}var Pc=n(3),Rc=n.n(Pc);function jc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Dc=Wa.Step,Nc=function(e){function t(e){var n;return hi(this,t),(n=wi(this,Ei(t).call(this,e))).peer=new Cc,n.inputRef=f.a.createRef(),n.onChangeFile=n.onChangeFile.bind(bi(n)),n.onRemoveFile=n.onRemoveFile.bind(bi(n)),n.onClickSelectDone=n.onClickSelectDone.bind(bi(n)),n.onClickBack=n.onClickBack.bind(bi(n)),n.onReset=n.onReset.bind(bi(n)),n.sendSizes={},n.bps=0,n.timer=setInterval((function(){var e=n.props.files.map((function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jc(Object(n),!0).forEach((function(t){Ci(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{pct:xc(n.sendSizes[e.uid]||0,e.size)})}));n.props.setState({files:e,bps:n.bps}),n.bps=0}),1e3),n}return _i(t,e),vi(t,[{key:"componentDidMount",value:function(){document.title="小鹿快传｜发送文件"}},{key:"componentWillUnmount",value:function(){clearInterval(this.timer)}},{key:"onClickSelectDone",value:function(){var e=this;this.props.setState({curStep:2}),function(e){Li.sendJSON({type:"c2s_prepare_send",payload:{files:e}})}(this.props.files.map((function(e){return{uid:e.uid,name:e.name,size:e.size,type:e.type}})));var t=this.peer;t.on("connecting",(function(){e.props.setState({peerState:"connecting"})})),t.on("connected",(function(){e.props.setState({peerState:"connected"})})),t.on("connectFailed",(function(){e.props.setState({peerState:"connectFailed"}),bc.error("连接失败")})),t.on("disconnected",Oi(xi.a.mark((function t(){return xi.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.props.setState({peerState:"disconnected"}),bc.error("连接断开，请重试");case 2:case"end":return t.stop()}}),t)})))),t.on("channelOpen",Oi(xi.a.mark((function n(){var r,o,i,a,c,s,u,l,f,p;return xi.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:e.props.setState({curStep:3,peerState:"transfer"}),r=e.props.files,o=0;case 3:if(!(o<r.length)){n.next=38;break}return i=r[o],a=i.uid,n.next=8,t.sendJSON({type:"fileStart",fileId:a});case 8:e.props.setState({curFileId:a}),c=new kc(i.realFile),s=!1,u=0;case 12:if(s){n.next=32;break}return n.next=15,c.getNextChunk();case 15:return l=n.sent,s=l.done,f=l.chunk,p=l.offset,n.prev=18,n.next=21,t.send(f);case 21:n.next=27;break;case 23:return n.prev=23,n.t0=n.catch(18),bc.error("传输错误："+n.t0),n.abrupt("break",32);case 27:e.sendSizes[a]=p,e.bps+=p-u,u=p,n.next=12;break;case 32:if(!s){n.next=35;break}return n.next=35,t.sendJSON({type:"fileEnd",fileId:a});case 35:o++,n.next=3;break;case 38:case"end":return n.stop()}}),n,null,[[18,23]])}))))}},{key:"onClickBack",value:function(){Tc(this.props.recvCode),this.props.setState({curStep:this.props.curStep-1})}},{key:"onReset",value:function(){this.peer.destroy(),this.props.setState({curStep:1,files:[],peerState:""})}},{key:"onChangeFile",value:function(e){var t=this,n=e.filter((function(e){return!t.props.files.find((function(t){var n=t.realFile;return n.name===e.name&&n.size===e.size&&n.lastModified===e.lastModified&&n.type===e.type}))})).map((function(e){return{realFile:e,uid:Ki()(),name:e.name,size:e.size,type:e.type}}));n.length!==e.length&&bc.info("发现疑似相同的文件，已自动过滤");var r=this.props.files.concat(n);this.props.setState({files:r}),event.target.value=null}},{key:"onRemoveFile",value:function(e){var t=this;return function(){var n=t.props.files.filter((function(t){return t.uid!==e}));t.props.setState({files:n})}}},{key:"renderStep1",value:function(){var e=this,t=this.props.files,n=t.reduce((function(e,t){return e+t.size}),0);return f.a.createElement(f.a.Fragment,null,f.a.createElement(Ta,{onDrop:this.onChangeFile,noClick:!0},(function(n){var r=n.getRootProps,o=n.getInputProps,i=n.isDragAccept,a=n.open;return f.a.createElement("div",Object.assign({className:Fi()(Rc.a.uploadArea,i&&Rc.a.dragActive)},r()),0===t.length&&f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:Rc.a.iconPlusWrapper},f.a.createElement(ja,{name:"plus",className:Rc.a.iconPlus})),f.a.createElement("div",{className:Rc.a.uploadTip},"将文件拖动到方框内或点击下方按钮"),f.a.createElement(Fa,{type:"primary",className:Rc.a.uploadBtn,onClick:function(){return a()}},"上传文件")),t.length>0&&f.a.createElement(Sc,{files:t,removable:!0,onRemoveFile:e.onRemoveFile}),f.a.createElement("input",o()))})),0===t.length&&f.a.createElement("div",{className:Rc.a.recvGuide},"已有收件码？点击",f.a.createElement(fi,{to:"/recv",className:Rc.a.link}," 接收文件")),t.length>0&&f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:Rc.a.uploadMore},f.a.createElement("div",{className:Rc.a.addMore},f.a.createElement("span",null,"添加文件")),f.a.createElement("div",{className:Rc.a.fileSummary},t.length," 个文件，共 ",Vi()(n))),f.a.createElement(Fa,{type:"primary",className:Rc.a.btnSelectFileDone,onClick:this.onClickSelectDone},"选好了")))}},{key:"renderStep2",value:function(){var e=this.props.recvCode,t="http://".concat(document.location.host,"/recv/").concat(e);return f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:Rc.a.selectSendMethod},"请选择发送方式："),f.a.createElement("div",{className:Rc.a.sendMethod1},"1. 通过链接发送（对方打开链接即可下载文件）"),f.a.createElement("div",{className:Rc.a.recvLinkContainer},f.a.createElement("span",{className:Rc.a.recvLink},t),f.a.createElement(qi.a,{text:t,onCopy:function(){return bc.success("复制成功")}},f.a.createElement("span",{className:Rc.a.btnCopy},"复制"))),f.a.createElement("div",null,"2. 通过6位数取件码（对方在小鹿快传网站输入即可下载文件）"),f.a.createElement("div",{className:Rc.a.recvCodeContainer},f.a.createElement("span",{className:Rc.a.recvCode},e),f.a.createElement(qi.a,{text:e,onCopy:function(){return bc.success("复制成功")}},f.a.createElement("span",{className:Rc.a.btnCopy},"复制"))),f.a.createElement("div",null,"3. 扫描下方二维码："),f.a.createElement("div",{className:Rc.a.qrcodeContainer},f.a.createElement(Yi.a,{value:t})),f.a.createElement("div",{className:Rc.a.connectTips},"温馨提示：",f.a.createElement("br",null),"以上取件码在10分钟内有效，请尽快发送给对方 ",f.a.createElement("br",null),"对方输入取件码并确认之后会自动开始发送"),f.a.createElement(Fa,{type:"primary",className:Rc.a.btnWaitConnect,disabled:!0},"等待连接..."))}},{key:"renderStep3",value:function(){var e,t=this.props,n=t.curFileId,r=t.files,o=t.peerState,i=r.reduce((function(e,t){return e+t.size}),0),a=!0;r.forEach((function(e){e.pct<100&&(a=!1)})),a?e="继续发送":"connecting"===o?e="正在连接...":"connected"===o?e="连接成功":"transfer"===o?e="正在发送...(".concat(Vi()(this.bps||0),"/s)"):"disconnected"!==o&&"connectFailed"!==o||(e="连接断开，等待重连...");var c=!0;return a&&(c=!1),f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:Rc.a.sendingBox},f.a.createElement(Sc,{files:r,curFileId:n})),f.a.createElement("div",{className:Rc.a.sendingSummary},f.a.createElement("div",null,r.length,"个文件，共",Vi()(i))),f.a.createElement(Fa,{type:"primary",className:Rc.a.btnSending,disabled:c,onClick:this.onReset},e))}},{key:"render",value:function(){var e=this.props,t=e.curStep,n=e.files;return f.a.createElement("div",{className:Rc.a.base},f.a.createElement("div",{className:Rc.a.titleRow},(1===t&&n.length>0||3===t)&&f.a.createElement("div",{className:Rc.a.back,onClick:this.onReset},"取消"),2===t&&f.a.createElement("div",{className:Rc.a.back,onClick:this.onClickBack},"返回"),f.a.createElement("div",{className:Rc.a.title},"发送文件")),f.a.createElement(Wa,null,f.a.createElement(Dc,{index:1,title:"选择文件",active:1===t}),f.a.createElement(Dc,{index:2,title:"收件码",active:2===t}),f.a.createElement(Dc,{index:3,title:"发送",active:3===t})),1===t&&this.renderStep1(),2===t&&this.renderStep2(),3===t&&this.renderStep3())}}]),t}(l.Component);function Ic(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Mc=n(24),Lc=n.n(Mc),Ac=function(e){function t(){return hi(this,t),wi(this,Ei(t).apply(this,arguments))}return _i(t,e),vi(t,[{key:"render",value:function(){var e=this.props,t=e.error,n=e.containerClassName,r=e.inputClassName,o=e.type,i=e.value,a=e.readOnly,c=e.placeholder,s=e.autoComplete,u=e.autoFocus,l=e.autoCapitalize,p=e.onChange,d=e.onEnter,h=void 0===d?function(){}:d,m=e.onBlur,v=e.onFocus,y=e.onClick,g=Ic(e,["error","containerClassName","inputClassName","type","value","readOnly","placeholder","autoComplete","autoFocus","autoCapitalize","onChange","onEnter","onBlur","onFocus","onClick"]);return f.a.createElement("div",{className:Fi()(Lc.a.container,n)},f.a.createElement("div",{className:Lc.a.wrapper},f.a.createElement("input",Object.assign({className:Fi()(Lc.a.input,r),type:o||"text",value:i||"",placeholder:c,autoComplete:s,readOnly:a,autoFocus:u,autoCapitalize:l,onChange:function(e){return p(e.target.value)},onKeyDown:function(e){return 13===e.keyCode&&h()},onBlur:m,onFocus:v,onClick:y},g))),!!t&&f.a.createElement("div",{className:Lc.a.error},f.a.createElement(ja,{name:"warning-circle",className:Lc.a.errorIcon}),t))}}]),t}(l.Component);Ac.defaultProps={label:null,error:null};var Fc=Ac,zc=n(12),Uc=n.n(zc);function Bc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Hc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bc(Object(n),!0).forEach((function(t){Ci(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Wc=oi(function(e){function t(e){var n;return hi(this,t),(n=wi(this,Ei(t).call(this,e))).onChangeRecvCode=n.onChangeRecvCode.bind(bi(n)),n.onPrepareRecv=n.onPrepareRecv.bind(bi(n)),n.onStartRecv=n.onStartRecv.bind(bi(n)),n.onReset=n.onReset.bind(bi(n)),n.onRecvData=n.onRecvData.bind(bi(n)),n.handleMsg=n.handleMsg.bind(bi(n)),n.peer=new Cc,n.recvBuffer=[],n.recvSizes={},n.bps=0,n.timer=setInterval((function(){var e=n.props.files.map((function(e){return Hc({},e,{pct:xc(n.recvSizes[e.uid]||0,e.size)})}));n.props.setState({files:e}),n.bps=0}),1e3),n}return _i(t,e),vi(t,[{key:"componentDidMount",value:function(){document.title="小鹿快传｜接收文件";var e=this.props.match.params.recvCode;e&&Oc(e)}},{key:"componentWillUnMount",value:function(){clearInterval(this.timer)}},{key:"onChangeRecvCode",value:function(e){this.props.setState({recvCode:e})}},{key:"onPrepareRecv",value:function(){Oc(this.props.recvCode)}},{key:"onReset",value:function(){this.peer.destroy(),this.props.setState({recvCode:"",peerState:"",started:!1,files:[],targetId:""})}},{key:"onStartRecv",value:function(){var e=this;this.props.setState({started:!0});var t=this.peer;t.on("connecting",(function(){e.props.setState({peerState:"connecting"})})),t.on("connected",(function(){bc.success("连接成功"),e.props.setState({peerState:"connected"})})),t.on("disconnected",(function(){bc.error("连接已断开"),e.props.setState({peerState:"disconnected"})})),t.on("connectFailed",(function(){bc.error("连接失败，请重试"),e.props.setState({peerState:"connectFailed"})})),t.on("channelOpen",(function(){e.props.setState({peerState:"transfer"}),Tc(e.props.recvCode||e.props.match.params.recvCode)})),t.on("data",this.onRecvData),t.connectPeer(this.props.targetId)}},{key:"onRecvData",value:function(e){var t=this.props.curFileId;if("string"==typeof e){var n=JSON.parse(e);this.handleMsg(n)}else{this.recvBuffer.push(e);var r=(this.recvSizes[t]||0)+e.byteLength;this.recvSizes[t]=r,this.bps+=e.byteLength}}},{key:"handleMsg",value:function(e){if("fileStart"===e.type)this.props.setState({curFileId:e.fileId});else if("fileEnd"===e.type){var t=e.fileId,n=new Blob(this.recvBuffer);this.recvBuffer=[];var r=window.URL.createObjectURL(n),o=this.props.files.map((function(e){return e.uid===t?Hc({},e,{downloadUrl:r}):e}));this.props.setState({files:o})}}},{key:"renderStep1",value:function(){var e=this.props.recvCode;return f.a.createElement(f.a.Fragment,null,f.a.createElement(Fc,{placeholder:"请输入6位收件码",inputClassName:Uc.a.input,value:e,onChange:this.onChangeRecvCode}),f.a.createElement(Fa,{type:"primary",className:Uc.a.recvBtn,onClick:this.onPrepareRecv},"接收文件"),f.a.createElement("div",{className:Uc.a.tip},f.a.createElement(ja,{name:"info"}),"如何获取收件码？"))}},{key:"renderStep2",value:function(){var e=this.props,t=e.peerState,n=e.started,r=e.curFileId,o=e.files,i=o.reduce((function(e,t){return e+t.size}),0),a=!0;o.forEach((function(e){e.downloadUrl||(a=!1)}));var c="开始下载";return a?c="继续接收":n?"disconnected"===t||"connectFailed"===t?c="重新下载":"connecting"===t?c="正在连接...":"connected"===t?c="连接成功":"transfer"===t&&(c="正在下载...(".concat(Vi()(this.bps),"/s)")):c="开始下载",f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:Uc.a.msg1},"对方发送给您以下文件："),f.a.createElement(Sc,{files:this.props.files,curFileId:r}),f.a.createElement("div",{className:Uc.a.msg2},f.a.createElement("div",null,o.length," 个文件，共 ",Vi()(i))),f.a.createElement(Fa,{type:"primary",className:Uc.a.recvBtn,disabled:n&&!a&&("connected"===t||"connecting"===t||"transfer"===t),onClick:a?this.onReset:this.onStartRecv},c))}},{key:"render",value:function(){var e=this.props.files;return f.a.createElement("div",{className:Uc.a.base},f.a.createElement("div",{className:Uc.a.titleRow},e.length>0&&f.a.createElement("div",{className:Uc.a.cancel,onClick:this.onReset},"取消"),f.a.createElement("div",{className:Uc.a.title},"接收文件")),0===e.length&&this.renderStep1(),e.length>0&&this.renderStep2())}}]),t}(l.Component)),qc=n(63),Gc=n.n(qc),Vc=n(22),$c=n.n(Vc),Kc=function(e){function t(e){var n;return hi(this,t),(n=wi(this,Ei(t).call(this,e))).state={contact:"",content:""},n.handleContactChange=n.handleContactChange.bind(bi(n)),n.handleContentChange=n.handleContentChange.bind(bi(n)),n.handleSubmit=n.handleSubmit.bind(bi(n)),n}return _i(t,e),vi(t,[{key:"componentDidMount",value:function(){document.title="小鹿快传｜联系我们"}},{key:"handleContactChange",value:function(e){this.setState({contact:e})}},{key:"handleContentChange",value:function(e){this.setState({content:e.target.value})}},{key:"handleSubmit",value:function(){var e=this,t=this.state,n=t.contact,r=t.content;n?r?Gc.a.post("/api/feedback",{contact:n,content:r}).then((function(t){bc.success("留言成功"),e.setState({contact:"",content:""})})):bc.error("请输入留言内容"):bc.error("请输入联系方式")}},{key:"render",value:function(){var e=this.state,t=e.contact,n=e.content;return f.a.createElement("div",{className:$c.a.base},f.a.createElement("div",{className:$c.a.title},"联系我们"),f.a.createElement(Fc,{placeholder:"请输入您的手机号或邮箱",inputClassName:$c.a.input,value:t,onChange:this.handleContactChange}),f.a.createElement("textarea",{placeholder:"请输入留言内容",rows:"6",className:$c.a.textarea,value:n,onChange:this.handleContentChange}),f.a.createElement(Fa,{type:"primary",className:$c.a.btn,onClick:this.handleSubmit},"留言"),f.a.createElement("div",{className:$c.a.tips},"请直接在上方留言，我们会尽快给您回复，",f.a.createElement("br",null),"您也可以发邮件到 ",f.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"mailto:support@deershare.com"},"support@deershare.com")))}}]),t}(l.Component),Jc=n(27),Yc=n.n(Jc);function Xc(e){var t=e.title,n=e.desc,r=e.icon;return f.a.createElement("div",{className:Yc.a.card},f.a.createElement("div",{className:Yc.a.title},r,f.a.createElement("span",{className:Yc.a.titleText},t)),f.a.createElement("div",{className:Yc.a.desc},n))}Xc.defaultProps={};var Qc=Xc,Zc=n(14),es=n.n(Zc);function ts(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ns(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ts(Object(n),!0).forEach((function(t){Ci(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ts(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var rs=function(e){function t(){var e;return hi(this,t),(e=wi(this,Ei(t).call(this))).state={send:{curStep:1,files:[],peerState:""},recv:{recvCode:"",peerState:"",started:!1,files:[],targetId:""}},e.setSendState=e.setSendState.bind(bi(e)),e.setRecvState=e.setRecvState.bind(bi(e)),e.onS2cPrepareSend=e.onS2cPrepareSend.bind(bi(e)),e.onS2cPrepareRecv=e.onS2cPrepareRecv.bind(bi(e)),e}return _i(t,e),vi(t,[{key:"onS2cPrepareSend",value:function(e){this.setSendState({recvCode:e.recvCode})}},{key:"onS2cPrepareRecv",value:function(e){this.setRecvState({targetId:e.clientId,files:e.files})}},{key:"componentDidMount",value:function(){Li.registerMessageHandler("s2c_prepare_send",this.onS2cPrepareSend),Li.registerMessageHandler("s2c_prepare_recv",this.onS2cPrepareRecv)}},{key:"setSendState",value:function(e){this.setState((function(t){return ns({},t,{send:ns({},t.send,{},e)})}))}},{key:"setRecvState",value:function(e){this.setState((function(t){return ns({},t,{recv:ns({},t.recv,{},e)})}))}},{key:"render",value:function(){return f.a.createElement("div",{className:es.a.container},f.a.createElement(Hi,null),f.a.createElement(Xo,{exact:!0,path:"/"},f.a.createElement(Vo,{to:"/send"})),f.a.createElement("div",{className:es.a.content},f.a.createElement(ri,null,f.a.createElement(Xo,{path:"/send"},f.a.createElement(Nc,Object.assign({},this.state.send,{setState:this.setSendState}))),f.a.createElement(Xo,{path:"/recv/:recvCode?"},f.a.createElement(Wc,Object.assign({},this.state.recv,{setState:this.setRecvState}))),f.a.createElement(Xo,{path:"/contact"},f.a.createElement(Kc,null))),f.a.createElement("div",{className:es.a.cardsArea},f.a.createElement("div",{className:es.a.cardRow},f.a.createElement(Qc,{title:"简单",icon:f.a.createElement(ja,{name:"simple",className:es.a.iconSimple}),desc:"无需登录只需要选择好想要发送的文件，然后将生成的下载链接发送给对方即可开始传送"}),f.a.createElement(Qc,{title:"安全",icon:f.a.createElement(ja,{name:"secure",className:es.a.iconSecure}),desc:"小鹿快传使用P2P技术，文件数据不走服务器，直接发送给对方，且数据自带加密，免去隐私被泄漏的风险。"})),f.a.createElement("div",{className:es.a.cardRow},f.a.createElement(Qc,{title:"高效",icon:f.a.createElement(ja,{name:"speed",className:es.a.iconSpeed}),desc:"由于使用P2P技术，文件传输速度不会受到服务器性能的影响，完全取决于你和对方的网速。"}),f.a.createElement(Qc,{title:"专业",icon:f.a.createElement(ja,{name:"check-fill",className:es.a.iconCheck}),desc:"不限制文件类型，任何文件都可随心传输。所有文件都是原文件传输，传视频图片不损失画质。"})))))}}]),t}(f.a.Component);rs.defaultProps={};var os=rs,is=(n(103),n(104),function(e){function t(e){var n;return hi(this,t),(n=wi(this,Ei(t).call(this,e))).state={hasError:!1},n}return _i(t,e),vi(t,[{key:"componentDidMount",value:function(){this.props.history.listen((function(e){eo.pageview(e.pathname)}))}},{key:"componentDidCatch",value:function(e,t){Pn((function(n){Object.keys(t).forEach((function(e){n.setExtra(e,t[e])})),On(e)}))}},{key:"render",value:function(){return this.state.hasError?f.a.createElement(f.a.Fragment,null,f.a.createElement("h1",{style:{textAlign:"center"}},"抱歉页面出现错误，我们的工程师已经收到通知，会尽快处理。您可以：",f.a.createElement("a",{href:""},"点此刷新页面重试"))):f.a.createElement(ri,null,f.a.createElement(Xo,{path:"/"},f.a.createElement(os,null)))}}],[{key:"getDerivedStateFromError",value:function(){return{hasError:!0}}}]),t}(f.a.Component));var as=oi(Ct((function(e){return{user:e.user}}),{})(is));function cs(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var ss=cs();ss.withExtraArgument=cs;var us=ss,ls=n(33),fs="UPDATE_SEND_FILE_INFO",ps="UPDATE_RECV_FILE_INFO",ds={recvCode:""},hs=Object(ls.a)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ds,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case fs:e.recvCode=t.payload.recvCode}return e})),ms={targetId:"",files:[]},vs=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:qe.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:qe.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+qe.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},c=0;c<a.length;c++){var s=a[c],u=n[s],l=e[s],f=u(l,t);if(void 0===f){var p=$e(s,t);throw new Error(p)}o[s]=f,r=r||f!==l}return r?o:e}}({sendFile:hs,recvFile:Object(ls.a)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ms,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case ps:e.targetId=t.payload.clientId,e.files=t.payload.files}return e}))}),ys=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||Qe;var gs,bs,ws=(bs=[us],Ve(vs,gs,ys(Ze.apply(void 0,bs))));ws.dispatch,Li.registerMessageHandler("s2c_error",(function(e){bc.error(e.message)})),function(e){if(void 0===e&&(e={}),void 0===e.defaultIntegrations&&(e.defaultIntegrations=or),void 0===e.release){var t=Object(Lt.g)();t.SENTRY_RELEASE&&t.SENTRY_RELEASE.id&&(e.release=t.SENTRY_RELEASE.id)}!function(e,t){!0===t.debug&&Mt.a.enable(),Object(It.a)().bindClient(new e(t))}(xn,e)}({dsn:"https://be8db30a0db043f686f64c4fc91682c8@sentry.io/2034634",environment:"production"}),eo.initialize("UA-131382726-2"),eo.pageview(window.location.pathname+window.location.search),d.a.render(f.a.createElement(ke,{store:ws},f.a.createElement(ii,null,f.a.createElement(as,null))),document.getElementById("root"))},,,,function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(1),o=n(4),i=n(21),a=n(34),c=3,s=function(){function e(e,t,n){void 0===t&&(t=new a.a),void 0===n&&(n=c),this._version=n,this._stack=[],this._stack.push({client:e,scope:t})}return e.prototype._invokeClient=function(e){for(var t,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var i=this.getStackTop();i&&i.client&&i.client[e]&&(t=i.client)[e].apply(t,r.f(n,[i.scope]))},e.prototype.isOlderThan=function(e){return this._version<e},e.prototype.bindClient=function(e){this.getStackTop().client=e},e.prototype.pushScope=function(){var e=this.getStack(),t=e.length>0?e[e.length-1].scope:void 0,n=a.a.clone(t);return this.getStack().push({client:this.getClient(),scope:n}),n},e.prototype.popScope=function(){return void 0!==this.getStack().pop()},e.prototype.withScope=function(e){var t=this.pushScope();try{e(t)}finally{this.popScope()}},e.prototype.getClient=function(){return this.getStackTop().client},e.prototype.getScope=function(){return this.getStackTop().scope},e.prototype.getStack=function(){return this._stack},e.prototype.getStackTop=function(){return this._stack[this._stack.length-1]},e.prototype.captureException=function(e,t){var n=this._lastEventId=Object(o.n)(),i=t;if(!t){var a=void 0;try{throw new Error("Sentry syntheticException")}catch(e){a=e}i={originalException:e,syntheticException:a}}return this._invokeClient("captureException",e,r.a({},i,{event_id:n})),n},e.prototype.captureMessage=function(e,t,n){var i=this._lastEventId=Object(o.n)(),a=n;if(!n){var c=void 0;try{throw new Error(e)}catch(e){c=e}a={originalException:e,syntheticException:c}}return this._invokeClient("captureMessage",e,t,r.a({},a,{event_id:i})),i},e.prototype.captureEvent=function(e,t){var n=this._lastEventId=Object(o.n)();return this._invokeClient("captureEvent",e,r.a({},t,{event_id:n})),n},e.prototype.lastEventId=function(){return this._lastEventId},e.prototype.addBreadcrumb=function(e,t){var n=this.getStackTop();if(n.scope&&n.client){var i=n.client.getOptions&&n.client.getOptions()||{},a=i.beforeBreadcrumb,c=void 0===a?null:a,s=i.maxBreadcrumbs,u=void 0===s?100:s;if(!(u<=0)){var l=Object(o.m)(),f=r.a({timestamp:l},e),p=c?Object(o.c)((function(){return c(f,t)})):f;null!==p&&n.scope.addBreadcrumb(p,Math.min(u,100))}}},e.prototype.setUser=function(e){var t=this.getStackTop();t.scope&&t.scope.setUser(e)},e.prototype.setTags=function(e){var t=this.getStackTop();t.scope&&t.scope.setTags(e)},e.prototype.setExtras=function(e){var t=this.getStackTop();t.scope&&t.scope.setExtras(e)},e.prototype.setTag=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setTag(e,t)},e.prototype.setExtra=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setExtra(e,t)},e.prototype.setContext=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setContext(e,t)},e.prototype.configureScope=function(e){var t=this.getStackTop();t.scope&&t.client&&e(t.scope)},e.prototype.run=function(e){var t=l(this);try{e(this)}finally{l(t)}},e.prototype.getIntegration=function(e){var t=this.getClient();if(!t)return null;try{return t.getIntegration(e)}catch(t){return i.a.warn("Cannot retrieve integration "+e.id+" from the current Hub"),null}},e.prototype.startSpan=function(e,t){return void 0===t&&(t=!1),this._callExtensionMethod("startSpan",e,t)},e.prototype.traceHeaders=function(){return this._callExtensionMethod("traceHeaders")},e.prototype._callExtensionMethod=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=u(),o=r.__SENTRY__;if(o&&o.extensions&&"function"==typeof o.extensions[e])return o.extensions[e].apply(this,t);i.a.warn("Extension method "+e+" couldn't be found, doing nothing.")},e}();function u(){var e=Object(o.g)();return e.__SENTRY__=e.__SENTRY__||{extensions:{},hub:void 0},e}function l(e){var t=u(),n=d(t);return h(t,e),n}function f(){var t=u();return p(t)&&!d(t).isOlderThan(c)||h(t,new s),Object(o.j)()?function(t){try{var n=Object(o.d)(e,"domain").active;if(!n)return d(t);if(!p(n)||d(n).isOlderThan(c)){var r=d(t).getStackTop();h(n,new s(r.client,a.a.clone(r.scope)))}return d(n)}catch(e){return d(t)}}(t):d(t)}function p(e){return!!(e&&e.__SENTRY__&&e.__SENTRY__.hub)}function d(e){return e&&e.__SENTRY__&&e.__SENTRY__.hub?e.__SENTRY__.hub:(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=new s,e.__SENTRY__.hub)}function h(e,t){return!!e&&(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=t,!0)}}).call(this,n(42)(e))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VuZEZpbGVQYW5lbC5jbS5zdHlsIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9taXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRmlsZUJveC5jbS5zdHlsIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05hdkJhci5jbS5zdHlsIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JlY3ZGaWxlUGFuZWwuY20uc3R5bCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0hvbWVQYWdlLmNtLnN0eWwiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcHJldHR5LWJ5dGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL1N0ZXBzLmNtLnN0eWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL1RvYXN0LmNtLnN0eWwiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbG9nZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbnRhY3RQYW5lbC5jbS5zdHlsIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZHAvc2RwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9JbnB1dC5jbS5zdHlsIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TbG9nYW5DYXJkLmNtLnN0eWwiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N5bmNwcm9taXNlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2ltbWVyLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9odWIvZXNtL3Njb3BlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvcHktdG8tY2xpcGJvYXJkL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FyLmpzL2xpYi9tb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvRXJyb3JDb3JyZWN0TGV2ZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FyLmpzL2xpYi9Qb2x5bm9taWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvbWF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnRjcGVlcmNvbm5lY3Rpb24tc2hpbS9ydGNwZWVyY29ubmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2d1ZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXJjb2RlLnJlYWN0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXR0ci1hY2NlcHQvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9iaW5kLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9CdXR0b24uY20uc3R5bCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21lbW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29weS10by1jbGlwYm9hcmQvbGliL0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29weS10by1jbGlwYm9hcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvZ2dsZS1zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ieXRlc1RvVXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL1FSQ29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXIuanMvbGliLzhCaXRCeXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvUlNCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL0JpdEJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3Mvbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2Nocm9tZS9nZXR1c2VybWVkaWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9jaHJvbWUvZ2V0ZGlzcGxheW1lZGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2Nocm9tZV9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9nZXR1c2VybWVkaWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2dldGRpc3BsYXltZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2VkZ2UvZWRnZV9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9maWx0ZXJpY2VzZXJ2ZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZmlyZWZveC9nZXR1c2VybWVkaWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9maXJlZm94L2dldGRpc3BsYXltZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZmlyZWZveF9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvc2FmYXJpL3NhZmFyaV9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY29tbW9uX3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2ludGVncmF0aW9ucy9pbmJvdW5kZmlsdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9kc24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2ludGVncmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2Jhc2VjbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHlwZXMvZXNtL3N0YXR1cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFuc3BvcnRzL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHlwZXMvZXNtL3NldmVyaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2Jhc2ViYWNrZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9zdXBwb3J0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS90cmFjZWtpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9wYXJzZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2V2ZW50YnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vcHJvbWlzZWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS90cmFuc3BvcnRzL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhbnNwb3J0cy9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS90cmFuc3BvcnRzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9iYWNrZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS92ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L21pbmltYWwvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vaW50ZWdyYXRpb25zL3RyeWNhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy9icmVhZGNydW1icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9pbnRlZ3JhdGlvbnMvZ2xvYmFsaGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9pbnRlZ3JhdGlvbnMvdXNlcmFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL3Nkay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvY29uc29sZS93YXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS9jb21wb25lbnRzL091dGJvdW5kTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvdG9UaXRsZUNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWdhL2Rpc3QvZXNtL3V0aWxzL2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvbWlnaHRCZUVtYWlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS91dGlscy9sb2FkR0EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWdhL2Rpc3QvZXNtL3V0aWxzL2NvbnNvbGUvbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS91dGlscy90ZXN0TW9kZUFQSS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvcmVtb3ZlTGVhZGluZ1NsYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy93cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZpbGUtc2VsZWN0b3IvZGlzdC9lczUvZmlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlsZS1zZWxlY3Rvci9kaXN0L2VzNS9maWxlLXNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kcm9wem9uZS9kaXN0L2VzL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kcm9wem9uZS9kaXN0L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9JY29uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL1N0ZXBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9DU1NUcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vYWRkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9oYXNDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21tb24vVG9hc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRmlsZUJveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUGVlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRmlsZUNodW5rZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VuZEZpbGVQYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0lucHV0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JlY3ZGaWxlUGFuZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29udGFjdFBhbmVsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Nsb2dhbkNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0hvbWVQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9hY3Rpb25UeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvc2VuZEZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL3JlY3ZGaWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvY29uZmlndXJlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2NvbmZpZ3VyZVdTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3Nkay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9odWIvZXNtL2h1Yi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImV4dGVuZFN0YXRpY3MiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fZXh0ZW5kcyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwicHVzaCIsIl9fdmFsdWVzIiwiX19yZWFkIiwiYXIiLCJlcnJvciIsIl9fc3ByZWFkIiwiY29uY2F0IiwiZHluYW1pY1JlcXVpcmUiLCJtb2QiLCJyZXF1ZXN0IiwicmVxdWlyZSIsImlzTm9kZUVudiIsInRvU3RyaW5nIiwicHJvY2VzcyIsImZhbGxiYWNrR2xvYmFsT2JqZWN0IiwiZ2V0R2xvYmFsT2JqZWN0IiwiZ2xvYmFsIiwid2luZG93Iiwic2VsZiIsInV1aWQ0IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJhcnIiLCJVaW50MTZBcnJheSIsInBhZCIsIm51bSIsInJlcGxhY2UiLCJNYXRoIiwicmFuZG9tIiwicGFyc2VVcmwiLCJ1cmwiLCJtYXRjaCIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJob3N0IiwicGF0aCIsInByb3RvY29sIiwicmVsYXRpdmUiLCJnZXRFdmVudERlc2NyaXB0aW9uIiwiZXZlbnQiLCJtZXNzYWdlIiwiZXhjZXB0aW9uIiwidmFsdWVzIiwidHlwZSIsImV2ZW50X2lkIiwiY29uc29sZVNhbmRib3giLCJjYWxsYmFjayIsIm9yaWdpbmFsQ29uc29sZSIsImNvbnNvbGUiLCJ3cmFwcGVkTGV2ZWxzIiwiZm9yRWFjaCIsImxldmVsIiwiX19zZW50cnlfb3JpZ2luYWxfXyIsImtleXMiLCJhZGRFeGNlcHRpb25UeXBlVmFsdWUiLCJhZGRFeGNlcHRpb25NZWNoYW5pc20iLCJtZWNoYW5pc20iLCJfb08iLCJnZXRMb2NhdGlvbkhyZWYiLCJkb2N1bWVudCIsImxvY2F0aW9uIiwiaHJlZiIsIm9PIiwiaHRtbFRyZWVBc1N0cmluZyIsImVsZW0iLCJjdXJyZW50RWxlbSIsIm91dCIsImhlaWdodCIsImxlbiIsInNlcExlbmd0aCIsIm5leHRTdHIiLCJfaHRtbEVsZW1lbnRBc1N0cmluZyIsInBhcmVudE5vZGUiLCJyZXZlcnNlIiwiam9pbiIsImVsIiwiY2xhc3NOYW1lIiwiY2xhc3NlcyIsImF0dHIiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJpZCIsInNwbGl0IiwiYXR0cldoaXRlbGlzdCIsImdldEF0dHJpYnV0ZSIsInRpbWVzdGFtcFdpdGhNcyIsIkRhdGUiLCJnZXRUaW1lIiwiZGVmYXVsdFJldHJ5QWZ0ZXIiLCJwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIiLCJub3ciLCJoZWFkZXIiLCJoZWFkZXJEZWxheSIsInBhcnNlSW50IiwiaXNOYU4iLCJoZWFkZXJEYXRlIiwicGFyc2UiLCJkZWZhdWx0RnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25OYW1lIiwiZm4iLCJmaWxsIiwic291cmNlIiwicmVwbGFjZW1lbnQiLCJvcmlnaW5hbCIsIndyYXBwZWQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX09vIiwidXJsRW5jb2RlIiwibWFwIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0V2Fsa1NvdXJjZSIsImVyciIsInN0YWNrIiwiZXZlbnRfMSIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImpzb25TaXplIiwiZW5jb2RlVVJJIiwidXRmOExlbmd0aCIsIkpTT04iLCJzdHJpbmdpZnkiLCJub3JtYWxpemVUb1NpemUiLCJkZXB0aCIsIm1heFNpemUiLCJzZXJpYWxpemVkIiwibm9ybWFsaXplIiwibm9ybWFsaXplVmFsdWUiLCJfZXZlbnRzIiwid2FsayIsIm1lbW8iLCJJbmZpbml0eSIsIm5vcm1hbGl6ZWQiLCJzZXJpYWxpemVWYWx1ZSIsInRvSlNPTiIsImFjYyIsImlzQXJyYXkiLCJtZW1vaXplIiwiaW5uZXJLZXkiLCJ1bm1lbW9pemUiLCJpbnB1dCIsImV4dHJhY3RFeGNlcHRpb25LZXlzRm9yTWVzc2FnZSIsIm1heExlbmd0aCIsInNvcnQiLCJpbmNsdWRlZEtleXMiLCJzbGljZSIsImhhc093biIsImNsYXNzTmFtZXMiLCJhcmciLCJhcmdUeXBlIiwiaW5uZXIiLCJkZWZhdWx0IiwiaXNFcnJvciIsIndhdCIsImlzSW5zdGFuY2VPZiIsIkVycm9yIiwiaXNFcnJvckV2ZW50IiwiaXNET01FcnJvciIsImlzRE9NRXhjZXB0aW9uIiwiaXNTdHJpbmciLCJpc1ByaW1pdGl2ZSIsImlzUGxhaW5PYmplY3QiLCJpc0V2ZW50IiwiRXZlbnQiLCJpc0VsZW1lbnQiLCJFbGVtZW50IiwiaXNSZWdFeHAiLCJpc1RoZW5hYmxlIiwiQm9vbGVhbiIsImlzU3ludGhldGljRXZlbnQiLCJiYXNlIiwiX2UiLCJpc0J1ZmZlciIsInZhbCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsIm9iaiIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwibWVyZ2UiLCJhc3NpZ25WYWx1ZSIsImRlZXBNZXJnZSIsImV4dGVuZCIsImEiLCJ0cmltIiwic3RyIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwidW5kZWZpbmVkIiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJCWVRFX1VOSVRTIiwiQklUX1VOSVRTIiwidG9Mb2NhbGVTdHJpbmciLCJudW1iZXIiLCJsb2NhbGUiLCJvcHRpb25zIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJVTklUUyIsImJpdHMiLCJzaWduZWQiLCJpc05lZ2F0aXZlIiwicHJlZml4IiwiZXhwb25lbnQiLCJtaW4iLCJmbG9vciIsImxvZzEwIiwicG93IiwidG9QcmVjaXNpb24iLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInRydW5jYXRlIiwibWF4Iiwic3Vic3RyIiwic25pcExpbmUiLCJsaW5lIiwiY29sbm8iLCJuZXdMaW5lIiwibGwiLCJzdGFydCIsImVuZCIsInNhZmVKb2luIiwiZGVsaW1pdGVyIiwib3V0cHV0IiwiU3RyaW5nIiwiaXNNYXRjaGluZ1BhdHRlcm4iLCJwYXR0ZXJuIiwidGVzdCIsImluZGV4T2YiLCJQUkVGSVgiLCJMb2dnZXIiLCJfZW5hYmxlZCIsImRpc2FibGUiLCJlbmFibGUiLCJsb2ciLCJfaSIsIndhcm4iLCJfX1NFTlRSWV9fIiwibG9nZ2VyIiwiU0RQVXRpbHMiLCJsb2NhbENOYW1lIiwiZ2VuZXJhdGVJZGVudGlmaWVyIiwic3BsaXRMaW5lcyIsImJsb2IiLCJzcGxpdFNlY3Rpb25zIiwicGFydCIsImluZGV4IiwiZ2V0RGVzY3JpcHRpb24iLCJzZWN0aW9ucyIsImdldE1lZGlhU2VjdGlvbnMiLCJzaGlmdCIsIm1hdGNoUHJlZml4IiwiZmlsdGVyIiwicGFyc2VDYW5kaWRhdGUiLCJwYXJ0cyIsImNhbmRpZGF0ZSIsImZvdW5kYXRpb24iLCJzdWJzdHJpbmciLCJjb21wb25lbnQiLCJwcmlvcml0eSIsImlwIiwiYWRkcmVzcyIsInBvcnQiLCJyZWxhdGVkQWRkcmVzcyIsInJlbGF0ZWRQb3J0IiwidGNwVHlwZSIsInVmcmFnIiwidXNlcm5hbWVGcmFnbWVudCIsIndyaXRlQ2FuZGlkYXRlIiwic2RwIiwidG9VcHBlckNhc2UiLCJwYXJzZUljZU9wdGlvbnMiLCJwYXJzZVJ0cE1hcCIsInBhcnNlZCIsInBheWxvYWRUeXBlIiwiY2xvY2tSYXRlIiwiY2hhbm5lbHMiLCJudW1DaGFubmVscyIsIndyaXRlUnRwTWFwIiwiY29kZWMiLCJwdCIsInByZWZlcnJlZFBheWxvYWRUeXBlIiwicGFyc2VFeHRtYXAiLCJkaXJlY3Rpb24iLCJ1cmkiLCJ3cml0ZUV4dG1hcCIsImhlYWRlckV4dGVuc2lvbiIsInByZWZlcnJlZElkIiwicGFyc2VGbXRwIiwia3YiLCJqIiwid3JpdGVGbXRwIiwicGFyYW1ldGVycyIsInBhcmFtcyIsInBhcmFtIiwicGFyc2VSdGNwRmIiLCJwYXJhbWV0ZXIiLCJ3cml0ZVJ0Y3BGYiIsImxpbmVzIiwicnRjcEZlZWRiYWNrIiwiZmIiLCJwYXJzZVNzcmNNZWRpYSIsInNwIiwic3NyYyIsImNvbG9uIiwiYXR0cmlidXRlIiwicGFyc2VTc3JjR3JvdXAiLCJzZW1hbnRpY3MiLCJzc3JjcyIsImdldE1pZCIsIm1lZGlhU2VjdGlvbiIsIm1pZCIsInBhcnNlRmluZ2VycHJpbnQiLCJhbGdvcml0aG0iLCJnZXREdGxzUGFyYW1ldGVycyIsInNlc3Npb25wYXJ0Iiwicm9sZSIsImZpbmdlcnByaW50cyIsIndyaXRlRHRsc1BhcmFtZXRlcnMiLCJzZXR1cFR5cGUiLCJmcCIsImdldEljZVBhcmFtZXRlcnMiLCJwYXNzd29yZCIsIndyaXRlSWNlUGFyYW1ldGVycyIsInBhcnNlUnRwUGFyYW1ldGVycyIsImRlc2NyaXB0aW9uIiwiY29kZWNzIiwiaGVhZGVyRXh0ZW5zaW9ucyIsImZlY01lY2hhbmlzbXMiLCJydGNwIiwibWxpbmUiLCJydHBtYXBsaW5lIiwiZm10cHMiLCJ3cml0ZVJ0cERlc2NyaXB0aW9uIiwia2luZCIsImNhcHMiLCJtYXhwdGltZSIsImV4dGVuc2lvbiIsInBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzIiwic2Vjb25kYXJ5U3NyYyIsImVuY29kaW5nUGFyYW1ldGVycyIsImhhc1JlZCIsImhhc1VscGZlYyIsInByaW1hcnlTc3JjIiwiZmxvd3MiLCJhcHQiLCJlbmNQYXJhbSIsImNvZGVjUGF5bG9hZFR5cGUiLCJydHgiLCJmZWMiLCJiYW5kd2lkdGgiLCJtYXhCaXRyYXRlIiwicGFyc2VSdGNwUGFyYW1ldGVycyIsInJ0Y3BQYXJhbWV0ZXJzIiwicmVtb3RlU3NyYyIsImNuYW1lIiwicnNpemUiLCJyZWR1Y2VkU2l6ZSIsImNvbXBvdW5kIiwibXV4IiwicGFyc2VNc2lkIiwic3BlYyIsInN0cmVhbSIsInRyYWNrIiwicGxhbkIiLCJtc2lkUGFydHMiLCJwYXJzZVNjdHBEZXNjcmlwdGlvbiIsIm1heE1lc3NhZ2VTaXplIiwicGFyc2VNTGluZSIsIm1heFNpemVMaW5lIiwic2N0cFBvcnQiLCJmbXQiLCJ3cml0ZVNjdHBEZXNjcmlwdGlvbiIsIm1lZGlhIiwic2N0cCIsImdlbmVyYXRlU2Vzc2lvbklkIiwid3JpdGVTZXNzaW9uQm9pbGVycGxhdGUiLCJzZXNzSWQiLCJzZXNzVmVyIiwic2Vzc1VzZXIiLCJ2ZXJzaW9uIiwid3JpdGVNZWRpYVNlY3Rpb24iLCJ0cmFuc2NlaXZlciIsImljZUdhdGhlcmVyIiwiZ2V0TG9jYWxQYXJhbWV0ZXJzIiwiZHRsc1RyYW5zcG9ydCIsInJ0cFNlbmRlciIsInJ0cFJlY2VpdmVyIiwibXNpZCIsInNlbmRFbmNvZGluZ1BhcmFtZXRlcnMiLCJnZXREaXJlY3Rpb24iLCJnZXRLaW5kIiwiaXNSZWplY3RlZCIsInBhcnNlT0xpbmUiLCJ1c2VybmFtZSIsInNlc3Npb25JZCIsInNlc3Npb25WZXJzaW9uIiwibmV0VHlwZSIsImFkZHJlc3NUeXBlIiwiaXNWYWxpZFNEUCIsImNoYXJBdCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJTdGF0ZXMiLCJTeW5jUHJvbWlzZSIsImV4ZWN1dG9yIiwiX3RoaXMiLCJfc3RhdGUiLCJQRU5ESU5HIiwiX2hhbmRsZXJzIiwiX3Jlc29sdmUiLCJfc2V0UmVzdWx0IiwiUkVTT0xWRUQiLCJfcmVqZWN0IiwicmVhc29uIiwiUkVKRUNURUQiLCJzdGF0ZSIsIl92YWx1ZSIsIl9leGVjdXRlSGFuZGxlcnMiLCJfYXR0YWNoSGFuZGxlciIsImhhbmRsZXIiLCJvbnJlamVjdGVkIiwib25mdWxmaWxsZWQiLCJhbGwiLCJjb2xsZWN0aW9uIiwiY291bnRlciIsInJlc29sdmVkQ29sbGVjdGlvbiIsIml0ZW0iLCJjYXRjaCIsImZpbmFsbHkiLCJvbmZpbmFsbHkiLCJGdW5jdGlvbiIsInJuZyIsImJ5dGVzVG9VdWlkIiwiYnVmIiwib2Zmc2V0Iiwicm5kcyIsImlpIiwiTk9USElORyIsIkRSQUZUQUJMRSIsImZvciIsIkRSQUZUX1NUQVRFIiwiaXNEcmFmdCIsImlzRHJhZnRhYmxlIiwicHJvdG8iLCJpc01hcCIsImlzU2V0Iiwib3ZlcnJpZGVzIiwib3ZlcnJpZGUiLCJvd25LZXlzIiwiUmVmbGVjdCIsInNoYWxsb3dDb3B5IiwiaW52b2tlR2V0dGVycyIsIk1hcCIsIlNldCIsImNsb25lIiwiZGVzYyIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZWFjaCIsIml0ZXIiLCJlbnRyeSIsImlzRW51bWVyYWJsZSIsInByb3AiLCJoYXMiLCJ0aGluZyIsImlzIiwieCIsImhhc1N5bWJvbCIsImhhc01hcCIsImhhc1NldCIsIm1ha2VJdGVyYWJsZSIsIml0ZXJhdGVNYXBWYWx1ZXMiLCJyZWNlaXZlciIsImlzRW50cmllcyIsImxhdGVzdCIsIm1ha2VJdGVyYXRlU2V0VmFsdWVzIiwiY3JlYXRlUHJveHkiLCJkcmFmdCIsImRyYWZ0cyIsImZpbmFsaXplZCIsImZpbmFsaXppbmciLCJzZXQiLCJtb2RpZmllZCIsImNvcHkiLCJhZGQiLCJ3cmFwU2V0VmFsdWUiLCJjbG9uZWQiLCJmcmVlemUiLCJkZWVwIiwiaXNGcm96ZW4iLCJjbGVhciIsImRlbGV0ZSIsImRvbnRNdXRhdGVGcm96ZW5Db2xsZWN0aW9ucyIsIkltbWVyU2NvcGUiLCJwYXJlbnQiLCJjYW5BdXRvRnJlZXplIiwicGF0Y2hlcyIsInJldm9rZSIsImNsb25lUG90ZW50aWFsRHJhZnQiLCJtYXBUcmFwcyIsInByb3h5TWV0aG9kIiwic2V0VHJhcHMiLCJpdGVyYXRlU2V0VmFsdWVzIiwicHJveHlTZXQiLCJkZXNjcmlwdG9ycyIsImFzc2VydFVucmV2b2tlZCIsInBlZWsiLCJsYXRlc3QkMSIsInByZXBhcmVDb3B5IiwiZ2V0JDEiLCJhc3NpZ25lZCIsIm1hcmtDaGFuZ2VkIiwicHJveHlQcm9wZXJ0eSIsInNjb3BlIiwiY3VycmVudCIsInJldm9rZSQxIiwicmV2b2tlZCIsImNyZWF0ZUhpZGRlblByb3BlcnR5IiwidXNlUGF0Y2hlcyIsInBhdGNoTGlzdGVuZXIiLCJpbnZlcnNlUGF0Y2hlcyIsImxlYXZlIiwiZW50ZXIiLCJmaW5hbGl6ZVRyYXBzIiwic2l6ZSIsImxpc3QiLCJyZWNpZXZlciIsImNiIiwiZW50cmllcyIsInRyYXBzIiwicmVkdWNlIiwiYnVpbGRlciIsInByb3h5QXR0ciIsInRyYXAiLCJtYXJrQ2hhbmdlc1N3ZWVwIiwiaGFzQXJyYXlDaGFuZ2VzIiwiaGFzTWFwQ2hhbmdlcyIsImhhc1NldENoYW5nZXMiLCJoYXNPYmplY3RDaGFuZ2VzIiwiYmFzZVZhbHVlIiwic3RhdGUkMSIsImhhc0NoYW5nZXMiLCJvYmokMSIsIm9iaiQxJDEiLCJsZWdhY3lQcm94eSIsIndpbGxGaW5hbGl6ZSIsImlzUmVwbGFjZWQiLCJtYXJrQ2hhbmdlc1JlY3Vyc2l2ZWx5IiwiaSQxIiwiaSQyIiwiY3JlYXRlUHJveHkkMSIsIm9iamVjdFRyYXBzIiwiYXJyYXlUcmFwcyIsIm1hcFRyYXBzJDEiLCJzZXRUcmFwcyQxIiwicmVmIiwiUHJveHkiLCJyZXZvY2FibGUiLCJwcm94eSIsImxhdGVzdCQyIiwicGVlayQxIiwibWFya0NoYW5nZWQkMSIsImRlbGV0ZVByb3BlcnR5Iiwib3duZXIiLCJyZWZsZWN0VHJhcHMiLCJtYWtlVHJhcHNGb3JHZXR0ZXJzIiwiaXRlcmF0ZVNldFZhbHVlcyQxIiwicHJldiIsImFzc2lnbk1hcCIsImdldHRlcnMiLCJtb2Rlcm5Qcm94eSIsImdlbmVyYXRlQXJyYXlQYXRjaGVzIiwiYmFzZVBhdGgiLCJhc3NpZ24kMSIsImRlbHRhIiwicmVwbGFjZUNvdW50IiwicGF0aCQxIiwiZ2VuZXJhdGVQYXRjaGVzRnJvbUFzc2lnbmVkIiwiYXNzaWduZWRWYWx1ZSIsIm9yaWdWYWx1ZSIsImdlbmVyYXRlU2V0UGF0Y2hlcyIsInVuc2hpZnQiLCJsaXN0JDEiLCJ2YWx1ZSQxIiwiYXBwbHlQYXRjaGVzIiwicGF0Y2giLCJzcGxpY2UiLCJjb25maWdEZWZhdWx0cyIsInVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwib25Bc3NpZ24iLCJvbkRlbGV0ZSIsIm9uQ29weSIsIkltbWVyIiwiY29uZmlnIiwic2V0VXNlUHJveGllcyIsInByb2R1Y2UiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJyZWNpcGUiLCJ0aGlzJDEiLCJkZWZhdWx0QmFzZSIsImhhc0Vycm9yIiwicHJvY2Vzc1Jlc3VsdCIsIm1heWJlRnJlZXplIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiY3JlYXRlRHJhZnQiLCJpc01hbnVhbCIsImZpbmlzaERyYWZ0Iiwic2V0QXV0b0ZyZWV6ZSIsImJhc2VEcmFmdCIsImZpbmFsaXplIiwiZmluYWxpemVUcmVlIiwiZXhpc3RzIiwiZ2VuZXJhdGVQYXRjaGVzIiwicm9vdCIsInJvb3RQYXRoIiwibmVlZFBhdGNoZXMiLCJmaW5hbGl6ZVByb3BlcnR5IiwiaXNEcmFmdFByb3AiLCJpc1NldE1lbWJlciIsImltbWVyIiwiU2NvcGUiLCJfbm90aWZ5aW5nTGlzdGVuZXJzIiwiX3Njb3BlTGlzdGVuZXJzIiwiX2V2ZW50UHJvY2Vzc29ycyIsIl9icmVhZGNydW1icyIsIl91c2VyIiwiX3RhZ3MiLCJfZXh0cmEiLCJfY29udGV4dCIsImFkZFNjb3BlTGlzdGVuZXIiLCJhZGRFdmVudFByb2Nlc3NvciIsIl9ub3RpZnlTY29wZUxpc3RlbmVycyIsInNldFRpbWVvdXQiLCJfbm90aWZ5RXZlbnRQcm9jZXNzb3JzIiwicHJvY2Vzc29ycyIsImhpbnQiLCJwcm9jZXNzb3IiLCJmaW5hbCIsInNldFVzZXIiLCJ1c2VyIiwic2V0VGFncyIsInRhZ3MiLCJzZXRUYWciLCJfYSIsInNldEV4dHJhcyIsImV4dHJhIiwic2V0RXh0cmEiLCJzZXRGaW5nZXJwcmludCIsImZpbmdlcnByaW50IiwiX2ZpbmdlcnByaW50Iiwic2V0TGV2ZWwiLCJfbGV2ZWwiLCJzZXRUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiX3RyYW5zYWN0aW9uIiwic2V0Q29udGV4dCIsImNvbnRleHQiLCJzZXRTcGFuIiwic3BhbiIsIl9zcGFuIiwiZ2V0U3BhbiIsIm5ld1Njb3BlIiwiYWRkQnJlYWRjcnVtYiIsImJyZWFkY3J1bWIiLCJtYXhCcmVhZGNydW1icyIsInRpbWVzdGFtcCIsIm1lcmdlZEJyZWFkY3J1bWIiLCJjbGVhckJyZWFkY3J1bWJzIiwiX2FwcGx5RmluZ2VycHJpbnQiLCJhcHBseVRvRXZlbnQiLCJjb250ZXh0cyIsImJyZWFkY3J1bWJzIiwiZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzIiwiZ2xvYmFsRXZlbnRQcm9jZXNzb3JzIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImNoYXJDb2RlQXQiLCJtYXRjaGVzIiwiZmxhZ3MiLCJvcHRzIiwiZGF0YSIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImF0dGFjaEtleXMiLCJyZSIsInNlbnNpdGl2ZSIsInN0cmljdCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIkNvcHlUb0NsaXBib2FyZCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiY2hpbGRyZW4iLCJNT0RFX05VTUJFUiIsIk1PREVfQUxQSEFfTlVNIiwiTU9ERV84QklUX0JZVEUiLCJNT0RFX0tBTkpJIiwiTCIsIk0iLCJRIiwiSCIsIm1hdGgiLCJRUlBvbHlub21pYWwiLCJnZXRMZW5ndGgiLCJtdWx0aXBseSIsImdleHAiLCJnbG9nIiwicmF0aW8iLCJRUk1hdGgiLCJMT0dfVEFCTEUiLCJFWFBfVEFCTEUiLCJ1dGlscyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImF1dGgiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsImNvbmZpZzEiLCJjb25maWcyIiwiQ2FuY2VsIiwiZHRsc1JvbGUiLCJ0cmFja0lkIiwiX2luaXRpYWxUcmFja0lkIiwiZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzIiwibG9jYWxDYXBhYmlsaXRpZXMiLCJyZW1vdGVDYXBhYmlsaXRpZXMiLCJjb21tb25DYXBhYmlsaXRpZXMiLCJmaW5kQ29kZWNCeVBheWxvYWRUeXBlIiwicnR4Q2FwYWJpbGl0eU1hdGNoZXMiLCJsUnR4IiwiclJ0eCIsImxDb2RlY3MiLCJyQ29kZWNzIiwibENvZGVjIiwickNvZGVjIiwibEhlYWRlckV4dGVuc2lvbiIsInJIZWFkZXJFeHRlbnNpb24iLCJpc0FjdGlvbkFsbG93ZWRJblNpZ25hbGluZ1N0YXRlIiwiYWN0aW9uIiwic2lnbmFsaW5nU3RhdGUiLCJvZmZlciIsInNldExvY2FsRGVzY3JpcHRpb24iLCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsImFuc3dlciIsIm1heWJlQWRkQ2FuZGlkYXRlIiwiaWNlVHJhbnNwb3J0IiwiYWxyZWFkeUFkZGVkIiwiZ2V0UmVtb3RlQ2FuZGlkYXRlcyIsImZpbmQiLCJyZW1vdGVDYW5kaWRhdGUiLCJhZGRSZW1vdGVDYW5kaWRhdGUiLCJtYWtlRXJyb3IiLCJOb3RTdXBwb3J0ZWRFcnJvciIsIkludmFsaWRTdGF0ZUVycm9yIiwiSW52YWxpZEFjY2Vzc0Vycm9yIiwiT3BlcmF0aW9uRXJyb3IiLCJlZGdlVmVyc2lvbiIsImFkZFRyYWNrVG9TdHJlYW1BbmRGaXJlRXZlbnQiLCJhZGRUcmFjayIsImRpc3BhdGNoRXZlbnQiLCJNZWRpYVN0cmVhbVRyYWNrRXZlbnQiLCJmaXJlQWRkVHJhY2siLCJwYyIsInN0cmVhbXMiLCJ0cmFja0V2ZW50IiwiX2Rpc3BhdGNoRXZlbnQiLCJSVENQZWVyQ29ubmVjdGlvbiIsIl9ldmVudFRhcmdldCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcyIsIm5lZWROZWdvdGlhdGlvbiIsImxvY2FsU3RyZWFtcyIsInJlbW90ZVN0cmVhbXMiLCJfbG9jYWxEZXNjcmlwdGlvbiIsIl9yZW1vdGVEZXNjcmlwdGlvbiIsImljZUNvbm5lY3Rpb25TdGF0ZSIsImNvbm5lY3Rpb25TdGF0ZSIsImljZUdhdGhlcmluZ1N0YXRlIiwidXNpbmdCdW5kbGUiLCJidW5kbGVQb2xpY3kiLCJydGNwTXV4UG9saWN5IiwiaWNlVHJhbnNwb3J0UG9saWN5IiwiaWNlU2VydmVycyIsImhhc1R1cm4iLCJzZXJ2ZXIiLCJ1cmxzIiwiZmlsdGVySWNlU2VydmVycyIsIl9pY2VHYXRoZXJlcnMiLCJpY2VDYW5kaWRhdGVQb29sU2l6ZSIsIlJUQ0ljZUdhdGhlcmVyIiwiZ2F0aGVyUG9saWN5IiwiX2NvbmZpZyIsInRyYW5zY2VpdmVycyIsIl9zZHBTZXNzaW9uSWQiLCJfc2RwU2Vzc2lvblZlcnNpb24iLCJfZHRsc1JvbGUiLCJfaXNDbG9zZWQiLCJvbmljZWNhbmRpZGF0ZSIsIm9uYWRkc3RyZWFtIiwib250cmFjayIsIm9ucmVtb3Zlc3RyZWFtIiwib25zaWduYWxpbmdzdGF0ZWNoYW5nZSIsIm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlIiwib25jb25uZWN0aW9uc3RhdGVjaGFuZ2UiLCJvbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlIiwib25uZWdvdGlhdGlvbm5lZWRlZCIsIm9uZGF0YWNoYW5uZWwiLCJfZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlIiwiZ2V0Q29uZmlndXJhdGlvbiIsImdldExvY2FsU3RyZWFtcyIsImdldFJlbW90ZVN0cmVhbXMiLCJfY3JlYXRlVHJhbnNjZWl2ZXIiLCJkb05vdEFkZCIsImhhc0J1bmRsZVRyYW5zcG9ydCIsInJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMiLCJhc3NvY2lhdGVkUmVtb3RlTWVkaWFTdHJlYW1zIiwid2FudFJlY2VpdmUiLCJ0cmFuc3BvcnRzIiwiX2NyZWF0ZUljZUFuZER0bHNUcmFuc3BvcnRzIiwiX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkIiwiUlRDUnRwU2VuZGVyIiwiYWRkU3RyZWFtIiwiZ2V0VHJhY2tzIiwiY2xvbmVkU3RyZWFtIiwiaWR4IiwiY2xvbmVkVHJhY2siLCJlbmFibGVkIiwicmVtb3ZlVHJhY2siLCJzZW5kZXIiLCJzdG9wIiwicmVtb3ZlU3RyZWFtIiwiZ2V0U2VuZGVycyIsImdldFJlY2VpdmVycyIsIl9jcmVhdGVJY2VHYXRoZXJlciIsInNkcE1MaW5lSW5kZXgiLCJidWZmZXJlZENhbmRpZGF0ZUV2ZW50cyIsImJ1ZmZlckNhbmRpZGF0ZXMiLCJfZ2F0aGVyIiwib25sb2NhbGNhbmRpZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJzZHBNaWQiLCJjYW5kIiwic2VyaWFsaXplZENhbmRpZGF0ZSIsImNvbXBsZXRlIiwiZXZlcnkiLCJSVENJY2VUcmFuc3BvcnQiLCJvbmljZXN0YXRlY2hhbmdlIiwiX3VwZGF0ZUljZUNvbm5lY3Rpb25TdGF0ZSIsIl91cGRhdGVDb25uZWN0aW9uU3RhdGUiLCJSVENEdGxzVHJhbnNwb3J0Iiwib25kdGxzc3RhdGVjaGFuZ2UiLCJfZGlzcG9zZUljZUFuZER0bHNUcmFuc3BvcnRzIiwiX3RyYW5zY2VpdmUiLCJyZWN2IiwiZW5jb2RpbmdzIiwicmVjZWl2ZSIsImlzSWNlTGl0ZSIsInJlbW90ZUljZVBhcmFtZXRlcnMiLCJyZW1vdGVEdGxzUGFyYW1ldGVycyIsIl91cGRhdGVTaWduYWxpbmdTdGF0ZSIsInJlY2VpdmVyTGlzdCIsImljZU9wdGlvbnMiLCJyZW1vdGVNc2lkIiwiaXNDb21wbGV0ZSIsImNhbmRzIiwic2V0VHJhbnNwb3J0Iiwic2V0UmVtb3RlQ2FuZGlkYXRlcyIsIk1lZGlhU3RyZWFtIiwiUlRDUnRwUmVjZWl2ZXIiLCJnZXRDYXBhYmlsaXRpZXMiLCJpc05ld1RyYWNrIiwibmF0aXZlVHJhY2siLCJyZW1vdmVUcmFja0Zyb21TdHJlYW1BbmRGaXJlRXZlbnQiLCJzaWQiLCJjbG9zZSIsIm5ld1N0YXRlIiwic3RhdGVzIiwiY2xvc2VkIiwiY2hlY2tpbmciLCJjb25uZWN0ZWQiLCJjb21wbGV0ZWQiLCJkaXNjb25uZWN0ZWQiLCJmYWlsZWQiLCJuZXciLCJjb25uZWN0aW5nIiwiY3JlYXRlT2ZmZXIiLCJudW1BdWRpb1RyYWNrcyIsIm51bVZpZGVvVHJhY2tzIiwib2ZmZXJPcHRpb25zIiwibWFuZGF0b3J5Iiwib2ZmZXJUb1JlY2VpdmVBdWRpbyIsIm9mZmVyVG9SZWNlaXZlVmlkZW8iLCJyZW1vdGVDb2RlYyIsImhkckV4dCIsInJIZHJFeHQiLCJnZXRMb2NhbENhbmRpZGF0ZXMiLCJSVENTZXNzaW9uRGVzY3JpcHRpb24iLCJjcmVhdGVBbnN3ZXIiLCJtZWRpYVNlY3Rpb25zSW5PZmZlciIsImxvY2FsVHJhY2siLCJnZXRBdWRpb1RyYWNrcyIsImdldFZpZGVvVHJhY2tzIiwiYWRkSWNlQ2FuZGlkYXRlIiwiY2FuZGlkYXRlU3RyaW5nIiwiZ2V0U3RhdHMiLCJzZWxlY3RvciIsIk1lZGlhU3RyZWFtVHJhY2siLCJzZW5kZXJPclJlY2VpdmVyIiwicHJvbWlzZXMiLCJhbGxTdGF0cyIsInJlc3VsdHMiLCJzdGF0cyIsInN0YXQiLCJvcnRjT2JqZWN0TmFtZSIsIm5hdGl2ZUdldHN0YXRzIiwibmF0aXZlU3RhdHMiLCJtYXBTdGF0cyIsImluYm91bmRydHAiLCJvdXRib3VuZHJ0cCIsImNhbmRpZGF0ZXBhaXIiLCJsb2NhbGNhbmRpZGF0ZSIsInJlbW90ZWNhbmRpZGF0ZSIsIm1ldGhvZHMiLCJuYXRpdmVNZXRob2QiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiX3R5cGVvZiIsIl9leHRlbmRzIiwiZW51bWVyYWJsZU9ubHkiLCJzeW0iLCJfb2JqZWN0U3ByZWFkIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlU3ltYm9sS2V5cyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2dldFByb3RvdHlwZU9mIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJfc2V0UHJvdG90eXBlT2YiLCJSZWFjdCIsIlFSQ29kZUltcGwiLCJFcnJvckNvcnJlY3RMZXZlbCIsImNvbnZlcnRTdHIiLCJjaGFyY29kZSIsIkRFRkFVTFRfUFJPUFMiLCJiZ0NvbG9yIiwiZmdDb2xvciIsImluY2x1ZGVNYXJnaW4iLCJNQVJHSU5fU0laRSIsIkRFRkFVTFRfSU1HX1NDQUxFIiwiZ2VuZXJhdGVQYXRoIiwibWFyZ2luIiwicm93IiwiY2VsbCIsImV4Y2F2YXRlTW9kdWxlcyIsImV4Y2F2YXRpb24iLCJoIiwidyIsImdldEltYWdlU2V0dGluZ3MiLCJjZWxscyIsImltYWdlU2V0dGluZ3MiLCJudW1DZWxscyIsImRlZmF1bHRTaXplIiwic2NhbGUiLCJ3aWR0aCIsImV4Y2F2YXRlIiwiZmxvb3JYIiwiZmxvb3JZIiwiY2VpbCIsIlNVUFBPUlRTX1BBVEgyRCIsIlBhdGgyRCIsImFkZFBhdGgiLCJRUkNvZGVDYW52YXMiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsIl9nZXRQcm90b3R5cGVPZjIiLCJfbGVuIiwiX2tleSIsImltZ0xvYWRlZCIsInNldFN0YXRlIiwidXBkYXRlIiwiX3RoaXMkcHJvcHMiLCJxcmNvZGUiLCJhZGREYXRhIiwibWFrZSIsIl9jYW52YXMiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiY2FsY3VsYXRlZEltYWdlU2V0dGluZ3MiLCJwaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwicmR4IiwiY2R4IiwiX2ltYWdlIiwiZHJhd0ltYWdlIiwiX3RoaXMyIiwiX3RoaXMkcHJvcHMyIiwic3R5bGUiLCJvdGhlclByb3BzIiwiY2FudmFzU3R5bGUiLCJpbWciLCJpbWdTcmMiLCJzcmMiLCJjcmVhdGVFbGVtZW50IiwiZGlzcGxheSIsIm9uTG9hZCIsImhhbmRsZUltYWdlTG9hZCIsIl9yZWYiLCJGcmFnbWVudCIsIl9yZWYyIiwiUHVyZUNvbXBvbmVudCIsIlFSQ29kZVNWRyIsIl9SZWFjdCRQdXJlQ29tcG9uZW50MiIsIl90aGlzJHByb3BzMyIsImltYWdlIiwieGxpbmtIcmVmIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsImZnUGF0aCIsInNoYXBlUmVuZGVyaW5nIiwidmlld0JveCIsIlFSQ29kZSIsInJlbmRlckFzIiwiQ29tcG9uZW50IiwidSIsInNvbWUiLCJlbmRzV2l0aCIsIkV2ZW50cyIsIkVFIiwiZW1pdHRlciIsImxpc3RlbmVyIiwiX2V2ZW50c0NvdW50IiwiY2xlYXJFdmVudCIsIkV2ZW50RW1pdHRlciIsImV2ZW50TmFtZXMiLCJldmVudHMiLCJuYW1lcyIsImhhbmRsZXJzIiwiZWUiLCJsaXN0ZW5lckNvdW50IiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsInByZWZpeGVkIiwiTWVtbyIsIl9oYXNXZWFrU2V0IiwiV2Vha1NldCIsIl9pbm5lciIsInEiLCJ6IiwiYWEiLCJBIiwiQiIsIkMiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRCIsIkUiLCJyZWZzIiwidXBkYXRlciIsIkYiLCJHIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiSiIsIksiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImsiLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJPIiwia2V5UHJlZml4IiwiZnVuYyIsImNvdW50IiwiUiIsIlUiLCJTIiwiVCIsImVzY2FwZSIsImNhIiwiZGEiLCJWIiwiYmEiLCJXIiwiWCIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVSZWYiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJZIiwiWiIsImVhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJmYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiaGEiLCJyZWdpc3RyYXRpb25OYW1lIiwiaWEiLCJqYSIsImRlcGVuZGVuY2llcyIsImthIiwib25FcnJvciIsImxhIiwibWEiLCJuYSIsIm9hIiwicGEiLCJxYSIsInNhIiwidWEiLCJ2YSIsIndhIiwicmEiLCJ4YSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiQ2EiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiVWEiLCJXYSIsIlhhIiwidGFnIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZXR1cm4iLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiZGIiLCJlYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInNiIiwidGIiLCJ1YiIsInZiIiwicWIiLCJyYiIsInBiIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ3YiIsIm5vZGVOYW1lIiwieWIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInhiIiwiemIiLCJjaGVja2VkIiwiQWIiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkJiIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkNiIiwiRWIiLCJGYiIsIkdiIiwib3duZXJEb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJJYiIsIkhiIiwiSmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIktiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJMYiIsIk1iIiwiTmIiLCJ0ZXh0Q29udGVudCIsIk9iIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIlRiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJVYiIsIlZiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiV2IiLCJYYiIsIlliIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJlYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImZjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJnYyIsImljIiwiY2hpbGQiLCJzaWJsaW5nIiwiaGMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJxYyIsInJjIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ6YyIsImJsb2NrZWRPbiIsInRvcExldmVsVHlwZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsIkFjIiwicG9pbnRlcklkIiwiQmMiLCJDYyIsIkVjIiwiRmMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJMYyIsIk1jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiTmMiLCJPYyIsImRpc3BhdGNoQ29uZmlnIiwiUGMiLCJfdGFyZ2V0SW5zdCIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJXYyIsImV2ZW50UG9vbCIsIlhjIiwiZGVzdHJ1Y3RvciIsIlZjIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiWWMiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiWmMiLCJjbGlwYm9hcmREYXRhIiwiJGMiLCJ2aWV3IiwiYWQiLCJyZWxhdGVkVGFyZ2V0IiwiYmQiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJjZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJkZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJlZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJnZCIsImdldE1vZGlmaWVyU3RhdGUiLCJoZCIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJ3aGljaCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIm9kIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsInBkIiwiZGF0YVRyYW5zZmVyIiwicWQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicmQiLCJzZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwidGQiLCJ1ZCIsInZkIiwid2QiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsIkNkIiwiRGQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiRWQiLCJnZXRFdmVudFByaW9yaXR5IiwiRmQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiRGMiLCJSZCIsIlNkIiwiV2Vha01hcCIsInhjIiwieWMiLCJUZCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiVWQiLCJWZCIsIldkIiwic2V0UHJvcGVydHkiLCJYZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwid2JyIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiZGUiLCJub2RlIiwibmV4dFNpYmxpbmciLCJmZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImdlIiwiY29udGVudEVkaXRhYmxlIiwiaGUiLCJpZSIsImplIiwia2UiLCJsZSIsIm1lIiwibmUiLCJhdXRvRm9jdXMiLCJvZSIsIl9faHRtbCIsInBlIiwicWUiLCJzZSIsInByZXZpb3VzU2libGluZyIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJIZSIsImRvY3VtZW50TW9kZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiU2UiLCJRZSIsImNoYXIiLCJSZSIsIlRlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJVZSIsIlZlIiwiY2hhbmdlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRldGFjaEV2ZW50IiwiZGYiLCJlZiIsImF0dGFjaEV2ZW50IiwiZmYiLCJnZiIsImhmIiwibGYiLCJqZiIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJrZiIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwibWYiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJzZWxlY3QiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ5ZiIsIm9uU2VsZWN0IiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiT2YiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlBmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiUWYiLCJ1bnN0YWJsZV9ub3ciLCJSZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiU2YiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlRmIiwiVWYiLCJWZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiV2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJ2ZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwid2ciLCJ4ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ5ZyIsInpnIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJBZyIsIkJnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwibmV4dEVmZmVjdCIsIkNnIiwiRGciLCJ1cGRhdGVRdWV1ZSIsIkVnIiwiRmciLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJTZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJQZyIsIlFnIiwiUmciLCJUZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIlVnIiwiVmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJXZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiWGciLCJZZyIsIl9zdHJpbmdSZWYiLCJaZyIsIiRnIiwiYWgiLCJiaCIsImVsZW1lbnRUeXBlIiwiY2giLCJpbXBsZW1lbnRhdGlvbiIsImRoIiwiZWgiLCJ0YSIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJraCIsImxoIiwibWgiLCJkb2N1bWVudEVsZW1lbnQiLCJuaCIsIm9oIiwicGgiLCJxaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsInJoIiwicmVzcG9uZGVyIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJiYXNlVXBkYXRlIiwiT2giLCJQaCIsIlFoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwibGFzdCIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsIlJoIiwiU2giLCJUaCIsIlVoIiwiZGVzdHJveSIsImRlcHMiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVuc3RhYmxlX25leHQiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJwZW5kaW5nUHJvcHMiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidWkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJ2aSIsIndpIiwicGVuZGluZ0NvbnRleHQiLCJIaSIsIklpIiwiSmkiLCJLaSIsInhpIiwicmV0cnlUaW1lIiwieWkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwiemkiLCJBaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJCaSIsIkNpIiwiTGkiLCJNaSIsIk5pIiwib25DbGljayIsIm9uY2xpY2siLCJPaSIsIlBpIiwiU2kiLCJSaSIsIlRpIiwiVWkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZpIiwiV2kiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIlFpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiYWoiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiYmoiLCJjaiIsImRqIiwiZWoiLCJmaiIsImVsZW1lbnQiLCJnaiIsImhqIiwiaWoiLCJjb21wb25lbnREaWRDYXRjaCIsImpqIiwiY29tcG9uZW50U3RhY2siLCJnayIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJwaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJ0aW1lb3V0TXMiLCJLaiIsIkxqIiwiTWoiLCJOaiIsIk9qIiwibGFzdEV4cGlyZWRUaW1lIiwiUGoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsIldqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsImxhc3RTdXNwZW5kZWRUaW1lIiwiWGoiLCJ0aW1lb3V0SGFuZGxlIiwiWWoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiWmoiLCJiayIsImNrIiwicGluZ0NhY2hlIiwiZGsiLCJlayIsImZrIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJpayIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJEYiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJqayIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiRGgiLCJkYyIsImZkIiwiaGsiLCJFaCIsIkZoIiwieGsiLCJEaSIsIkVpIiwiRmkiLCJ4ZCIsIkdpIiwia2siLCJsayIsIm1rIiwiaGlkZGVuIiwiVmEiLCJuayIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInBrIiwicGVuZGluZ0NoaWxkcmVuIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsInZrIiwid2MiLCJfaW50ZXJuYWxSb290Iiwid2siLCJ6ayIsImhhc0F0dHJpYnV0ZSIsInlrIiwiQmsiLCJBayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImFrIiwiQ2siLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIm9rIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJEayIsIkVrIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInBlcmZvcm1hbmNlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJwcmlvcml0eUxldmVsIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkxhenkiLCJQb3J0YWwiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJydW50aW1lIiwiT3AiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsInNraXBUZW1wUmVzZXQiLCJyb290UmVjb3JkIiwicnZhbCIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29weVRvQ2xpcGJvYXJkIiwiZGVzZWxlY3RDdXJyZW50IiwiZGVmYXVsdE1lc3NhZ2UiLCJkZWJ1ZyIsInJlc2VsZWN0UHJldmlvdXMiLCJzZWxlY3Rpb24iLCJzdWNjZXNzIiwicG9zaXRpb24iLCJjbGlwIiwid2hpdGVTcGFjZSIsIndlYmtpdFVzZXJTZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwibXNVc2VyU2VsZWN0IiwidXNlclNlbGVjdCIsImNsZWFyRGF0YSIsInNldERhdGEiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJleGVjQ29tbWFuZCIsImNvcHlLZXkiLCJ1c2VyQWdlbnQiLCJwcm9tcHQiLCJyZW1vdmVSYW5nZSIsImFjdGl2ZSIsInJhbmdlcyIsImdldFJhbmdlQXQiLCJibHVyIiwicm5kczgiLCJVaW50OEFycmF5IiwiYnl0ZVRvSGV4IiwiYnRoIiwiQml0Qnl0ZSIsIlJTQmxvY2siLCJCaXRCdWZmZXIiLCJ1dGlsIiwiUG9seW5vbWlhbCIsInR5cGVOdW1iZXIiLCJlcnJvckNvcnJlY3RMZXZlbCIsIm1vZHVsZUNvdW50IiwiZGF0YUNhY2hlIiwiZGF0YUxpc3QiLCJuZXdEYXRhIiwiaXNEYXJrIiwiZ2V0TW9kdWxlQ291bnQiLCJyc0Jsb2NrcyIsImdldFJTQmxvY2tzIiwidG90YWxEYXRhQ291bnQiLCJkYXRhQ291bnQiLCJwdXQiLCJnZXRMZW5ndGhJbkJpdHMiLCJ3cml0ZSIsIm1ha2VJbXBsIiwiZ2V0QmVzdE1hc2tQYXR0ZXJuIiwibWFza1BhdHRlcm4iLCJzZXR1cFBvc2l0aW9uUHJvYmVQYXR0ZXJuIiwic2V0dXBQb3NpdGlvbkFkanVzdFBhdHRlcm4iLCJzZXR1cFRpbWluZ1BhdHRlcm4iLCJzZXR1cFR5cGVJbmZvIiwic2V0dXBUeXBlTnVtYmVyIiwiY3JlYXRlRGF0YSIsIm1hcERhdGEiLCJtaW5Mb3N0UG9pbnQiLCJsb3N0UG9pbnQiLCJnZXRMb3N0UG9pbnQiLCJjcmVhdGVNb3ZpZUNsaXAiLCJ0YXJnZXRfbWMiLCJpbnN0YW5jZV9uYW1lIiwicXJfbWMiLCJjcmVhdGVFbXB0eU1vdmllQ2xpcCIsImJlZ2luRmlsbCIsIm1vdmVUbyIsImxpbmVUbyIsImVuZEZpbGwiLCJwb3MiLCJnZXRQYXR0ZXJuUG9zaXRpb24iLCJnZXRCQ0hUeXBlTnVtYmVyIiwiZ2V0QkNIVHlwZUluZm8iLCJpbmMiLCJiaXRJbmRleCIsImJ5dGVJbmRleCIsImRhcmsiLCJnZXRNYXNrIiwiUEFEMCIsIlBBRDEiLCJwdXRCaXQiLCJjcmVhdGVCeXRlcyIsIm1heERjQ291bnQiLCJtYXhFY0NvdW50IiwiZGNkYXRhIiwiZWNkYXRhIiwiZGNDb3VudCIsImVjQ291bnQiLCJ0b3RhbENvdW50IiwicnNQb2x5IiwiZ2V0RXJyb3JDb3JyZWN0UG9seW5vbWlhbCIsIm1vZFBvbHkiLCJtb2RJbmRleCIsInRvdGFsQ29kZUNvdW50IiwiUVI4Yml0Qnl0ZSIsIkVDTCIsIlFSUlNCbG9jayIsIlJTX0JMT0NLX1RBQkxFIiwicnNCbG9jayIsImdldFJzQmxvY2tUYWJsZSIsIlFSQml0QnVmZmVyIiwiYnVmSW5kZXgiLCJiaXQiLCJNb2RlIiwiUVJNYXNrUGF0dGVybiIsIlFSVXRpbCIsIlBBVFRFUk5fUE9TSVRJT05fVEFCTEUiLCJHMTUiLCJHMTgiLCJHMTVfTUFTSyIsImdldEJDSERpZ2l0IiwiZGlnaXQiLCJlcnJvckNvcnJlY3RMZW5ndGgiLCJxckNvZGUiLCJzYW1lQ291bnQiLCJkYXJrQ291bnQiLCJhYnMiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJzcHJlYWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwiZ2V0VXJpIiwidXNlIiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwiZm5zIiwibm9ybWFsaXplZE5hbWUiLCJpc0F4aW9zRXJyb3IiLCJjb2x1bW5OdW1iZXIiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJoYXNoIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJyZWxhdGl2ZVVSTCIsInJlc29sdmVQcm9taXNlIiwibG9nRGlzYWJsZWRfIiwiZGVwcmVjYXRpb25XYXJuaW5nc18iLCJleHRyYWN0VmVyc2lvbiIsInVhc3RyaW5nIiwiZXhwciIsIndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50IiwiZXZlbnROYW1lVG9XcmFwIiwid3JhcHBlciIsIm5hdGl2ZUFkZEV2ZW50TGlzdGVuZXIiLCJuYXRpdmVFdmVudE5hbWUiLCJ3cmFwcGVkQ2FsbGJhY2siLCJtb2RpZmllZEV2ZW50IiwiX2V2ZW50TWFwIiwibmF0aXZlUmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVud3JhcHBlZENiIiwiZGlzYWJsZUxvZyIsImRpc2FibGVXYXJuaW5ncyIsImRlcHJlY2F0ZWQiLCJvbGRNZXRob2QiLCJuZXdNZXRob2QiLCJkZXRlY3RCcm93c2VyIiwibW96R2V0VXNlck1lZGlhIiwid2Via2l0R2V0VXNlck1lZGlhIiwiaXNTZWN1cmVDb250ZXh0Iiwid2Via2l0UlRDUGVlckNvbm5lY3Rpb24iLCJtZWRpYURldmljZXMiLCJzdXBwb3J0c1VuaWZpZWRQbGFuIiwiUlRDUnRwVHJhbnNjZWl2ZXIiLCJjb21wYWN0T2JqZWN0IiwiYWNjdW11bGF0b3IiLCJpc09iaiIsImlzRW1wdHlPYmplY3QiLCJmaWx0ZXJTdGF0cyIsIm91dGJvdW5kIiwic3RyZWFtU3RhdHNUeXBlIiwiZmlsdGVyZWRSZXN1bHQiLCJ0cmFja1N0YXRzIiwidHJhY2tJZGVudGlmaWVyIiwidHJhY2tTdGF0Iiwid2Fsa1N0YXRzIiwicmVzdWx0U2V0Iiwic2hpbUdldFVzZXJNZWRpYSIsImJyb3dzZXJEZXRhaWxzIiwiY29uc3RyYWludHNUb0Nocm9tZV8iLCJpZGVhbCIsIm9sZG5hbWVfIiwibWl4IiwiYWR2YW5jZWQiLCJzaGltQ29uc3RyYWludHNfIiwiY29uc3RyYWludHMiLCJhdWRpbyIsInJlbWFwIiwidmlkZW8iLCJmYWNlIiwiZmFjaW5nTW9kZSIsImdldFN1cHBvcnRlZEZhY2luZ01vZGVMaWVzIiwiZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMiLCJlbnVtZXJhdGVEZXZpY2VzIiwiZGV2aWNlcyIsImRldiIsImluY2x1ZGVzIiwiZGV2aWNlSWQiLCJzaGltRXJyb3JfIiwiUGVybWlzc2lvbkRlbmllZEVycm9yIiwiUGVybWlzc2lvbkRpc21pc3NlZEVycm9yIiwiRGV2aWNlc05vdEZvdW5kRXJyb3IiLCJDb25zdHJhaW50Tm90U2F0aXNmaWVkRXJyb3IiLCJUcmFja1N0YXJ0RXJyb3IiLCJNZWRpYURldmljZUZhaWxlZER1ZVRvU2h1dGRvd24iLCJNZWRpYURldmljZUtpbGxTd2l0Y2hPbiIsIlRhYkNhcHR1cmVFcnJvciIsIlNjcmVlbkNhcHR1cmVFcnJvciIsIkRldmljZUNhcHR1cmVFcnJvciIsImNvbnN0cmFpbnQiLCJjb25zdHJhaW50TmFtZSIsImdldFVzZXJNZWRpYSIsIm9uU3VjY2VzcyIsIm9yaWdHZXRVc2VyTWVkaWEiLCJjcyIsIkRPTUV4Y2VwdGlvbiIsInNoaW1HZXREaXNwbGF5TWVkaWEiLCJnZXRTb3VyY2VJZCIsImdldERpc3BsYXlNZWRpYSIsInNvdXJjZUlkIiwid2lkdGhTcGVjaWZpZWQiLCJoZWlnaHRTcGVjaWZpZWQiLCJmcmFtZVJhdGVTcGVjaWZpZWQiLCJmcmFtZVJhdGUiLCJjaHJvbWVNZWRpYVNvdXJjZSIsImNocm9tZU1lZGlhU291cmNlSWQiLCJtYXhGcmFtZVJhdGUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInNoaW1NZWRpYVN0cmVhbSIsIndlYmtpdE1lZGlhU3RyZWFtIiwic2hpbU9uVHJhY2siLCJfb250cmFjayIsIm9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiIsIl9vbnRyYWNrcG9seSIsInNoaW1HZXRTZW5kZXJzV2l0aER0bWYiLCJzaGltU2VuZGVyV2l0aER0bWYiLCJfZHRtZiIsImNyZWF0ZURUTUZTZW5kZXIiLCJfcGMiLCJfc2VuZGVycyIsIm9yaWdBZGRUcmFjayIsIm9yaWdSZW1vdmVUcmFjayIsIm9yaWdBZGRTdHJlYW0iLCJvcmlnUmVtb3ZlU3RyZWFtIiwib3JpZ0dldFNlbmRlcnMiLCJzZW5kZXJzIiwic2hpbUdldFN0YXRzIiwib3JpZ0dldFN0YXRzIiwib25TdWNjIiwib25FcnIiLCJmaXhDaHJvbWVTdGF0c18iLCJzdGFuZGFyZFJlcG9ydCIsInJlcG9ydCIsInN0YW5kYXJkU3RhdHMiLCJtYWtlTWFwU3RhdHMiLCJzdWNjZXNzQ2FsbGJhY2tXcmFwcGVyXyIsInNoaW1TZW5kZXJSZWNlaXZlckdldFN0YXRzIiwib3JpZ0dldFJlY2VpdmVycyIsInJlY2VpdmVycyIsInNoaW1BZGRUcmFja1JlbW92ZVRyYWNrV2l0aE5hdGl2ZSIsIl9zaGltbWVkTG9jYWxTdHJlYW1zIiwic3RyZWFtSWQiLCJleGlzdGluZ1NlbmRlcnMiLCJuZXdTZW5kZXJzIiwibmV3U2VuZGVyIiwic2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2siLCJvcmlnR2V0TG9jYWxTdHJlYW1zIiwibmF0aXZlU3RyZWFtcyIsIl9yZXZlcnNlU3RyZWFtcyIsIl9zdHJlYW1zIiwibmV3U3RyZWFtIiwicmVwbGFjZUludGVybmFsU3RyZWFtSWQiLCJpbnRlcm5hbElkIiwiZXh0ZXJuYWxTdHJlYW0iLCJpbnRlcm5hbFN0cmVhbSIsInJlcGxhY2VFeHRlcm5hbFN0cmVhbUlkIiwiYWxyZWFkeUV4aXN0cyIsIm9sZFN0cmVhbSIsIm1ldGhvZE9iaiIsIm9yaWdTZXRMb2NhbERlc2NyaXB0aW9uIiwib3JpZ0xvY2FsRGVzY3JpcHRpb24iLCJzdHJlYW1pZCIsInNoaW1QZWVyQ29ubmVjdGlvbiIsIlJUQ0ljZUNhbmRpZGF0ZSIsIm5hdGl2ZUFkZEljZUNhbmRpZGF0ZSIsImZpeE5lZ290aWF0aW9uTmVlZGVkIiwib3JpZ01TVEVuYWJsZWQiLCJldiIsIlJUQ0R0bWZTZW5kZXIiLCJSVENEVE1GU2VuZGVyIiwiUlRDUGVlckNvbm5lY3Rpb25TaGltIiwidmFsaWRUdXJuIiwic3RhcnRzV2l0aCIsInNoaW1SZXBsYWNlVHJhY2siLCJyZXBsYWNlVHJhY2siLCJzZXRUcmFjayIsIm5hdGl2ZUdldFVzZXJNZWRpYSIsImdldFNldHRpbmdzIiwibmF0aXZlR2V0U2V0dGluZ3MiLCJhcHBseUNvbnN0cmFpbnRzIiwibmF0aXZlQXBwbHlDb25zdHJhaW50cyIsInByZWZlcnJlZE1lZGlhU291cmNlIiwibWVkaWFTb3VyY2UiLCJSVENUcmFja0V2ZW50IiwibW96UlRDUGVlckNvbm5lY3Rpb24iLCJtb2Rlcm5TdGF0c1R5cGVzIiwibmF0aXZlR2V0U3RhdHMiLCJzaGltU2VuZGVyR2V0U3RhdHMiLCJzaGltUmVjZWl2ZXJHZXRTdGF0cyIsInNoaW1SZW1vdmVTdHJlYW0iLCJzaGltUlRDRGF0YUNoYW5uZWwiLCJEYXRhQ2hhbm5lbCIsIlJUQ0RhdGFDaGFubmVsIiwic2hpbUFkZFRyYW5zY2VpdmVyIiwib3JpZ0FkZFRyYW5zY2VpdmVyIiwiYWRkVHJhbnNjZWl2ZXIiLCJzZXRQYXJhbWV0ZXJzUHJvbWlzZXMiLCJpbml0UGFyYW1ldGVycyIsInNob3VsZFBlcmZvcm1DaGVjayIsInNlbmRFbmNvZGluZ3MiLCJlbmNvZGluZ1BhcmFtIiwicmlkIiwicGFyc2VGbG9hdCIsInNjYWxlUmVzb2x1dGlvbkRvd25CeSIsIlJhbmdlRXJyb3IiLCJtYXhGcmFtZXJhdGUiLCJnZXRQYXJhbWV0ZXJzIiwic2V0UGFyYW1ldGVycyIsInNoaW1DcmVhdGVPZmZlciIsIm9yaWdDcmVhdGVPZmZlciIsInNoaW1DcmVhdGVBbnN3ZXIiLCJvcmlnQ3JlYXRlQW5zd2VyIiwic2hpbUxvY2FsU3RyZWFtc0FQSSIsIl9sb2NhbFN0cmVhbXMiLCJfYWRkVHJhY2siLCJ0cmFja3MiLCJzaGltUmVtb3RlU3RyZWFtc0FQSSIsIl9yZW1vdGVTdHJlYW1zIiwiX29uYWRkc3RyZWFtIiwiX29uYWRkc3RyZWFtcG9seSIsInNoaW1DYWxsYmFja3NBUEkiLCJzdWNjZXNzQ2FsbGJhY2siLCJmYWlsdXJlQ2FsbGJhY2siLCJ3aXRoQ2FsbGJhY2siLCJfZ2V0VXNlck1lZGlhIiwic2hpbUNvbnN0cmFpbnRzIiwiZXJyY2IiLCJzaGltUlRDSWNlU2VydmVyVXJscyIsIk9yaWdQZWVyQ29ubmVjdGlvbiIsInBjQ29uZmlnIiwicGNDb25zdHJhaW50cyIsIm5ld0ljZVNlcnZlcnMiLCJnZW5lcmF0ZUNlcnRpZmljYXRlIiwic2hpbVRyYWNrRXZlbnRUcmFuc2NlaXZlciIsInNoaW1DcmVhdGVPZmZlckxlZ2FjeSIsImF1ZGlvVHJhbnNjZWl2ZXIiLCJnZXRUcmFuc2NlaXZlcnMiLCJzZXREaXJlY3Rpb24iLCJ2aWRlb1RyYW5zY2VpdmVyIiwic2hpbVJUQ0ljZUNhbmRpZGF0ZSIsIk5hdGl2ZVJUQ0ljZUNhbmRpZGF0ZSIsIm5hdGl2ZUNhbmRpZGF0ZSIsInBhcnNlZENhbmRpZGF0ZSIsImF1Z21lbnRlZENhbmRpZGF0ZSIsInNoaW1NYXhNZXNzYWdlU2l6ZSIsIl9zY3RwIiwic2N0cEluRGVzY3JpcHRpb24iLCJtTGluZSIsImdldFJlbW90ZUZpcmVmb3hWZXJzaW9uIiwiZ2V0Q2FuU2VuZE1heE1lc3NhZ2VTaXplIiwicmVtb3RlSXNGaXJlZm94IiwiY2FuU2VuZE1heE1lc3NhZ2VTaXplIiwiZ2V0TWF4TWVzc2FnZVNpemUiLCJzZHBTZW1hbnRpY3MiLCJpc0ZpcmVmb3giLCJjYW5TZW5kTU1TIiwicmVtb3RlTU1TIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJzaGltU2VuZFRocm93VHlwZUVycm9yIiwid3JhcERjU2VuZCIsIm9yaWdEYXRhQ2hhbm5lbFNlbmQiLCJieXRlTGVuZ3RoIiwib3JpZ0NyZWF0ZURhdGFDaGFubmVsIiwiY3JlYXRlRGF0YUNoYW5uZWwiLCJkYXRhQ2hhbm5lbCIsImNoYW5uZWwiLCJzaGltQ29ubmVjdGlvblN0YXRlIiwiX29uY29ubmVjdGlvbnN0YXRlY2hhbmdlIiwib3JpZ01ldGhvZCIsIl9jb25uZWN0aW9uc3RhdGVjaGFuZ2Vwb2x5IiwiX2xhc3RDb25uZWN0aW9uU3RhdGUiLCJuZXdFdmVudCIsInJlbW92ZUFsbG93RXh0bWFwTWl4ZWQiLCJuYXRpdmVTUkQiLCJzaGltQ2hyb21lIiwic2hpbUZpcmVmb3giLCJzaGltRWRnZSIsInNoaW1TYWZhcmkiLCJsb2dnaW5nIiwiY29tbW9uU2hpbSIsImJyb3dzZXJTaGltIiwiYWRhcHRlckZhY3RvcnkiLCJSZWFjdFJlZHV4Q29udGV4dCIsImdldEJhdGNoIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJzdG9yZSIsInBhcmVudFN1YiIsInVuc3Vic2NyaWJlIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsIl9wcm90byIsImFkZE5lc3RlZFN1YiIsInRyeVN1YnNjcmliZSIsInN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJvblN0YXRlQ2hhbmdlIiwiaXNTdWJzY3JpYmVkIiwiYmF0Y2giLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJFTVBUWV9BUlJBWSIsIk5PX1NVQlNDUklQVElPTl9BUlJBWSIsInN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciIsInVwZGF0ZUNvdW50IiwiaW5pdFN0YXRlVXBkYXRlcyIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmMiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiR3aXRoUmVmIiwid2l0aFJlZiIsIl9yZWYyJGZvcndhcmRSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJXcmFwcGVkQ29tcG9uZW50Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsIl91c2VNZW1vIiwiZm9yd2FyZGVkUmVmIiwid3JhcHBlclByb3BzIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiZGlkU3RvcmVDb21lRnJvbUNvbnRleHQiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJjcmVhdGVDaGlsZFNlbGVjdG9yIiwiX3VzZU1lbW8yIiwib3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSIsIl91c2VSZWR1Y2VyIiwicHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCIsImZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2giLCJsYXN0Q2hpbGRQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlIiwicmVuZGVySXNTY2hlZHVsZWQiLCJhY3R1YWxDaGlsZFByb3BzIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdDaGlsZFByb3BzIiwibGF0ZXN0U3RvcmVTdGF0ZSIsInJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCIsIkNvbm5lY3QiLCJmb3J3YXJkZWQiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImNvbXBvc2UiLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsIm1pZGRsZXdhcmUiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0IiwidXNlU3RvcmUiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJyZWZFcXVhbGl0eSIsIm5ld0JhdGNoIiwib3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nIiwiY3JlYXRlU2VsZWN0b3JIb29rIiwiRnVuY3Rpb25Ub1N0cmluZyIsInNldHVwT25jZSIsIkRFRkFVTFRfSUdOT1JFX0VSUk9SUyIsIkluYm91bmRGaWx0ZXJzIiwiX29wdGlvbnMiLCJodWIiLCJnZXRJbnRlZ3JhdGlvbiIsImNsaWVudCIsImdldENsaWVudCIsImNsaWVudE9wdGlvbnMiLCJnZXRPcHRpb25zIiwiX21lcmdlT3B0aW9ucyIsIl9zaG91bGREcm9wRXZlbnQiLCJfaXNTZW50cnlFcnJvciIsIl9pc0lnbm9yZWRFcnJvciIsIl9pc0JsYWNrbGlzdGVkVXJsIiwiX2dldEV2ZW50RmlsdGVyVXJsIiwiX2lzV2hpdGVsaXN0ZWRVcmwiLCJpZ25vcmVJbnRlcm5hbCIsImlnbm9yZUVycm9ycyIsIl9nZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXMiLCJibGFja2xpc3RVcmxzIiwid2hpdGVsaXN0VXJscyIsIl9iIiwiX2MiLCJzdGFja3RyYWNlIiwiZnJhbWVzXzEiLCJmcmFtZXMiLCJmaWxlbmFtZSIsImZyYW1lc18yIiwiX3N1cGVyIiwiU2VudHJ5RXJyb3IiLCJfbmV3VGFyZ2V0IiwiRFNOX1JFR0VYIiwiRHNuIiwiX2Zyb21TdHJpbmciLCJfZnJvbUNvbXBvbmVudHMiLCJfdmFsaWRhdGUiLCJ3aXRoUGFzc3dvcmQiLCJwYXNzIiwicHJvamVjdElkIiwiY29tcG9uZW50cyIsIkFQSSIsImRzbiIsIl9kc25PYmplY3QiLCJnZXREc24iLCJnZXRTdG9yZUVuZHBvaW50IiwiX2dldEJhc2VVcmwiLCJnZXRTdG9yZUVuZHBvaW50UGF0aCIsImdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgiLCJzZW50cnlfa2V5Iiwic2VudHJ5X3ZlcnNpb24iLCJnZXRSZXF1ZXN0SGVhZGVycyIsImNsaWVudE5hbWUiLCJjbGllbnRWZXJzaW9uIiwiZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQiLCJkaWFsb2dPcHRpb25zIiwiZW5kcG9pbnQiLCJlbmNvZGVkT3B0aW9ucyIsImluc3RhbGxlZEludGVncmF0aW9ucyIsInNldHVwSW50ZWdyYXRpb25zIiwiaW50ZWdyYXRpb25zIiwiZGVmYXVsdEludGVncmF0aW9ucyIsInVzZXJJbnRlZ3JhdGlvbnMiLCJ1c2VySW50ZWdyYXRpb25zTmFtZXNfMSIsInBpY2tlZEludGVncmF0aW9uc05hbWVzXzEiLCJkZWZhdWx0SW50ZWdyYXRpb24iLCJ1c2VySW50ZWdyYXRpb24iLCJpbnRlZ3JhdGlvbnNOYW1lcyIsImdldEludGVncmF0aW9uc1RvU2V0dXAiLCJpbnRlZ3JhdGlvbiIsInNldHVwSW50ZWdyYXRpb24iLCJTdGF0dXMiLCJCYXNlQ2xpZW50IiwiYmFja2VuZENsYXNzIiwiX2ludGVncmF0aW9ucyIsIl9wcm9jZXNzaW5nIiwiX2JhY2tlbmQiLCJfZHNuIiwiX2lzRW5hYmxlZCIsImNhcHR1cmVFeGNlcHRpb24iLCJldmVudElkIiwiX2dldEJhY2tlbmQiLCJldmVudEZyb21FeGNlcHRpb24iLCJfcHJvY2Vzc0V2ZW50IiwiZmluYWxFdmVudCIsImNhcHR1cmVNZXNzYWdlIiwiZXZlbnRGcm9tTWVzc2FnZSIsImNhcHR1cmVFdmVudCIsImZsdXNoIiwiX2lzQ2xpZW50UHJvY2Vzc2luZyIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbCIsImdldFRyYW5zcG9ydCIsInRyYW5zcG9ydEZsdXNoZWQiLCJyZWFkeSIsImdldEludGVncmF0aW9ucyIsInRpY2tlZCIsInNldEludGVydmFsIiwiX3ByZXBhcmVFdmVudCIsImVudmlyb25tZW50IiwiZGlzdCIsIm1heFZhbHVlTGVuZ3RoIiwicHJlcGFyZWQiLCJfYWRkSW50ZWdyYXRpb25zIiwic2RrIiwic2RrSW5mbyIsImludGVncmF0aW9uc0FycmF5IiwiYmVmb3JlU2VuZCIsInNhbXBsZVJhdGUiLCJfX3NlbnRyeV9fIiwic2VuZEV2ZW50IiwiYmVmb3JlU2VuZFJlc3VsdCIsIl9oYW5kbGVBc3luY0JlZm9yZVNlbmQiLCJvcmlnaW5hbEV4Y2VwdGlvbiIsInByb2Nlc3NlZEV2ZW50IiwiZnJvbUh0dHBDb2RlIiwiU3VjY2VzcyIsIlJhdGVMaW1pdCIsIkludmFsaWQiLCJGYWlsZWQiLCJVbmtub3duIiwiU2V2ZXJpdHkiLCJOb29wVHJhbnNwb3J0IiwiU2tpcHBlZCIsIkJhc2VCYWNrZW5kIiwiX3RyYW5zcG9ydCIsIl9zZXR1cFRyYW5zcG9ydCIsIl9leGNlcHRpb24iLCJfaGludCIsIl9tZXNzYWdlIiwic3VwcG9ydHNGZXRjaCIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJpc05hdGl2ZUZldGNoIiwic3VwcG9ydHNSZWZlcnJlclBvbGljeSIsInJlZmVycmVyUG9saWN5IiwiZnJvbVN0cmluZyIsIkRlYnVnIiwiSW5mbyIsIldhcm5pbmciLCJGYXRhbCIsIkNyaXRpY2FsIiwiTG9nIiwiVU5LTk9XTl9GVU5DVElPTiIsImdlY2tvIiwid2luanMiLCJnZWNrb0V2YWwiLCJjaHJvbWVFdmFsIiwiY29tcHV0ZVN0YWNrVHJhY2UiLCJleCIsInBvcFNpemUiLCJvcGVyYTEwUmVnZXgiLCJvcGVyYTExUmVnZXgiLCJjb2x1bW4iLCJleHRyYWN0TWVzc2FnZSIsImNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrdHJhY2VQcm9wIiwicG9wRnJhbWVzIiwic3VibWF0Y2giLCJpc05hdGl2ZSIsImNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcCIsIlNUQUNLVFJBQ0VfTElNSVQiLCJleGNlcHRpb25Gcm9tU3RhY2t0cmFjZSIsInByZXBhcmVGcmFtZXNGb3JFdmVudCIsImV2ZW50RnJvbVN0YWNrdHJhY2UiLCJsb2NhbFN0YWNrIiwiZmlyc3RGcmFtZUZ1bmN0aW9uIiwibGFzdEZyYW1lRnVuY3Rpb24iLCJmcmFtZSIsImZ1bmN0aW9uIiwiaW5fYXBwIiwibGluZW5vIiwiZXZlbnRGcm9tVW5rbm93bklucHV0Iiwic3ludGhldGljRXhjZXB0aW9uIiwiZG9tRXhjZXB0aW9uIiwibmFtZV8xIiwiZXZlbnRGcm9tU3RyaW5nIiwicmVqZWN0aW9uIiwiX19zZXJpYWxpemVkX18iLCJldmVudEZyb21QbGFpbk9iamVjdCIsInN5bnRoZXRpYyIsImF0dGFjaFN0YWNrdHJhY2UiLCJQcm9taXNlQnVmZmVyIiwiX2xpbWl0IiwiX2J1ZmZlciIsImlzUmVhZHkiLCJ0YXNrIiwiZHJhaW4iLCJjYXB0dXJlZFNldFRpbWVvdXQiLCJCYXNlVHJhbnNwb3J0IiwiRmV0Y2hUcmFuc3BvcnQiLCJfZGlzYWJsZWRVbnRpbCIsImRlZmF1bHRPcHRpb25zIiwiZmV0Y2giLCJYSFJUcmFuc3BvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsIkJyb3dzZXJCYWNrZW5kIiwidHJhbnNwb3J0T3B0aW9ucyIsInRyYW5zcG9ydCIsImhhbmRsZWQiLCJCcm93c2VyQ2xpZW50IiwicGxhdGZvcm0iLCJwYWNrYWdlcyIsInNob3dSZXBvcnREaWFsb2ciLCJzY3JpcHQiLCJvbmxvYWQiLCJoZWFkIiwiY2FsbE9uSHViIiwid2l0aFNjb3BlIiwiaWdub3JlT25FcnJvciIsInNob3VsZElnbm9yZU9uRXJyb3IiLCJpZ25vcmVOZXh0T25FcnJvciIsImJlZm9yZSIsIl9fc2VudHJ5X3dyYXBwZWRfXyIsInNlbnRyeVdyYXBwZWQiLCJ3cmFwcGVkQXJndW1lbnRzIiwiaGFuZGxlRXZlbnQiLCJsYXN0SHJlZiIsIlRyeUNhdGNoIiwiX2lnbm9yZU9uRXJyb3IiLCJfd3JhcFRpbWVGdW5jdGlvbiIsIm9yaWdpbmFsQ2FsbGJhY2siLCJfd3JhcFJBRiIsIl93cmFwRXZlbnRUYXJnZXQiLCJldmVudE5hbWUiLCJfd3JhcFhIUiIsIm9yaWdpbmFsU2VuZCIsInhociIsInhtbEh0dHBSZXF1ZXN0UHJvcHMiLCJ3cmFwT3B0aW9ucyIsImluc3RydW1lbnRlZCIsImluc3RydW1lbnQiLCJvcmlnaW5hbENvbnNvbGVMZXZlbCIsInRyaWdnZXJIYW5kbGVycyIsImluc3RydW1lbnRDb25zb2xlIiwiZG9tRXZlbnRIYW5kbGVyIiwia2V5cHJlc3NFdmVudEhhbmRsZXIiLCJpbm5lck9yaWdpbmFsIiwiaW5zdHJ1bWVudERPTSIsInhocnByb3RvIiwib3JpZ2luYWxPcGVuIiwiX19zZW50cnlfeGhyX18iLCJfX3NlbnRyeV9vd25fcmVxdWVzdF9fIiwiY29tbW9uSGFuZGxlckRhdGEiLCJzdGFydFRpbWVzdGFtcCIsIm9ucmVhZHlzdGF0ZWNoYW5nZUhhbmRsZXIiLCJzdGF0dXNfY29kZSIsImVuZFRpbWVzdGFtcCIsInJlYWR5U3RhdGVBcmdzIiwiaW5zdHJ1bWVudFhIUiIsImRvYyIsInNhbmRib3giLCJzdXBwb3J0c05hdGl2ZUZldGNoIiwib3JpZ2luYWxGZXRjaCIsImZldGNoRGF0YSIsImdldEZldGNoTWV0aG9kIiwiZ2V0RmV0Y2hVcmwiLCJpbnN0cnVtZW50RmV0Y2giLCJjaHJvbWUiLCJpc0Nocm9tZVBhY2thZ2VkQXBwIiwiYXBwIiwiaGFzSGlzdG9yeUFwaSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJvbGRPblBvcFN0YXRlIiwib25wb3BzdGF0ZSIsImhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uIiwib3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24iLCJpbnN0cnVtZW50SGlzdG9yeSIsImFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJlXzEiLCJlXzFfMSIsImZldGNoQXJncyIsImtleXByZXNzVGltZW91dCIsImxhc3RDYXB0dXJlZEV2ZW50IiwiZGVib3VuY2VEdXJhdGlvbiIsImRlYm91bmNlVGltZXIiLCJkZWJvdW5jZSIsImlzQ29udGVudEVkaXRhYmxlIiwiQnJlYWRjcnVtYnMiLCJkb20iLCJzZW50cnkiLCJfY29uc29sZUJyZWFkY3J1bWIiLCJoYW5kbGVyRGF0YSIsImNhdGVnb3J5IiwiX2RvbUJyZWFkY3J1bWIiLCJfeGhyQnJlYWRjcnVtYiIsImFkZFNlbnRyeUJyZWFkY3J1bWIiLCJfZmV0Y2hCcmVhZGNydW1iIiwiZmlsdGVyVXJsIiwiX2hpc3RvcnlCcmVhZGNydW1iIiwicGFyc2VkTG9jIiwicGFyc2VkRnJvbSIsInBhcnNlZFRvIiwic2VyaWFsaXplZERhdGEiLCJHbG9iYWxIYW5kbGVycyIsIl9nbG9iYWwiLCJfb2xkT25FcnJvckhhbmRsZXIiLCJfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyIiwiX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkIiwiX29uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlckluc3RhbGxlZCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwic3RhY2tUcmFjZUxpbWl0IiwiX2luc3RhbGxHbG9iYWxPbkVycm9ySGFuZGxlciIsIl9pbnN0YWxsR2xvYmFsT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyIiwibXNnIiwiY3VycmVudEh1YiIsImhhc0ludGVncmF0aW9uIiwiaXNGYWlsZWRPd25EZWxpdmVyeSIsIl9ldmVudEZyb21JbmNvbXBsZXRlT25FcnJvciIsIl9lbmhhbmNlRXZlbnRXaXRoSW5pdGlhbEZyYW1lIiwiX2V2ZW50RnJvbUluY29tcGxldGVSZWplY3Rpb24iLCJERUZBVUxUX0tFWSIsIkRFRkFVTFRfTElNSVQiLCJMaW5rZWRFcnJvcnMiLCJsaW1pdCIsIl9oYW5kbGVyIiwibGlua2VkRXJyb3JzIiwiX3dhbGtFcnJvclRyZWUiLCJVc2VyQWdlbnQiLCJORVdUQUIiLCJNSURETEVDTElDSyIsIl9Db21wb25lbnQiLCJPdXRib3VuZExpbmsiLCJldmVudExhYmVsIiwidHJhY2tlck5hbWVzIiwiZXZlbnRNZXRhIiwic2FtZVRhcmdldCIsIm5vcm1hbENsaWNrIiwidHJhY2tMaW5rIiwiaGFuZGxlQ2xpY2siLCJyZWwiLCJzbWFsbFdvcmRzIiwicmVkYWN0ZWQiLCJ0aXRsZUNhc2UiLCJtaWdodEJlRW1haWwiLCJnYUFkZHJlc3MiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdhQ2FsbHMiLCJjYWxscyIsImdhIiwicmVzZXRDYWxscyIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiX2lzTm90QnJvd3NlciIsIl9kZWJ1ZyIsIl90aXRsZUNhc2UiLCJfdGVzdE1vZGUiLCJfYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIiLCJfd2luZG93IiwiX2Zvcm1hdCIsIl9nYUNvbW1hbmQiLCJjb21tYW5kIiwiX2luaXRpYWxpemUiLCJnYVRyYWNraW5nSUQiLCJ1c2VFeGlzdGluZ0dhIiwiZ2FPcHRpb25zIiwiaW5pdGlhbGl6ZSIsImNvbmZpZ3NPclRyYWNraW5nSWQiLCJ0ZXN0TW9kZSIsInN0YW5kYXJkSW1wbGVtZW50YXRpb24iLCJsb2FkR0EiLCJhbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciIsInRyYWNraW5nSWQiLCJfbGVuMiIsIl9rZXkyIiwiZmllbGRzT2JqZWN0IiwiZmllbGRPYmplY3QiLCJwYWdldmlldyIsInJhd1BhdGgiLCJleHRyYUZpZWxkcyIsImhpdFR5cGUiLCJwYWdlIiwiZXh0cmFMb2ciLCJtb2RhbHZpZXciLCJyYXdNb2RhbE5hbWUiLCJtb2RhbE5hbWUiLCJ0aW1pbmciLCJ2YXJpYWJsZSIsInRpbWluZ0NhdGVnb3J5IiwidGltaW5nVmFyIiwidGltaW5nVmFsdWUiLCJ0aW1pbmdMYWJlbCIsIm5vbkludGVyYWN0aW9uIiwiZXZlbnRDYXRlZ29yeSIsImV2ZW50QWN0aW9uIiwiZXZlbnRWYWx1ZSIsImZhdGFsIiwiZXhEZXNjcmlwdGlvbiIsImV4RmF0YWwiLCJyYXdOYW1lIiwidHJhY2tlck5hbWUiLCJyZXF1aXJlU3RyaW5nIiwiZXhlY3V0ZSIsInBsdWdpbk5hbWUiLCJvdXRib3VuZExpbmsiLCJoaXRDYWxsYmFjayIsInNhZmV0eUNhbGxiYWNrQ2FsbGVkIiwicGx1Z2luIiwidGVzdE1vZGVBUEkiLCJvcmlnVHJhY2tMaW5rIiwiX2luaGVyaXRzTG9vc2UiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInVwIiwidmFsdWVFcXVhbCIsImFWYWx1ZSIsImJWYWx1ZSIsImlzUHJvZHVjdGlvbiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwiaXNFeGFjdCIsIkxpZmVjeWNsZSIsIm9uTW91bnQiLCJwcmV2UHJvcHMiLCJvblVubW91bnQiLCJjYWNoZSIsImNhY2hlTGltaXQiLCJjYWNoZUNvdW50IiwiY29tcGlsZVBhdGgiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJjYWNoZSQxIiwiY2FjaGVMaW1pdCQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwiU3dpdGNoIiwid2l0aFJvdXRlciIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsInJlc3QiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJfdHlwZW9mMiIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJ3cyIsIm1lc3NhZ2VIYW5kbGVycyIsImhhbmRsZU1lc3NhZ2UiLCJjb25uZWN0Iiwid3NVcmkiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbmNsb3NlIiwic2VuZEpTT04iLCJyZWdpc3Rlck1lc3NhZ2VIYW5kbGVyIiwicmVtb3ZlTWVzc2FnZUhhbmRsZXIiLCJuZXdIYW5kbGVycyIsIk5hdkJhciIsIm1hdGNoUmVjdiIsInN0eWxlcyIsImFsdCIsImxvZ28iLCJzbG9nYW4iLCJtZW51cyIsIm1lbnUiLCJDT01NT05fTUlNRV9UWVBFUyIsInRvRmlsZVdpdGhQYXRoIiwiZmlsZSIsImV4dCIsIndpdGhNaW1lVHlwZSIsIndlYmtpdFJlbGF0aXZlUGF0aCIsIkZJTEVTX1RPX0lHTk9SRSIsImZyb21FdmVudCIsImdldERhdGFUcmFuc2ZlckZpbGVzIiwiZ2V0SW5wdXRGaWxlcyIsImZpbGVzIiwiZnJvbUxpc3QiLCJkdCIsIml0ZW1zIiwidG9GaWxlUHJvbWlzZXMiLCJub0lnbm9yZWRGaWxlcyIsImZsYXR0ZW4iLCJ3ZWJraXRHZXRBc0VudHJ5IiwiZnJvbURhdGFUcmFuc2Zlckl0ZW0iLCJpc0RpcmVjdG9yeSIsImZyb21EaXJFbnRyeSIsImdldEFzRmlsZSIsImZ3cCIsImZyb21FbnRyeSIsImZyb21GaWxlRW50cnkiLCJyZWFkZXIiLCJjcmVhdGVSZWFkZXIiLCJyZWFkRW50cmllcyIsImVycl8xIiwiZnVsbFBhdGgiLCJmaWxlQWNjZXB0ZWQiLCJhY2NlcHQiLCJmaWxlTWF0Y2hTaXplIiwibWluU2l6ZSIsImlzRGVmaW5lZCIsImlzRXZ0V2l0aEZpbGVzIiwidHlwZXMiLCJvbkRvY3VtZW50RHJhZ092ZXIiLCJjb21wb3NlRXZlbnRIYW5kbGVycyIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2FyciIsIl9uIiwiX2QiLCJfcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJEcm9wem9uZSIsIl91c2VEcm9wem9uZSIsIl9yZWYyJGRpc2FibGVkIiwiX3JlZjIkZ2V0RmlsZXNGcm9tRXZlIiwiZ2V0RmlsZXNGcm9tRXZlbnQiLCJfcmVmMiRtYXhTaXplIiwiX3JlZjIkbWluU2l6ZSIsIl9yZWYyJG11bHRpcGxlIiwib25EcmFnRW50ZXIiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ092ZXIiLCJvbkRyb3AiLCJvbkRyb3BBY2NlcHRlZCIsIm9uRHJvcFJlamVjdGVkIiwib25GaWxlRGlhbG9nQ2FuY2VsIiwiX3JlZjIkcHJldmVudERyb3BPbkRvIiwicHJldmVudERyb3BPbkRvY3VtZW50IiwiX3JlZjIkbm9DbGljayIsIm5vQ2xpY2siLCJfcmVmMiRub0tleWJvYXJkIiwibm9LZXlib2FyZCIsIl9yZWYyJG5vRHJhZyIsIm5vRHJhZyIsIl9yZWYyJG5vRHJhZ0V2ZW50c0J1YiIsIm5vRHJhZ0V2ZW50c0J1YmJsaW5nIiwicm9vdFJlZiIsImlucHV0UmVmIiwiX3VzZVJlZHVjZXIyIiwiaW5pdGlhbFN0YXRlIiwiaXNGb2N1c2VkIiwiaXNGaWxlRGlhbG9nQWN0aXZlIiwiZHJhZ2dlZEZpbGVzIiwib3BlbkZpbGVEaWFsb2ciLCJjbGljayIsIm9uV2luZG93Rm9jdXMiLCJvbktleURvd25DYiIsImlzRXF1YWxOb2RlIiwib25Gb2N1c0NiIiwib25CbHVyQ2IiLCJvbkNsaWNrQ2IiLCJpc0llIiwiaXNFZGdlIiwiaXNJZU9yRWRnZSIsImRyYWdUYXJnZXRzUmVmIiwib25Eb2N1bWVudERyb3AiLCJvbkRyYWdFbnRlckNiIiwiaXNEcmFnQWN0aXZlIiwib25EcmFnT3ZlckNiIiwiZHJvcEVmZmVjdCIsIl91bnVzZWQiLCJvbkRyYWdMZWF2ZUNiIiwidGFyZ2V0cyIsIm9uRHJvcENiIiwiYWNjZXB0ZWRGaWxlcyIsInJlamVjdGVkRmlsZXMiLCJjb21wb3NlSGFuZGxlciIsImNvbXBvc2VLZXlib2FyZEhhbmRsZXIiLCJjb21wb3NlRHJhZ0hhbmRsZXIiLCJnZXRSb290UHJvcHMiLCJfcmVmMyRyZWZLZXkiLCJyZWZLZXkiLCJvbktleURvd24iLCJvbkZvY3VzIiwib25CbHVyIiwidGFiSW5kZXgiLCJvbklucHV0RWxlbWVudENsaWNrIiwiZ2V0SW5wdXRQcm9wcyIsIl9yZWY0IiwiX3JlZjQkcmVmS2V5Iiwib25DaGFuZ2UiLCJpbnB1dFByb3BzIiwiYXV0b0NvbXBsZXRlIiwiZmlsZUNvdW50IiwiaXNNdWx0aXBsZUFsbG93ZWQiLCJpc0RyYWdBY2NlcHQiLCJhbGxGaWxlc0FjY2VwdGVkIiwiaXNEcmFnUmVqZWN0IiwidXNlRHJvcHpvbmUiLCJJY29uIiwidG9vbHRpcCIsImljb24iLCJhcmlhLWxhYmVsIiwiY3giLCJjbGFzc05hbWVzQmluZCIsIkJ1dHRvbiIsIlN0ZXBzIiwic3RlcHMiLCJTdGVwIiwiaW5kZXhXcmFwcGVyIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJleGl0IiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwicmVwbGFjZUNsYXNzTmFtZSIsIm9yaWdDbGFzcyIsImNsYXNzVG9SZW1vdmUiLCJVTk1PVU5URUQiLCJFWElURUQiLCJFTlRFUklORyIsIkVOVEVSRUQiLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsImFwcGVhclN0YXR1cyIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJwcmV2U3RhdGUiLCJ1cGRhdGVTdGF0dXMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiYXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyZWQiLCJvbkVudGVyIiwib25FbnRlcmluZyIsIm9uVHJhbnNpdGlvbkVuZCIsIl90aGlzMyIsIm9uRXhpdCIsIm9uRXhpdGluZyIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsImNoaWxkUHJvcHMiLCJFWElUSU5HIiwiY2xhc3NMaXN0IiwiYmFzZVZhbCIsIkNTU1RyYW5zaXRpb24iLCJhcHBsaWVkQ2xhc3NlcyIsInJlbW92ZUNsYXNzZXMiLCJhZGRDbGFzcyIsImdldENsYXNzTmFtZXMiLCJpc1N0cmluZ0NsYXNzTmFtZXMiLCJiYXNlQ2xhc3NOYW1lIiwiZG9uZUNsYXNzTmFtZSIsInBoYXNlIiwiaGFzQ2xhc3MiLCJfYWRkQ2xhc3MiLCJfdGhpcyRhcHBsaWVkQ2xhc3NlcyQiLCJUT0FTVF9UWVBFUyIsIlRvYXN0IiwidG9hc3RzIiwibmV3SWQiLCJ1dWlkdjQiLCJ0b2FzdCIsImljb25OYW1lcyIsImNsYXNzTmFtZXNPZlRvYXN0VHlwZSIsImNvbnRhaW5lciIsInRvYXN0VHlwZSIsImljb25XcmFwcGVyIiwiY29udGVudCIsImRpdiIsInRvYXN0SW5zdGFuY2UiLCJSZWFjdERPTSIsIkZpbGVCb3giLCJyZW1vdmFibGUiLCJjdXJGaWxlSWQiLCJ1aWQiLCJkb3dubG9hZFVybCIsInBjdCIsImRvd25sb2FkSW5mbyIsImRvd25sb2FkIiwid2FpdGluZyIsImZpbGVSb3ciLCJmaWxlSWNvbiIsImZpbGVJbmZvIiwiZmlsZVNpemUiLCJwcmV0dHlCeXRlcyIsInJpZ2h0Iiwib25SZW1vdmVGaWxlIiwiY2xvc2VJY29uIiwiUGVlciIsInRhcmdldElkIiwid2FpdGluZ0NhbGxiYWNrIiwib25JY2VDYW5kaWRhdGUiLCJvbkRlc2NyaXB0aW9uIiwiY29ubmVjdFBlZXIiLCJvbkNvbm5lY3Rpb25TdGF0ZUNoYW5nZSIsIm9uUlRDTWVzc2FnZSIsIm9uQ2hhbm5lbE9wZW4iLCJvbkNoYW5uZWxDbG9zZSIsIm9uQnVmZmVyZWRBbW91bnRMb3ciLCJvblMyY1NpZ25hbCIsIm9uUzJjT3BlbiIsInNyY0lkIiwiY3JlYXRlUlRDQ29ubmVjdGlvbiIsImljZSIsImlzQ2FsbGVyIiwiY3JlZGVudGlhbCIsIm9uTmVnb3RpYXRpb25OZWVkZWQiLCJyZWxpYWJsZSIsInNldHVwRGF0YUNoYW5uZWwiLCJidWZmZXJlZEFtb3VudExvd1RocmVzaG9sZCIsImJpbmFyeVR5cGUiLCJvbkNoYW5uZWxFcnJvciIsIm9uYnVmZmVyZWRhbW91bnRsb3ciLCJidWZmZXJlZEFtb3VudCIsImVyck1zZyIsIkZpbGVDaHVua2VyIiwiRmlsZVJlYWRlciIsImNodW5rIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJjYWxjUGVyY2VudCIsInRvRml4ZWQiLCJkZWxldGVSZWN2Q29kZSIsInJlY3ZDb2RlIiwicHJlcGFyZVJlY3YiLCJTZW5kRmlsZVBhbmVsIiwicGVlciIsIm9uQ2hhbmdlRmlsZSIsIm9uQ2xpY2tTZWxlY3REb25lIiwib25DbGlja0JhY2siLCJvblJlc2V0Iiwic2VuZFNpemVzIiwiYnBzIiwidGltZXIiLCJjdXJTdGVwIiwicHJlcGFyZVNlbmQiLCJwZWVyU3RhdGUiLCJmaWxlSWQiLCJjaHVua2VyIiwicmVhbEZpbGUiLCJsYXN0T2Zmc2V0IiwiZ2V0TmV4dENodW5rIiwiZmlsdGVyZWRGaWxlcyIsIl9mMSIsImYxIiwibGFzdE1vZGlmaWVkIiwibmV4dEZpbGVzIiwidG90YWxCeXRlcyIsInN1bSIsImN1ciIsInVwbG9hZEFyZWEiLCJkcmFnQWN0aXZlIiwiaWNvblBsdXNXcmFwcGVyIiwiaWNvblBsdXMiLCJ1cGxvYWRUaXAiLCJ1cGxvYWRCdG4iLCJyZWN2R3VpZGUiLCJ1cGxvYWRNb3JlIiwiYWRkTW9yZSIsImZpbGVTdW1tYXJ5IiwiYnRuU2VsZWN0RmlsZURvbmUiLCJyZWN2TGluayIsInNlbGVjdFNlbmRNZXRob2QiLCJzZW5kTWV0aG9kMSIsInJlY3ZMaW5rQ29udGFpbmVyIiwiYnRuQ29weSIsInJlY3ZDb2RlQ29udGFpbmVyIiwicXJjb2RlQ29udGFpbmVyIiwiY29ubmVjdFRpcHMiLCJidG5XYWl0Q29ubmVjdCIsImJ0bkNvbnRlbnQiLCJhbGxDb21wbGV0ZWQiLCJidG5EaXNhYmxlZCIsInNlbmRpbmdCb3giLCJzZW5kaW5nU3VtbWFyeSIsImJ0blNlbmRpbmciLCJ0aXRsZVJvdyIsImJhY2siLCJyZW5kZXJTdGVwMSIsInJlbmRlclN0ZXAyIiwicmVuZGVyU3RlcDMiLCJJbnB1dCIsImNvbnRhaW5lckNsYXNzTmFtZSIsImlucHV0Q2xhc3NOYW1lIiwicmVhZE9ubHkiLCJwbGFjZWhvbGRlciIsImF1dG9DYXBpdGFsaXplIiwiZXJyb3JJY29uIiwib25DaGFuZ2VSZWN2Q29kZSIsIm9uUHJlcGFyZVJlY3YiLCJvblN0YXJ0UmVjdiIsIm9uUmVjdkRhdGEiLCJoYW5kbGVNc2ciLCJyZWN2QnVmZmVyIiwicmVjdlNpemVzIiwic3RhcnRlZCIsIm5ld1JlY3ZCeXRlcyIsIkJsb2IiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZWN2QnRuIiwidGlwIiwibXNnMSIsIm1zZzIiLCJDb250YWN0UGFuZWwiLCJjb250YWN0IiwiaGFuZGxlQ29udGFjdENoYW5nZSIsImhhbmRsZUNvbnRlbnRDaGFuZ2UiLCJoYW5kbGVTdWJtaXQiLCJwb3N0Iiwicm93cyIsInRleHRhcmVhIiwiYnRuIiwidGlwcyIsIlNsb2dhbkNhcmQiLCJjYXJkIiwidGl0bGVUZXh0IiwiSG9tZVBhZ2UiLCJzZXRTZW5kU3RhdGUiLCJzZXRSZWN2U3RhdGUiLCJvblMyY1ByZXBhcmVTZW5kIiwib25TMmNQcmVwYXJlUmVjdiIsImNsaWVudElkIiwiY2FyZHNBcmVhIiwiY2FyZFJvdyIsImljb25TaW1wbGUiLCJpY29uU2VjdXJlIiwiaWNvblNwZWVkIiwiaWNvbkNoZWNrIiwiQXBwIiwiUmVhY3RHQSIsImVycm9ySW5mbyIsIlNlbnRyeSIsInRleHRBbGlnbiIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiVVBEQVRFX1NFTkRfRklMRV9JTkZPIiwiVVBEQVRFX1JFQ1ZfRklMRV9JTkZPIiwiZmlsZVJlZHVjZXIiLCJyb290UmVkdWNlciIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImNvbWJpbmVSZWR1Y2VycyIsInNlbmRGaWxlIiwicmVjdkZpbGUiLCJjb21wb3NlRW5oYW5jZXJzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwid2luZG93XzEiLCJTRU5UUllfUkVMRUFTRSIsImNsaWVudENsYXNzIiwiYmluZENsaWVudCIsImluaXRBbmRCaW5kIiwiZ2V0RWxlbWVudEJ5SWQiLCJBUElfVkVSU0lPTiIsIkh1YiIsIl92ZXJzaW9uIiwiX3N0YWNrIiwiX2ludm9rZUNsaWVudCIsImdldFN0YWNrVG9wIiwiaXNPbGRlclRoYW4iLCJwdXNoU2NvcGUiLCJnZXRTdGFjayIsInBhcmVudFNjb3BlIiwicG9wU2NvcGUiLCJnZXRTY29wZSIsIl9sYXN0RXZlbnRJZCIsImZpbmFsSGludCIsImxhc3RFdmVudElkIiwiYmVmb3JlQnJlYWRjcnVtYiIsImZpbmFsQnJlYWRjcnVtYiIsImV4dHJhcyIsImNvbmZpZ3VyZVNjb3BlIiwib2xkSHViIiwibWFrZU1haW4iLCJzdGFydFNwYW4iLCJzcGFuT3JTcGFuQ29udGV4dCIsImZvcmNlTm9DaGlsZCIsIl9jYWxsRXh0ZW5zaW9uTWV0aG9kIiwidHJhY2VIZWFkZXJzIiwiY2FycmllciIsImdldE1haW5DYXJyaWVyIiwiZXh0ZW5zaW9ucyIsInJlZ2lzdHJ5IiwiZ2V0SHViRnJvbUNhcnJpZXIiLCJzZXRIdWJPbkNhcnJpZXIiLCJnZXRDdXJyZW50SHViIiwiaGFzSHViT25DYXJyaWVyIiwiYWN0aXZlRG9tYWluIiwicmVnaXN0cnlIdWJUb3BTdGFjayIsImdldEh1YkZyb21BY3RpdmVEb21haW4iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENB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Q0FBQyxjQUFjLGNBQWMsR0FBRyxDQUFDLE9BQU8sT0FBTyxHQUFHLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLFdBQVcsY0FBYyxHQUFHLENBQUMsVUFBVSxVQUM5ZSxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxPQUFPLE9BQU8sR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsUUFBUSxRQUFRLEdBQUcsQ0FBQyxVQUFVLFVBQVUsR0FBRyxDQUFDLFVBQVUsVUFBVSxHQUFHLENBQUMsV0FBVyxXQUFXLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsVUFBVSxVQUFVLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxnQkFBZ0IsZ0JBQWdCLEdBQUcsQ0FBQyxjQUFjLGNBQWMsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsYUFBYSxhQUFhLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFNBQVMsU0FBUyxHQUFHLENBQUMsU0FBUyxTQUFTLEdBQUcsQ0FBQyxjQUFjLGNBQ2xmLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLGFBQWEsYUFBYSxHQUFHLENBQUMsZUFBZSxlQUFlLEdBQUcsQ0FBQyxPQUFPLE9BQU8sR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsV0FBVyxXQUFXLEdBQUcsQ0FBQyxZQUFZLFlBQVksR0FBRyxDQUFDLFdBQVcsV0FBVyxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsY0FBYyxjQUFjLEdBQUcsQ0FBQyxhQUFhLGFBQWEsR0FBRyxDQUFDLGNBQWMsY0FBYyxHQUFHLENBQUMsU0FBUyxTQUFTLEdBQUcsQ0FBQyxTQUFTLFNBQVMsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsUUFBUSxRQUFR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QUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBR25CLENBQUMsRUFBRyxJQUFLLEtBQ1QsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFHbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFHbkIsQ0FBQyxFQUFHLElBQUssSUFDVCxDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUduQixDQUFDLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxJQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNuQixDQUFDLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUduQixDQUFDLEVBQUcsSUFBSyxLQUNULENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLElBR3BCLENBQUMsRUFBRyxJQUFLLElBQUssRUFBRyxJQUFLLEtBQ3RCLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ3BCLENBQUMsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLElBR3BCLENBQUMsRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLElBQ3JCLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLElBQ25CLENBQUMsR0FBSSxHQUFJLElBR1QsQ0FBQyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssSUFDckIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDbkIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxHQUFJLEdBQUksSUFDVCxDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUdwQixDQUFDLEVBQUcsSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN0QixDQUFDLEdBQUksR0FBSSxJQUNULENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ3BCLENBQUMsR0FBSSxHQUFJLElBR1QsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDckIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDckIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxHQUFJLElBQUssSUFBSyxFQUFHLElBQUssS0FDdkIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFHcEIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxFQUFHLElBQUssSUFBSyxHQUFJLElBQUssS0FDdkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxFQUFHLElBQUssSUFBSyxFQUFHLElBQUssS0FDdEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxFQUFHLElBQUssSUFBSyxHQUFJLElBQUssS0FDdkIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDckIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDckIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxHQUFJLElBQUssSUFBSyxFQUFHLElBQUssS0FDdkIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksSUFDcEIsQ0FBQyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFHckIsQ0FBQyxHQUFJLElBQUssS0FDVixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUdwQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEVBQUcsSUFBSyxJQUFLLEdBQUksSUFBSyxLQUN2QixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdwQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEVBQUcsSUFBSyxJQUFLLEdBQUksSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxJQUNwQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQixDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUdyQixDQUFDLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxLQUN2QixDQUFDLEdBQUksR0FBSSxHQUFJLEdB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QUNSLENBQUMsRUFBRyxHQUFJLElBQ1IsQ0FBQyxFQUFHLEdBQUksR0FBSSxJQUNaLENBQUMsRUFBRyxHQUFJLEdBQUksSUFDWixDQUFDLEVBQUcsR0FBSSxHQUFJLElBQ1osQ0FBQyxFQUFHLEdBQUksR0FBSSxJQUNaLENBQUMsRUFBRyxHQUFJLEdBQUksSUFDWixDQUFDLEVBQUcsR0FBSSxHQUFJLElBQ1osQ0FBQyxFQUFHLEdBQUksR0FBSSxJQUNaLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxJQUNoQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFDaEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEtBQ2hCLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxLQUNoQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksS0FDaEIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEtBQ2hCLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxLQUNoQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxLQUNwQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxLQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxLQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxLQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxLQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxLQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxLQUNyQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLEtBQzFCLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssS0FDMUIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLElBQUssSUFBSyxLQUMxQixDQUFDLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLEtBQzFCLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssS0FDMUIsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLElB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eUYsS0FPdkIsU0FBUzJpQyxFQUFnQkwsRUFBU3RpQyxHQUNyQyxRQUFLc2lDLElBR0xBLEVBQVE1MEgsV0FBYTQwSCxFQUFRNTBILFlBQWMsR0FDM0M0MEgsRUFBUTUwSCxXQUFXc3lGLElBQU1BLEdBQ2xCLE0iLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwNSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJiYXNlXCI6XCJfM3hSNnlGXCIsXCJ0aXRsZS1yb3dcIjpcIl8xUmd6MmxcIixcInRpdGxlUm93XCI6XCJfMVJnejJsXCIsXCJ0aXRsZVwiOlwiXzF4Z1IxdlwiLFwiYmFja1wiOlwiXzE2Y0pkdVwiLFwidXBsb2FkLWFyZWFcIjpcIl8zWi15Zm1cIixcInVwbG9hZEFyZWFcIjpcIl8zWi15Zm1cIixcImRyYWctYWN0aXZlXCI6XCJfMjlwdXQtXCIsXCJkcmFnQWN0aXZlXCI6XCJfMjlwdXQtXCIsXCJyZWN2LWd1aWRlXCI6XCJfMVhuRHZsXCIsXCJyZWN2R3VpZGVcIjpcIl8xWG5EdmxcIixcImljb24tcGx1cy13cmFwcGVyXCI6XCJfMk9iUEdxXCIsXCJpY29uUGx1c1dyYXBwZXJcIjpcIl8yT2JQR3FcIixcImljb24tcGx1c1wiOlwiXzNCZXhqc1wiLFwiaWNvblBsdXNcIjpcIl8zQmV4anNcIixcInVwbG9hZC10aXBcIjpcIl8xRlJTU1BcIixcInVwbG9hZFRpcFwiOlwiXzFGUlNTUFwiLFwidXBsb2FkLWJ0blwiOlwiVWE4bzZsXCIsXCJ1cGxvYWRCdG5cIjpcIlVhOG82bFwiLFwibGlua1wiOlwiSUxfNWFMXCIsXCJ1cGxvYWQtbW9yZVwiOlwiXzMxLU1KMVwiLFwidXBsb2FkTW9yZVwiOlwiXzMxLU1KMVwiLFwiYWRkLW1vcmVcIjpcIl8yT1ZSajlcIixcImFkZE1vcmVcIjpcIl8yT1ZSajlcIixcImZpbGUtc3VtbWFyeVwiOlwiXzNUaU1tdlwiLFwiZmlsZVN1bW1hcnlcIjpcIl8zVGlNbXZcIixcImJ0bi1zZWxlY3QtZmlsZS1kb25lXCI6XCJfM3pqTk5vXCIsXCJidG5TZWxlY3RGaWxlRG9uZVwiOlwiXzN6ak5Ob1wiLFwic2VsZWN0LXNlbmQtbWV0aG9kXCI6XCJfM2Q1VFNEXCIsXCJzZWxlY3RTZW5kTWV0aG9kXCI6XCJfM2Q1VFNEXCIsXCJyZWN2LWxpbmstY29udGFpbmVyXCI6XCJfMTlnaXhCXCIsXCJyZWN2TGlua0NvbnRhaW5lclwiOlwiXzE5Z2l4QlwiLFwicmVjdi1jb2RlLWNvbnRhaW5lclwiOlwiXzJxY3JHbFwiLFwicmVjdkNvZGVDb250YWluZXJcIjpcIl8ycWNyR2xcIixcInJlY3YtbGlua1wiOlwiXzJab2dnb1wiLFwicmVjdkxpbmtcIjpcIl8yWm9nZ29cIixcInJlY3YtY29kZVwiOlwiXzFTdU9lNFwiLFwicmVjdkNvZGVcIjpcIl8xU3VPZTRcIixcImJ0bi1jb3B5XCI6XCJfMjBSdG9WXCIsXCJidG5Db3B5XCI6XCJfMjBSdG9WXCIsXCJxcmNvZGUtY29udGFpbmVyXCI6XCJfMUxfWFotXCIsXCJxcmNvZGVDb250YWluZXJcIjpcIl8xTF9YWi1cIixcInJlY3YtcXJjb2RlXCI6XCJfMUlrUzBXXCIsXCJyZWN2UXJjb2RlXCI6XCJfMUlrUzBXXCIsXCJjb25uZWN0LXRpcHNcIjpcIl8zZEhPT1dcIixcImNvbm5lY3RUaXBzXCI6XCJfM2RIT09XXCIsXCJidG4td2FpdC1jb25uZWN0XCI6XCJfM2tTbUFHXCIsXCJidG5XYWl0Q29ubmVjdFwiOlwiXzNrU21BR1wiLFwic2VuZGluZy1ib3hcIjpcImxibjVYalwiLFwic2VuZGluZ0JveFwiOlwibGJuNVhqXCIsXCJzZW5kaW5nLXN1bW1hcnlcIjpcIlBKN2NUelwiLFwic2VuZGluZ1N1bW1hcnlcIjpcIlBKN2NUelwiLFwicGVlci1jb25uZWN0ZWRcIjpcIm5rVC1XSVwiLFwicGVlckNvbm5lY3RlZFwiOlwibmtULVdJXCIsXCJwZWVyLW5vdC1jb25uZWN0ZWRcIjpcIl81ZXctaVNcIixcInBlZXJOb3RDb25uZWN0ZWRcIjpcIl81ZXctaVNcIixcImJ0bi1zZW5kaW5nXCI6XCJfMl94OUhRXCIsXCJidG5TZW5kaW5nXCI6XCJfMl94OUhRXCJ9OyIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi9pcyc7XG5pbXBvcnQgeyBzbmlwTGluZSB9IGZyb20gJy4vc3RyaW5nJztcbi8qKlxuICogUmVxdWlyZXMgYSBtb2R1bGUgd2hpY2ggaXMgcHJvdGVjdGVkIF9hZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkeW5hbWljUmVxdWlyZShtb2QsIHJlcXVlc3QpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXVuc2FmZS1hbnlcbiAgICByZXR1cm4gbW9kLnJlcXVpcmUocmVxdWVzdCk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHdlJ3JlIGluIHRoZSBOb2RlLmpzIG9yIEJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gZ2l2ZW4gcXVlc3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUVudigpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzIDogMCkgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcbn1cbnZhciBmYWxsYmFja0dsb2JhbE9iamVjdCA9IHt9O1xuLyoqXG4gKiBTYWZlbHkgZ2V0IGdsb2JhbCBzY29wZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyBHbG9iYWwgc2NvcGUgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxPYmplY3QoKSB7XG4gICAgcmV0dXJuIChpc05vZGVFbnYoKVxuICAgICAgICA/IGdsb2JhbFxuICAgICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHdpbmRvd1xuICAgICAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICA/IHNlbGZcbiAgICAgICAgICAgICAgICA6IGZhbGxiYWNrR2xvYmFsT2JqZWN0KTtcbn1cbi8qKlxuICogVVVJRDQgZ2VuZXJhdG9yXG4gKlxuICogQHJldHVybnMgc3RyaW5nIEdlbmVyYXRlZCBVVUlENC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHV1aWQ0KCkge1xuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICB2YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG87XG4gICAgaWYgKCEoY3J5cHRvID09PSB2b2lkIDApICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgLy8gVXNlIHdpbmRvdy5jcnlwdG8gQVBJIGlmIGF2YWlsYWJsZVxuICAgICAgICB2YXIgYXJyID0gbmV3IFVpbnQxNkFycmF5KDgpO1xuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICAgIC8vIHNldCA0IGluIGJ5dGUgN1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxuICAgICAgICBhcnJbM10gPSAoYXJyWzNdICYgMHhmZmYpIHwgMHg0MDAwO1xuICAgICAgICAvLyBzZXQgMiBtb3N0IHNpZ25pZmljYW50IGJpdHMgb2YgYnl0ZSA5IHRvICcxMCdcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgICAgYXJyWzRdID0gKGFycls0XSAmIDB4M2ZmZikgfCAweDgwMDA7XG4gICAgICAgIHZhciBwYWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgICAgICB2YXIgdiA9IG51bS50b1N0cmluZygxNik7XG4gICAgICAgICAgICB3aGlsZSAodi5sZW5ndGggPCA0KSB7XG4gICAgICAgICAgICAgICAgdiA9IFwiMFwiICsgdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKHBhZChhcnJbMF0pICsgcGFkKGFyclsxXSkgKyBwYWQoYXJyWzJdKSArIHBhZChhcnJbM10pICsgcGFkKGFycls0XSkgKyBwYWQoYXJyWzVdKSArIHBhZChhcnJbNl0pICsgcGFkKGFycls3XSkpO1xuICAgIH1cbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvMjExNzUyMyMyMTE3NTIzXG4gICAgcmV0dXJuICd4eHh4eHh4eHh4eHg0eHh4eXh4eHh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxuICAgICAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMDtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgICAgdmFyIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG4vKipcbiAqIFBhcnNlcyBzdHJpbmcgZm9ybSBvZiBVUkwgaW50byBhbiBvYmplY3RcbiAqIC8vIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjYXBwZW5kaXgtQlxuICogLy8gaW50ZW50aW9uYWxseSB1c2luZyByZWdleCBhbmQgbm90IDxhLz4gaHJlZiBwYXJzaW5nIHRyaWNrIGJlY2F1c2UgUmVhY3QgTmF0aXZlIGFuZCBvdGhlclxuICogLy8gZW52aXJvbm1lbnRzIHdoZXJlIERPTSBtaWdodCBub3QgYmUgYXZhaWxhYmxlXG4gKiBAcmV0dXJucyBwYXJzZWQgVVJMIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVcmwodXJsKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSB1cmwubWF0Y2goL14oKFteOlxcLz8jXSspOik/KFxcL1xcLyhbXlxcLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLy8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xuICAgIHZhciBxdWVyeSA9IG1hdGNoWzZdIHx8ICcnO1xuICAgIHZhciBmcmFnbWVudCA9IG1hdGNoWzhdIHx8ICcnO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhvc3Q6IG1hdGNoWzRdLFxuICAgICAgICBwYXRoOiBtYXRjaFs1XSxcbiAgICAgICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgICAgICByZWxhdGl2ZTogbWF0Y2hbNV0gKyBxdWVyeSArIGZyYWdtZW50LFxuICAgIH07XG59XG4vKipcbiAqIEV4dHJhY3RzIGVpdGhlciBtZXNzYWdlIG9yIHR5cGUrdmFsdWUgZnJvbSBhbiBldmVudCB0aGF0IGNhbiBiZSB1c2VkIGZvciB1c2VyLWZhY2luZyBsb2dzXG4gKiBAcmV0dXJucyBldmVudCdzIGRlc2NyaXB0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50Lm1lc3NhZ2U7XG4gICAgfVxuICAgIGlmIChldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdKSB7XG4gICAgICAgIHZhciBleGNlcHRpb24gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdO1xuICAgICAgICBpZiAoZXhjZXB0aW9uLnR5cGUgJiYgZXhjZXB0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhjZXB0aW9uLnR5cGUgKyBcIjogXCIgKyBleGNlcHRpb24udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbi50eXBlIHx8IGV4Y2VwdGlvbi52YWx1ZSB8fCBldmVudC5ldmVudF9pZCB8fCAnPHVua25vd24+JztcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50LmV2ZW50X2lkIHx8ICc8dW5rbm93bj4nO1xufVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGxldmVscyA9IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2xvZycsICdhc3NlcnQnXTtcbiAgICBpZiAoISgnY29uc29sZScgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgdmFyIG9yaWdpbmFsQ29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICAgIHZhciB3cmFwcGVkTGV2ZWxzID0ge307XG4gICAgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcbiAgICBsZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKGxldmVsIGluIGdsb2JhbC5jb25zb2xlICYmIG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXykge1xuICAgICAgICAgICAgd3JhcHBlZExldmVsc1tsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVbbGV2ZWxdO1xuICAgICAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFBlcmZvcm0gY2FsbGJhY2sgbWFuaXB1bGF0aW9uc1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgT2JqZWN0LmtleXMod3JhcHBlZExldmVscykuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IHdyYXBwZWRMZXZlbHNbbGV2ZWxdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIHZhbHVlcywgdHlwZSBhbmQgdmFsdWUgdG8gYW4gc3ludGhldGljIEV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHZhbHVlIFZhbHVlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAcGFyYW0gdHlwZSBUeXBlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeGNlcHRpb25UeXBlVmFsdWUoZXZlbnQsIHZhbHVlLCB0eXBlKSB7XG4gICAgZXZlbnQuZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzIHx8IFtdO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udmFsdWUgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnZhbHVlIHx8IHZhbHVlIHx8ICcnO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSB8fCB0eXBlIHx8ICdFcnJvcic7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIG1lY2hhbmlzbSB0byBhIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBtb2RpZnkuXG4gKiBAcGFyYW0gbWVjaGFuaXNtIE1lY2hhbmlzbSBvZiB0aGUgbWVjaGFuaXNtLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCBtZWNoYW5pc20pIHtcbiAgICBpZiAobWVjaGFuaXNtID09PSB2b2lkIDApIHsgbWVjaGFuaXNtID0ge307IH1cbiAgICAvLyBUT0RPOiBVc2UgcmVhbCB0eXBlIHdpdGggYGtleW9mIE1lY2hhbmlzbWAgdGhpbmd5IGFuZCBtYXliZSBtYWtlIGl0IGJldHRlcj9cbiAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLm1lY2hhbmlzbSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0ubWVjaGFuaXNtIHx8IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhtZWNoYW5pc20pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc21ba2V5XSA9IG1lY2hhbmlzbVtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgIH1cbn1cbi8qKlxuICogQSBzYWZlIGZvcm0gb2YgbG9jYXRpb24uaHJlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgIH1cbiAgICBjYXRjaCAob08pIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBjaGlsZCBET00gZWxlbWVudCwgcmV0dXJucyBhIHF1ZXJ5LXNlbGVjdG9yIHN0YXRlbWVudCBkZXNjcmliaW5nIHRoYXRcbiAqIGFuZCBpdHMgYW5jZXN0b3JzXG4gKiBlLmcuIFtIVE1MRWxlbWVudF0gPT4gYm9keSA+IGRpdiA+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxUcmVlQXNTdHJpbmcoZWxlbSkge1xuICAgIC8vIHRyeS9jYXRjaCBib3RoOlxuICAgIC8vIC0gYWNjZXNzaW5nIGV2ZW50LnRhcmdldCAoc2VlIGdldHNlbnRyeS9yYXZlbi1qcyM4MzgsICM3NjgpXG4gICAgLy8gLSBgaHRtbFRyZWVBc1N0cmluZ2AgYmVjYXVzZSBpdCdzIGNvbXBsZXgsIGFuZCBqdXN0IGFjY2Vzc2luZyB0aGUgRE9NIGluY29ycmVjdGx5XG4gICAgLy8gLSBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy5cbiAgICB0cnkge1xuICAgICAgICB2YXIgY3VycmVudEVsZW0gPSBlbGVtO1xuICAgICAgICB2YXIgTUFYX1RSQVZFUlNFX0hFSUdIVCA9IDU7XG4gICAgICAgIHZhciBNQVhfT1VUUFVUX0xFTiA9IDgwO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xuICAgICAgICB2YXIgbGVuID0gMDtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcgPiAnO1xuICAgICAgICB2YXIgc2VwTGVuZ3RoID0gc2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgICAgdmFyIG5leHRTdHIgPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlIChjdXJyZW50RWxlbSAmJiBoZWlnaHQrKyA8IE1BWF9UUkFWRVJTRV9IRUlHSFQpIHtcbiAgICAgICAgICAgIG5leHRTdHIgPSBfaHRtbEVsZW1lbnRBc1N0cmluZyhjdXJyZW50RWxlbSk7XG4gICAgICAgICAgICAvLyBiYWlsIG91dCBpZlxuICAgICAgICAgICAgLy8gLSBuZXh0U3RyIGlzIHRoZSAnaHRtbCcgZWxlbWVudFxuICAgICAgICAgICAgLy8gLSB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdGhhdCB3b3VsZCBiZSBjcmVhdGVkIGV4Y2VlZHMgTUFYX09VVFBVVF9MRU5cbiAgICAgICAgICAgIC8vICAgKGlnbm9yZSB0aGlzIGxpbWl0IGlmIHdlIGFyZSBvbiB0aGUgZmlyc3QgaXRlcmF0aW9uKVxuICAgICAgICAgICAgaWYgKG5leHRTdHIgPT09ICdodG1sJyB8fCAoaGVpZ2h0ID4gMSAmJiBsZW4gKyBvdXQubGVuZ3RoICogc2VwTGVuZ3RoICsgbmV4dFN0ci5sZW5ndGggPj0gTUFYX09VVFBVVF9MRU4pKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQucHVzaChuZXh0U3RyKTtcbiAgICAgICAgICAgIGxlbiArPSBuZXh0U3RyLmxlbmd0aDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtID0gY3VycmVudEVsZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0LnJldmVyc2UoKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfVxuICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgcmV0dXJuICc8dW5rbm93bj4nO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHNpbXBsZSwgcXVlcnktc2VsZWN0b3IgcmVwcmVzZW50YXRpb24gb2YgYSBET00gZWxlbWVudFxuICogZS5nLiBbSFRNTEVsZW1lbnRdID0+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZnVuY3Rpb24gX2h0bWxFbGVtZW50QXNTdHJpbmcoZWwpIHtcbiAgICB2YXIgZWxlbSA9IGVsO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICB2YXIgY2xhc3NOYW1lO1xuICAgIHZhciBjbGFzc2VzO1xuICAgIHZhciBrZXk7XG4gICAgdmFyIGF0dHI7XG4gICAgdmFyIGk7XG4gICAgaWYgKCFlbGVtIHx8ICFlbGVtLnRhZ05hbWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBvdXQucHVzaChlbGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgaWYgKGVsZW0uaWQpIHtcbiAgICAgICAgb3V0LnB1c2goXCIjXCIgKyBlbGVtLmlkKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWU7XG4gICAgaWYgKGNsYXNzTmFtZSAmJiBpc1N0cmluZyhjbGFzc05hbWUpKSB7XG4gICAgICAgIGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoL1xccysvKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dC5wdXNoKFwiLlwiICsgY2xhc3Nlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGF0dHJXaGl0ZWxpc3QgPSBbJ3R5cGUnLCAnbmFtZScsICd0aXRsZScsICdhbHQnXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXR0cldoaXRlbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBhdHRyV2hpdGVsaXN0W2ldO1xuICAgICAgICBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgICAgIG91dC5wdXNoKFwiW1wiICsga2V5ICsgXCI9XFxcIlwiICsgYXR0ciArIFwiXFxcIl1cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dC5qb2luKCcnKTtcbn1cbi8qKlxuICogUmV0dXJucyBhIHRpbWVzdGFtcCBpbiBzZWNvbmRzIHdpdGggbWlsbGlzZWNvbmRzIHByZWNpc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVzdGFtcFdpdGhNcygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xufVxuLy8gaHR0cHM6Ly9zZW12ZXIub3JnLyNpcy10aGVyZS1hLXN1Z2dlc3RlZC1yZWd1bGFyLWV4cHJlc3Npb24tcmVnZXgtdG8tY2hlY2stYS1zZW12ZXItc3RyaW5nXG52YXIgU0VNVkVSX1JFR0VYUCA9IC9eKDB8WzEtOV1cXGQqKVxcLigwfFsxLTldXFxkKilcXC4oMHxbMS05XVxcZCopKD86LSgoPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikoPzpcXC4oPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikpKikpPyg/OlxcKyhbMC05YS16QS1aLV0rKD86XFwuWzAtOWEtekEtWi1dKykqKSk/JC87XG4vKipcbiAqIFBhcnNlcyBpbnB1dCBpbnRvIGEgU2VtVmVyIGludGVyZmFjZVxuICogQHBhcmFtIGlucHV0IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHNlbXZlciB2ZXJzaW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNlbXZlcihpbnB1dCkge1xuICAgIHZhciBtYXRjaCA9IGlucHV0Lm1hdGNoKFNFTVZFUl9SRUdFWFApIHx8IFtdO1xuICAgIHZhciBtYWpvciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgdmFyIG1pbm9yID0gcGFyc2VJbnQobWF0Y2hbMl0sIDEwKTtcbiAgICB2YXIgcGF0Y2ggPSBwYXJzZUludChtYXRjaFszXSwgMTApO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJ1aWxkbWV0YWRhdGE6IG1hdGNoWzVdLFxuICAgICAgICBtYWpvcjogaXNOYU4obWFqb3IpID8gdW5kZWZpbmVkIDogbWFqb3IsXG4gICAgICAgIG1pbm9yOiBpc05hTihtaW5vcikgPyB1bmRlZmluZWQgOiBtaW5vcixcbiAgICAgICAgcGF0Y2g6IGlzTmFOKHBhdGNoKSA/IHVuZGVmaW5lZCA6IHBhdGNoLFxuICAgICAgICBwcmVyZWxlYXNlOiBtYXRjaFs0XSxcbiAgICB9O1xufVxudmFyIGRlZmF1bHRSZXRyeUFmdGVyID0gNjAgKiAxMDAwOyAvLyA2MCBzZWNvbmRzXG4vKipcbiAqIEV4dHJhY3RzIFJldHJ5LUFmdGVyIHZhbHVlIGZyb20gdGhlIHJlcXVlc3QgaGVhZGVyIG9yIHJldHVybnMgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIG5vdyBjdXJyZW50IHVuaXggdGltZXN0YW1wXG4gKiBAcGFyYW0gaGVhZGVyIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiAnUmV0cnktQWZ0ZXInIGhlYWRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZXRyeUFmdGVySGVhZGVyKG5vdywgaGVhZGVyKSB7XG4gICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSZXRyeUFmdGVyO1xuICAgIH1cbiAgICB2YXIgaGVhZGVyRGVsYXkgPSBwYXJzZUludChcIlwiICsgaGVhZGVyLCAxMCk7XG4gICAgaWYgKCFpc05hTihoZWFkZXJEZWxheSkpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlckRlbGF5ICogMTAwMDtcbiAgICB9XG4gICAgdmFyIGhlYWRlckRhdGUgPSBEYXRlLnBhcnNlKFwiXCIgKyBoZWFkZXIpO1xuICAgIGlmICghaXNOYU4oaGVhZGVyRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlckRhdGUgLSBub3c7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0UmV0cnlBZnRlcjtcbn1cbnZhciBkZWZhdWx0RnVuY3Rpb25OYW1lID0gJzxhbm9ueW1vdXM+Jztcbi8qKlxuICogU2FmZWx5IGV4dHJhY3QgZnVuY3Rpb24gbmFtZSBmcm9tIGl0c2VsZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmbiB8fCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0RnVuY3Rpb25OYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5uYW1lIHx8IGRlZmF1bHRGdW5jdGlvbk5hbWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEp1c3QgYWNjZXNzaW5nIGN1c3RvbSBwcm9wcyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgICAgICAvLyBjYW4gY2F1c2UgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXhjZXB0aW9uIChzZWUgcmF2ZW4tanMjNDk1KS5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRGdW5jdGlvbk5hbWU7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFkZHMgY29udGV4dCAocHJlL3Bvc3QvbGluZSkgbGluZXMgdG8gdGhlIHByb3ZpZGVkIGZyYW1lXG4gKlxuICogQHBhcmFtIGxpbmVzIHN0cmluZ1tdIGNvbnRhaW5pbmcgYWxsIGxpbmVzXG4gKiBAcGFyYW0gZnJhbWUgU3RhY2tGcmFtZSB0aGF0IHdpbGwgYmUgbXV0YXRlZFxuICogQHBhcmFtIGxpbmVzT2ZDb250ZXh0IG51bWJlciBvZiBjb250ZXh0IGxpbmVzIHdlIHdhbnQgdG8gYWRkIHByZS9wb3N0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRDb250ZXh0VG9GcmFtZShsaW5lcywgZnJhbWUsIGxpbmVzT2ZDb250ZXh0KSB7XG4gICAgaWYgKGxpbmVzT2ZDb250ZXh0ID09PSB2b2lkIDApIHsgbGluZXNPZkNvbnRleHQgPSA1OyB9XG4gICAgdmFyIGxpbmVubyA9IGZyYW1lLmxpbmVubyB8fCAwO1xuICAgIHZhciBtYXhMaW5lcyA9IGxpbmVzLmxlbmd0aDtcbiAgICB2YXIgc291cmNlTGluZSA9IE1hdGgubWF4KE1hdGgubWluKG1heExpbmVzLCBsaW5lbm8gLSAxKSwgMCk7XG4gICAgZnJhbWUucHJlX2NvbnRleHQgPSBsaW5lc1xuICAgICAgICAuc2xpY2UoTWF0aC5tYXgoMCwgc291cmNlTGluZSAtIGxpbmVzT2ZDb250ZXh0KSwgc291cmNlTGluZSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAobGluZSkgeyByZXR1cm4gc25pcExpbmUobGluZSwgMCk7IH0pO1xuICAgIGZyYW1lLmNvbnRleHRfbGluZSA9IHNuaXBMaW5lKGxpbmVzW01hdGgubWluKG1heExpbmVzIC0gMSwgc291cmNlTGluZSldLCBmcmFtZS5jb2xubyB8fCAwKTtcbiAgICBmcmFtZS5wb3N0X2NvbnRleHQgPSBsaW5lc1xuICAgICAgICAuc2xpY2UoTWF0aC5taW4oc291cmNlTGluZSArIDEsIG1heExpbmVzKSwgc291cmNlTGluZSArIDEgKyBsaW5lc09mQ29udGV4dClcbiAgICAgICAgLm1hcChmdW5jdGlvbiAobGluZSkgeyByZXR1cm4gc25pcExpbmUobGluZSwgMCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiLCJpbXBvcnQgeyBpc0VsZW1lbnQsIGlzRXJyb3IsIGlzRXZlbnQsIGlzSW5zdGFuY2VPZiwgaXNQcmltaXRpdmUsIGlzU3ludGhldGljRXZlbnQgfSBmcm9tICcuL2lzJztcbmltcG9ydCB7IE1lbW8gfSBmcm9tICcuL21lbW8nO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25OYW1lLCBodG1sVHJlZUFzU3RyaW5nIH0gZnJvbSAnLi9taXNjJztcbmltcG9ydCB7IHRydW5jYXRlIH0gZnJvbSAnLi9zdHJpbmcnO1xuLyoqXG4gKiBXcmFwIGEgZ2l2ZW4gb2JqZWN0IG1ldGhvZCB3aXRoIGEgaGlnaGVyLW9yZGVyIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHNvdXJjZSBBbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG1ldGhvZCB0byBiZSB3cmFwcGVkLlxuICogQHBhcmFtIG5hbWUgQSBuYW1lIG9mIG1ldGhvZCB0byBiZSB3cmFwcGVkLlxuICogQHBhcmFtIHJlcGxhY2VtZW50IEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgdXNlZCB0byB3cmFwIGEgZ2l2ZW4gbWV0aG9kLlxuICogQHJldHVybnMgdm9pZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsbChzb3VyY2UsIG5hbWUsIHJlcGxhY2VtZW50KSB7XG4gICAgaWYgKCEobmFtZSBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG9yaWdpbmFsID0gc291cmNlW25hbWVdO1xuICAgIHZhciB3cmFwcGVkID0gcmVwbGFjZW1lbnQob3JpZ2luYWwpO1xuICAgIC8vIE1ha2Ugc3VyZSBpdCdzIGEgZnVuY3Rpb24gZmlyc3QsIGFzIHdlIG5lZWQgdG8gYXR0YWNoIGFuIGVtcHR5IHByb3RvdHlwZSBmb3IgYGRlZmluZVByb3BlcnRpZXNgIHRvIHdvcmtcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgdGhyb3cgXCJUeXBlRXJyb3I6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIGNhbGxlZCBvbiBub24tb2JqZWN0XCJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuICAgIGlmICh0eXBlb2Ygd3JhcHBlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd3JhcHBlZC5wcm90b3R5cGUgPSB3cmFwcGVkLnByb3RvdHlwZSB8fCB7fTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHdyYXBwZWQsIHtcbiAgICAgICAgICAgICAgICBfX3NlbnRyeV9vcmlnaW5hbF9fOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb3JpZ2luYWwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfT28pIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIHRocm93IGlmIG11bHRpcGxlIGZpbGwgaGFwcGVucyBvbiBhIGdsb2JhbCBvYmplY3QgbGlrZSBYTUxIdHRwUmVxdWVzdFxuICAgICAgICAgICAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjA0M1xuICAgICAgICB9XG4gICAgfVxuICAgIHNvdXJjZVtuYW1lXSA9IHdyYXBwZWQ7XG59XG4vKipcbiAqIEVuY29kZXMgZ2l2ZW4gb2JqZWN0IGludG8gdXJsLWZyaWVuZGx5IGZvcm1hdFxuICpcbiAqIEBwYXJhbSBvYmplY3QgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHJldHVybnMgc3RyaW5nIEVuY29kZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVybEVuY29kZShvYmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KVxuICAgICAgICAubWFwKFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChvYmplY3Rba2V5XSk7IH0pXG4gICAgICAgIC5qb2luKCcmJyk7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgYW55IG9iamVjdCBpbnRvIGFuIG9iamVjdCBsaXRlcmFsIHdpdGggYWxsIGl0J3MgYXR0cmlidXRlc1xuICogYXR0YWNoZWQgdG8gaXQuXG4gKlxuICogQHBhcmFtIHZhbHVlIEluaXRpYWwgc291cmNlIHRoYXQgd2UgaGF2ZSB0byB0cmFuc2Zvcm0gaW4gb3JkZXIgdG8gYmUgdXNhYmxlIGJ5IHRoZSBzZXJpYWxpemVyXG4gKi9cbmZ1bmN0aW9uIGdldFdhbGtTb3VyY2UodmFsdWUpIHtcbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdmFsdWU7XG4gICAgICAgIHZhciBlcnIgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgICAgICAgIHN0YWNrOiBlcnJvci5zdGFjayxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBlcnJvcikge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlcnJvciwgaSkpIHtcbiAgICAgICAgICAgICAgICBlcnJbaV0gPSBlcnJvcltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICBpZiAoaXNFdmVudCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGV2ZW50XzEgPSB2YWx1ZTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgICBzb3VyY2UudHlwZSA9IGV2ZW50XzEudHlwZTtcbiAgICAgICAgLy8gQWNjZXNzaW5nIGV2ZW50LnRhcmdldCBjYW4gdGhyb3cgKHNlZSBnZXRzZW50cnkvcmF2ZW4tanMjODM4LCAjNzY4KVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc291cmNlLnRhcmdldCA9IGlzRWxlbWVudChldmVudF8xLnRhcmdldClcbiAgICAgICAgICAgICAgICA/IGh0bWxUcmVlQXNTdHJpbmcoZXZlbnRfMS50YXJnZXQpXG4gICAgICAgICAgICAgICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXZlbnRfMS50YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgIHNvdXJjZS50YXJnZXQgPSAnPHVua25vd24+JztcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc291cmNlLmN1cnJlbnRUYXJnZXQgPSBpc0VsZW1lbnQoZXZlbnRfMS5jdXJyZW50VGFyZ2V0KVxuICAgICAgICAgICAgICAgID8gaHRtbFRyZWVBc1N0cmluZyhldmVudF8xLmN1cnJlbnRUYXJnZXQpXG4gICAgICAgICAgICAgICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXZlbnRfMS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICBzb3VyY2UuY3VycmVudFRhcmdldCA9ICc8dW5rbm93bj4nO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgICAgIGlmICh0eXBlb2YgQ3VzdG9tRXZlbnQgIT09ICd1bmRlZmluZWQnICYmIGlzSW5zdGFuY2VPZih2YWx1ZSwgQ3VzdG9tRXZlbnQpKSB7XG4gICAgICAgICAgICBzb3VyY2UuZGV0YWlsID0gZXZlbnRfMS5kZXRhaWw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSBpbiBldmVudF8xKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV2ZW50XzEsIGkpKSB7XG4gICAgICAgICAgICAgICAgc291cmNlW2ldID0gZXZlbnRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKiogQ2FsY3VsYXRlcyBieXRlcyBzaXplIG9mIGlucHV0IHN0cmluZyAqL1xuZnVuY3Rpb24gdXRmOExlbmd0aCh2YWx1ZSkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgcmV0dXJuIH4tZW5jb2RlVVJJKHZhbHVlKS5zcGxpdCgvJS4ufC4vKS5sZW5ndGg7XG59XG4vKiogQ2FsY3VsYXRlcyBieXRlcyBzaXplIG9mIGlucHV0IG9iamVjdCAqL1xuZnVuY3Rpb24ganNvblNpemUodmFsdWUpIHtcbiAgICByZXR1cm4gdXRmOExlbmd0aChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xufVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVG9TaXplKG9iamVjdCwgXG4vLyBEZWZhdWx0IE5vZGUuanMgUkVQTCBkZXB0aFxuZGVwdGgsIFxuLy8gMTAwa0IsIGFzIDIwMGtCIGlzIG1heCBwYXlsb2FkIHNpemUsIHNvIGhhbGYgc291bmRzIHJlYXNvbmFibGVcbm1heFNpemUpIHtcbiAgICBpZiAoZGVwdGggPT09IHZvaWQgMCkgeyBkZXB0aCA9IDM7IH1cbiAgICBpZiAobWF4U2l6ZSA9PT0gdm9pZCAwKSB7IG1heFNpemUgPSAxMDAgKiAxMDI0OyB9XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBub3JtYWxpemUob2JqZWN0LCBkZXB0aCk7XG4gICAgaWYgKGpzb25TaXplKHNlcmlhbGl6ZWQpID4gbWF4U2l6ZSkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplVG9TaXplKG9iamVjdCwgZGVwdGggLSAxLCBtYXhTaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59XG4vKiogVHJhbnNmb3JtcyBhbnkgaW5wdXQgdmFsdWUgaW50byBhIHN0cmluZyBmb3JtLCBlaXRoZXIgcHJpbWl0aXZlIHZhbHVlIG9yIGEgdHlwZSBvZiB0aGUgaW5wdXQgKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIC8vIE5vZGUuanMgUkVQTCBub3RhdGlvblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgIHJldHVybiAnW09iamVjdF0nO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICByZXR1cm4gJ1tBcnJheV0nO1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICByZXR1cm4gaXNQcmltaXRpdmUobm9ybWFsaXplZCkgPyBub3JtYWxpemVkIDogdHlwZTtcbn1cbi8qKlxuICogbm9ybWFsaXplVmFsdWUoKVxuICpcbiAqIFRha2VzIHVuc2VyaWFsaXphYmxlIGlucHV0IGFuZCBtYWtlIGl0IHNlcmlhbGl6YWJsZSBmcmllbmRseVxuICpcbiAqIC0gdHJhbnNsYXRlcyB1bmRlZmluZWQvTmFOIHZhbHVlcyB0byBcIlt1bmRlZmluZWRdXCIvXCJbTmFOXVwiIHJlc3BlY3RpdmVseSxcbiAqIC0gc2VyaWFsaXplcyBFcnJvciBvYmplY3RzXG4gKiAtIGZpbHRlciBnbG9iYWwgb2JqZWN0c1xuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y3ljbG9tYXRpYy1jb21wbGV4aXR5XG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGtleSA9PT0gJ2RvbWFpbicgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5fZXZlbnRzKSB7XG4gICAgICAgIHJldHVybiAnW0RvbWFpbl0nO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnZG9tYWluRW1pdHRlcicpIHtcbiAgICAgICAgcmV0dXJuICdbRG9tYWluRW1pdHRlcl0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgPT09IGdsb2JhbCkge1xuICAgICAgICByZXR1cm4gJ1tHbG9iYWxdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlID09PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuICdbV2luZG93XSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlID09PSBkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gJ1tEb2N1bWVudF0nO1xuICAgIH1cbiAgICAvLyBSZWFjdCdzIFN5bnRoZXRpY0V2ZW50IHRoaW5neVxuICAgIGlmIChpc1N5bnRoZXRpY0V2ZW50KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ1tTeW50aGV0aWNFdmVudF0nO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdGF1dG9sb2d5LWV4cHJlc3Npb25cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICdbTmFOXSc7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiAnW3VuZGVmaW5lZF0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBcIltGdW5jdGlvbjogXCIgKyBnZXRGdW5jdGlvbk5hbWUodmFsdWUpICsgXCJdXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogV2Fsa3MgYW4gb2JqZWN0IHRvIHBlcmZvcm0gYSBub3JtYWxpemF0aW9uIG9uIGl0XG4gKlxuICogQHBhcmFtIGtleSBvZiBvYmplY3QgdGhhdCdzIHdhbGtlZCBpbiBjdXJyZW50IGl0ZXJhdGlvblxuICogQHBhcmFtIHZhbHVlIG9iamVjdCB0byBiZSB3YWxrZWRcbiAqIEBwYXJhbSBkZXB0aCBPcHRpb25hbCBudW1iZXIgaW5kaWNhdGluZyBob3cgZGVlcCBzaG91bGQgd2Fsa2luZyBiZSBwZXJmb3JtZWRcbiAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsIE1lbW8gY2xhc3MgaGFuZGxpbmcgZGVjeWNsaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWxrKGtleSwgdmFsdWUsIGRlcHRoLCBtZW1vKSB7XG4gICAgaWYgKGRlcHRoID09PSB2b2lkIDApIHsgZGVwdGggPSArSW5maW5pdHk7IH1cbiAgICBpZiAobWVtbyA9PT0gdm9pZCAwKSB7IG1lbW8gPSBuZXcgTWVtbygpOyB9XG4gICAgLy8gSWYgd2UgcmVhY2ggdGhlIG1heGltdW0gZGVwdGgsIHNlcmlhbGl6ZSB3aGF0ZXZlciBoYXMgbGVmdFxuICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICAvLyBJZiB2YWx1ZSBpbXBsZW1lbnRzIGB0b0pTT05gIG1ldGhvZCwgY2FsbCBpdCBhbmQgcmV0dXJuIGVhcmx5XG4gICAgLy8gdHNsaW50OmRpc2FibGU6bm8tdW5zYWZlLWFueVxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvSlNPTigpO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZW5hYmxlOm5vLXVuc2FmZS1hbnlcbiAgICAvLyBJZiBub3JtYWxpemVkIHZhbHVlIGlzIGEgcHJpbWl0aXZlLCB0aGVyZSBhcmUgbm8gYnJhbmNoZXMgbGVmdCB0byB3YWxrLCBzbyB3ZSBjYW4ganVzdCBiYWlsIG91dCwgYXMgdGhlcmVzIG5vIHBvaW50IGluIGdvaW5nIGRvd24gdGhhdCBicmFuY2ggYW55IGZ1cnRoZXJcbiAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlLCBrZXkpO1xuICAgIGlmIChpc1ByaW1pdGl2ZShub3JtYWxpemVkKSkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHNvdXJjZSB0aGF0IHdlIHdpbGwgdXNlIGZvciBuZXh0IGl0dGVyYXRpb25zLCBlaXRoZXIgb2JqZWN0aWZpZWQgZXJyb3Igb2JqZWN0IChFcnJvciB0eXBlIHdpdGggZXh0cmFjdGVkIGtleXM6dmFsdWUgcGFpcnMpIG9yIHRoZSBpbnB1dCBpdHNlbGZcbiAgICB2YXIgc291cmNlID0gZ2V0V2Fsa1NvdXJjZSh2YWx1ZSk7XG4gICAgLy8gQ3JlYXRlIGFuIGFjY3VtdWxhdG9yIHRoYXQgd2lsbCBhY3QgYXMgYSBwYXJlbnQgZm9yIGFsbCBmdXR1cmUgaXR0ZXJhdGlvbnMgb2YgdGhhdCBicmFuY2hcbiAgICB2YXIgYWNjID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9O1xuICAgIC8vIElmIHdlIGFscmVhZHkgd2Fsa2VkIHRoYXQgYnJhbmNoLCBiYWlsIG91dCwgYXMgaXQncyBjaXJjdWxhciByZWZlcmVuY2VcbiAgICBpZiAobWVtby5tZW1vaXplKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ1tDaXJjdWxhciB+XSc7XG4gICAgfVxuICAgIC8vIFdhbGsgYWxsIGtleXMgb2YgdGhlIHNvdXJjZVxuICAgIGZvciAodmFyIGlubmVyS2V5IGluIHNvdXJjZSkge1xuICAgICAgICAvLyBBdm9pZCBpdGVyYXRpbmcgb3ZlciBmaWVsZHMgaW4gdGhlIHByb3RvdHlwZSBpZiB0aGV5J3ZlIHNvbWVob3cgYmVlbiBleHBvc2VkIHRvIGVudW1lcmF0aW9uLlxuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGlubmVyS2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgd2FsayB0aHJvdWdoIGFsbCB0aGUgY2hpbGQgbm9kZXNcbiAgICAgICAgYWNjW2lubmVyS2V5XSA9IHdhbGsoaW5uZXJLZXksIHNvdXJjZVtpbm5lcktleV0sIGRlcHRoIC0gMSwgbWVtbyk7XG4gICAgfVxuICAgIC8vIE9uY2Ugd2Fsa2VkIHRocm91Z2ggYWxsIHRoZSBicmFuY2hlcywgcmVtb3ZlIHRoZSBwYXJlbnQgZnJvbSBtZW1vIHN0b3JhZ2VcbiAgICBtZW1vLnVubWVtb2l6ZSh2YWx1ZSk7XG4gICAgLy8gUmV0dXJuIGFjY3VtdWxhdGVkIHZhbHVlc1xuICAgIHJldHVybiBhY2M7XG59XG4vKipcbiAqIG5vcm1hbGl6ZSgpXG4gKlxuICogLSBDcmVhdGVzIGEgY29weSB0byBwcmV2ZW50IG9yaWdpbmFsIGlucHV0IG11dGF0aW9uXG4gKiAtIFNraXAgbm9uLWVudW1lcmFibGVyc1xuICogLSBDYWxscyBgdG9KU09OYCBpZiBpbXBsZW1lbnRlZFxuICogLSBSZW1vdmVzIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAqIC0gVHJhbnNsYXRlcyBub24tc2VyaWFsaXplYWJsZSB2YWx1ZXMgKHVuZGVmaW5lZC9OYU4vRnVuY3Rpb25zKSB0byBzZXJpYWxpemFibGUgZm9ybWF0XG4gKiAtIFRyYW5zbGF0ZXMga25vd24gZ2xvYmFsIG9iamVjdHMvQ2xhc3NlcyB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbnNcbiAqIC0gVGFrZXMgY2FyZSBvZiBFcnJvciBvYmplY3RzIHNlcmlhbGl6YXRpb25cbiAqIC0gT3B0aW9uYWxseSBsaW1pdCBkZXB0aCBvZiBmaW5hbCBvdXRwdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShpbnB1dCwgZGVwdGgpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbnB1dCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsgcmV0dXJuIHdhbGsoa2V5LCB2YWx1ZSwgZGVwdGgpOyB9KSk7XG4gICAgfVxuICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgcmV0dXJuICcqKm5vbi1zZXJpYWxpemFibGUqKic7XG4gICAgfVxufVxuLyoqXG4gKiBHaXZlbiBhbnkgY2FwdHVyZWQgZXhjZXB0aW9uLCBleHRyYWN0IGl0cyBrZXlzIGFuZCBjcmVhdGUgYSBzb3J0ZWRcbiAqIGFuZCB0cnVuY2F0ZWQgbGlzdCB0aGF0IHdpbGwgYmUgdXNlZCBpbnNpZGUgdGhlIGV2ZW50IG1lc3NhZ2UuXG4gKiBlZy4gYE5vbi1lcnJvciBleGNlcHRpb24gY2FwdHVyZWQgd2l0aCBrZXlzOiBmb28sIGJhciwgYmF6YFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlKGV4Y2VwdGlvbiwgbWF4TGVuZ3RoKSB7XG4gICAgaWYgKG1heExlbmd0aCA9PT0gdm9pZCAwKSB7IG1heExlbmd0aCA9IDQwOyB9XG4gICAgLy8gdHNsaW50OmRpc2FibGU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZ2V0V2Fsa1NvdXJjZShleGNlcHRpb24pKTtcbiAgICBrZXlzLnNvcnQoKTtcbiAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAnW29iamVjdCBoYXMgbm8ga2V5c10nO1xuICAgIH1cbiAgICBpZiAoa2V5c1swXS5sZW5ndGggPj0gbWF4TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVuY2F0ZShrZXlzWzBdLCBtYXhMZW5ndGgpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpbmNsdWRlZEtleXMgPSBrZXlzLmxlbmd0aDsgaW5jbHVkZWRLZXlzID4gMDsgaW5jbHVkZWRLZXlzLS0pIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBrZXlzLnNsaWNlKDAsIGluY2x1ZGVkS2V5cykuam9pbignLCAnKTtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWQubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jbHVkZWRLZXlzID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydW5jYXRlKHNlcmlhbGl6ZWQsIG1heExlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIvKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBvbmUgb2YgYSBmZXcgRXJyb3Igb3IgRXJyb3ItbGlrZVxuICoge0BsaW5rIGlzRXJyb3J9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcih3YXQpIHtcbiAgICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpKSB7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRXJyb3JdJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdbb2JqZWN0IEV4Y2VwdGlvbl0nOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRE9NRXhjZXB0aW9uXSc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBpc0luc3RhbmNlT2Yod2F0LCBFcnJvcik7XG4gICAgfVxufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgRXJyb3JFdmVudFxuICoge0BsaW5rIGlzRXJyb3JFdmVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yRXZlbnQod2F0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpID09PSAnW29iamVjdCBFcnJvckV2ZW50XSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBET01FcnJvclxuICoge0BsaW5rIGlzRE9NRXJyb3J9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNET01FcnJvcih3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IERPTUVycm9yXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBET01FeGNlcHRpb25cbiAqIHtAbGluayBpc0RPTUV4Y2VwdGlvbn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RPTUV4Y2VwdGlvbih3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYSBzdHJpbmdcbiAqIHtAbGluayBpc1N0cmluZ30uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIGlzIGEgcHJpbWl0aXZlICh1bmRlZmluZWQsIG51bGwsIG51bWJlciwgYm9vbGVhbiwgc3RyaW5nKVxuICoge0BsaW5rIGlzUHJpbWl0aXZlfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHdhdCkge1xuICAgIHJldHVybiB3YXQgPT09IG51bGwgfHwgKHR5cGVvZiB3YXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB3YXQgIT09ICdmdW5jdGlvbicpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHtAbGluayBpc1BsYWluT2JqZWN0fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qod2F0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIEV2ZW50IGluc3RhbmNlXG4gKiB7QGxpbmsgaXNFdmVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0V2ZW50KHdhdCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgcmV0dXJuIHR5cGVvZiBFdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNJbnN0YW5jZU9mKHdhdCwgRXZlbnQpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gRWxlbWVudCBpbnN0YW5jZVxuICoge0BsaW5rIGlzRWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQod2F0KSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC10eXBlLXByZWRpY2F0ZXNcbiAgICByZXR1cm4gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGlzSW5zdGFuY2VPZih3YXQsIEVsZW1lbnQpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gcmVnZXhwXG4gKiB7QGxpbmsgaXNSZWdFeHB9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZWdFeHAod2F0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUgaGFzIGEgdGhlbiBmdW5jdGlvbi5cbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUaGVuYWJsZSh3YXQpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnNhZmUtYW55XG4gICAgcmV0dXJuIEJvb2xlYW4od2F0ICYmIHdhdC50aGVuICYmIHR5cGVvZiB3YXQudGhlbiA9PT0gJ2Z1bmN0aW9uJyk7XG4gICAgLy8gdHNsaW50OmVuYWJsZTpuby11bnNhZmUtYW55XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhIFN5bnRoZXRpY0V2ZW50XG4gKiB7QGxpbmsgaXNTeW50aGV0aWNFdmVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N5bnRoZXRpY0V2ZW50KHdhdCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3Qod2F0KSAmJiAnbmF0aXZlRXZlbnQnIGluIHdhdCAmJiAncHJldmVudERlZmF1bHQnIGluIHdhdCAmJiAnc3RvcFByb3BhZ2F0aW9uJyBpbiB3YXQ7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBpbnN0YW5jZSBvZiBwcm92aWRlZCBjb25zdHJ1Y3Rvci5cbiAqIHtAbGluayBpc0luc3RhbmNlT2Z9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHBhcmFtIGJhc2UgQSBjb25zdHJ1Y3RvciB0byBiZSB1c2VkIGluIGEgY2hlY2suXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0luc3RhbmNlT2Yod2F0LCBiYXNlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbiAgICAgICAgcmV0dXJuIHdhdCBpbnN0YW5jZW9mIGJhc2U7XG4gICAgfVxuICAgIGNhdGNoIChfZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBlcXVhbCB0byBtZXJnZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJlaW5nIHRoYXQgbm8gcmVmZXJlbmNlXG4gKiB0byBvcmlnaW5hbCBvYmplY3RzIGlzIGtlcHQuXG4gKlxuICogQHNlZSBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGRlZXBNZXJnZTogZGVlcE1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjb250YWluZXJcIjpcIl8xcU96cWZcIixcImZpbGUtcm93XCI6XCJfM2FvRTBZXCIsXCJmaWxlUm93XCI6XCJfM2FvRTBZXCIsXCJsZWZ0XCI6XCJfM3hMVE5CXCIsXCJmaWxlLWljb25cIjpcIl8xOS16N1NcIixcImZpbGVJY29uXCI6XCJfMTktejdTXCIsXCJmaWxlLWluZm9cIjpcIl8xSFJxaTFcIixcImZpbGVJbmZvXCI6XCJfMUhScWkxXCIsXCJmaWxlLW5hbWVcIjpcImFkWkVnQVwiLFwiZmlsZU5hbWVcIjpcImFkWkVnQVwiLFwiZmlsZS1zaXplXCI6XCJWcVZqV3FcIixcImZpbGVTaXplXCI6XCJWcVZqV3FcIixcImNsb3NlLWljb25cIjpcIl8zeDNUV1FcIixcImNsb3NlSWNvblwiOlwiXzN4M1RXUVwiLFwid2FpdGluZ1wiOlwiXzFMbkZPVFwiLFwiZG93bmxvYWRcIjpcIl8yV0pTdEVcIixcImNvbXBsZXRlZFwiOlwiXzF1OXFUQlwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYmFzZVwiOlwiXzFuSzUzLVwiLFwibG9nb1wiOlwiXzNqdFR5M1wiLFwic2xvZ2FuXCI6XCJheTFlSU1cIixcIm1lbnVzXCI6XCJfM2J6WWp5XCIsXCJtZW51XCI6XCJfMW5YMnRXXCIsXCJhY3RpdmVcIjpcIl8xeDhsZ0ZcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImJhc2VcIjpcIl84YmwtcWVcIixcInRpdGxlLXJvd1wiOlwiXzNBc0ExWVwiLFwidGl0bGVSb3dcIjpcIl8zQXNBMVlcIixcInRpdGxlXCI6XCJNUW03enlcIixcImNhbmNlbFwiOlwiXzJNeDlhNFwiLFwiaW5wdXRcIjpcIl8yaVR0T1FcIixcInJlY3YtYnRuXCI6XCJfM1dUYjQ5XCIsXCJyZWN2QnRuXCI6XCJfM1dUYjQ5XCIsXCJ0aXBcIjpcInpxTWFEZ1wiLFwibXNnMVwiOlwiXzNEbUplalwiLFwibXNnMlwiOlwidUJhWjJJXCIsXCJwZWVyLWNvbm5lY3RlZFwiOlwiaVZJV245XCIsXCJwZWVyQ29ubmVjdGVkXCI6XCJpVklXbjlcIixcInBlZXItbm90LWNvbm5lY3RlZFwiOlwiXzJlRnQtUlwiLFwicGVlck5vdENvbm5lY3RlZFwiOlwiXzJlRnQtUlwifTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImNvbnRhaW5lclwiOlwiXzJMVXNkRFwiLFwiY29udGVudFwiOlwiXzJLTWtha1wiLFwiY2FyZHMtYXJlYVwiOlwiSVNjTTBTXCIsXCJjYXJkc0FyZWFcIjpcIklTY00wU1wiLFwiY2FyZC1yb3dcIjpcIl8yMk9PWGdcIixcImNhcmRSb3dcIjpcIl8yMk9PWGdcIixcImljb24tc2ltcGxlXCI6XCJfMmVrTFhSXCIsXCJpY29uU2ltcGxlXCI6XCJfMmVrTFhSXCIsXCJpY29uLXNlY3VyZVwiOlwiXzFmWnhieVwiLFwiaWNvblNlY3VyZVwiOlwiXzFmWnhieVwiLFwiaWNvbi1zcGVlZFwiOlwiXzNqVEdtOFwiLFwiaWNvblNwZWVkXCI6XCJfM2pUR204XCIsXCJpY29uLWNoZWNrXCI6XCJfMzBOR3dTXCIsXCJpY29uQ2hlY2tcIjpcIl8zME5Hd1NcIn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBCWVRFX1VOSVRTID0gW1xuXHQnQicsXG5cdCdrQicsXG5cdCdNQicsXG5cdCdHQicsXG5cdCdUQicsXG5cdCdQQicsXG5cdCdFQicsXG5cdCdaQicsXG5cdCdZQidcbl07XG5cbmNvbnN0IEJJVF9VTklUUyA9IFtcblx0J2InLFxuXHQna2JpdCcsXG5cdCdNYml0Jyxcblx0J0diaXQnLFxuXHQnVGJpdCcsXG5cdCdQYml0Jyxcblx0J0ViaXQnLFxuXHQnWmJpdCcsXG5cdCdZYml0J1xuXTtcblxuLypcbkZvcm1hdHMgdGhlIGdpdmVuIG51bWJlciB1c2luZyBgTnVtYmVyI3RvTG9jYWxlU3RyaW5nYC5cbi0gSWYgbG9jYWxlIGlzIGEgc3RyaW5nLCB0aGUgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gYmUgYSBsb2NhbGUta2V5IChmb3IgZXhhbXBsZTogYGRlYCkuXG4tIElmIGxvY2FsZSBpcyB0cnVlLCB0aGUgc3lzdGVtIGRlZmF1bHQgbG9jYWxlIGlzIHVzZWQgZm9yIHRyYW5zbGF0aW9uLlxuLSBJZiBubyB2YWx1ZSBmb3IgbG9jYWxlIGlzIHNwZWNpZmllZCwgdGhlIG51bWJlciBpcyByZXR1cm5lZCB1bm1vZGlmaWVkLlxuKi9cbmNvbnN0IHRvTG9jYWxlU3RyaW5nID0gKG51bWJlciwgbG9jYWxlKSA9PiB7XG5cdGxldCByZXN1bHQgPSBudW1iZXI7XG5cdGlmICh0eXBlb2YgbG9jYWxlID09PSAnc3RyaW5nJykge1xuXHRcdHJlc3VsdCA9IG51bWJlci50b0xvY2FsZVN0cmluZyhsb2NhbGUpO1xuXHR9IGVsc2UgaWYgKGxvY2FsZSA9PT0gdHJ1ZSkge1xuXHRcdHJlc3VsdCA9IG51bWJlci50b0xvY2FsZVN0cmluZygpO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKG51bWJlciwgb3B0aW9ucykgPT4ge1xuXHRpZiAoIU51bWJlci5pc0Zpbml0ZShudW1iZXIpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBmaW5pdGUgbnVtYmVyLCBnb3QgJHt0eXBlb2YgbnVtYmVyfTogJHtudW1iZXJ9YCk7XG5cdH1cblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7Yml0czogZmFsc2V9LCBvcHRpb25zKTtcblx0Y29uc3QgVU5JVFMgPSBvcHRpb25zLmJpdHMgPyBCSVRfVU5JVFMgOiBCWVRFX1VOSVRTO1xuXG5cdGlmIChvcHRpb25zLnNpZ25lZCAmJiBudW1iZXIgPT09IDApIHtcblx0XHRyZXR1cm4gJyAwICcgKyBVTklUU1swXTtcblx0fVxuXG5cdGNvbnN0IGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwO1xuXHRjb25zdCBwcmVmaXggPSBpc05lZ2F0aXZlID8gJy0nIDogKG9wdGlvbnMuc2lnbmVkID8gJysnIDogJycpO1xuXG5cdGlmIChpc05lZ2F0aXZlKSB7XG5cdFx0bnVtYmVyID0gLW51bWJlcjtcblx0fVxuXG5cdGlmIChudW1iZXIgPCAxKSB7XG5cdFx0Y29uc3QgbnVtYmVyU3RyaW5nID0gdG9Mb2NhbGVTdHJpbmcobnVtYmVyLCBvcHRpb25zLmxvY2FsZSk7XG5cdFx0cmV0dXJuIHByZWZpeCArIG51bWJlclN0cmluZyArICcgJyArIFVOSVRTWzBdO1xuXHR9XG5cblx0Y29uc3QgZXhwb25lbnQgPSBNYXRoLm1pbihNYXRoLmZsb29yKE1hdGgubG9nMTAobnVtYmVyKSAvIDMpLCBVTklUUy5sZW5ndGggLSAxKTtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcHJlZmVyLWV4cG9uZW50aWF0aW9uLW9wZXJhdG9yXG5cdG51bWJlciA9IE51bWJlcigobnVtYmVyIC8gTWF0aC5wb3coMTAwMCwgZXhwb25lbnQpKS50b1ByZWNpc2lvbigzKSk7XG5cdGNvbnN0IG51bWJlclN0cmluZyA9IHRvTG9jYWxlU3RyaW5nKG51bWJlciwgb3B0aW9ucy5sb2NhbGUpO1xuXG5cdGNvbnN0IHVuaXQgPSBVTklUU1tleHBvbmVudF07XG5cblx0cmV0dXJuIHByZWZpeCArIG51bWJlclN0cmluZyArICcgJyArIHVuaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0ZXBzXCI6XCJfMXpiY0N1XCIsXCJzdGVwXCI6XCJfMkxFTHFOXCIsXCJ0aXRsZVwiOlwiXzJtQVpFalwiLFwiYWN0aXZlXCI6XCJfM1R2eVlTXCIsXCJpbmRleC13cmFwcGVyXCI6XCJfM2J6NV9zXCIsXCJpbmRleFdyYXBwZXJcIjpcIl8zYno1X3NcIixcImluZGV4XCI6XCJfM2JaaEFoXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjb250YWluZXJcIjpcIl8zWHEwUEZcIixcInRvYXN0XCI6XCJfMXprR0lGXCIsXCJpY29uLXdyYXBwZXJcIjpcIk5mQzJTbFwiLFwiaWNvbldyYXBwZXJcIjpcIk5mQzJTbFwiLFwic3VjY2Vzc1wiOlwiXzFKVGZmMVwiLFwiZXJyb3JcIjpcIl8zaG5ydWFcIixcImluZm9cIjpcIl8yMmh5aU9cIixcImNvbnRlbnRcIjpcIkh0SFpQaFwifTsiLCJpbXBvcnQgeyBpc1JlZ0V4cCB9IGZyb20gJy4vaXMnO1xuLyoqXG4gKiBUcnVuY2F0ZXMgZ2l2ZW4gc3RyaW5nIHRvIHRoZSBtYXhpbXVtIGNoYXJhY3RlcnMgY291bnRcbiAqXG4gKiBAcGFyYW0gc3RyIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEBwYXJhbSBtYXggTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0cnVuY2F0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyLCBtYXgpIHtcbiAgICBpZiAobWF4ID09PSB2b2lkIDApIHsgbWF4ID0gMDsgfVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8IG1heCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLmxlbmd0aCA8PSBtYXggPyBzdHIgOiBzdHIuc3Vic3RyKDAsIG1heCkgKyBcIi4uLlwiO1xufVxuLyoqXG4gKiBUaGlzIGlzIGJhc2ljYWxseSBqdXN0IGB0cmltX2xpbmVgIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5L2Jsb2IvbWFzdGVyL3NyYy9zZW50cnkvbGFuZy9qYXZhc2NyaXB0L3Byb2Nlc3Nvci5weSNMNjdcbiAqXG4gKiBAcGFyYW0gc3RyIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEBwYXJhbSBtYXggTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0cnVuY2F0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc25pcExpbmUobGluZSwgY29sbm8pIHtcbiAgICB2YXIgbmV3TGluZSA9IGxpbmU7XG4gICAgdmFyIGxsID0gbmV3TGluZS5sZW5ndGg7XG4gICAgaWYgKGxsIDw9IDE1MCkge1xuICAgICAgICByZXR1cm4gbmV3TGluZTtcbiAgICB9XG4gICAgaWYgKGNvbG5vID4gbGwpIHtcbiAgICAgICAgY29sbm8gPSBsbDsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1wYXJhbWV0ZXItcmVhc3NpZ25tZW50XG4gICAgfVxuICAgIHZhciBzdGFydCA9IE1hdGgubWF4KGNvbG5vIC0gNjAsIDApO1xuICAgIGlmIChzdGFydCA8IDUpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICB2YXIgZW5kID0gTWF0aC5taW4oc3RhcnQgKyAxNDAsIGxsKTtcbiAgICBpZiAoZW5kID4gbGwgLSA1KSB7XG4gICAgICAgIGVuZCA9IGxsO1xuICAgIH1cbiAgICBpZiAoZW5kID09PSBsbCkge1xuICAgICAgICBzdGFydCA9IE1hdGgubWF4KGVuZCAtIDE0MCwgMCk7XG4gICAgfVxuICAgIG5ld0xpbmUgPSBuZXdMaW5lLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIGlmIChzdGFydCA+IDApIHtcbiAgICAgICAgbmV3TGluZSA9IFwiJ3tzbmlwfSBcIiArIG5ld0xpbmU7XG4gICAgfVxuICAgIGlmIChlbmQgPCBsbCkge1xuICAgICAgICBuZXdMaW5lICs9ICcge3NuaXB9JztcbiAgICB9XG4gICAgcmV0dXJuIG5ld0xpbmU7XG59XG4vKipcbiAqIEpvaW4gdmFsdWVzIGluIGFycmF5XG4gKiBAcGFyYW0gaW5wdXQgYXJyYXkgb2YgdmFsdWVzIHRvIGJlIGpvaW5lZCB0b2dldGhlclxuICogQHBhcmFtIGRlbGltaXRlciBzdHJpbmcgdG8gYmUgcGxhY2VkIGluLWJldHdlZW4gdmFsdWVzXG4gKiBAcmV0dXJucyBKb2luZWQgdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlSm9pbihpbnB1dCwgZGVsaW1pdGVyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWZvci1vZlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJ1t2YWx1ZSBjYW5ub3QgYmUgc2VyaWFsaXplZF0nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oZGVsaW1pdGVyKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBtYXRjaGVzIGEgcmVnZXggb3IgaW5jbHVkZXMgdGhlIHN0cmluZ1xuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdmFsdWUgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0XG4gKiBAcGFyYW0gcGF0dGVybiBFaXRoZXIgYSByZWdleCBvciBhIHN0cmluZyB0aGF0IG11c3QgYmUgY29udGFpbmVkIGluIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoaW5nUGF0dGVybih2YWx1ZSwgcGF0dGVybikge1xuICAgIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihwYXR0ZXJuKSAhPT0gLTE7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZy5qcy5tYXAiLCJpbXBvcnQgeyBjb25zb2xlU2FuZGJveCwgZ2V0R2xvYmFsT2JqZWN0IH0gZnJvbSAnLi9taXNjJztcbi8vIFRPRE86IEltcGxlbWVudCBkaWZmZXJlbnQgbG9nZ2VycyBmb3IgZGlmZmVyZW50IGVudmlyb25tZW50c1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovXG52YXIgUFJFRklYID0gJ1NlbnRyeSBMb2dnZXIgJztcbi8qKiBKU0RvYyAqL1xudmFyIExvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBmdW5jdGlvbiBMb2dnZXIoKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWwuY29uc29sZS5sb2coUFJFRklYICsgXCJbTG9nXTogXCIgKyBhcmdzLmpvaW4oJyAnKSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tY29uc29sZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWwuY29uc29sZS53YXJuKFBSRUZJWCArIFwiW1dhcm5dOiBcIiArIGFyZ3Muam9pbignICcpKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1jb25zb2xlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWwuY29uc29sZS5lcnJvcihQUkVGSVggKyBcIltFcnJvcl06IFwiICsgYXJncy5qb2luKCcgJykpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gTG9nZ2VyO1xufSgpKTtcbi8vIEVuc3VyZSB3ZSBvbmx5IGhhdmUgYSBzaW5nbGUgbG9nZ2VyIGluc3RhbmNlLCBldmVuIGlmIG11bHRpcGxlIHZlcnNpb25zIG9mIEBzZW50cnkvdXRpbHMgYXJlIGJlaW5nIHVzZWRcbmdsb2JhbC5fX1NFTlRSWV9fID0gZ2xvYmFsLl9fU0VOVFJZX18gfHwge307XG52YXIgbG9nZ2VyID0gZ2xvYmFsLl9fU0VOVFJZX18ubG9nZ2VyIHx8IChnbG9iYWwuX19TRU5UUllfXy5sb2dnZXIgPSBuZXcgTG9nZ2VyKCkpO1xuZXhwb3J0IHsgbG9nZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImJhc2VcIjpcIl8zRkhPUmxcIixcInRpdGxlXCI6XCJfMVlXLW1FXCIsXCJpbnB1dFwiOlwiVG9TcHpWXCIsXCJ0ZXh0YXJlYVwiOlwiXzFROHVVZFwiLFwiYnRuXCI6XCJkZ3NwalRcIixcInRpcHNcIjpcIl8zVUthdUFcIn07IiwiLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbi8vIFNEUCBoZWxwZXJzLlxudmFyIFNEUFV0aWxzID0ge307XG5cbi8vIEdlbmVyYXRlIGFuIGFscGhhbnVtZXJpYyBpZGVudGlmaWVyIGZvciBjbmFtZSBvciBtaWRzLlxuLy8gVE9ETzogdXNlIFVVSURzIGluc3RlYWQ/IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODNcblNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDEwKTtcbn07XG5cbi8vIFRoZSBSVENQIENOQU1FIHVzZWQgYnkgYWxsIHBlZXJjb25uZWN0aW9ucyBmcm9tIHRoZSBzYW1lIEpTLlxuU0RQVXRpbHMubG9jYWxDTmFtZSA9IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpO1xuXG4vLyBTcGxpdHMgU0RQIGludG8gbGluZXMsIGRlYWxpbmcgd2l0aCBib3RoIENSTEYgYW5kIExGLlxuU0RQVXRpbHMuc3BsaXRMaW5lcyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgcmV0dXJuIGJsb2IudHJpbSgpLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgIHJldHVybiBsaW5lLnRyaW0oKTtcbiAgfSk7XG59O1xuLy8gU3BsaXRzIFNEUCBpbnRvIHNlc3Npb25wYXJ0IGFuZCBtZWRpYXNlY3Rpb25zLiBFbnN1cmVzIENSTEYuXG5TRFBVdGlscy5zcGxpdFNlY3Rpb25zID0gZnVuY3Rpb24oYmxvYikge1xuICB2YXIgcGFydHMgPSBibG9iLnNwbGl0KCdcXG5tPScpO1xuICByZXR1cm4gcGFydHMubWFwKGZ1bmN0aW9uKHBhcnQsIGluZGV4KSB7XG4gICAgcmV0dXJuIChpbmRleCA+IDAgPyAnbT0nICsgcGFydCA6IHBhcnQpLnRyaW0oKSArICdcXHJcXG4nO1xuICB9KTtcbn07XG5cbi8vIHJldHVybnMgdGhlIHNlc3Npb24gZGVzY3JpcHRpb24uXG5TRFBVdGlscy5nZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgdmFyIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhibG9iKTtcbiAgcmV0dXJuIHNlY3Rpb25zICYmIHNlY3Rpb25zWzBdO1xufTtcblxuLy8gcmV0dXJucyB0aGUgaW5kaXZpZHVhbCBtZWRpYSBzZWN0aW9ucy5cblNEUFV0aWxzLmdldE1lZGlhU2VjdGlvbnMgPSBmdW5jdGlvbihibG9iKSB7XG4gIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoYmxvYik7XG4gIHNlY3Rpb25zLnNoaWZ0KCk7XG4gIHJldHVybiBzZWN0aW9ucztcbn07XG5cbi8vIFJldHVybnMgbGluZXMgdGhhdCBzdGFydCB3aXRoIGEgY2VydGFpbiBwcmVmaXguXG5TRFBVdGlscy5tYXRjaFByZWZpeCA9IGZ1bmN0aW9uKGJsb2IsIHByZWZpeCkge1xuICByZXR1cm4gU0RQVXRpbHMuc3BsaXRMaW5lcyhibG9iKS5maWx0ZXIoZnVuY3Rpb24obGluZSkge1xuICAgIHJldHVybiBsaW5lLmluZGV4T2YocHJlZml4KSA9PT0gMDtcbiAgfSk7XG59O1xuXG4vLyBQYXJzZXMgYW4gSUNFIGNhbmRpZGF0ZSBsaW5lLiBTYW1wbGUgaW5wdXQ6XG4vLyBjYW5kaWRhdGU6NzAyNzg2MzUwIDIgdWRwIDQxODE5OTAyIDguOC44LjggNjA3NjkgdHlwIHJlbGF5IHJhZGRyIDguOC44Ljhcbi8vIHJwb3J0IDU1OTk2XCJcblNEUFV0aWxzLnBhcnNlQ2FuZGlkYXRlID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHM7XG4gIC8vIFBhcnNlIGJvdGggdmFyaWFudHMuXG4gIGlmIChsaW5lLmluZGV4T2YoJ2E9Y2FuZGlkYXRlOicpID09PSAwKSB7XG4gICAgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxMikuc3BsaXQoJyAnKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDEwKS5zcGxpdCgnICcpO1xuICB9XG5cbiAgdmFyIGNhbmRpZGF0ZSA9IHtcbiAgICBmb3VuZGF0aW9uOiBwYXJ0c1swXSxcbiAgICBjb21wb25lbnQ6IHBhcnNlSW50KHBhcnRzWzFdLCAxMCksXG4gICAgcHJvdG9jb2w6IHBhcnRzWzJdLnRvTG93ZXJDYXNlKCksXG4gICAgcHJpb3JpdHk6IHBhcnNlSW50KHBhcnRzWzNdLCAxMCksXG4gICAgaXA6IHBhcnRzWzRdLFxuICAgIGFkZHJlc3M6IHBhcnRzWzRdLCAvLyBhZGRyZXNzIGlzIGFuIGFsaWFzIGZvciBpcC5cbiAgICBwb3J0OiBwYXJzZUludChwYXJ0c1s1XSwgMTApLFxuICAgIC8vIHNraXAgcGFydHNbNl0gPT0gJ3R5cCdcbiAgICB0eXBlOiBwYXJ0c1s3XVxuICB9O1xuXG4gIGZvciAodmFyIGkgPSA4OyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBzd2l0Y2ggKHBhcnRzW2ldKSB7XG4gICAgICBjYXNlICdyYWRkcic6XG4gICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdycG9ydCc6XG4gICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCA9IHBhcnNlSW50KHBhcnRzW2kgKyAxXSwgMTApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RjcHR5cGUnOlxuICAgICAgICBjYW5kaWRhdGUudGNwVHlwZSA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1ZnJhZyc6XG4gICAgICAgIGNhbmRpZGF0ZS51ZnJhZyA9IHBhcnRzW2kgKyAxXTsgLy8gZm9yIGJhY2t3YXJkIGNvbXBhYmlsaXR5LlxuICAgICAgICBjYW5kaWRhdGUudXNlcm5hbWVGcmFnbWVudCA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBleHRlbnNpb24gaGFuZGxpbmcsIGluIHBhcnRpY3VsYXIgdWZyYWdcbiAgICAgICAgY2FuZGlkYXRlW3BhcnRzW2ldXSA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYW5kaWRhdGU7XG59O1xuXG4vLyBUcmFuc2xhdGVzIGEgY2FuZGlkYXRlIG9iamVjdCBpbnRvIFNEUCBjYW5kaWRhdGUgYXR0cmlidXRlLlxuU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUgPSBmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgdmFyIHNkcCA9IFtdO1xuICBzZHAucHVzaChjYW5kaWRhdGUuZm91bmRhdGlvbik7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5jb21wb25lbnQpO1xuICBzZHAucHVzaChjYW5kaWRhdGUucHJvdG9jb2wudG9VcHBlckNhc2UoKSk7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5wcmlvcml0eSk7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5hZGRyZXNzIHx8IGNhbmRpZGF0ZS5pcCk7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5wb3J0KTtcblxuICB2YXIgdHlwZSA9IGNhbmRpZGF0ZS50eXBlO1xuICBzZHAucHVzaCgndHlwJyk7XG4gIHNkcC5wdXNoKHR5cGUpO1xuICBpZiAodHlwZSAhPT0gJ2hvc3QnICYmIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyAmJlxuICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRQb3J0KSB7XG4gICAgc2RwLnB1c2goJ3JhZGRyJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzKTtcbiAgICBzZHAucHVzaCgncnBvcnQnKTtcbiAgICBzZHAucHVzaChjYW5kaWRhdGUucmVsYXRlZFBvcnQpO1xuICB9XG4gIGlmIChjYW5kaWRhdGUudGNwVHlwZSAmJiBjYW5kaWRhdGUucHJvdG9jb2wudG9Mb3dlckNhc2UoKSA9PT0gJ3RjcCcpIHtcbiAgICBzZHAucHVzaCgndGNwdHlwZScpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS50Y3BUeXBlKTtcbiAgfVxuICBpZiAoY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgfHwgY2FuZGlkYXRlLnVmcmFnKSB7XG4gICAgc2RwLnB1c2goJ3VmcmFnJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgfHwgY2FuZGlkYXRlLnVmcmFnKTtcbiAgfVxuICByZXR1cm4gJ2NhbmRpZGF0ZTonICsgc2RwLmpvaW4oJyAnKTtcbn07XG5cbi8vIFBhcnNlcyBhbiBpY2Utb3B0aW9ucyBsaW5lLCByZXR1cm5zIGFuIGFycmF5IG9mIG9wdGlvbiB0YWdzLlxuLy8gYT1pY2Utb3B0aW9uczpmb28gYmFyXG5TRFBVdGlscy5wYXJzZUljZU9wdGlvbnMgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHJldHVybiBsaW5lLnN1YnN0cigxNCkuc3BsaXQoJyAnKTtcbn07XG5cbi8vIFBhcnNlcyBhbiBydHBtYXAgbGluZSwgcmV0dXJucyBSVENSdHBDb2RkZWNQYXJhbWV0ZXJzLiBTYW1wbGUgaW5wdXQ6XG4vLyBhPXJ0cG1hcDoxMTEgb3B1cy80ODAwMC8yXG5TRFBVdGlscy5wYXJzZVJ0cE1hcCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoOSkuc3BsaXQoJyAnKTtcbiAgdmFyIHBhcnNlZCA9IHtcbiAgICBwYXlsb2FkVHlwZTogcGFyc2VJbnQocGFydHMuc2hpZnQoKSwgMTApIC8vIHdhczogaWRcbiAgfTtcblxuICBwYXJ0cyA9IHBhcnRzWzBdLnNwbGl0KCcvJyk7XG5cbiAgcGFyc2VkLm5hbWUgPSBwYXJ0c1swXTtcbiAgcGFyc2VkLmNsb2NrUmF0ZSA9IHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7IC8vIHdhczogY2xvY2tyYXRlXG4gIHBhcnNlZC5jaGFubmVscyA9IHBhcnRzLmxlbmd0aCA9PT0gMyA/IHBhcnNlSW50KHBhcnRzWzJdLCAxMCkgOiAxO1xuICAvLyBsZWdhY3kgYWxpYXMsIGdvdCByZW5hbWVkIGJhY2sgdG8gY2hhbm5lbHMgaW4gT1JUQy5cbiAgcGFyc2VkLm51bUNoYW5uZWxzID0gcGFyc2VkLmNoYW5uZWxzO1xuICByZXR1cm4gcGFyc2VkO1xufTtcblxuLy8gR2VuZXJhdGUgYW4gYT1ydHBtYXAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvclxuLy8gUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdHBNYXAgPSBmdW5jdGlvbihjb2RlYykge1xuICB2YXIgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIHZhciBjaGFubmVscyA9IGNvZGVjLmNoYW5uZWxzIHx8IGNvZGVjLm51bUNoYW5uZWxzIHx8IDE7XG4gIHJldHVybiAnYT1ydHBtYXA6JyArIHB0ICsgJyAnICsgY29kZWMubmFtZSArICcvJyArIGNvZGVjLmNsb2NrUmF0ZSArXG4gICAgICAoY2hhbm5lbHMgIT09IDEgPyAnLycgKyBjaGFubmVscyA6ICcnKSArICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIGFuIGE9ZXh0bWFwIGxpbmUgKGhlYWRlcmV4dGVuc2lvbiBmcm9tIFJGQyA1Mjg1KS4gU2FtcGxlIGlucHV0OlxuLy8gYT1leHRtYXA6MiB1cm46aWV0ZjpwYXJhbXM6cnRwLWhkcmV4dDp0b2Zmc2V0XG4vLyBhPWV4dG1hcDoyL3NlbmRvbmx5IHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnRvZmZzZXRcblNEUFV0aWxzLnBhcnNlRXh0bWFwID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cig5KS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIGlkOiBwYXJzZUludChwYXJ0c1swXSwgMTApLFxuICAgIGRpcmVjdGlvbjogcGFydHNbMF0uaW5kZXhPZignLycpID4gMCA/IHBhcnRzWzBdLnNwbGl0KCcvJylbMV0gOiAnc2VuZHJlY3YnLFxuICAgIHVyaTogcGFydHNbMV1cbiAgfTtcbn07XG5cbi8vIEdlbmVyYXRlcyBhPWV4dG1hcCBsaW5lIGZyb20gUlRDUnRwSGVhZGVyRXh0ZW5zaW9uUGFyYW1ldGVycyBvclxuLy8gUlRDUnRwSGVhZGVyRXh0ZW5zaW9uLlxuU0RQVXRpbHMud3JpdGVFeHRtYXAgPSBmdW5jdGlvbihoZWFkZXJFeHRlbnNpb24pIHtcbiAgcmV0dXJuICdhPWV4dG1hcDonICsgKGhlYWRlckV4dGVuc2lvbi5pZCB8fCBoZWFkZXJFeHRlbnNpb24ucHJlZmVycmVkSWQpICtcbiAgICAgIChoZWFkZXJFeHRlbnNpb24uZGlyZWN0aW9uICYmIGhlYWRlckV4dGVuc2lvbi5kaXJlY3Rpb24gIT09ICdzZW5kcmVjdidcbiAgICAgICAgPyAnLycgKyBoZWFkZXJFeHRlbnNpb24uZGlyZWN0aW9uXG4gICAgICAgIDogJycpICtcbiAgICAgICcgJyArIGhlYWRlckV4dGVuc2lvbi51cmkgKyAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyBhbiBmdG1wIGxpbmUsIHJldHVybnMgZGljdGlvbmFyeS4gU2FtcGxlIGlucHV0OlxuLy8gYT1mbXRwOjk2IHZicj1vbjtjbmc9b25cbi8vIEFsc28gZGVhbHMgd2l0aCB2YnI9b247IGNuZz1vblxuU0RQVXRpbHMucGFyc2VGbXRwID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrdjtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnOycpO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAga3YgPSBwYXJ0c1tqXS50cmltKCkuc3BsaXQoJz0nKTtcbiAgICBwYXJzZWRba3ZbMF0udHJpbSgpXSA9IGt2WzFdO1xuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG4vLyBHZW5lcmF0ZXMgYW4gYT1mdG1wIGxpbmUgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3IgUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVGbXRwID0gZnVuY3Rpb24oY29kZWMpIHtcbiAgdmFyIGxpbmUgPSAnJztcbiAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICBpZiAoY29kZWMucGFyYW1ldGVycyAmJiBPYmplY3Qua2V5cyhjb2RlYy5wYXJhbWV0ZXJzKS5sZW5ndGgpIHtcbiAgICB2YXIgcGFyYW1zID0gW107XG4gICAgT2JqZWN0LmtleXMoY29kZWMucGFyYW1ldGVycykuZm9yRWFjaChmdW5jdGlvbihwYXJhbSkge1xuICAgICAgaWYgKGNvZGVjLnBhcmFtZXRlcnNbcGFyYW1dKSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtICsgJz0nICsgY29kZWMucGFyYW1ldGVyc1twYXJhbV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxpbmUgKz0gJ2E9Zm10cDonICsgcHQgKyAnICcgKyBwYXJhbXMuam9pbignOycpICsgJ1xcclxcbic7XG4gIH1cbiAgcmV0dXJuIGxpbmU7XG59O1xuXG4vLyBQYXJzZXMgYW4gcnRjcC1mYiBsaW5lLCByZXR1cm5zIFJUQ1BSdGNwRmVlZGJhY2sgb2JqZWN0LiBTYW1wbGUgaW5wdXQ6XG4vLyBhPXJ0Y3AtZmI6OTggbmFjayBycHNpXG5TRFBVdGlscy5wYXJzZVJ0Y3BGYiA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHBhcnRzLnNoaWZ0KCksXG4gICAgcGFyYW1ldGVyOiBwYXJ0cy5qb2luKCcgJylcbiAgfTtcbn07XG4vLyBHZW5lcmF0ZSBhPXJ0Y3AtZmIgbGluZXMgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3IgUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdGNwRmIgPSBmdW5jdGlvbihjb2RlYykge1xuICB2YXIgbGluZXMgPSAnJztcbiAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICBpZiAoY29kZWMucnRjcEZlZWRiYWNrICYmIGNvZGVjLnJ0Y3BGZWVkYmFjay5sZW5ndGgpIHtcbiAgICAvLyBGSVhNRTogc3BlY2lhbCBoYW5kbGluZyBmb3IgdHJyLWludD9cbiAgICBjb2RlYy5ydGNwRmVlZGJhY2suZm9yRWFjaChmdW5jdGlvbihmYikge1xuICAgICAgbGluZXMgKz0gJ2E9cnRjcC1mYjonICsgcHQgKyAnICcgKyBmYi50eXBlICtcbiAgICAgIChmYi5wYXJhbWV0ZXIgJiYgZmIucGFyYW1ldGVyLmxlbmd0aCA/ICcgJyArIGZiLnBhcmFtZXRlciA6ICcnKSArXG4gICAgICAgICAgJ1xcclxcbic7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGxpbmVzO1xufTtcblxuLy8gUGFyc2VzIGFuIFJGQyA1NTc2IHNzcmMgbWVkaWEgYXR0cmlidXRlLiBTYW1wbGUgaW5wdXQ6XG4vLyBhPXNzcmM6MzczNTkyODU1OSBjbmFtZTpzb21ldGhpbmdcblNEUFV0aWxzLnBhcnNlU3NyY01lZGlhID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgc3AgPSBsaW5lLmluZGV4T2YoJyAnKTtcbiAgdmFyIHBhcnRzID0ge1xuICAgIHNzcmM6IHBhcnNlSW50KGxpbmUuc3Vic3RyKDcsIHNwIC0gNyksIDEwKVxuICB9O1xuICB2YXIgY29sb24gPSBsaW5lLmluZGV4T2YoJzonLCBzcCk7XG4gIGlmIChjb2xvbiA+IC0xKSB7XG4gICAgcGFydHMuYXR0cmlidXRlID0gbGluZS5zdWJzdHIoc3AgKyAxLCBjb2xvbiAtIHNwIC0gMSk7XG4gICAgcGFydHMudmFsdWUgPSBsaW5lLnN1YnN0cihjb2xvbiArIDEpO1xuICB9IGVsc2Uge1xuICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyKHNwICsgMSk7XG4gIH1cbiAgcmV0dXJuIHBhcnRzO1xufTtcblxuU0RQVXRpbHMucGFyc2VTc3JjR3JvdXAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDEzKS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHNlbWFudGljczogcGFydHMuc2hpZnQoKSxcbiAgICBzc3JjczogcGFydHMubWFwKGZ1bmN0aW9uKHNzcmMpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChzc3JjLCAxMCk7XG4gICAgfSlcbiAgfTtcbn07XG5cbi8vIEV4dHJhY3RzIHRoZSBNSUQgKFJGQyA1ODg4KSBmcm9tIGEgbWVkaWEgc2VjdGlvbi5cbi8vIHJldHVybnMgdGhlIE1JRCBvciB1bmRlZmluZWQgaWYgbm8gbWlkIGxpbmUgd2FzIGZvdW5kLlxuU0RQVXRpbHMuZ2V0TWlkID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBtaWQgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1pZDonKVswXTtcbiAgaWYgKG1pZCkge1xuICAgIHJldHVybiBtaWQuc3Vic3RyKDYpO1xuICB9XG59O1xuXG5TRFBVdGlscy5wYXJzZUZpbmdlcnByaW50ID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cigxNCkuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBhbGdvcml0aG06IHBhcnRzWzBdLnRvTG93ZXJDYXNlKCksIC8vIGFsZ29yaXRobSBpcyBjYXNlLXNlbnNpdGl2ZSBpbiBFZGdlLlxuICAgIHZhbHVlOiBwYXJ0c1sxXVxuICB9O1xufTtcblxuLy8gRXh0cmFjdHMgRFRMUyBwYXJhbWV0ZXJzIGZyb20gU0RQIG1lZGlhIHNlY3Rpb24gb3Igc2Vzc2lvbnBhcnQuXG4vLyBGSVhNRTogZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXIgZnVuY3Rpb25zIHRoaXMgc2hvdWxkIG9ubHlcbi8vICAgZ2V0IHRoZSBmaW5nZXJwcmludCBsaW5lIGFzIGlucHV0LiBTZWUgYWxzbyBnZXRJY2VQYXJhbWV0ZXJzLlxuU0RQVXRpbHMuZ2V0RHRsc1BhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KSB7XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWZpbmdlcnByaW50OicpO1xuICAvLyBOb3RlOiBhPXNldHVwIGxpbmUgaXMgaWdub3JlZCBzaW5jZSB3ZSB1c2UgdGhlICdhdXRvJyByb2xlLlxuICAvLyBOb3RlMjogJ2FsZ29yaXRobScgaXMgbm90IGNhc2Ugc2Vuc2l0aXZlIGV4Y2VwdCBpbiBFZGdlLlxuICByZXR1cm4ge1xuICAgIHJvbGU6ICdhdXRvJyxcbiAgICBmaW5nZXJwcmludHM6IGxpbmVzLm1hcChTRFBVdGlscy5wYXJzZUZpbmdlcnByaW50KVxuICB9O1xufTtcblxuLy8gU2VyaWFsaXplcyBEVExTIHBhcmFtZXRlcnMgdG8gU0RQLlxuU0RQVXRpbHMud3JpdGVEdGxzUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcywgc2V0dXBUeXBlKSB7XG4gIHZhciBzZHAgPSAnYT1zZXR1cDonICsgc2V0dXBUeXBlICsgJ1xcclxcbic7XG4gIHBhcmFtcy5maW5nZXJwcmludHMuZm9yRWFjaChmdW5jdGlvbihmcCkge1xuICAgIHNkcCArPSAnYT1maW5nZXJwcmludDonICsgZnAuYWxnb3JpdGhtICsgJyAnICsgZnAudmFsdWUgKyAnXFxyXFxuJztcbiAgfSk7XG4gIHJldHVybiBzZHA7XG59O1xuLy8gUGFyc2VzIElDRSBpbmZvcm1hdGlvbiBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgaWNlLXVmcmFnIGFuZCBpY2UtcHdkIGxpbmVzIGFzIGlucHV0LlxuU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICAvLyBTZWFyY2ggaW4gc2Vzc2lvbiBwYXJ0LCB0b28uXG4gIGxpbmVzID0gbGluZXMuY29uY2F0KFNEUFV0aWxzLnNwbGl0TGluZXMoc2Vzc2lvbnBhcnQpKTtcbiAgdmFyIGljZVBhcmFtZXRlcnMgPSB7XG4gICAgdXNlcm5hbWVGcmFnbWVudDogbGluZXMuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHJldHVybiBsaW5lLmluZGV4T2YoJ2E9aWNlLXVmcmFnOicpID09PSAwO1xuICAgIH0pWzBdLnN1YnN0cigxMiksXG4gICAgcGFzc3dvcmQ6IGxpbmVzLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7XG4gICAgICByZXR1cm4gbGluZS5pbmRleE9mKCdhPWljZS1wd2Q6JykgPT09IDA7XG4gICAgfSlbMF0uc3Vic3RyKDEwKVxuICB9O1xuICByZXR1cm4gaWNlUGFyYW1ldGVycztcbn07XG5cbi8vIFNlcmlhbGl6ZXMgSUNFIHBhcmFtZXRlcnMgdG8gU0RQLlxuU0RQVXRpbHMud3JpdGVJY2VQYXJhbWV0ZXJzID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gIHJldHVybiAnYT1pY2UtdWZyYWc6JyArIHBhcmFtcy51c2VybmFtZUZyYWdtZW50ICsgJ1xcclxcbicgK1xuICAgICAgJ2E9aWNlLXB3ZDonICsgcGFyYW1zLnBhc3N3b3JkICsgJ1xcclxcbic7XG59O1xuXG4vLyBQYXJzZXMgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGFuZCByZXR1cm5zIFJUQ1J0cFBhcmFtZXRlcnMuXG5TRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIGRlc2NyaXB0aW9uID0ge1xuICAgIGNvZGVjczogW10sXG4gICAgaGVhZGVyRXh0ZW5zaW9uczogW10sXG4gICAgZmVjTWVjaGFuaXNtczogW10sXG4gICAgcnRjcDogW11cbiAgfTtcbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICB2YXIgbWxpbmUgPSBsaW5lc1swXS5zcGxpdCgnICcpO1xuICBmb3IgKHZhciBpID0gMzsgaSA8IG1saW5lLmxlbmd0aDsgaSsrKSB7IC8vIGZpbmQgYWxsIGNvZGVjcyBmcm9tIG1saW5lWzMuLl1cbiAgICB2YXIgcHQgPSBtbGluZVtpXTtcbiAgICB2YXIgcnRwbWFwbGluZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KFxuICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydHBtYXA6JyArIHB0ICsgJyAnKVswXTtcbiAgICBpZiAocnRwbWFwbGluZSkge1xuICAgICAgdmFyIGNvZGVjID0gU0RQVXRpbHMucGFyc2VSdHBNYXAocnRwbWFwbGluZSk7XG4gICAgICB2YXIgZm10cHMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChcbiAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1mbXRwOicgKyBwdCArICcgJyk7XG4gICAgICAvLyBPbmx5IHRoZSBmaXJzdCBhPWZtdHA6PHB0PiBpcyBjb25zaWRlcmVkLlxuICAgICAgY29kZWMucGFyYW1ldGVycyA9IGZtdHBzLmxlbmd0aCA/IFNEUFV0aWxzLnBhcnNlRm10cChmbXRwc1swXSkgOiB7fTtcbiAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjayA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KFxuICAgICAgICBtZWRpYVNlY3Rpb24sICdhPXJ0Y3AtZmI6JyArIHB0ICsgJyAnKVxuICAgICAgICAubWFwKFNEUFV0aWxzLnBhcnNlUnRjcEZiKTtcbiAgICAgIGRlc2NyaXB0aW9uLmNvZGVjcy5wdXNoKGNvZGVjKTtcbiAgICAgIC8vIHBhcnNlIEZFQyBtZWNoYW5pc21zIGZyb20gcnRwbWFwIGxpbmVzLlxuICAgICAgc3dpdGNoIChjb2RlYy5uYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnUkVEJzpcbiAgICAgICAgY2FzZSAnVUxQRkVDJzpcbiAgICAgICAgICBkZXNjcmlwdGlvbi5mZWNNZWNoYW5pc21zLnB1c2goY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gb25seSBSRUQgYW5kIFVMUEZFQyBhcmUgcmVjb2duaXplZCBhcyBGRUMgbWVjaGFuaXNtcy5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1leHRtYXA6JykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgZGVzY3JpcHRpb24uaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKFNEUFV0aWxzLnBhcnNlRXh0bWFwKGxpbmUpKTtcbiAgfSk7XG4gIC8vIEZJWE1FOiBwYXJzZSBydGNwLlxuICByZXR1cm4gZGVzY3JpcHRpb247XG59O1xuXG4vLyBHZW5lcmF0ZXMgcGFydHMgb2YgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGRlc2NyaWJpbmcgdGhlIGNhcGFiaWxpdGllcyAvXG4vLyBwYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdHBEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGtpbmQsIGNhcHMpIHtcbiAgdmFyIHNkcCA9ICcnO1xuXG4gIC8vIEJ1aWxkIHRoZSBtbGluZS5cbiAgc2RwICs9ICdtPScgKyBraW5kICsgJyAnO1xuICBzZHAgKz0gY2Fwcy5jb2RlY3MubGVuZ3RoID4gMCA/ICc5JyA6ICcwJzsgLy8gcmVqZWN0IGlmIG5vIGNvZGVjcy5cbiAgc2RwICs9ICcgVURQL1RMUy9SVFAvU0FWUEYgJztcbiAgc2RwICs9IGNhcHMuY29kZWNzLm1hcChmdW5jdGlvbihjb2RlYykge1xuICAgIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGU7XG4gICAgfVxuICAgIHJldHVybiBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgfSkuam9pbignICcpICsgJ1xcclxcbic7XG5cbiAgc2RwICs9ICdjPUlOIElQNCAwLjAuMC4wXFxyXFxuJztcbiAgc2RwICs9ICdhPXJ0Y3A6OSBJTiBJUDQgMC4wLjAuMFxcclxcbic7XG5cbiAgLy8gQWRkIGE9cnRwbWFwIGxpbmVzIGZvciBlYWNoIGNvZGVjLiBBbHNvIGZtdHAgYW5kIHJ0Y3AtZmIuXG4gIGNhcHMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oY29kZWMpIHtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVSdHBNYXAoY29kZWMpO1xuICAgIHNkcCArPSBTRFBVdGlscy53cml0ZUZtdHAoY29kZWMpO1xuICAgIHNkcCArPSBTRFBVdGlscy53cml0ZVJ0Y3BGYihjb2RlYyk7XG4gIH0pO1xuICB2YXIgbWF4cHRpbWUgPSAwO1xuICBjYXBzLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgaWYgKGNvZGVjLm1heHB0aW1lID4gbWF4cHRpbWUpIHtcbiAgICAgIG1heHB0aW1lID0gY29kZWMubWF4cHRpbWU7XG4gICAgfVxuICB9KTtcbiAgaWYgKG1heHB0aW1lID4gMCkge1xuICAgIHNkcCArPSAnYT1tYXhwdGltZTonICsgbWF4cHRpbWUgKyAnXFxyXFxuJztcbiAgfVxuICBzZHAgKz0gJ2E9cnRjcC1tdXhcXHJcXG4nO1xuXG4gIGlmIChjYXBzLmhlYWRlckV4dGVuc2lvbnMpIHtcbiAgICBjYXBzLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihleHRlbnNpb24pIHtcbiAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZUV4dG1hcChleHRlbnNpb24pO1xuICAgIH0pO1xuICB9XG4gIC8vIEZJWE1FOiB3cml0ZSBmZWNNZWNoYW5pc21zLlxuICByZXR1cm4gc2RwO1xufTtcblxuLy8gUGFyc2VzIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZlxuLy8gUlRDUnRwRW5jb2RpbmdQYXJhbWV0ZXJzLlxuU0RQVXRpbHMucGFyc2VSdHBFbmNvZGluZ1BhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIGVuY29kaW5nUGFyYW1ldGVycyA9IFtdO1xuICB2YXIgZGVzY3JpcHRpb24gPSBTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcbiAgdmFyIGhhc1JlZCA9IGRlc2NyaXB0aW9uLmZlY01lY2hhbmlzbXMuaW5kZXhPZignUkVEJykgIT09IC0xO1xuICB2YXIgaGFzVWxwZmVjID0gZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5pbmRleE9mKCdVTFBGRUMnKSAhPT0gLTE7XG5cbiAgLy8gZmlsdGVyIGE9c3NyYzouLi4gY25hbWU6LCBpZ25vcmUgUGxhbkItbXNpZFxuICB2YXIgc3NyY3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHJldHVybiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKTtcbiAgICB9KVxuICAgIC5maWx0ZXIoZnVuY3Rpb24ocGFydHMpIHtcbiAgICAgIHJldHVybiBwYXJ0cy5hdHRyaWJ1dGUgPT09ICdjbmFtZSc7XG4gICAgfSk7XG4gIHZhciBwcmltYXJ5U3NyYyA9IHNzcmNzLmxlbmd0aCA+IDAgJiYgc3NyY3NbMF0uc3NyYztcbiAgdmFyIHNlY29uZGFyeVNzcmM7XG5cbiAgdmFyIGZsb3dzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zc3JjLWdyb3VwOkZJRCcpXG4gICAgLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cigxNykuc3BsaXQoJyAnKTtcbiAgICAgIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24ocGFydCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQocGFydCwgMTApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIGlmIChmbG93cy5sZW5ndGggPiAwICYmIGZsb3dzWzBdLmxlbmd0aCA+IDEgJiYgZmxvd3NbMF1bMF0gPT09IHByaW1hcnlTc3JjKSB7XG4gICAgc2Vjb25kYXJ5U3NyYyA9IGZsb3dzWzBdWzFdO1xuICB9XG5cbiAgZGVzY3JpcHRpb24uY29kZWNzLmZvckVhY2goZnVuY3Rpb24oY29kZWMpIHtcbiAgICBpZiAoY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpID09PSAnUlRYJyAmJiBjb2RlYy5wYXJhbWV0ZXJzLmFwdCkge1xuICAgICAgdmFyIGVuY1BhcmFtID0ge1xuICAgICAgICBzc3JjOiBwcmltYXJ5U3NyYyxcbiAgICAgICAgY29kZWNQYXlsb2FkVHlwZTogcGFyc2VJbnQoY29kZWMucGFyYW1ldGVycy5hcHQsIDEwKVxuICAgICAgfTtcbiAgICAgIGlmIChwcmltYXJ5U3NyYyAmJiBzZWNvbmRhcnlTc3JjKSB7XG4gICAgICAgIGVuY1BhcmFtLnJ0eCA9IHtzc3JjOiBzZWNvbmRhcnlTc3JjfTtcbiAgICAgIH1cbiAgICAgIGVuY29kaW5nUGFyYW1ldGVycy5wdXNoKGVuY1BhcmFtKTtcbiAgICAgIGlmIChoYXNSZWQpIHtcbiAgICAgICAgZW5jUGFyYW0gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGVuY1BhcmFtKSk7XG4gICAgICAgIGVuY1BhcmFtLmZlYyA9IHtcbiAgICAgICAgICBzc3JjOiBwcmltYXJ5U3NyYyxcbiAgICAgICAgICBtZWNoYW5pc206IGhhc1VscGZlYyA/ICdyZWQrdWxwZmVjJyA6ICdyZWQnXG4gICAgICAgIH07XG4gICAgICAgIGVuY29kaW5nUGFyYW1ldGVycy5wdXNoKGVuY1BhcmFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBpZiAoZW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMCAmJiBwcmltYXJ5U3NyYykge1xuICAgIGVuY29kaW5nUGFyYW1ldGVycy5wdXNoKHtcbiAgICAgIHNzcmM6IHByaW1hcnlTc3JjXG4gICAgfSk7XG4gIH1cblxuICAvLyB3ZSBzdXBwb3J0IGJvdGggYj1BUyBhbmQgYj1USUFTIGJ1dCBpbnRlcnByZXQgQVMgYXMgVElBUy5cbiAgdmFyIGJhbmR3aWR0aCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2I9Jyk7XG4gIGlmIChiYW5kd2lkdGgubGVuZ3RoKSB7XG4gICAgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPVRJQVM6JykgPT09IDApIHtcbiAgICAgIGJhbmR3aWR0aCA9IHBhcnNlSW50KGJhbmR3aWR0aFswXS5zdWJzdHIoNyksIDEwKTtcbiAgICB9IGVsc2UgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPUFTOicpID09PSAwKSB7XG4gICAgICAvLyB1c2UgZm9ybXVsYSBmcm9tIEpTRVAgdG8gY29udmVydCBiPUFTIHRvIFRJQVMgdmFsdWUuXG4gICAgICBiYW5kd2lkdGggPSBwYXJzZUludChiYW5kd2lkdGhbMF0uc3Vic3RyKDUpLCAxMCkgKiAxMDAwICogMC45NVxuICAgICAgICAgIC0gKDUwICogNDAgKiA4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFuZHdpZHRoID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbmNvZGluZ1BhcmFtZXRlcnMuZm9yRWFjaChmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgIHBhcmFtcy5tYXhCaXRyYXRlID0gYmFuZHdpZHRoO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBlbmNvZGluZ1BhcmFtZXRlcnM7XG59O1xuXG4vLyBwYXJzZXMgaHR0cDovL2RyYWZ0Lm9ydGMub3JnLyNydGNydGNwcGFyYW1ldGVycypcblNEUFV0aWxzLnBhcnNlUnRjcFBhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIHJ0Y3BQYXJhbWV0ZXJzID0ge307XG5cbiAgLy8gR2V0cyB0aGUgZmlyc3QgU1NSQy4gTm90ZSB0aGEgd2l0aCBSVFggdGhlcmUgbWlnaHQgYmUgbXVsdGlwbGVcbiAgLy8gU1NSQ3MuXG4gIHZhciByZW1vdGVTc3JjID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zc3JjOicpXG4gICAgLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSk7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iai5hdHRyaWJ1dGUgPT09ICdjbmFtZSc7XG4gICAgfSlbMF07XG4gIGlmIChyZW1vdGVTc3JjKSB7XG4gICAgcnRjcFBhcmFtZXRlcnMuY25hbWUgPSByZW1vdGVTc3JjLnZhbHVlO1xuICAgIHJ0Y3BQYXJhbWV0ZXJzLnNzcmMgPSByZW1vdGVTc3JjLnNzcmM7XG4gIH1cblxuICAvLyBFZGdlIHVzZXMgdGhlIGNvbXBvdW5kIGF0dHJpYnV0ZSBpbnN0ZWFkIG9mIHJlZHVjZWRTaXplXG4gIC8vIGNvbXBvdW5kIGlzICFyZWR1Y2VkU2l6ZVxuICB2YXIgcnNpemUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXJ0Y3AtcnNpemUnKTtcbiAgcnRjcFBhcmFtZXRlcnMucmVkdWNlZFNpemUgPSByc2l6ZS5sZW5ndGggPiAwO1xuICBydGNwUGFyYW1ldGVycy5jb21wb3VuZCA9IHJzaXplLmxlbmd0aCA9PT0gMDtcblxuICAvLyBwYXJzZXMgdGhlIHJ0Y3AtbXV4IGF0dHLRlmJ1dGUuXG4gIC8vIE5vdGUgdGhhdCBFZGdlIGRvZXMgbm90IHN1cHBvcnQgdW5tdXhlZCBSVENQLlxuICB2YXIgbXV4ID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLW11eCcpO1xuICBydGNwUGFyYW1ldGVycy5tdXggPSBtdXgubGVuZ3RoID4gMDtcblxuICByZXR1cm4gcnRjcFBhcmFtZXRlcnM7XG59O1xuXG4vLyBwYXJzZXMgZWl0aGVyIGE9bXNpZDogb3IgYT1zc3JjOi4uLiBtc2lkIGxpbmVzIGFuZCByZXR1cm5zXG4vLyB0aGUgaWQgb2YgdGhlIE1lZGlhU3RyZWFtIGFuZCBNZWRpYVN0cmVhbVRyYWNrLlxuU0RQVXRpbHMucGFyc2VNc2lkID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBwYXJ0cztcbiAgdmFyIHNwZWMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1zaWQ6Jyk7XG4gIGlmIChzcGVjLmxlbmd0aCA9PT0gMSkge1xuICAgIHBhcnRzID0gc3BlY1swXS5zdWJzdHIoNykuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4ge3N0cmVhbTogcGFydHNbMF0sIHRyYWNrOiBwYXJ0c1sxXX07XG4gIH1cbiAgdmFyIHBsYW5CID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zc3JjOicpXG4gICAgLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSk7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKG1zaWRQYXJ0cykge1xuICAgICAgcmV0dXJuIG1zaWRQYXJ0cy5hdHRyaWJ1dGUgPT09ICdtc2lkJztcbiAgICB9KTtcbiAgaWYgKHBsYW5CLmxlbmd0aCA+IDApIHtcbiAgICBwYXJ0cyA9IHBsYW5CWzBdLnZhbHVlLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtzdHJlYW06IHBhcnRzWzBdLCB0cmFjazogcGFydHNbMV19O1xuICB9XG59O1xuXG4vLyBTQ1RQXG4vLyBwYXJzZXMgZHJhZnQtaWV0Zi1tbXVzaWMtc2N0cC1zZHAtMjYgZmlyc3QgYW5kIGZhbGxzIGJhY2tcbi8vIHRvIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTA1XG5TRFBVdGlscy5wYXJzZVNjdHBEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgbWxpbmUgPSBTRFBVdGlscy5wYXJzZU1MaW5lKG1lZGlhU2VjdGlvbik7XG4gIHZhciBtYXhTaXplTGluZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9bWF4LW1lc3NhZ2Utc2l6ZTonKTtcbiAgdmFyIG1heE1lc3NhZ2VTaXplO1xuICBpZiAobWF4U2l6ZUxpbmUubGVuZ3RoID4gMCkge1xuICAgIG1heE1lc3NhZ2VTaXplID0gcGFyc2VJbnQobWF4U2l6ZUxpbmVbMF0uc3Vic3RyKDE5KSwgMTApO1xuICB9XG4gIGlmIChpc05hTihtYXhNZXNzYWdlU2l6ZSkpIHtcbiAgICBtYXhNZXNzYWdlU2l6ZSA9IDY1NTM2O1xuICB9XG4gIHZhciBzY3RwUG9ydCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c2N0cC1wb3J0OicpO1xuICBpZiAoc2N0cFBvcnQubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3J0OiBwYXJzZUludChzY3RwUG9ydFswXS5zdWJzdHIoMTIpLCAxMCksXG4gICAgICBwcm90b2NvbDogbWxpbmUuZm10LFxuICAgICAgbWF4TWVzc2FnZVNpemU6IG1heE1lc3NhZ2VTaXplXG4gICAgfTtcbiAgfVxuICB2YXIgc2N0cE1hcExpbmVzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zY3RwbWFwOicpO1xuICBpZiAoc2N0cE1hcExpbmVzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgcGFydHMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNjdHBtYXA6JylbMF1cbiAgICAgIC5zdWJzdHIoMTApXG4gICAgICAuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9ydDogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICAgIHByb3RvY29sOiBwYXJ0c1sxXSxcbiAgICAgIG1heE1lc3NhZ2VTaXplOiBtYXhNZXNzYWdlU2l6ZVxuICAgIH07XG4gIH1cbn07XG5cbi8vIFNDVFBcbi8vIG91dHB1dHMgdGhlIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTI2IHZlcnNpb24gdGhhdCBhbGwgYnJvd3NlcnNcbi8vIHN1cHBvcnQgYnkgbm93IHJlY2VpdmluZyBpbiB0aGlzIGZvcm1hdCwgdW5sZXNzIHdlIG9yaWdpbmFsbHkgcGFyc2VkXG4vLyBhcyB0aGUgZHJhZnQtaWV0Zi1tbXVzaWMtc2N0cC1zZHAtMDUgZm9ybWF0IChpbmRpY2F0ZWQgYnkgdGhlIG0tbGluZVxuLy8gcHJvdG9jb2wgb2YgRFRMUy9TQ1RQIC0tIHdpdGhvdXQgVURQLyBvciBUQ1AvKVxuU0RQVXRpbHMud3JpdGVTY3RwRGVzY3JpcHRpb24gPSBmdW5jdGlvbihtZWRpYSwgc2N0cCkge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGlmIChtZWRpYS5wcm90b2NvbCAhPT0gJ0RUTFMvU0NUUCcpIHtcbiAgICBvdXRwdXQgPSBbXG4gICAgICAnbT0nICsgbWVkaWEua2luZCArICcgOSAnICsgbWVkaWEucHJvdG9jb2wgKyAnICcgKyBzY3RwLnByb3RvY29sICsgJ1xcclxcbicsXG4gICAgICAnYz1JTiBJUDQgMC4wLjAuMFxcclxcbicsXG4gICAgICAnYT1zY3RwLXBvcnQ6JyArIHNjdHAucG9ydCArICdcXHJcXG4nXG4gICAgXTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBbXG4gICAgICAnbT0nICsgbWVkaWEua2luZCArICcgOSAnICsgbWVkaWEucHJvdG9jb2wgKyAnICcgKyBzY3RwLnBvcnQgKyAnXFxyXFxuJyxcbiAgICAgICdjPUlOIElQNCAwLjAuMC4wXFxyXFxuJyxcbiAgICAgICdhPXNjdHBtYXA6JyArIHNjdHAucG9ydCArICcgJyArIHNjdHAucHJvdG9jb2wgKyAnIDY1NTM1XFxyXFxuJ1xuICAgIF07XG4gIH1cbiAgaWYgKHNjdHAubWF4TWVzc2FnZVNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIG91dHB1dC5wdXNoKCdhPW1heC1tZXNzYWdlLXNpemU6JyArIHNjdHAubWF4TWVzc2FnZVNpemUgKyAnXFxyXFxuJyk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbi8vIEdlbmVyYXRlIGEgc2Vzc2lvbiBJRCBmb3IgU0RQLlxuLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtcnRjd2ViLWpzZXAtMjAjc2VjdGlvbi01LjIuMVxuLy8gcmVjb21tZW5kcyB1c2luZyBhIGNyeXB0b2dyYXBoaWNhbGx5IHJhbmRvbSArdmUgNjQtYml0IHZhbHVlXG4vLyBidXQgcmlnaHQgbm93IHRoaXMgc2hvdWxkIGJlIGFjY2VwdGFibGUgYW5kIHdpdGhpbiB0aGUgcmlnaHQgcmFuZ2VcblNEUFV0aWxzLmdlbmVyYXRlU2Vzc2lvbklkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIxKTtcbn07XG5cbi8vIFdyaXRlIGJvaWxkZXIgcGxhdGUgZm9yIHN0YXJ0IG9mIFNEUFxuLy8gc2Vzc0lkIGFyZ3VtZW50IGlzIG9wdGlvbmFsIC0gaWYgbm90IHN1cHBsaWVkIGl0IHdpbGxcbi8vIGJlIGdlbmVyYXRlZCByYW5kb21seVxuLy8gc2Vzc1ZlcnNpb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIDJcbi8vIHNlc3NVc2VyIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byAndGhpc2lzYWRhcHRlcm9ydGMnXG5TRFBVdGlscy53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZSA9IGZ1bmN0aW9uKHNlc3NJZCwgc2Vzc1Zlciwgc2Vzc1VzZXIpIHtcbiAgdmFyIHNlc3Npb25JZDtcbiAgdmFyIHZlcnNpb24gPSBzZXNzVmVyICE9PSB1bmRlZmluZWQgPyBzZXNzVmVyIDogMjtcbiAgaWYgKHNlc3NJZCkge1xuICAgIHNlc3Npb25JZCA9IHNlc3NJZDtcbiAgfSBlbHNlIHtcbiAgICBzZXNzaW9uSWQgPSBTRFBVdGlscy5nZW5lcmF0ZVNlc3Npb25JZCgpO1xuICB9XG4gIHZhciB1c2VyID0gc2Vzc1VzZXIgfHwgJ3RoaXNpc2FkYXB0ZXJvcnRjJztcbiAgLy8gRklYTUU6IHNlc3MtaWQgc2hvdWxkIGJlIGFuIE5UUCB0aW1lc3RhbXAuXG4gIHJldHVybiAndj0wXFxyXFxuJyArXG4gICAgICAnbz0nICsgdXNlciArICcgJyArIHNlc3Npb25JZCArICcgJyArIHZlcnNpb24gK1xuICAgICAgICAnIElOIElQNCAxMjcuMC4wLjFcXHJcXG4nICtcbiAgICAgICdzPS1cXHJcXG4nICtcbiAgICAgICd0PTAgMFxcclxcbic7XG59O1xuXG5TRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbiA9IGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBjYXBzLCB0eXBlLCBzdHJlYW0pIHtcbiAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlUnRwRGVzY3JpcHRpb24odHJhbnNjZWl2ZXIua2luZCwgY2Fwcyk7XG5cbiAgLy8gTWFwIElDRSBwYXJhbWV0ZXJzICh1ZnJhZywgcHdkKSB0byBTRFAuXG4gIHNkcCArPSBTRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMoXG4gICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuZ2V0TG9jYWxQYXJhbWV0ZXJzKCkpO1xuXG4gIC8vIE1hcCBEVExTIHBhcmFtZXRlcnMgdG8gU0RQLlxuICBzZHAgKz0gU0RQVXRpbHMud3JpdGVEdGxzUGFyYW1ldGVycyhcbiAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LmdldExvY2FsUGFyYW1ldGVycygpLFxuICAgIHR5cGUgPT09ICdvZmZlcicgPyAnYWN0cGFzcycgOiAnYWN0aXZlJyk7XG5cbiAgc2RwICs9ICdhPW1pZDonICsgdHJhbnNjZWl2ZXIubWlkICsgJ1xcclxcbic7XG5cbiAgaWYgKHRyYW5zY2VpdmVyLmRpcmVjdGlvbikge1xuICAgIHNkcCArPSAnYT0nICsgdHJhbnNjZWl2ZXIuZGlyZWN0aW9uICsgJ1xcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyICYmIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7XG4gICAgc2RwICs9ICdhPXNlbmRyZWN2XFxyXFxuJztcbiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICBzZHAgKz0gJ2E9c2VuZG9ubHlcXHJcXG4nO1xuICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7XG4gICAgc2RwICs9ICdhPXJlY3Zvbmx5XFxyXFxuJztcbiAgfSBlbHNlIHtcbiAgICBzZHAgKz0gJ2E9aW5hY3RpdmVcXHJcXG4nO1xuICB9XG5cbiAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgIC8vIHNwZWMuXG4gICAgdmFyIG1zaWQgPSAnbXNpZDonICsgc3RyZWFtLmlkICsgJyAnICtcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnRyYWNrLmlkICsgJ1xcclxcbic7XG4gICAgc2RwICs9ICdhPScgKyBtc2lkO1xuXG4gICAgLy8gZm9yIENocm9tZS5cbiAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICtcbiAgICAgICAgJyAnICsgbXNpZDtcbiAgICBpZiAodHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgICAnICcgKyBtc2lkO1xuICAgICAgc2RwICs9ICdhPXNzcmMtZ3JvdXA6RklEICcgK1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArICcgJyArXG4gICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICAgJ1xcclxcbic7XG4gICAgfVxuICB9XG4gIC8vIEZJWE1FOiB0aGlzIHNob3VsZCBiZSB3cml0dGVuIGJ5IHdyaXRlUnRwRGVzY3JpcHRpb24uXG4gIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgK1xuICAgICAgJyBjbmFtZTonICsgU0RQVXRpbHMubG9jYWxDTmFtZSArICdcXHJcXG4nO1xuICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyICYmIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAnIGNuYW1lOicgKyBTRFBVdGlscy5sb2NhbENOYW1lICsgJ1xcclxcbic7XG4gIH1cbiAgcmV0dXJuIHNkcDtcbn07XG5cbi8vIEdldHMgdGhlIGRpcmVjdGlvbiBmcm9tIHRoZSBtZWRpYVNlY3Rpb24gb3IgdGhlIHNlc3Npb25wYXJ0LlxuU0RQVXRpbHMuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICAvLyBMb29rIGZvciBzZW5kcmVjdiwgc2VuZG9ubHksIHJlY3Zvbmx5LCBpbmFjdGl2ZSwgZGVmYXVsdCB0byBzZW5kcmVjdi5cbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3dpdGNoIChsaW5lc1tpXSkge1xuICAgICAgY2FzZSAnYT1zZW5kcmVjdic6XG4gICAgICBjYXNlICdhPXNlbmRvbmx5JzpcbiAgICAgIGNhc2UgJ2E9cmVjdm9ubHknOlxuICAgICAgY2FzZSAnYT1pbmFjdGl2ZSc6XG4gICAgICAgIHJldHVybiBsaW5lc1tpXS5zdWJzdHIoMik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBGSVhNRTogV2hhdCBzaG91bGQgaGFwcGVuIGhlcmU/XG4gICAgfVxuICB9XG4gIGlmIChzZXNzaW9ucGFydCkge1xuICAgIHJldHVybiBTRFBVdGlscy5nZXREaXJlY3Rpb24oc2Vzc2lvbnBhcnQpO1xuICB9XG4gIHJldHVybiAnc2VuZHJlY3YnO1xufTtcblxuU0RQVXRpbHMuZ2V0S2luZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIHZhciBtbGluZSA9IGxpbmVzWzBdLnNwbGl0KCcgJyk7XG4gIHJldHVybiBtbGluZVswXS5zdWJzdHIoMik7XG59O1xuXG5TRFBVdGlscy5pc1JlamVjdGVkID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHJldHVybiBtZWRpYVNlY3Rpb24uc3BsaXQoJyAnLCAyKVsxXSA9PT0gJzAnO1xufTtcblxuU0RQVXRpbHMucGFyc2VNTGluZSA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIHZhciBwYXJ0cyA9IGxpbmVzWzBdLnN1YnN0cigyKS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IHBhcnRzWzBdLFxuICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzFdLCAxMCksXG4gICAgcHJvdG9jb2w6IHBhcnRzWzJdLFxuICAgIGZtdDogcGFydHMuc2xpY2UoMykuam9pbignICcpXG4gIH07XG59O1xuXG5TRFBVdGlscy5wYXJzZU9MaW5lID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBsaW5lID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnbz0nKVswXTtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoMikuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICB1c2VybmFtZTogcGFydHNbMF0sXG4gICAgc2Vzc2lvbklkOiBwYXJ0c1sxXSxcbiAgICBzZXNzaW9uVmVyc2lvbjogcGFyc2VJbnQocGFydHNbMl0sIDEwKSxcbiAgICBuZXRUeXBlOiBwYXJ0c1szXSxcbiAgICBhZGRyZXNzVHlwZTogcGFydHNbNF0sXG4gICAgYWRkcmVzczogcGFydHNbNV1cbiAgfTtcbn07XG5cbi8vIGEgdmVyeSBuYWl2ZSBpbnRlcnByZXRhdGlvbiBvZiBhIHZhbGlkIFNEUC5cblNEUFV0aWxzLmlzVmFsaWRTRFAgPSBmdW5jdGlvbihibG9iKSB7XG4gIGlmICh0eXBlb2YgYmxvYiAhPT0gJ3N0cmluZycgfHwgYmxvYi5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhibG9iKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsaW5lc1tpXS5sZW5ndGggPCAyIHx8IGxpbmVzW2ldLmNoYXJBdCgxKSAhPT0gJz0nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIFRPRE86IGNoZWNrIHRoZSBtb2RpZmllciBhIGJpdCBtb3JlLlxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLlxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gU0RQVXRpbHM7XG59XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiY29udGFpbmVyXCI6XCJfMk5JLUJ1XCIsXCJ3cmFwcGVyXCI6XCJfMzhqbmVhXCIsXCJpbnB1dFwiOlwiXzFJdE1sNlwiLFwiZXJyb3ItaWNvblwiOlwiXzJfYlB4eVwiLFwiZXJyb3JJY29uXCI6XCJfMl9iUHh5XCIsXCJlcnJvclwiOlwiZ0NpNG5HXCJ9OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9XG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjYXJkXCI6XCJfMTN6d3EzXCIsXCJ0aXRsZVwiOlwiTzdCcTFBXCIsXCJ0aXRsZS10ZXh0XCI6XCJCQ2ZSOHhcIixcInRpdGxlVGV4dFwiOlwiQkNmUjh4XCIsXCJkZXNjXCI6XCJfMS11Um5tXCJ9OyIsImltcG9ydCB7IGlzVGhlbmFibGUgfSBmcm9tICcuL2lzJztcbi8qKiBTeW5jUHJvbWlzZSBpbnRlcm5hbCBzdGF0ZXMgKi9cbnZhciBTdGF0ZXM7XG4oZnVuY3Rpb24gKFN0YXRlcykge1xuICAgIC8qKiBQZW5kaW5nICovXG4gICAgU3RhdGVzW1wiUEVORElOR1wiXSA9IFwiUEVORElOR1wiO1xuICAgIC8qKiBSZXNvbHZlZCAvIE9LICovXG4gICAgU3RhdGVzW1wiUkVTT0xWRURcIl0gPSBcIlJFU09MVkVEXCI7XG4gICAgLyoqIFJlamVjdGVkIC8gRXJyb3IgKi9cbiAgICBTdGF0ZXNbXCJSRUpFQ1RFRFwiXSA9IFwiUkVKRUNURURcIjtcbn0pKFN0YXRlcyB8fCAoU3RhdGVzID0ge30pKTtcbi8qKlxuICogVGhlbmFibGUgY2xhc3MgdGhhdCBiZWhhdmVzIGxpa2UgYSBQcm9taXNlIGFuZCBmb2xsb3dzIGl0J3MgaW50ZXJmYWNlXG4gKiBidXQgaXMgbm90IGFzeW5jIGludGVybmFsbHlcbiAqL1xudmFyIFN5bmNQcm9taXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN5bmNQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gU3RhdGVzLlBFTkRJTkc7XG4gICAgICAgIHRoaXMuX2hhbmRsZXJzID0gW107XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2V0UmVzdWx0KFN0YXRlcy5SRVNPTFZFRCwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgX3RoaXMuX3NldFJlc3VsdChTdGF0ZXMuUkVKRUNURUQsIHJlYXNvbik7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9zZXRSZXN1bHQgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3N0YXRlICE9PSBTdGF0ZXMuUEVORElORykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLnRoZW4oX3RoaXMuX3Jlc29sdmUsIF90aGlzLl9yZWplY3QpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9zdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgX3RoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5fZXhlY3V0ZUhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IEZJWE1FXG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9hdHRhY2hIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVycyA9IF90aGlzLl9oYW5kbGVycy5jb25jYXQoaGFuZGxlcik7XG4gICAgICAgICAgICBfdGhpcy5fZXhlY3V0ZUhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9leGVjdXRlSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3N0YXRlID09PSBTdGF0ZXMuUEVORElORykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5fc3RhdGUgPT09IFN0YXRlcy5SRUpFQ1RFRCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyLm9ucmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIub25yZWplY3RlZChfdGhpcy5fdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlci5vbmZ1bGZpbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIub25mdWxmaWxsZWQoX3RoaXMuX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZXJzID0gW107XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleGVjdXRvcih0aGlzLl9yZXNvbHZlLCB0aGlzLl9yZWplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ1tvYmplY3QgU3luY1Byb21pc2VdJztcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLmFsbCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlLmFsbCByZXF1aXJlcyBhbiBhcnJheSBhcyBpbnB1dC5cIikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb3VudGVyID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWRDb2xsZWN0aW9uID0gW107XG4gICAgICAgICAgICBjb2xsZWN0aW9uLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgU3luY1Byb21pc2UucmVzb2x2ZShpdGVtKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRDb2xsZWN0aW9uW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVyIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudGVyICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNvbHZlZENvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLl9hdHRhY2hIYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBvbmZ1bGZpbGxlZDogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9uZnVsZmlsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogRklYTUVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvbmZ1bGZpbGxlZChyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbnJlamVjdGVkOiBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb25yZWplY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25yZWplY3RlZChyZWFzb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uIChvbnJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsOyB9LCBvbnJlamVjdGVkKTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5ID0gZnVuY3Rpb24gKG9uZmluYWxseSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWw7XG4gICAgICAgICAgICB2YXIgaXNSZWplY3RlZDtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlzUmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAob25maW5hbGx5KSB7XG4gICAgICAgICAgICAgICAgICAgIG9uZmluYWxseSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBpc1JlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YWwgPSByZWFzb247XG4gICAgICAgICAgICAgICAgaWYgKG9uZmluYWxseSkge1xuICAgICAgICAgICAgICAgICAgICBvbmZpbmFsbHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWplY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QodmFsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuICAgICAgICAgICAgICAgIHJlc29sdmUodmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBTeW5jUHJvbWlzZTtcbn0oKSk7XG5leHBvcnQgeyBTeW5jUHJvbWlzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3luY3Byb21pc2UuanMubWFwIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHY0O1xuIiwidmFyIG9iajtcbnZhciBOT1RISU5HID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbChcImltbWVyLW5vdGhpbmdcIikgOiAoIG9iaiA9IHt9LCBvYmpbXCJpbW1lci1ub3RoaW5nXCJdID0gdHJ1ZSwgb2JqICk7XG52YXIgRFJBRlRBQkxFID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuZm9yID8gU3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKSA6IFwiX18kaW1tZXJfZHJhZnRhYmxlXCI7XG52YXIgRFJBRlRfU1RBVEUgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5mb3IgPyBTeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIikgOiBcIl9fJGltbWVyX3N0YXRlXCI7XG5mdW5jdGlvbiBpc0RyYWZ0KHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmICEhdmFsdWVbRFJBRlRfU1RBVEVdO1xufVxuZnVuY3Rpb24gaXNEcmFmdGFibGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpIHx8ICEhdmFsdWVbRFJBRlRBQkxFXSB8fCAhIXZhbHVlLmNvbnN0cnVjdG9yW0RSQUZUQUJMRV0gfHwgaXNNYXAodmFsdWUpIHx8IGlzU2V0KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICByZXR1cm4gIXByb3RvIHx8IHByb3RvID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuZnVuY3Rpb24gb3JpZ2luYWwodmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHZhbHVlW0RSQUZUX1NUQVRFXSkge1xuICAgIHJldHVybiB2YWx1ZVtEUkFGVF9TVEFURV0uYmFzZTtcbiAgfSAvLyBvdGhlcndpc2UgcmV0dXJuIHVuZGVmaW5lZFxuXG59IC8vIFdlIHVzZSBNYXBzIGFzIGBkcmFmdHNgIGZvciBTZXRzLCBub3QgT2JqZWN0c1xuLy8gU2VlIHByb3h5LmpzXG5cbmZ1bmN0aW9uIGFzc2lnblNldCh0YXJnZXQsIG92ZXJyaWRlKSB7XG4gIG92ZXJyaWRlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gV2hlbiB3ZSBhZGQgbmV3IGRyYWZ0cyB3ZSBoYXZlIHRvIHJlbW92ZSB0aGVpciBvcmlnaW5hbHMgaWYgcHJlc2VudFxuICAgIHZhciBwcmV2ID0gb3JpZ2luYWwodmFsdWUpO1xuICAgIGlmIChwcmV2KSB7IHRhcmdldC5kZWxldGUocHJldik7IH1cbiAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59IC8vIFdlIHVzZSBNYXBzIGFzIGBkcmFmdHNgIGZvciBNYXBzLCBub3QgT2JqZWN0c1xuLy8gU2VlIHByb3h5LmpzXG5cbmZ1bmN0aW9uIGFzc2lnbk1hcCh0YXJnZXQsIG92ZXJyaWRlKSB7XG4gIG92ZXJyaWRlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsgcmV0dXJuIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdmFyIG92ZXJyaWRlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBvdmVycmlkZXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgb3ZlcnJpZGVzLmZvckVhY2goZnVuY3Rpb24gKG92ZXJyaWRlKSB7IHJldHVybiBPYmplY3Qua2V5cyhvdmVycmlkZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB0YXJnZXRba2V5XSA9IG92ZXJyaWRlW2tleV07IH0pOyB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn0pO1xudmFyIG93bktleXMgPSB0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0Lm93bktleXMgPyBSZWZsZWN0Lm93bktleXMgOiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gXCJ1bmRlZmluZWRcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKSk7IH0gOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KGJhc2UsIGludm9rZUdldHRlcnMpIHtcbiAgaWYgKCBpbnZva2VHZXR0ZXJzID09PSB2b2lkIDAgKSBpbnZva2VHZXR0ZXJzID0gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYmFzZSkpIHsgcmV0dXJuIGJhc2Uuc2xpY2UoKTsgfVxuICBpZiAoaXNNYXAoYmFzZSkpIHsgcmV0dXJuIG5ldyBNYXAoYmFzZSk7IH1cbiAgaWYgKGlzU2V0KGJhc2UpKSB7IHJldHVybiBuZXcgU2V0KGJhc2UpOyB9XG4gIHZhciBjbG9uZSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2UpKTtcbiAgb3duS2V5cyhiYXNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBEUkFGVF9TVEFURSkge1xuICAgICAgcmV0dXJuOyAvLyBOZXZlciBjb3B5IG92ZXIgZHJhZnQgc3RhdGUuXG4gICAgfVxuXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIGtleSk7XG4gICAgdmFyIHZhbHVlID0gZGVzYy52YWx1ZTtcblxuICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgaWYgKCFpbnZva2VHZXR0ZXJzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkltbWVyIGRyYWZ0cyBjYW5ub3QgaGF2ZSBjb21wdXRlZCBwcm9wZXJ0aWVzXCIpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGRlc2MuZ2V0LmNhbGwoYmFzZSk7XG4gICAgfVxuXG4gICAgaWYgKGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgY2xvbmVba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvbmUsIGtleSwge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbG9uZTtcbn1cbmZ1bmN0aW9uIGVhY2gob2JqLCBpdGVyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikgfHwgaXNNYXAob2JqKSB8fCBpc1NldChvYmopKSB7XG4gICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5LCBpbmRleCkgeyByZXR1cm4gaXRlcihpbmRleCwgZW50cnksIG9iaik7IH0pO1xuICB9IGVsc2Uge1xuICAgIG93bktleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGl0ZXIoa2V5LCBvYmpba2V5XSwgb2JqKTsgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzRW51bWVyYWJsZShiYXNlLCBwcm9wKSB7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wKTtcbiAgcmV0dXJuICEhZGVzYyAmJiBkZXNjLmVudW1lcmFibGU7XG59XG5mdW5jdGlvbiBoYXModGhpbmcsIHByb3ApIHtcbiAgcmV0dXJuIGlzTWFwKHRoaW5nKSA/IHRoaW5nLmhhcyhwcm9wKSA6IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGluZywgcHJvcCk7XG59XG5mdW5jdGlvbiBnZXQodGhpbmcsIHByb3ApIHtcbiAgcmV0dXJuIGlzTWFwKHRoaW5nKSA/IHRoaW5nLmdldChwcm9wKSA6IHRoaW5nW3Byb3BdO1xufVxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBGcm9tOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2M2OTkwNGE1MTFiOTAwMjY2OTM1MTY4MjIzMDYzZGQ4NzcyZGZjNDAvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9zaGFsbG93RXF1YWwuanNcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCI7XG52YXIgaGFzTWFwID0gdHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIjtcbmZ1bmN0aW9uIGlzTWFwKHRhcmdldCkge1xuICByZXR1cm4gaGFzTWFwICYmIHRhcmdldCBpbnN0YW5jZW9mIE1hcDtcbn1cbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ICE9PSBcInVuZGVmaW5lZFwiO1xuZnVuY3Rpb24gaXNTZXQodGFyZ2V0KSB7XG4gIHJldHVybiBoYXNTZXQgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU2V0O1xufVxuZnVuY3Rpb24gbWFrZUl0ZXJhYmxlKG5leHQpIHtcbiAgdmFyIG9iajtcblxuICB2YXIgc2VsZjtcbiAgcmV0dXJuIHNlbGYgPSAoIG9iaiA9IHt9LCBvYmpbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGY7IH0sIG9iai5uZXh0ID0gbmV4dCwgb2JqICk7XG59XG4vKiogTWFwLnByb3RvdHlwZS52YWx1ZXMgXy1vci1fIE1hcC5wcm90b3R5cGUuZW50cmllcyAqL1xuXG5mdW5jdGlvbiBpdGVyYXRlTWFwVmFsdWVzKHN0YXRlLCBwcm9wLCByZWNlaXZlcikge1xuICB2YXIgaXNFbnRyaWVzID0gcHJvcCAhPT0gXCJ2YWx1ZXNcIjtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBsYXRlc3Qoc3RhdGUpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgIGlmICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgdmFyIHJlZiA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgdmFyIGtleSA9IHJlZlswXTtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVjZWl2ZXIuZ2V0KGtleSk7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IGlzRW50cmllcyA/IFtrZXksIHZhbHVlXSA6IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICB9O1xufVxuZnVuY3Rpb24gbWFrZUl0ZXJhdGVTZXRWYWx1ZXMoY3JlYXRlUHJveHkpIHtcbiAgZnVuY3Rpb24gaXRlcmF0ZVNldFZhbHVlcyhzdGF0ZSwgcHJvcCkge1xuICAgIHZhciBpc0VudHJpZXMgPSBwcm9wID09PSBcImVudHJpZXNcIjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gbGF0ZXN0KHN0YXRlKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgICBpZiAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gd3JhcFNldFZhbHVlKHN0YXRlLCByZXN1bHQudmFsdWUpO1xuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IGlzRW50cmllcyA/IFt2YWx1ZSwgdmFsdWVdIDogdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXBTZXRWYWx1ZShzdGF0ZSwgdmFsdWUpIHtcbiAgICB2YXIga2V5ID0gb3JpZ2luYWwodmFsdWUpIHx8IHZhbHVlO1xuICAgIHZhciBkcmFmdCA9IHN0YXRlLmRyYWZ0cy5nZXQoa2V5KTtcblxuICAgIGlmICghZHJhZnQpIHtcbiAgICAgIGlmIChzdGF0ZS5maW5hbGl6ZWQgfHwgIWlzRHJhZnRhYmxlKHZhbHVlKSB8fCBzdGF0ZS5maW5hbGl6aW5nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgZHJhZnQgPSBjcmVhdGVQcm94eSh2YWx1ZSwgc3RhdGUpO1xuICAgICAgc3RhdGUuZHJhZnRzLnNldChrZXksIGRyYWZ0KTtcblxuICAgICAgaWYgKHN0YXRlLm1vZGlmaWVkKSB7XG4gICAgICAgIHN0YXRlLmNvcHkuYWRkKGRyYWZ0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZHJhZnQ7XG4gIH1cblxuICByZXR1cm4gaXRlcmF0ZVNldFZhbHVlcztcbn1cblxuZnVuY3Rpb24gbGF0ZXN0KHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5jb3B5IHx8IHN0YXRlLmJhc2U7XG59XG5cbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICBpZiAoIWlzRHJhZnRhYmxlKG9iaikpIHsgcmV0dXJuIG9iajsgfVxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7IHJldHVybiBvYmoubWFwKGNsb25lKTsgfVxuICBpZiAoaXNNYXAob2JqKSkgeyByZXR1cm4gbmV3IE1hcChvYmopOyB9XG4gIGlmIChpc1NldChvYmopKSB7IHJldHVybiBuZXcgU2V0KG9iaik7IH1cbiAgdmFyIGNsb25lZCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHsgY2xvbmVkW2tleV0gPSBjbG9uZShvYmpba2V5XSk7IH1cblxuICByZXR1cm4gY2xvbmVkO1xufVxuZnVuY3Rpb24gZnJlZXplKG9iaiwgZGVlcCkge1xuICBpZiAoIGRlZXAgPT09IHZvaWQgMCApIGRlZXAgPSBmYWxzZTtcblxuICBpZiAoIWlzRHJhZnRhYmxlKG9iaikgfHwgaXNEcmFmdChvYmopIHx8IE9iamVjdC5pc0Zyb3plbihvYmopKSB7IHJldHVybjsgfVxuXG4gIGlmIChpc1NldChvYmopKSB7XG4gICAgb2JqLmFkZCA9IG9iai5jbGVhciA9IG9iai5kZWxldGUgPSBkb250TXV0YXRlRnJvemVuQ29sbGVjdGlvbnM7XG4gIH0gZWxzZSBpZiAoaXNNYXAob2JqKSkge1xuICAgIG9iai5zZXQgPSBvYmouY2xlYXIgPSBvYmouZGVsZXRlID0gZG9udE11dGF0ZUZyb3plbkNvbGxlY3Rpb25zO1xuICB9XG5cbiAgT2JqZWN0LmZyZWV6ZShvYmopO1xuICBpZiAoZGVlcCkgeyBlYWNoKG9iaiwgZnVuY3Rpb24gKF8sIHZhbHVlKSB7IHJldHVybiBmcmVlemUodmFsdWUsIHRydWUpOyB9KTsgfVxufVxuXG5mdW5jdGlvbiBkb250TXV0YXRlRnJvemVuQ29sbGVjdGlvbnMoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIlRoaXMgb2JqZWN0IGhhcyBiZWVuIGZyb3plbiBhbmQgc2hvdWxkIG5vdCBiZSBtdXRhdGVkXCIpO1xufVxuXG4vKiogRWFjaCBzY29wZSByZXByZXNlbnRzIGEgYHByb2R1Y2VgIGNhbGwuICovXG5cbnZhciBJbW1lclNjb3BlID0gZnVuY3Rpb24gSW1tZXJTY29wZShwYXJlbnQpIHtcbiAgdGhpcy5kcmFmdHMgPSBbXTtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7IC8vIFdoZW5ldmVyIHRoZSBtb2RpZmllZCBkcmFmdCBjb250YWlucyBhIGRyYWZ0IGZyb20gYW5vdGhlciBzY29wZSwgd2VcbiAgLy8gbmVlZCB0byBwcmV2ZW50IGF1dG8tZnJlZXppbmcgc28gdGhlIHVub3duZWQgZHJhZnQgY2FuIGJlIGZpbmFsaXplZC5cblxuICB0aGlzLmNhbkF1dG9GcmVlemUgPSB0cnVlOyAvLyBUbyBhdm9pZCBwcm90b3R5cGUgbG9va3VwczpcblxuICB0aGlzLnBhdGNoZXMgPSBudWxsO1xufTtcblxuSW1tZXJTY29wZS5wcm90b3R5cGUudXNlUGF0Y2hlcyA9IGZ1bmN0aW9uIHVzZVBhdGNoZXMgKHBhdGNoTGlzdGVuZXIpIHtcbiAgaWYgKHBhdGNoTGlzdGVuZXIpIHtcbiAgICB0aGlzLnBhdGNoZXMgPSBbXTtcbiAgICB0aGlzLmludmVyc2VQYXRjaGVzID0gW107XG4gICAgdGhpcy5wYXRjaExpc3RlbmVyID0gcGF0Y2hMaXN0ZW5lcjtcbiAgfVxufTtcblxuSW1tZXJTY29wZS5wcm90b3R5cGUucmV2b2tlID0gZnVuY3Rpb24gcmV2b2tlJDEgKCkge1xuICB0aGlzLmxlYXZlKCk7XG4gIHRoaXMuZHJhZnRzLmZvckVhY2gocmV2b2tlKTtcbiAgdGhpcy5kcmFmdHMgPSBudWxsOyAvLyBNYWtlIGRyYWZ0LXJlbGF0ZWQgbWV0aG9kcyB0aHJvdy5cbn07XG5cbkltbWVyU2NvcGUucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24gbGVhdmUgKCkge1xuICBpZiAodGhpcyA9PT0gSW1tZXJTY29wZS5jdXJyZW50KSB7XG4gICAgSW1tZXJTY29wZS5jdXJyZW50ID0gdGhpcy5wYXJlbnQ7XG4gIH1cbn07XG5JbW1lclNjb3BlLmN1cnJlbnQgPSBudWxsO1xuXG5JbW1lclNjb3BlLmVudGVyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jdXJyZW50ID0gbmV3IEltbWVyU2NvcGUodGhpcy5jdXJyZW50KTtcbn07XG5cbmZ1bmN0aW9uIHJldm9rZShkcmFmdCkge1xuICBkcmFmdFtEUkFGVF9TVEFURV0ucmV2b2tlKCk7XG59XG5cbmZ1bmN0aW9uIHdpbGxGaW5hbGl6ZShzY29wZSwgcmVzdWx0LCBpc1JlcGxhY2VkKSB7XG4gIHNjb3BlLmRyYWZ0cy5mb3JFYWNoKGZ1bmN0aW9uIChkcmFmdCkge1xuICAgIGRyYWZ0W0RSQUZUX1NUQVRFXS5maW5hbGl6aW5nID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcGxhY2VkKSB7XG4gICAgaWYgKHNjb3BlLnBhdGNoZXMpIHtcbiAgICAgIG1hcmtDaGFuZ2VzUmVjdXJzaXZlbHkoc2NvcGUuZHJhZnRzWzBdKTtcbiAgICB9IC8vIFRoaXMgaXMgZmFzdGVyIHdoZW4gd2UgZG9uJ3QgY2FyZSBhYm91dCB3aGljaCBhdHRyaWJ1dGVzIGNoYW5nZWQuXG5cblxuICAgIG1hcmtDaGFuZ2VzU3dlZXAoc2NvcGUuZHJhZnRzKTtcbiAgfSAvLyBXaGVuIGEgY2hpbGQgZHJhZnQgaXMgcmV0dXJuZWQsIGxvb2sgZm9yIGNoYW5nZXMuXG4gIGVsc2UgaWYgKGlzRHJhZnQocmVzdWx0KSAmJiByZXN1bHRbRFJBRlRfU1RBVEVdLnNjb3BlID09PSBzY29wZSkge1xuICAgICAgbWFya0NoYW5nZXNTd2VlcChzY29wZS5kcmFmdHMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3h5KGJhc2UsIHBhcmVudCkge1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoYmFzZSk7XG4gIHZhciBkcmFmdCA9IGNsb25lUG90ZW50aWFsRHJhZnQoYmFzZSk7XG5cbiAgaWYgKGlzTWFwKGJhc2UpKSB7XG4gICAgcHJveHlNYXAoZHJhZnQpO1xuICB9IGVsc2UgaWYgKGlzU2V0KGJhc2UpKSB7XG4gICAgcHJveHlTZXQoZHJhZnQpO1xuICB9IGVsc2Uge1xuICAgIGVhY2goZHJhZnQsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBwcm94eVByb3BlcnR5KGRyYWZ0LCBwcm9wLCBpc0FycmF5IHx8IGlzRW51bWVyYWJsZShiYXNlLCBwcm9wKSk7XG4gICAgfSk7XG4gIH0gLy8gU2VlIFwicHJveHkuanNcIiBmb3IgcHJvcGVydHkgZG9jdW1lbnRhdGlvbi5cblxuXG4gIHZhciBzY29wZSA9IHBhcmVudCA/IHBhcmVudC5zY29wZSA6IEltbWVyU2NvcGUuY3VycmVudDtcbiAgdmFyIHN0YXRlID0ge1xuICAgIHNjb3BlOiBzY29wZSxcbiAgICBtb2RpZmllZDogZmFsc2UsXG4gICAgZmluYWxpemluZzogZmFsc2UsXG4gICAgLy8gZXM1IG9ubHlcbiAgICBmaW5hbGl6ZWQ6IGZhbHNlLFxuICAgIGFzc2lnbmVkOiBpc01hcChiYXNlKSA/IG5ldyBNYXAoKSA6IHt9LFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIGJhc2U6IGJhc2UsXG4gICAgZHJhZnQ6IGRyYWZ0LFxuICAgIGRyYWZ0czogaXNTZXQoYmFzZSkgPyBuZXcgTWFwKCkgOiBudWxsLFxuICAgIGNvcHk6IG51bGwsXG4gICAgcmV2b2tlOiByZXZva2UkMSxcbiAgICByZXZva2VkOiBmYWxzZSAvLyBlczUgb25seVxuXG4gIH07XG4gIGNyZWF0ZUhpZGRlblByb3BlcnR5KGRyYWZ0LCBEUkFGVF9TVEFURSwgc3RhdGUpO1xuICBzY29wZS5kcmFmdHMucHVzaChkcmFmdCk7XG4gIHJldHVybiBkcmFmdDtcbn1cblxuZnVuY3Rpb24gcmV2b2tlJDEoKSB7XG4gIHRoaXMucmV2b2tlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGxhdGVzdCQxKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5jb3B5IHx8IHN0YXRlLmJhc2U7XG59IC8vIEFjY2VzcyBhIHByb3BlcnR5IHdpdGhvdXQgY3JlYXRpbmcgYW4gSW1tZXIgZHJhZnQuXG5cblxuZnVuY3Rpb24gcGVlayhkcmFmdCwgcHJvcCkge1xuICB2YXIgc3RhdGUgPSBkcmFmdFtEUkFGVF9TVEFURV07XG5cbiAgaWYgKHN0YXRlICYmICFzdGF0ZS5maW5hbGl6aW5nKSB7XG4gICAgc3RhdGUuZmluYWxpemluZyA9IHRydWU7XG4gICAgdmFyIHZhbHVlID0gZHJhZnRbcHJvcF07XG4gICAgc3RhdGUuZmluYWxpemluZyA9IGZhbHNlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBkcmFmdFtwcm9wXTtcbn1cblxuZnVuY3Rpb24gZ2V0JDEoc3RhdGUsIHByb3ApIHtcbiAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgdmFyIHZhbHVlID0gcGVlayhsYXRlc3QkMShzdGF0ZSksIHByb3ApO1xuICBpZiAoc3RhdGUuZmluYWxpemluZykgeyByZXR1cm4gdmFsdWU7IH0gLy8gQ3JlYXRlIGEgZHJhZnQgaWYgdGhlIHZhbHVlIGlzIHVubW9kaWZpZWQuXG5cbiAgaWYgKHZhbHVlID09PSBwZWVrKHN0YXRlLmJhc2UsIHByb3ApICYmIGlzRHJhZnRhYmxlKHZhbHVlKSkge1xuICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUuY29weVtwcm9wXSA9IGNyZWF0ZVByb3h5KHZhbHVlLCBzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNldChzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcbiAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgc3RhdGUuYXNzaWduZWRbcHJvcF0gPSB0cnVlO1xuXG4gIGlmICghc3RhdGUubW9kaWZpZWQpIHtcbiAgICBpZiAoaXModmFsdWUsIHBlZWsobGF0ZXN0JDEoc3RhdGUpLCBwcm9wKSkpIHsgcmV0dXJuOyB9XG4gICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgfVxuXG4gIHN0YXRlLmNvcHlbcHJvcF0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gbWFya0NoYW5nZWQoc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5tb2RpZmllZCkge1xuICAgIHN0YXRlLm1vZGlmaWVkID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUucGFyZW50KSB7IG1hcmtDaGFuZ2VkKHN0YXRlLnBhcmVudCk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29weShzdGF0ZSkge1xuICBpZiAoIXN0YXRlLmNvcHkpIHsgc3RhdGUuY29weSA9IGNsb25lUG90ZW50aWFsRHJhZnQoc3RhdGUuYmFzZSk7IH1cbn1cblxuZnVuY3Rpb24gY2xvbmVQb3RlbnRpYWxEcmFmdChiYXNlKSB7XG4gIHZhciBzdGF0ZSA9IGJhc2UgJiYgYmFzZVtEUkFGVF9TVEFURV07XG5cbiAgaWYgKHN0YXRlKSB7XG4gICAgc3RhdGUuZmluYWxpemluZyA9IHRydWU7XG4gICAgdmFyIGRyYWZ0ID0gc2hhbGxvd0NvcHkoc3RhdGUuZHJhZnQsIHRydWUpO1xuICAgIHN0YXRlLmZpbmFsaXppbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gZHJhZnQ7XG4gIH1cblxuICByZXR1cm4gc2hhbGxvd0NvcHkoYmFzZSk7XG59IC8vIHByb3BlcnR5IGRlc2NyaXB0b3JzIGFyZSByZWN5Y2xlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgY3JlYXRlIGEgZ2V0IGFuZCBzZXQgY2xvc3VyZSBwZXIgcHJvcGVydHksXG4vLyBidXQgc2hhcmUgdGhlbSBhbGwgaW5zdGVhZFxuXG5cbnZhciBkZXNjcmlwdG9ycyA9IHt9O1xuXG5mdW5jdGlvbiBwcm94eVByb3BlcnR5KGRyYWZ0LCBwcm9wLCBlbnVtZXJhYmxlKSB7XG4gIHZhciBkZXNjID0gZGVzY3JpcHRvcnNbcHJvcF07XG5cbiAgaWYgKGRlc2MpIHtcbiAgICBkZXNjLmVudW1lcmFibGUgPSBlbnVtZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGRlc2NyaXB0b3JzW3Byb3BdID0gZGVzYyA9IHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGVudW1lcmFibGUsXG5cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0JDEkMSgpIHtcbiAgICAgICAgcmV0dXJuIGdldCQxKHRoaXNbRFJBRlRfU1RBVEVdLCBwcm9wKTtcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0JDEodmFsdWUpIHtcbiAgICAgICAgc2V0KHRoaXNbRFJBRlRfU1RBVEVdLCBwcm9wLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICB9O1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRyYWZ0LCBwcm9wLCBkZXNjKTtcbn1cblxuZnVuY3Rpb24gcHJveHlNYXAodGFyZ2V0KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgbWFwVHJhcHMpO1xuXG4gIGlmIChoYXNTeW1ib2wpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBTeW1ib2wuaXRlcmF0b3IsIHByb3h5TWV0aG9kKGl0ZXJhdGVNYXBWYWx1ZXMpKTtcbiAgfVxufVxuXG52YXIgbWFwVHJhcHMgPSBmaW5hbGl6ZVRyYXBzKHtcbiAgc2l6ZTogZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBsYXRlc3QkMShzdGF0ZSkuc2l6ZTsgfSxcbiAgaGFzOiBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGxhdGVzdCQxKHN0YXRlKS5oYXMoa2V5KTsgfTsgfSxcbiAgc2V0OiBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKGxhdGVzdCQxKHN0YXRlKS5nZXQoa2V5KSAhPT0gdmFsdWUpIHtcbiAgICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgIHN0YXRlLmFzc2lnbmVkLnNldChrZXksIHRydWUpO1xuICAgICAgc3RhdGUuY29weS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlLmRyYWZ0O1xuICB9OyB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKGtleSkge1xuICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgc3RhdGUuYXNzaWduZWQuc2V0KGtleSwgZmFsc2UpO1xuICAgIHN0YXRlLmNvcHkuZGVsZXRlKGtleSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9OyB9LFxuICBjbGVhcjogZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzdGF0ZS5jb3B5KSB7XG4gICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgfVxuXG4gICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgIHN0YXRlLmFzc2lnbmVkID0gbmV3IE1hcCgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBsYXRlc3QkMShzdGF0ZSkua2V5cygpOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGtleSA9IGxpc3RbaV07XG5cbiAgICAgIHN0YXRlLmFzc2lnbmVkLnNldChrZXksIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUuY29weS5jbGVhcigpO1xuICB9OyB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiAoc3RhdGUsIGtleSwgcmVjaWV2ZXIpIHsgcmV0dXJuIGZ1bmN0aW9uIChjYikge1xuICAgIGxhdGVzdCQxKHN0YXRlKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5LCBtYXApIHtcbiAgICAgIGNiKHJlY2lldmVyLmdldChrZXkpLCBrZXksIG1hcCk7XG4gICAgfSk7XG4gIH07IH0sXG4gIGdldDogZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gbGF0ZXN0JDEoc3RhdGUpLmdldChrZXkpO1xuXG4gICAgaWYgKHN0YXRlLmZpbmFsaXppbmcgfHwgc3RhdGUuZmluYWxpemVkIHx8ICFpc0RyYWZ0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgIT09IHN0YXRlLmJhc2UuZ2V0KGtleSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgZHJhZnQgPSBjcmVhdGVQcm94eSh2YWx1ZSwgc3RhdGUpO1xuICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICBzdGF0ZS5jb3B5LnNldChrZXksIGRyYWZ0KTtcbiAgICByZXR1cm4gZHJhZnQ7XG4gIH07IH0sXG4gIGtleXM6IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbGF0ZXN0JDEoc3RhdGUpLmtleXMoKTsgfTsgfSxcbiAgdmFsdWVzOiBpdGVyYXRlTWFwVmFsdWVzLFxuICBlbnRyaWVzOiBpdGVyYXRlTWFwVmFsdWVzXG59KTtcblxuZnVuY3Rpb24gcHJveHlTZXQodGFyZ2V0KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgc2V0VHJhcHMpO1xuXG4gIGlmIChoYXNTeW1ib2wpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBTeW1ib2wuaXRlcmF0b3IsIHByb3h5TWV0aG9kKGl0ZXJhdGVTZXRWYWx1ZXMpKTtcbiAgfVxufVxuXG52YXIgaXRlcmF0ZVNldFZhbHVlcyA9IG1ha2VJdGVyYXRlU2V0VmFsdWVzKGNyZWF0ZVByb3h5KTtcbnZhciBzZXRUcmFwcyA9IGZpbmFsaXplVHJhcHMoe1xuICBzaXplOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICByZXR1cm4gbGF0ZXN0JDEoc3RhdGUpLnNpemU7XG4gIH0sXG4gIGFkZDogZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIWxhdGVzdCQxKHN0YXRlKS5oYXModmFsdWUpKSB7XG4gICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG5cbiAgICAgIGlmICghc3RhdGUuY29weSkge1xuICAgICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmNvcHkuYWRkKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUuZHJhZnQ7XG4gIH07IH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG5cbiAgICBpZiAoIXN0YXRlLmNvcHkpIHtcbiAgICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUuY29weS5kZWxldGUodmFsdWUpO1xuICB9OyB9LFxuICBoYXM6IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBsYXRlc3QkMShzdGF0ZSkuaGFzKGtleSk7XG4gIH07IH0sXG4gIGNsZWFyOiBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG5cbiAgICBpZiAoIXN0YXRlLmNvcHkpIHtcbiAgICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUuY29weS5jbGVhcigpO1xuICB9OyB9LFxuICBrZXlzOiBpdGVyYXRlU2V0VmFsdWVzLFxuICBlbnRyaWVzOiBpdGVyYXRlU2V0VmFsdWVzLFxuICB2YWx1ZXM6IGl0ZXJhdGVTZXRWYWx1ZXMsXG4gIGZvckVhY2g6IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKGNiLCB0aGlzQXJnKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0ZVNldFZhbHVlcyhzdGF0ZSkoKTtcbiAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuXG4gICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgY2IuY2FsbCh0aGlzQXJnLCByZXN1bHQudmFsdWUsIHJlc3VsdC52YWx1ZSwgc3RhdGUuZHJhZnQpO1xuICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbiAgfTsgfVxufSk7XG5cbmZ1bmN0aW9uIGZpbmFsaXplVHJhcHModHJhcHMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRyYXBzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgdmFyIGJ1aWxkZXIgPSBrZXkgPT09IFwic2l6ZVwiID8gcHJveHlBdHRyIDogcHJveHlNZXRob2Q7XG4gICAgYWNjW2tleV0gPSBidWlsZGVyKHRyYXBzW2tleV0sIGtleSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBwcm94eUF0dHIoZm4pIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIHJldHVybiBmbihzdGF0ZSk7XG4gICAgfVxuXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3h5TWV0aG9kKHRyYXAsIGtleSkge1xuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHRyYXAoc3RhdGUsIGtleSwgc3RhdGUuZHJhZnQpLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICB9O1xufVxuXG5mdW5jdGlvbiBhc3NlcnRVbnJldm9rZWQoc3RhdGUpIHtcbiAgaWYgKHN0YXRlLnJldm9rZWQgPT09IHRydWUpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIiArIEpTT04uc3RyaW5naWZ5KGxhdGVzdCQxKHN0YXRlKSkpOyB9XG59IC8vIFRoaXMgbG9va3MgZXhwZW5zaXZlLCBidXQgb25seSBwcm94aWVzIGFyZSB2aXNpdGVkLCBhbmQgb25seSBvYmplY3RzIHdpdGhvdXQga25vd24gY2hhbmdlcyBhcmUgc2Nhbm5lZC5cblxuXG5mdW5jdGlvbiBtYXJrQ2hhbmdlc1N3ZWVwKGRyYWZ0cykge1xuICAvLyBUaGUgbmF0dXJhbCBvcmRlciBvZiBkcmFmdHMgaW4gdGhlIGBzY29wZWAgYXJyYXkgaXMgYmFzZWQgb24gd2hlbiB0aGV5XG4gIC8vIHdlcmUgYWNjZXNzZWQuIEJ5IHByb2Nlc3NpbmcgZHJhZnRzIGluIHJldmVyc2UgbmF0dXJhbCBvcmRlciwgd2UgaGF2ZSBhXG4gIC8vIGJldHRlciBjaGFuY2Ugb2YgcHJvY2Vzc2luZyBsZWFmIG5vZGVzIGZpcnN0LiBXaGVuIGEgbGVhZiBub2RlIGlzIGtub3duIHRvXG4gIC8vIGhhdmUgY2hhbmdlZCwgd2UgY2FuIGF2b2lkIGFueSB0cmF2ZXJzYWwgb2YgaXRzIGFuY2VzdG9yIG5vZGVzLlxuICBmb3IgKHZhciBpID0gZHJhZnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHN0YXRlID0gZHJhZnRzW2ldW0RSQUZUX1NUQVRFXTtcblxuICAgIGlmICghc3RhdGUubW9kaWZpZWQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0YXRlLmJhc2UpKSB7XG4gICAgICAgIGlmIChoYXNBcnJheUNoYW5nZXMoc3RhdGUpKSB7IG1hcmtDaGFuZ2VkKHN0YXRlKTsgfVxuICAgICAgfSBlbHNlIGlmIChpc01hcChzdGF0ZS5iYXNlKSkge1xuICAgICAgICBpZiAoaGFzTWFwQ2hhbmdlcyhzdGF0ZSkpIHsgbWFya0NoYW5nZWQoc3RhdGUpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzU2V0KHN0YXRlLmJhc2UpKSB7XG4gICAgICAgIGlmIChoYXNTZXRDaGFuZ2VzKHN0YXRlKSkgeyBtYXJrQ2hhbmdlZChzdGF0ZSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaGFzT2JqZWN0Q2hhbmdlcyhzdGF0ZSkpIHtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrQ2hhbmdlc1JlY3Vyc2l2ZWx5KG9iamVjdCkge1xuICBpZiAoIW9iamVjdCB8fCB0eXBlb2Ygb2JqZWN0ICE9PSBcIm9iamVjdFwiKSB7IHJldHVybjsgfVxuICB2YXIgc3RhdGUgPSBvYmplY3RbRFJBRlRfU1RBVEVdO1xuICBpZiAoIXN0YXRlKSB7IHJldHVybjsgfVxuICB2YXIgYmFzZSA9IHN0YXRlLmJhc2U7XG4gIHZhciBkcmFmdCA9IHN0YXRlLmRyYWZ0O1xuICB2YXIgYXNzaWduZWQgPSBzdGF0ZS5hc3NpZ25lZDtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIC8vIExvb2sgZm9yIGFkZGVkIGtleXMuXG4gICAgT2JqZWN0LmtleXMoZHJhZnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gVGhlIGB1bmRlZmluZWRgIGNoZWNrIGlzIGEgZmFzdCBwYXRoIGZvciBwcmUtZXhpc3Rpbmcga2V5cy5cbiAgICAgIGlmIChiYXNlW2tleV0gPT09IHVuZGVmaW5lZCAmJiAhaGFzKGJhc2UsIGtleSkpIHtcbiAgICAgICAgYXNzaWduZWRba2V5XSA9IHRydWU7XG4gICAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgIH0gZWxzZSBpZiAoIWFzc2lnbmVkW2tleV0pIHtcbiAgICAgICAgLy8gT25seSB1bnRvdWNoZWQgcHJvcGVydGllcyB0cmlnZ2VyIHJlY3Vyc2lvbi5cbiAgICAgICAgbWFya0NoYW5nZXNSZWN1cnNpdmVseShkcmFmdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTG9vayBmb3IgcmVtb3ZlZCBrZXlzLlxuXG4gICAgT2JqZWN0LmtleXMoYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvLyBUaGUgYHVuZGVmaW5lZGAgY2hlY2sgaXMgYSBmYXN0IHBhdGggZm9yIHByZS1leGlzdGluZyBrZXlzLlxuICAgICAgaWYgKGRyYWZ0W2tleV0gPT09IHVuZGVmaW5lZCAmJiAhaGFzKGRyYWZ0LCBrZXkpKSB7XG4gICAgICAgIGFzc2lnbmVkW2tleV0gPSBmYWxzZTtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKGhhc0FycmF5Q2hhbmdlcyhzdGF0ZSkpIHtcbiAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgYXNzaWduZWQubGVuZ3RoID0gdHJ1ZTtcblxuICAgIGlmIChkcmFmdC5sZW5ndGggPCBiYXNlLmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgaSA9IGRyYWZ0Lmxlbmd0aDsgaSA8IGJhc2UubGVuZ3RoOyBpKyspIHsgYXNzaWduZWRbaV0gPSBmYWxzZTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSBiYXNlLmxlbmd0aDsgaSQxIDwgZHJhZnQubGVuZ3RoOyBpJDErKykgeyBhc3NpZ25lZFtpJDFdID0gdHJ1ZTsgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IGRyYWZ0Lmxlbmd0aDsgaSQyKyspIHtcbiAgICAgIC8vIE9ubHkgdW50b3VjaGVkIGluZGljZXMgdHJpZ2dlciByZWN1cnNpb24uXG4gICAgICBpZiAoYXNzaWduZWRbaSQyXSA9PT0gdW5kZWZpbmVkKSB7IG1hcmtDaGFuZ2VzUmVjdXJzaXZlbHkoZHJhZnRbaSQyXSk7IH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzT2JqZWN0Q2hhbmdlcyhzdGF0ZSkge1xuICB2YXIgYmFzZSA9IHN0YXRlLmJhc2U7XG4gIHZhciBkcmFmdCA9IHN0YXRlLmRyYWZ0OyAvLyBTZWFyY2ggZm9yIGFkZGVkIGtleXMgYW5kIGNoYW5nZWQga2V5cy4gU3RhcnQgYXQgdGhlIGJhY2ssIGJlY2F1c2VcbiAgLy8gbm9uLW51bWVyaWMga2V5cyBhcmUgb3JkZXJlZCBieSB0aW1lIG9mIGRlZmluaXRpb24gb24gdGhlIG9iamVjdC5cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRyYWZ0KTtcblxuICBmb3IgKHZhciBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBiYXNlVmFsdWUgPSBiYXNlW2tleV07IC8vIFRoZSBgdW5kZWZpbmVkYCBjaGVjayBpcyBhIGZhc3QgcGF0aCBmb3IgcHJlLWV4aXN0aW5nIGtleXMuXG5cbiAgICBpZiAoYmFzZVZhbHVlID09PSB1bmRlZmluZWQgJiYgIWhhcyhiYXNlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIE9uY2UgYSBiYXNlIGtleSBpcyBkZWxldGVkLCBmdXR1cmUgY2hhbmdlcyBnbyB1bmRldGVjdGVkLCBiZWNhdXNlIGl0c1xuICAgIC8vIGRlc2NyaXB0b3IgaXMgZXJhc2VkLiBUaGlzIGJyYW5jaCBkZXRlY3RzIGFueSBtaXNzZWQgY2hhbmdlcy5cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZHJhZnRba2V5XTtcbiAgICAgICAgdmFyIHN0YXRlJDEgPSB2YWx1ZSAmJiB2YWx1ZVtEUkFGVF9TVEFURV07XG5cbiAgICAgICAgaWYgKHN0YXRlJDEgPyBzdGF0ZSQxLmJhc2UgIT09IGJhc2VWYWx1ZSA6ICFpcyh2YWx1ZSwgYmFzZVZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gIH0gLy8gQXQgdGhpcyBwb2ludCwgbm8ga2V5cyB3ZXJlIGFkZGVkIG9yIGNoYW5nZWQuXG4gIC8vIENvbXBhcmUga2V5IGNvdW50IHRvIGRldGVybWluZSBpZiBrZXlzIHdlcmUgZGVsZXRlZC5cblxuXG4gIHJldHVybiBrZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYmFzZSkubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBoYXNBcnJheUNoYW5nZXMoc3RhdGUpIHtcbiAgdmFyIGRyYWZ0ID0gc3RhdGUuZHJhZnQ7XG4gIGlmIChkcmFmdC5sZW5ndGggIT09IHN0YXRlLmJhc2UubGVuZ3RoKSB7IHJldHVybiB0cnVlOyB9IC8vIFNlZSAjMTE2XG4gIC8vIElmIHdlIGZpcnN0IHNob3J0ZW4gdGhlIGxlbmd0aCwgb3VyIGFycmF5IGludGVyY2VwdG9ycyB3aWxsIGJlIHJlbW92ZWQuXG4gIC8vIElmIGFmdGVyIHRoYXQgbmV3IGl0ZW1zIGFyZSBhZGRlZCwgcmVzdWx0IGluIHRoZSBzYW1lIG9yaWdpbmFsIGxlbmd0aCxcbiAgLy8gdGhvc2UgbGFzdCBpdGVtcyB3aWxsIGhhdmUgbm8gaW50ZXJjZXB0aW5nIHByb3BlcnR5LlxuICAvLyBTbyBpZiB0aGVyZSBpcyBubyBvd24gZGVzY3JpcHRvciBvbiB0aGUgbGFzdCBwb3NpdGlvbiwgd2Uga25vdyB0aGF0IGl0ZW1zIHdlcmUgcmVtb3ZlZCBhbmQgYWRkZWRcbiAgLy8gTi5CLjogc3BsaWNlLCB1bnNoaWZ0LCBldGMgb25seSBzaGlmdCB2YWx1ZXMgYXJvdW5kLCBidXQgbm90IHByb3AgZGVzY3JpcHRvcnMsIHNvIHdlIG9ubHkgaGF2ZSB0byBjaGVja1xuICAvLyB0aGUgbGFzdCBvbmVcblxuICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZHJhZnQsIGRyYWZ0Lmxlbmd0aCAtIDEpOyAvLyBkZXNjcmlwdG9yIGNhbiBiZSBudWxsLCBidXQgb25seSBmb3IgbmV3bHkgY3JlYXRlZCBzcGFyc2UgYXJyYXlzLCBlZy4gbmV3IEFycmF5KDEwKVxuXG4gIGlmIChkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmdldCkgeyByZXR1cm4gdHJ1ZTsgfSAvLyBGb3IgYWxsIG90aGVyIGNhc2VzLCB3ZSBkb24ndCBoYXZlIHRvIGNvbXBhcmUsIGFzIHRoZXkgd291bGQgaGF2ZSBiZWVuIHBpY2tlZCB1cCBieSB0aGUgaW5kZXggc2V0dGVyc1xuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFzTWFwQ2hhbmdlcyhzdGF0ZSkge1xuICB2YXIgYmFzZSA9IHN0YXRlLmJhc2U7XG4gIHZhciBkcmFmdCA9IHN0YXRlLmRyYWZ0O1xuICBpZiAoYmFzZS5zaXplICE9PSBkcmFmdC5zaXplKSB7IHJldHVybiB0cnVlOyB9IC8vIElFMTEgc3VwcG9ydHMgb25seSBmb3JFYWNoIGl0ZXJhdGlvblxuXG4gIHZhciBoYXNDaGFuZ2VzID0gZmFsc2U7XG4gIGRyYWZ0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoIWhhc0NoYW5nZXMpIHtcbiAgICAgIGhhc0NoYW5nZXMgPSBpc0RyYWZ0YWJsZSh2YWx1ZSkgPyB2YWx1ZS5tb2RpZmllZCA6IHZhbHVlICE9PSBiYXNlLmdldChrZXkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoYXNDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBoYXNTZXRDaGFuZ2VzKHN0YXRlKSB7XG4gIHZhciBiYXNlID0gc3RhdGUuYmFzZTtcbiAgdmFyIGRyYWZ0ID0gc3RhdGUuZHJhZnQ7XG4gIGlmIChiYXNlLnNpemUgIT09IGRyYWZ0LnNpemUpIHsgcmV0dXJuIHRydWU7IH0gLy8gSUUxMSBzdXBwb3J0cyBvbmx5IGZvckVhY2ggaXRlcmF0aW9uXG5cbiAgdmFyIGhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgZHJhZnQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIGlmICghaGFzQ2hhbmdlcykge1xuICAgICAgaGFzQ2hhbmdlcyA9IGlzRHJhZnRhYmxlKHZhbHVlKSA/IHZhbHVlLm1vZGlmaWVkIDogIWJhc2UuaGFzKGtleSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGhhc0NoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhpZGRlblByb3BlcnR5KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcCwge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcbn1cblxudmFyIGxlZ2FjeVByb3h5ID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHR3aWxsRmluYWxpemU6IHdpbGxGaW5hbGl6ZSxcblx0Y3JlYXRlUHJveHk6IGNyZWF0ZVByb3h5XG59KTtcblxudmFyIG9iaiQxLCBvYmokMSQxO1xuXG5mdW5jdGlvbiB3aWxsRmluYWxpemUkMSgpIHt9XG4vKipcbiAqIFJldHVybnMgYSBuZXcgZHJhZnQgb2YgdGhlIGBiYXNlYCBvYmplY3QuXG4gKlxuICogVGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgcGFyZW50IGRyYWZ0LXN0YXRlICh1c2VkIGludGVybmFsbHkpLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVByb3h5JDEoYmFzZSwgcGFyZW50KSB7XG4gIHZhciBzY29wZSA9IHBhcmVudCA/IHBhcmVudC5zY29wZSA6IEltbWVyU2NvcGUuY3VycmVudDtcbiAgdmFyIHN0YXRlID0ge1xuICAgIC8vIFRyYWNrIHdoaWNoIHByb2R1Y2UgY2FsbCB0aGlzIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICBzY29wZTogc2NvcGUsXG4gICAgLy8gVHJ1ZSBmb3IgYm90aCBzaGFsbG93IGFuZCBkZWVwIGNoYW5nZXMuXG4gICAgbW9kaWZpZWQ6IGZhbHNlLFxuICAgIC8vIFVzZWQgZHVyaW5nIGZpbmFsaXphdGlvbi5cbiAgICBmaW5hbGl6ZWQ6IGZhbHNlLFxuICAgIC8vIFRyYWNrIHdoaWNoIHByb3BlcnRpZXMgaGF2ZSBiZWVuIGFzc2lnbmVkICh0cnVlKSBvciBkZWxldGVkIChmYWxzZSkuXG4gICAgYXNzaWduZWQ6IHt9LFxuICAgIC8vIFRoZSBwYXJlbnQgZHJhZnQgc3RhdGUuXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgLy8gVGhlIGJhc2Ugc3RhdGUuXG4gICAgYmFzZTogYmFzZSxcbiAgICAvLyBUaGUgYmFzZSBwcm94eS5cbiAgICBkcmFmdDogbnVsbCxcbiAgICAvLyBBbnkgcHJvcGVydHkgcHJveGllcy5cbiAgICBkcmFmdHM6IHt9LFxuICAgIC8vIFRoZSBiYXNlIGNvcHkgd2l0aCBhbnkgdXBkYXRlZCB2YWx1ZXMuXG4gICAgY29weTogbnVsbCxcbiAgICAvLyBDYWxsZWQgYnkgdGhlIGBwcm9kdWNlYCBmdW5jdGlvbi5cbiAgICByZXZva2U6IG51bGxcbiAgfTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlO1xuICB2YXIgdHJhcHMgPSBvYmplY3RUcmFwcztcblxuICBpZiAoQXJyYXkuaXNBcnJheShiYXNlKSkge1xuICAgIHRhcmdldCA9IFtzdGF0ZV07XG4gICAgdHJhcHMgPSBhcnJheVRyYXBzO1xuICB9IC8vIE1hcCBkcmFmdHMgbXVzdCBzdXBwb3J0IG9iamVjdCBrZXlzLCBzbyB3ZSB1c2UgTWFwIG9iamVjdHMgdG8gdHJhY2sgY2hhbmdlcy5cbiAgZWxzZSBpZiAoaXNNYXAoYmFzZSkpIHtcbiAgICAgIHRyYXBzID0gbWFwVHJhcHMkMTtcbiAgICAgIHN0YXRlLmRyYWZ0cyA9IG5ldyBNYXAoKTtcbiAgICAgIHN0YXRlLmFzc2lnbmVkID0gbmV3IE1hcCgpO1xuICAgIH0gLy8gU2V0IGRyYWZ0cyB1c2UgYSBNYXAgb2JqZWN0IHRvIHRyYWNrIHdoaWNoIG9mIGl0cyB2YWx1ZXMgYXJlIGRyYWZ0ZWQuXG4gICAgLy8gQW5kIHdlIGRvbid0IG5lZWQgdGhlIFwiYXNzaWduZWRcIiBwcm9wZXJ0eSwgYmVjYXVzZSBTZXQgb2JqZWN0cyBoYXZlIG5vIGtleXMuXG4gICAgZWxzZSBpZiAoaXNTZXQoYmFzZSkpIHtcbiAgICAgICAgdHJhcHMgPSBzZXRUcmFwcyQxO1xuICAgICAgICBzdGF0ZS5kcmFmdHMgPSBuZXcgTWFwKCk7XG4gICAgICB9XG5cbiAgdmFyIHJlZiA9IFByb3h5LnJldm9jYWJsZSh0YXJnZXQsIHRyYXBzKTtcbiAgdmFyIHJldm9rZSA9IHJlZi5yZXZva2U7XG4gIHZhciBwcm94eSA9IHJlZi5wcm94eTtcbiAgc3RhdGUuZHJhZnQgPSBwcm94eTtcbiAgc3RhdGUucmV2b2tlID0gcmV2b2tlO1xuICBzY29wZS5kcmFmdHMucHVzaChwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cbi8qKlxuICogT2JqZWN0IGRyYWZ0c1xuICovXG5cbnZhciBvYmplY3RUcmFwcyA9IHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoc3RhdGUsIHByb3ApIHtcbiAgICBpZiAocHJvcCA9PT0gRFJBRlRfU1RBVEUpIHsgcmV0dXJuIHN0YXRlOyB9XG4gICAgdmFyIGRyYWZ0cyA9IHN0YXRlLmRyYWZ0czsgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIGRyYWZ0IGluIHVubW9kaWZpZWQgc3RhdGUuXG5cbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkICYmIGhhcyhkcmFmdHMsIHByb3ApKSB7XG4gICAgICByZXR1cm4gZHJhZnRzW3Byb3BdO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IGxhdGVzdCQyKHN0YXRlKVtwcm9wXTtcblxuICAgIGlmIChzdGF0ZS5maW5hbGl6ZWQgfHwgIWlzRHJhZnRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIGRyYWZ0IGluIG1vZGlmaWVkIHN0YXRlLlxuXG5cbiAgICBpZiAoc3RhdGUubW9kaWZpZWQpIHtcbiAgICAgIC8vIEFzc2lnbmVkIHZhbHVlcyBhcmUgbmV2ZXIgZHJhZnRlZC4gVGhpcyBjYXRjaGVzIGFueSBkcmFmdHMgd2UgY3JlYXRlZCwgdG9vLlxuICAgICAgaWYgKHZhbHVlICE9PSBwZWVrJDEoc3RhdGUuYmFzZSwgcHJvcCkpIHsgcmV0dXJuIHZhbHVlOyB9IC8vIFN0b3JlIGRyYWZ0cyBvbiB0aGUgY29weSAod2hlbiBvbmUgZXhpc3RzKS5cblxuICAgICAgZHJhZnRzID0gc3RhdGUuY29weTtcbiAgICB9XG5cbiAgICByZXR1cm4gZHJhZnRzW3Byb3BdID0gY3JlYXRlUHJveHkkMSh2YWx1ZSwgc3RhdGUpO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24gaGFzKHN0YXRlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHByb3AgaW4gbGF0ZXN0JDIoc3RhdGUpO1xuICB9LFxuXG4gIG93bktleXM6IGZ1bmN0aW9uIG93bktleXMoc3RhdGUpIHtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKGxhdGVzdCQyKHN0YXRlKSk7XG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKCFzdGF0ZS5tb2RpZmllZCkge1xuICAgICAgdmFyIGJhc2VWYWx1ZSA9IHBlZWskMShzdGF0ZS5iYXNlLCBwcm9wKTsgLy8gT3B0aW1pemUgYmFzZWQgb24gdmFsdWUncyB0cnV0aGluZXNzLiBUcnV0aHkgdmFsdWVzIGFyZSBndWFyYW50ZWVkIHRvXG4gICAgICAvLyBuZXZlciBiZSB1bmRlZmluZWQsIHNvIHdlIGNhbiBhdm9pZCB0aGUgYGluYCBvcGVyYXRvci4gTGFzdGx5LCB0cnV0aHlcbiAgICAgIC8vIHZhbHVlcyBtYXkgYmUgZHJhZnRzLCBidXQgZmFsc3kgdmFsdWVzIGFyZSBuZXZlciBkcmFmdHMuXG5cbiAgICAgIHZhciBpc1VuY2hhbmdlZCA9IHZhbHVlID8gaXMoYmFzZVZhbHVlLCB2YWx1ZSkgfHwgdmFsdWUgPT09IHN0YXRlLmRyYWZ0c1twcm9wXSA6IGlzKGJhc2VWYWx1ZSwgdmFsdWUpICYmIHByb3AgaW4gc3RhdGUuYmFzZTtcbiAgICAgIGlmIChpc1VuY2hhbmdlZCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgbWFya0NoYW5nZWQkMShzdGF0ZSk7XG4gICAgfVxuXG4gICAgc3RhdGUuYXNzaWduZWRbcHJvcF0gPSB0cnVlO1xuICAgIHN0YXRlLmNvcHlbcHJvcF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkoc3RhdGUsIHByb3ApIHtcbiAgICAvLyBUaGUgYHVuZGVmaW5lZGAgY2hlY2sgaXMgYSBmYXN0IHBhdGggZm9yIHByZS1leGlzdGluZyBrZXlzLlxuICAgIGlmIChwZWVrJDEoc3RhdGUuYmFzZSwgcHJvcCkgIT09IHVuZGVmaW5lZCB8fCBwcm9wIGluIHN0YXRlLmJhc2UpIHtcbiAgICAgIHN0YXRlLmFzc2lnbmVkW3Byb3BdID0gZmFsc2U7XG4gICAgICBtYXJrQ2hhbmdlZCQxKHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmFzc2lnbmVkW3Byb3BdKSB7XG4gICAgICAvLyBpZiBhbiBvcmlnaW5hbGx5IG5vdCBhc3NpZ25lZCBwcm9wZXJ0eSB3YXMgZGVsZXRlZFxuICAgICAgZGVsZXRlIHN0YXRlLmFzc2lnbmVkW3Byb3BdO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5jb3B5KSB7IGRlbGV0ZSBzdGF0ZS5jb3B5W3Byb3BdOyB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLy8gTm90ZTogV2UgbmV2ZXIgY29lcmNlIGBkZXNjLnZhbHVlYCBpbnRvIGFuIEltbWVyIGRyYWZ0LCBiZWNhdXNlIHdlIGNhbid0IG1ha2VcbiAgLy8gdGhlIHNhbWUgZ3VhcmFudGVlIGluIEVTNSBtb2RlLlxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzdGF0ZSwgcHJvcCkge1xuICAgIHZhciBvd25lciA9IGxhdGVzdCQyKHN0YXRlKTtcbiAgICB2YXIgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG93bmVyLCBwcm9wKTtcblxuICAgIGlmIChkZXNjKSB7XG4gICAgICBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIGRlc2MuY29uZmlndXJhYmxlID0gIUFycmF5LmlzQXJyYXkob3duZXIpIHx8IHByb3AgIT09IFwibGVuZ3RoXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2M7XG4gIH0sXG5cbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIpOyAvLyBwcmV0dGllci1pZ25vcmVcbiAgfSxcblxuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2Yoc3RhdGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHN0YXRlLmJhc2UpO1xuICB9LFxuXG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiKTsgLy8gcHJldHRpZXItaWdub3JlXG4gIH1cblxufTtcbi8qKlxuICogQXJyYXkgZHJhZnRzXG4gKi9cblxudmFyIGFycmF5VHJhcHMgPSB7fTtcbmVhY2gob2JqZWN0VHJhcHMsIGZ1bmN0aW9uIChrZXksIGZuKSB7XG4gIGFycmF5VHJhcHNba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICBhcmd1bWVudHNbMF0gPSBhcmd1bWVudHNbMF1bMF07XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59KTtcblxuYXJyYXlUcmFwcy5kZWxldGVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChzdGF0ZSwgcHJvcCkge1xuICBpZiAoaXNOYU4ocGFyc2VJbnQocHJvcCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIpOyAvLyBwcmV0dGllci1pZ25vcmVcbiAgfVxuXG4gIHJldHVybiBvYmplY3RUcmFwcy5kZWxldGVQcm9wZXJ0eS5jYWxsKHRoaXMsIHN0YXRlWzBdLCBwcm9wKTtcbn07XG5cbmFycmF5VHJhcHMuc2V0ID0gZnVuY3Rpb24gKHN0YXRlLCBwcm9wLCB2YWx1ZSkge1xuICBpZiAocHJvcCAhPT0gXCJsZW5ndGhcIiAmJiBpc05hTihwYXJzZUludChwcm9wKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIpOyAvLyBwcmV0dGllci1pZ25vcmVcbiAgfVxuXG4gIHJldHVybiBvYmplY3RUcmFwcy5zZXQuY2FsbCh0aGlzLCBzdGF0ZVswXSwgcHJvcCwgdmFsdWUpO1xufTsgLy8gVXNlZCBieSBNYXAgYW5kIFNldCBkcmFmdHNcblxuXG52YXIgcmVmbGVjdFRyYXBzID0gbWFrZVJlZmxlY3RUcmFwcyhbXCJvd25LZXlzXCIsIFwiaGFzXCIsIFwic2V0XCIsIFwiZGVsZXRlUHJvcGVydHlcIiwgXCJkZWZpbmVQcm9wZXJ0eVwiLCBcImdldE93blByb3BlcnR5RGVzY3JpcHRvclwiLCBcInByZXZlbnRFeHRlbnNpb25zXCIsIFwiaXNFeHRlbnNpYmxlXCIsIFwiZ2V0UHJvdG90eXBlT2ZcIl0pO1xuLyoqXG4gKiBNYXAgZHJhZnRzXG4gKi9cblxudmFyIG1hcFRyYXBzJDEgPSBtYWtlVHJhcHNGb3JHZXR0ZXJzKCggb2JqJDEgPSB7fSwgb2JqJDFbRFJBRlRfU1RBVEVdID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZTsgfSwgb2JqJDEuc2l6ZSA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gbGF0ZXN0JDIoc3RhdGUpLnNpemU7IH0sIG9iaiQxLmhhcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gbGF0ZXN0JDIoc3RhdGUpLmhhcyhrZXkpOyB9OyB9LCBvYmokMS5zZXQgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlcyA9IGxhdGVzdCQyKHN0YXRlKTtcblxuICAgIGlmICghdmFsdWVzLmhhcyhrZXkpIHx8IHZhbHVlcy5nZXQoa2V5KSAhPT0gdmFsdWUpIHtcbiAgICAgIG1hcmtDaGFuZ2VkJDEoc3RhdGUpO1xuICAgICAgc3RhdGUuYXNzaWduZWQuc2V0KGtleSwgdHJ1ZSk7XG4gICAgICBzdGF0ZS5jb3B5LnNldChrZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUuZHJhZnQ7XG4gIH07IH0sIG9iaiQxLmRlbGV0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChsYXRlc3QkMihzdGF0ZSkuaGFzKGtleSkpIHtcbiAgICAgIG1hcmtDaGFuZ2VkJDEoc3RhdGUpO1xuICAgICAgc3RhdGUuYXNzaWduZWQuc2V0KGtleSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvcHkuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9OyB9LCBvYmokMS5jbGVhciA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG1hcmtDaGFuZ2VkJDEoc3RhdGUpO1xuICAgIHN0YXRlLmFzc2lnbmVkID0gbmV3IE1hcCgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBsYXRlc3QkMihzdGF0ZSkua2V5cygpOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGtleSA9IGxpc3RbaV07XG5cbiAgICAgIHN0YXRlLmFzc2lnbmVkLnNldChrZXksIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUuY29weS5jbGVhcigpO1xuICB9OyB9LCBvYmokMS5mb3JFYWNoID0gZnVuY3Rpb24gKHN0YXRlLCBfLCByZWNlaXZlcikgeyByZXR1cm4gZnVuY3Rpb24gKGNiLCB0aGlzQXJnKSB7IHJldHVybiBsYXRlc3QkMihzdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5LCBtYXApIHtcbiAgICB2YXIgdmFsdWUgPSByZWNlaXZlci5nZXQoa2V5KTtcbiAgICBjYi5jYWxsKHRoaXNBcmcsIHZhbHVlLCBrZXksIG1hcCk7XG4gIH0pOyB9OyB9LCBvYmokMS5nZXQgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZHJhZnRzID0gc3RhdGVbc3RhdGUubW9kaWZpZWQgPyBcImNvcHlcIiA6IFwiZHJhZnRzXCJdO1xuXG4gICAgaWYgKGRyYWZ0cy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGRyYWZ0cy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBsYXRlc3QkMihzdGF0ZSkuZ2V0KGtleSk7XG5cbiAgICBpZiAoc3RhdGUuZmluYWxpemVkIHx8ICFpc0RyYWZ0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgZHJhZnQgPSBjcmVhdGVQcm94eSQxKHZhbHVlLCBzdGF0ZSk7XG4gICAgZHJhZnRzLnNldChrZXksIGRyYWZ0KTtcbiAgICByZXR1cm4gZHJhZnQ7XG4gIH07IH0sIG9iaiQxLmtleXMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhdGVzdCQyKHN0YXRlKS5rZXlzKCk7IH07IH0sIG9iaiQxLnZhbHVlcyA9IGl0ZXJhdGVNYXBWYWx1ZXMsIG9iaiQxLmVudHJpZXMgPSBpdGVyYXRlTWFwVmFsdWVzLCBvYmokMVtoYXNTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiBcIkBAaXRlcmF0b3JcIl0gPSBpdGVyYXRlTWFwVmFsdWVzLCBvYmokMSApKTtcbnZhciBpdGVyYXRlU2V0VmFsdWVzJDEgPSBtYWtlSXRlcmF0ZVNldFZhbHVlcyhjcmVhdGVQcm94eSQxKTtcbi8qKlxuICogU2V0IGRyYWZ0c1xuICovXG5cbnZhciBzZXRUcmFwcyQxID0gbWFrZVRyYXBzRm9yR2V0dGVycygoIG9iaiQxJDEgPSB7fSwgb2JqJDEkMVtEUkFGVF9TVEFURV0gPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlOyB9LCBvYmokMSQxLnNpemUgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGxhdGVzdCQyKHN0YXRlKS5zaXplOyB9LCBvYmokMSQxLmhhcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gbGF0ZXN0JDIoc3RhdGUpLmhhcyhrZXkpOyB9OyB9LCBvYmokMSQxLmFkZCA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCFsYXRlc3QkMihzdGF0ZSkuaGFzKHZhbHVlKSkge1xuICAgICAgbWFya0NoYW5nZWQkMShzdGF0ZSk7XG4gICAgICBzdGF0ZS5jb3B5LmFkZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlLmRyYWZ0O1xuICB9OyB9LCBvYmokMSQxLmRlbGV0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgbWFya0NoYW5nZWQkMShzdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlLmNvcHkuZGVsZXRlKHZhbHVlKTtcbiAgfTsgfSwgb2JqJDEkMS5jbGVhciA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG1hcmtDaGFuZ2VkJDEoc3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZS5jb3B5LmNsZWFyKCk7XG4gIH07IH0sIG9iaiQxJDEuZm9yRWFjaCA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZnVuY3Rpb24gKGNiLCB0aGlzQXJnKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0ZVNldFZhbHVlcyQxKHN0YXRlKSgpO1xuICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICBjYi5jYWxsKHRoaXNBcmcsIHJlc3VsdC52YWx1ZSwgcmVzdWx0LnZhbHVlLCBzdGF0ZS5kcmFmdCk7XG4gICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgfVxuICB9OyB9LCBvYmokMSQxLmtleXMgPSBpdGVyYXRlU2V0VmFsdWVzJDEsIG9iaiQxJDEudmFsdWVzID0gaXRlcmF0ZVNldFZhbHVlcyQxLCBvYmokMSQxLmVudHJpZXMgPSBpdGVyYXRlU2V0VmFsdWVzJDEsIG9iaiQxJDFbaGFzU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogXCJAQGl0ZXJhdG9yXCJdID0gaXRlcmF0ZVNldFZhbHVlcyQxLCBvYmokMSQxICkpO1xuLyoqXG4gKiBIZWxwZXJzXG4gKi9cbi8vIFJldHJpZXZlIHRoZSBsYXRlc3QgdmFsdWVzIG9mIHRoZSBkcmFmdC5cblxuZnVuY3Rpb24gbGF0ZXN0JDIoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmNvcHkgfHwgc3RhdGUuYmFzZTtcbn0gLy8gQWNjZXNzIGEgcHJvcGVydHkgd2l0aG91dCBjcmVhdGluZyBhbiBJbW1lciBkcmFmdC5cblxuXG5mdW5jdGlvbiBwZWVrJDEoZHJhZnQsIHByb3ApIHtcbiAgdmFyIHN0YXRlID0gZHJhZnRbRFJBRlRfU1RBVEVdO1xuICB2YXIgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN0YXRlID8gbGF0ZXN0JDIoc3RhdGUpIDogZHJhZnQsIHByb3ApO1xuICByZXR1cm4gZGVzYyAmJiBkZXNjLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBtYXJrQ2hhbmdlZCQxKHN0YXRlKSB7XG4gIGlmICghc3RhdGUubW9kaWZpZWQpIHtcbiAgICBzdGF0ZS5tb2RpZmllZCA9IHRydWU7XG4gICAgdmFyIGJhc2UgPSBzdGF0ZS5iYXNlO1xuICAgIHZhciBkcmFmdHMgPSBzdGF0ZS5kcmFmdHM7XG4gICAgdmFyIHBhcmVudCA9IHN0YXRlLnBhcmVudDtcbiAgICB2YXIgY29weSA9IHNoYWxsb3dDb3B5KGJhc2UpO1xuXG4gICAgaWYgKGlzU2V0KGJhc2UpKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgYGRyYWZ0c2AgcHJvcGVydHkgaXMgcHJlc2VydmVkIGZvciBTZXQgb2JqZWN0cywgc2luY2VcbiAgICAgIC8vIHdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB3aGljaCB2YWx1ZXMgYXJlIGRyYWZ0ZWQuXG4gICAgICBhc3NpZ25TZXQoY29weSwgZHJhZnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTWVyZ2UgbmVzdGVkIGRyYWZ0cyBpbnRvIHRoZSBjb3B5LlxuICAgICAgaWYgKGlzTWFwKGJhc2UpKSB7IGFzc2lnbk1hcChjb3B5LCBkcmFmdHMpOyB9ZWxzZSB7IGFzc2lnbihjb3B5LCBkcmFmdHMpOyB9XG4gICAgICBzdGF0ZS5kcmFmdHMgPSBudWxsO1xuICAgIH1cblxuICAgIHN0YXRlLmNvcHkgPSBjb3B5O1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbWFya0NoYW5nZWQkMShwYXJlbnQpO1xuICAgIH1cbiAgfVxufVxuLyoqIENyZWF0ZSB0cmFwcyB0aGF0IGFsbCB1c2UgdGhlIGBSZWZsZWN0YCBBUEkgb24gdGhlIGBsYXRlc3Qoc3RhdGUpYCAqL1xuXG5cbmZ1bmN0aW9uIG1ha2VSZWZsZWN0VHJhcHMobmFtZXMpIHtcbiAgcmV0dXJuIG5hbWVzLnJlZHVjZShmdW5jdGlvbiAodHJhcHMsIG5hbWUpIHtcbiAgICB0cmFwc1tuYW1lXSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgICAgIHJldHVybiBSZWZsZWN0W25hbWVdLmFwcGx5KFJlZmxlY3QsIFsgbGF0ZXN0JDIoc3RhdGUpIF0uY29uY2F0KCBhcmdzICkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gdHJhcHM7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gbWFrZVRyYXBzRm9yR2V0dGVycyhnZXR0ZXJzKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWZsZWN0VHJhcHMsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChzdGF0ZSwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIHJldHVybiBnZXR0ZXJzLmhhc093blByb3BlcnR5KHByb3ApID8gZ2V0dGVyc1twcm9wXShzdGF0ZSwgcHJvcCwgcmVjZWl2ZXIpIDogUmVmbGVjdC5nZXQoc3RhdGUsIHByb3AsIHJlY2VpdmVyKTtcbiAgICB9LFxuXG4gICAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHN0YXRlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiKTsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgfVxuXG4gIH0pO1xufVxuXG52YXIgbW9kZXJuUHJveHkgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdHdpbGxGaW5hbGl6ZTogd2lsbEZpbmFsaXplJDEsXG5cdGNyZWF0ZVByb3h5OiBjcmVhdGVQcm94eSQxXG59KTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgdmFyIGdlbmVyYXRlUGF0Y2hlc0ZuID0gQXJyYXkuaXNBcnJheShzdGF0ZS5iYXNlKSA/IGdlbmVyYXRlQXJyYXlQYXRjaGVzIDogaXNTZXQoc3RhdGUuYmFzZSkgPyBnZW5lcmF0ZVNldFBhdGNoZXMgOiBnZW5lcmF0ZVBhdGNoZXNGcm9tQXNzaWduZWQ7XG4gIGdlbmVyYXRlUGF0Y2hlc0ZuKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUFycmF5UGF0Y2hlcyhzdGF0ZSwgYmFzZVBhdGgsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzKSB7XG4gIHZhciBhc3NpZ24sIGFzc2lnbiQxO1xuXG4gIHZhciBiYXNlID0gc3RhdGUuYmFzZTtcbiAgdmFyIGNvcHkgPSBzdGF0ZS5jb3B5O1xuICB2YXIgYXNzaWduZWQgPSBzdGF0ZS5hc3NpZ25lZDsgLy8gUmVkdWNlIGNvbXBsZXhpdHkgYnkgZW5zdXJpbmcgYGJhc2VgIGlzIG5ldmVyIGxvbmdlci5cblxuICBpZiAoY29weS5sZW5ndGggPCBiYXNlLmxlbmd0aCkge1xuICAgIChhc3NpZ24gPSBbY29weSwgYmFzZV0sIGJhc2UgPSBhc3NpZ25bMF0sIGNvcHkgPSBhc3NpZ25bMV0pO1xuICAgIChhc3NpZ24kMSA9IFtpbnZlcnNlUGF0Y2hlcywgcGF0Y2hlc10sIHBhdGNoZXMgPSBhc3NpZ24kMVswXSwgaW52ZXJzZVBhdGNoZXMgPSBhc3NpZ24kMVsxXSk7XG4gIH1cblxuICB2YXIgZGVsdGEgPSBjb3B5Lmxlbmd0aCAtIGJhc2UubGVuZ3RoOyAvLyBGaW5kIHRoZSBmaXJzdCByZXBsYWNlZCBpbmRleC5cblxuICB2YXIgc3RhcnQgPSAwO1xuXG4gIHdoaWxlIChiYXNlW3N0YXJ0XSA9PT0gY29weVtzdGFydF0gJiYgc3RhcnQgPCBiYXNlLmxlbmd0aCkge1xuICAgICsrc3RhcnQ7XG4gIH0gLy8gRmluZCB0aGUgbGFzdCByZXBsYWNlZCBpbmRleC4gU2VhcmNoIGZyb20gdGhlIGVuZCB0byBvcHRpbWl6ZSBzcGxpY2UgcGF0Y2hlcy5cblxuXG4gIHZhciBlbmQgPSBiYXNlLmxlbmd0aDtcblxuICB3aGlsZSAoZW5kID4gc3RhcnQgJiYgYmFzZVtlbmQgLSAxXSA9PT0gY29weVtlbmQgKyBkZWx0YSAtIDFdKSB7XG4gICAgLS1lbmQ7XG4gIH0gLy8gUHJvY2VzcyByZXBsYWNlZCBpbmRpY2VzLlxuXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBpZiAoYXNzaWduZWRbaV0gJiYgY29weVtpXSAhPT0gYmFzZVtpXSkge1xuICAgICAgdmFyIHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgIHBhdGNoZXMucHVzaCh7XG4gICAgICAgIG9wOiBcInJlcGxhY2VcIixcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgdmFsdWU6IGNvcHlbaV1cbiAgICAgIH0pO1xuICAgICAgaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICAgIG9wOiBcInJlcGxhY2VcIixcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgdmFsdWU6IGJhc2VbaV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXBsYWNlQ291bnQgPSBwYXRjaGVzLmxlbmd0aDsgLy8gUHJvY2VzcyBhZGRlZCBpbmRpY2VzLlxuXG4gIGZvciAodmFyIGkkMSA9IGVuZCArIGRlbHRhIC0gMTsgaSQxID49IGVuZDsgLS1pJDEpIHtcbiAgICB2YXIgcGF0aCQxID0gYmFzZVBhdGguY29uY2F0KFtpJDFdKTtcbiAgICBwYXRjaGVzW3JlcGxhY2VDb3VudCArIGkkMSAtIGVuZF0gPSB7XG4gICAgICBvcDogXCJhZGRcIixcbiAgICAgIHBhdGg6IHBhdGgkMSxcbiAgICAgIHZhbHVlOiBjb3B5W2kkMV1cbiAgICB9O1xuICAgIGludmVyc2VQYXRjaGVzLnB1c2goe1xuICAgICAgb3A6IFwicmVtb3ZlXCIsXG4gICAgICBwYXRoOiBwYXRoJDFcbiAgICB9KTtcbiAgfVxufSAvLyBUaGlzIGlzIHVzZWQgZm9yIGJvdGggTWFwIG9iamVjdHMgYW5kIG5vcm1hbCBvYmplY3RzLlxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0Y2hlc0Zyb21Bc3NpZ25lZChzdGF0ZSwgYmFzZVBhdGgsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzKSB7XG4gIHZhciBiYXNlID0gc3RhdGUuYmFzZTtcbiAgdmFyIGNvcHkgPSBzdGF0ZS5jb3B5O1xuICBlYWNoKHN0YXRlLmFzc2lnbmVkLCBmdW5jdGlvbiAoa2V5LCBhc3NpZ25lZFZhbHVlKSB7XG4gICAgdmFyIG9yaWdWYWx1ZSA9IGdldChiYXNlLCBrZXkpO1xuICAgIHZhciB2YWx1ZSA9IGdldChjb3B5LCBrZXkpO1xuICAgIHZhciBvcCA9ICFhc3NpZ25lZFZhbHVlID8gXCJyZW1vdmVcIiA6IGhhcyhiYXNlLCBrZXkpID8gXCJyZXBsYWNlXCIgOiBcImFkZFwiO1xuICAgIGlmIChvcmlnVmFsdWUgPT09IHZhbHVlICYmIG9wID09PSBcInJlcGxhY2VcIikgeyByZXR1cm47IH1cbiAgICB2YXIgcGF0aCA9IGJhc2VQYXRoLmNvbmNhdChrZXkpO1xuICAgIHBhdGNoZXMucHVzaChvcCA9PT0gXCJyZW1vdmVcIiA/IHtcbiAgICAgIG9wOiBvcCxcbiAgICAgIHBhdGg6IHBhdGhcbiAgICB9IDoge1xuICAgICAgb3A6IG9wLFxuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuICAgIGludmVyc2VQYXRjaGVzLnB1c2gob3AgPT09IFwiYWRkXCIgPyB7XG4gICAgICBvcDogXCJyZW1vdmVcIixcbiAgICAgIHBhdGg6IHBhdGhcbiAgICB9IDogb3AgPT09IFwicmVtb3ZlXCIgPyB7XG4gICAgICBvcDogXCJhZGRcIixcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICB2YWx1ZTogb3JpZ1ZhbHVlXG4gICAgfSA6IHtcbiAgICAgIG9wOiBcInJlcGxhY2VcIixcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICB2YWx1ZTogb3JpZ1ZhbHVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVNldFBhdGNoZXMoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICB2YXIgYmFzZSA9IHN0YXRlLmJhc2U7XG4gIHZhciBjb3B5ID0gc3RhdGUuY29weTtcbiAgdmFyIGkgPSAwO1xuXG4gIGZvciAodmFyIGkkMSA9IDAsIGxpc3QgPSBiYXNlOyBpJDEgPCBsaXN0Lmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0W2kkMV07XG5cbiAgICBpZiAoIWNvcHkuaGFzKHZhbHVlKSkge1xuICAgICAgdmFyIHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgIHBhdGNoZXMucHVzaCh7XG4gICAgICAgIG9wOiBcInJlbW92ZVwiLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgICAgaW52ZXJzZVBhdGNoZXMudW5zaGlmdCh7XG4gICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGkrKztcbiAgfVxuXG4gIGkgPSAwO1xuXG4gIGZvciAodmFyIGkkMiA9IDAsIGxpc3QkMSA9IGNvcHk7IGkkMiA8IGxpc3QkMS5sZW5ndGg7IGkkMiArPSAxKSB7XG4gICAgdmFyIHZhbHVlJDEgPSBsaXN0JDFbaSQyXTtcblxuICAgIGlmICghYmFzZS5oYXModmFsdWUkMSkpIHtcbiAgICAgIHZhciBwYXRoJDEgPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgIHBhdGNoZXMucHVzaCh7XG4gICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICBwYXRoOiBwYXRoJDEsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSQxXG4gICAgICB9KTtcbiAgICAgIGludmVyc2VQYXRjaGVzLnVuc2hpZnQoe1xuICAgICAgICBvcDogXCJyZW1vdmVcIixcbiAgICAgICAgcGF0aDogcGF0aCQxLFxuICAgICAgICB2YWx1ZTogdmFsdWUkMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaSsrO1xuICB9XG59XG5cbnZhciBhcHBseVBhdGNoZXMgPSBmdW5jdGlvbiAoZHJhZnQsIHBhdGNoZXMpIHtcbiAgZm9yICh2YXIgaSQxID0gMCwgbGlzdCA9IHBhdGNoZXM7IGkkMSA8IGxpc3QubGVuZ3RoOyBpJDEgKz0gMSkge1xuICAgIHZhciBwYXRjaCA9IGxpc3RbaSQxXTtcblxuICAgIHZhciBwYXRoID0gcGF0Y2gucGF0aDtcbiAgICB2YXIgb3AgPSBwYXRjaC5vcDtcbiAgICBpZiAoIXBhdGgubGVuZ3RoKSB7IHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgc3RhdGVcIik7IH1cbiAgICB2YXIgYmFzZSA9IGRyYWZ0O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYmFzZSA9IGdldChiYXNlLCBwYXRoW2ldKTtcbiAgICAgIGlmICghYmFzZSB8fCB0eXBlb2YgYmFzZSAhPT0gXCJvYmplY3RcIikgeyB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIiArIHBhdGguam9pbihcIi9cIikpOyB9IC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IGNsb25lKHBhdGNoLnZhbHVlKTsgLy8gdXNlZCB0byBjbG9uZSBwYXRjaCB0byBlbnN1cmUgb3JpZ2luYWwgcGF0Y2ggaXMgbm90IG1vZGlmaWVkLCBzZWUgIzQxMVxuXG4gICAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcblxuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgIGNhc2UgXCJyZXBsYWNlXCI6XG4gICAgICAgIGlmIChpc01hcChiYXNlKSkge1xuICAgICAgICAgIGJhc2Uuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzU2V0KGJhc2UpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgdmFsdWUgaXMgYW4gb2JqZWN0LCB0aGVuIGl0J3MgYXNzaWduZWQgYnkgcmVmZXJlbmNlXG4gICAgICAgICAgLy8gaW4gdGhlIGZvbGxvd2luZyBhZGQgb3IgcmVtb3ZlIG9wcywgdGhlIHZhbHVlIGZpZWxkIGluc2lkZSB0aGUgcGF0Y2ggd2lsbCBhbHNvIGJlIG1vZGlmeWVkXG4gICAgICAgICAgLy8gc28gd2UgdXNlIHZhbHVlIGZyb20gdGhlIGNsb25lZCBwYXRjaFxuICAgICAgICAgIGJhc2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJhZGRcIjpcbiAgICAgICAgaWYgKGlzU2V0KGJhc2UpKSB7XG4gICAgICAgICAgYmFzZS5kZWxldGUocGF0Y2gudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgQXJyYXkuaXNBcnJheShiYXNlKSA/IGJhc2Uuc3BsaWNlKGtleSwgMCwgdmFsdWUpIDogaXNNYXAoYmFzZSkgPyBiYXNlLnNldChrZXksIHZhbHVlKSA6IGlzU2V0KGJhc2UpID8gYmFzZS5hZGQodmFsdWUpIDogYmFzZVtrZXldID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwicmVtb3ZlXCI6XG4gICAgICAgIEFycmF5LmlzQXJyYXkoYmFzZSkgPyBiYXNlLnNwbGljZShrZXksIDEpIDogaXNNYXAoYmFzZSkgPyBiYXNlLmRlbGV0ZShrZXkpIDogaXNTZXQoYmFzZSkgPyBiYXNlLmRlbGV0ZShwYXRjaC52YWx1ZSkgOiBkZWxldGUgYmFzZVtrZXldO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgcGF0Y2ggb3BlcmF0aW9uOiBcIiArIG9wKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHJhZnQ7XG59O1xuXG5mdW5jdGlvbiB2ZXJpZnlNaW5pZmllZCgpIHt9XG5cbnZhciBjb25maWdEZWZhdWx0cyA9IHtcbiAgdXNlUHJveGllczogdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBQcm94eS5yZXZvY2FibGUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIsXG4gIGF1dG9GcmVlemU6IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIDogdmVyaWZ5TWluaWZpZWQubmFtZSA9PT0gXCJ2ZXJpZnlNaW5pZmllZFwiLFxuICBvbkFzc2lnbjogbnVsbCxcbiAgb25EZWxldGU6IG51bGwsXG4gIG9uQ29weTogbnVsbFxufTtcbnZhciBJbW1lciA9IGZ1bmN0aW9uIEltbWVyKGNvbmZpZykge1xuICBhc3NpZ24odGhpcywgY29uZmlnRGVmYXVsdHMsIGNvbmZpZyk7XG4gIHRoaXMuc2V0VXNlUHJveGllcyh0aGlzLnVzZVByb3hpZXMpO1xuICB0aGlzLnByb2R1Y2UgPSB0aGlzLnByb2R1Y2UuYmluZCh0aGlzKTtcbiAgdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMgPSB0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKHRoaXMpO1xufTtcblxuSW1tZXIucHJvdG90eXBlLnByb2R1Y2UgPSBmdW5jdGlvbiBwcm9kdWNlIChiYXNlLCByZWNpcGUsIHBhdGNoTGlzdGVuZXIpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjdXJyaWVkIGludm9jYXRpb25cbiAgaWYgKHR5cGVvZiBiYXNlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHJlY2lwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGRlZmF1bHRCYXNlID0gcmVjaXBlO1xuICAgIHJlY2lwZSA9IGJhc2U7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkUHJvZHVjZShiYXNlKSB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICBpZiAoIGJhc2UgPT09IHZvaWQgMCApIGJhc2UgPSBkZWZhdWx0QmFzZTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgcmV0dXJuIHNlbGYucHJvZHVjZShiYXNlLCBmdW5jdGlvbiAoZHJhZnQpIHsgcmV0dXJuIHJlY2lwZS5jYWxsLmFwcGx5KHJlY2lwZSwgWyB0aGlzJDEsIGRyYWZ0IF0uY29uY2F0KCBhcmdzICkpOyB9KTsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgfTtcbiAgfSAvLyBwcmV0dGllci1pZ25vcmVcblxuXG4gIHtcbiAgICBpZiAodHlwZW9mIHJlY2lwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZmlyc3Qgb3Igc2Vjb25kIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHBhdGNoTGlzdGVuZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGF0Y2hMaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIik7XG4gICAgfVxuICB9XG4gIHZhciByZXN1bHQ7IC8vIE9ubHkgcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBhbmQgXCJpbW1lcmFibGUgY2xhc3Nlc1wiIGFyZSBkcmFmdGVkLlxuXG4gIGlmIChpc0RyYWZ0YWJsZShiYXNlKSkge1xuICAgIHZhciBzY29wZSA9IEltbWVyU2NvcGUuZW50ZXIoKTtcbiAgICB2YXIgcHJveHkgPSB0aGlzLmNyZWF0ZVByb3h5KGJhc2UpO1xuICAgIHZhciBoYXNFcnJvciA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gcmVjaXBlKHByb3h5KTtcbiAgICAgIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIGZpbmFsbHkgaW5zdGVhZCBvZiBjYXRjaCArIHJldGhyb3cgYmV0dGVyIHByZXNlcnZlcyBvcmlnaW5hbCBzdGFja1xuICAgICAgaWYgKGhhc0Vycm9yKSB7IHNjb3BlLnJldm9rZSgpOyB9ZWxzZSB7IHNjb3BlLmxlYXZlKCk7IH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgc2NvcGUudXNlUGF0Y2hlcyhwYXRjaExpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMkMS5wcm9jZXNzUmVzdWx0KHJlc3VsdCwgc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHNjb3BlLnJldm9rZSgpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNjb3BlLnVzZVBhdGNoZXMocGF0Y2hMaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc1Jlc3VsdChyZXN1bHQsIHNjb3BlKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSByZWNpcGUoYmFzZSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gTk9USElORykgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7IHJlc3VsdCA9IGJhc2U7IH1cbiAgICB0aGlzLm1heWJlRnJlZXplKHJlc3VsdCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxuSW1tZXIucHJvdG90eXBlLnByb2R1Y2VXaXRoUGF0Y2hlcyA9IGZ1bmN0aW9uIHByb2R1Y2VXaXRoUGF0Y2hlcyAoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgIHJldHVybiB0aGlzJDEucHJvZHVjZVdpdGhQYXRjaGVzKHN0YXRlLCBmdW5jdGlvbiAoZHJhZnQpIHsgcmV0dXJuIGFyZzEuYXBwbHkodm9pZCAwLCBbIGRyYWZ0IF0uY29uY2F0KCBhcmdzICkpOyB9KTtcbiAgICAgIH07XG4gIH0gLy8gbm9uLWN1cnJpZWQgZm9ybVxuXG5cbiAgaWYgKGFyZzMpIHsgdGhyb3cgbmV3IEVycm9yKFwiQSBwYXRjaCBsaXN0ZW5lciBjYW5ub3QgYmUgcGFzc2VkIHRvIHByb2R1Y2VXaXRoUGF0Y2hlc1wiKTsgfVxuICB2YXIgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXM7XG4gIHZhciBuZXh0U3RhdGUgPSB0aGlzLnByb2R1Y2UoYXJnMSwgYXJnMiwgZnVuY3Rpb24gKHAsIGlwKSB7XG4gICAgcGF0Y2hlcyA9IHA7XG4gICAgaW52ZXJzZVBhdGNoZXMgPSBpcDtcbiAgfSk7XG4gIHJldHVybiBbbmV4dFN0YXRlLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlc107XG59O1xuXG5JbW1lci5wcm90b3R5cGUuY3JlYXRlRHJhZnQgPSBmdW5jdGlvbiBjcmVhdGVEcmFmdCAoYmFzZSkge1xuICBpZiAoIWlzRHJhZnRhYmxlKGJhc2UpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiKTsgLy8gcHJldHRpZXItaWdub3JlXG4gIH1cblxuICB2YXIgc2NvcGUgPSBJbW1lclNjb3BlLmVudGVyKCk7XG4gIHZhciBwcm94eSA9IHRoaXMuY3JlYXRlUHJveHkoYmFzZSk7XG4gIHByb3h5W0RSQUZUX1NUQVRFXS5pc01hbnVhbCA9IHRydWU7XG4gIHNjb3BlLmxlYXZlKCk7XG4gIHJldHVybiBwcm94eTtcbn07XG5cbkltbWVyLnByb3RvdHlwZS5maW5pc2hEcmFmdCA9IGZ1bmN0aW9uIGZpbmlzaERyYWZ0IChkcmFmdCwgcGF0Y2hMaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSBkcmFmdCAmJiBkcmFmdFtEUkFGVF9TVEFURV07XG5cbiAgaWYgKCFzdGF0ZSB8fCAhc3RhdGUuaXNNYW51YWwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIpOyAvLyBwcmV0dGllci1pZ25vcmVcbiAgfVxuXG4gIGlmIChzdGF0ZS5maW5hbGl6ZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIik7IC8vIHByZXR0aWVyLWlnbm9yZVxuICB9XG5cbiAgdmFyIHNjb3BlID0gc3RhdGUuc2NvcGU7XG4gIHNjb3BlLnVzZVBhdGNoZXMocGF0Y2hMaXN0ZW5lcik7XG4gIHJldHVybiB0aGlzLnByb2Nlc3NSZXN1bHQodW5kZWZpbmVkLCBzY29wZSk7XG59O1xuXG5JbW1lci5wcm90b3R5cGUuc2V0QXV0b0ZyZWV6ZSA9IGZ1bmN0aW9uIHNldEF1dG9GcmVlemUgKHZhbHVlKSB7XG4gIHRoaXMuYXV0b0ZyZWV6ZSA9IHZhbHVlO1xufTtcblxuSW1tZXIucHJvdG90eXBlLnNldFVzZVByb3hpZXMgPSBmdW5jdGlvbiBzZXRVc2VQcm94aWVzICh2YWx1ZSkge1xuICB0aGlzLnVzZVByb3hpZXMgPSB2YWx1ZTtcbiAgYXNzaWduKHRoaXMsIHZhbHVlID8gbW9kZXJuUHJveHkgOiBsZWdhY3lQcm94eSk7XG59O1xuXG5JbW1lci5wcm90b3R5cGUuYXBwbHlQYXRjaGVzID0gZnVuY3Rpb24gYXBwbHlQYXRjaGVzJDEgKGJhc2UsIHBhdGNoZXMpIHtcbiAgLy8gSWYgYSBwYXRjaCByZXBsYWNlcyB0aGUgZW50aXJlIHN0YXRlLCB0YWtlIHRoYXQgcmVwbGFjZW1lbnQgYXMgYmFzZVxuICAvLyBiZWZvcmUgYXBwbHlpbmcgcGF0Y2hlc1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSBwYXRjaGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhdGNoID0gcGF0Y2hlc1tpXTtcblxuICAgIGlmIChwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMCAmJiBwYXRjaC5vcCA9PT0gXCJyZXBsYWNlXCIpIHtcbiAgICAgIGJhc2UgPSBwYXRjaC52YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0RyYWZ0KGJhc2UpKSB7XG4gICAgLy8gTi5COiBuZXZlciBoaXRzIGlmIHNvbWUgcGF0Y2ggYSByZXBsYWNlbWVudCwgcGF0Y2hlcyBhcmUgbmV2ZXIgZHJhZnRzXG4gICAgcmV0dXJuIGFwcGx5UGF0Y2hlcyhiYXNlLCBwYXRjaGVzKTtcbiAgfSAvLyBPdGhlcndpc2UsIHByb2R1Y2UgYSBjb3B5IG9mIHRoZSBiYXNlIHN0YXRlLlxuXG5cbiAgcmV0dXJuIHRoaXMucHJvZHVjZShiYXNlLCBmdW5jdGlvbiAoZHJhZnQpIHsgcmV0dXJuIGFwcGx5UGF0Y2hlcyhkcmFmdCwgcGF0Y2hlcy5zbGljZShpICsgMSkpOyB9KTtcbn07XG4vKiogQGludGVybmFsICovXG5cblxuSW1tZXIucHJvdG90eXBlLnByb2Nlc3NSZXN1bHQgPSBmdW5jdGlvbiBwcm9jZXNzUmVzdWx0IChyZXN1bHQsIHNjb3BlKSB7XG4gIHZhciBiYXNlRHJhZnQgPSBzY29wZS5kcmFmdHNbMF07XG4gIHZhciBpc1JlcGxhY2VkID0gcmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9PSBiYXNlRHJhZnQ7XG4gIHRoaXMud2lsbEZpbmFsaXplKHNjb3BlLCByZXN1bHQsIGlzUmVwbGFjZWQpO1xuXG4gIGlmIChpc1JlcGxhY2VkKSB7XG4gICAgaWYgKGJhc2VEcmFmdFtEUkFGVF9TVEFURV0ubW9kaWZpZWQpIHtcbiAgICAgIHNjb3BlLnJldm9rZSgpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIik7IC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIH1cblxuICAgIGlmIChpc0RyYWZ0YWJsZShyZXN1bHQpKSB7XG4gICAgICAvLyBGaW5hbGl6ZSB0aGUgcmVzdWx0IGluIGNhc2UgaXQgY29udGFpbnMgKG9yIGlzKSBhIHN1YnNldCBvZiB0aGUgZHJhZnQuXG4gICAgICByZXN1bHQgPSB0aGlzLmZpbmFsaXplKHJlc3VsdCwgbnVsbCwgc2NvcGUpO1xuICAgICAgdGhpcy5tYXliZUZyZWV6ZShyZXN1bHQpO1xuICAgIH1cblxuICAgIGlmIChzY29wZS5wYXRjaGVzKSB7XG4gICAgICBzY29wZS5wYXRjaGVzLnB1c2goe1xuICAgICAgICBvcDogXCJyZXBsYWNlXCIsXG4gICAgICAgIHBhdGg6IFtdLFxuICAgICAgICB2YWx1ZTogcmVzdWx0XG4gICAgICB9KTtcbiAgICAgIHNjb3BlLmludmVyc2VQYXRjaGVzLnB1c2goe1xuICAgICAgICBvcDogXCJyZXBsYWNlXCIsXG4gICAgICAgIHBhdGg6IFtdLFxuICAgICAgICB2YWx1ZTogYmFzZURyYWZ0W0RSQUZUX1NUQVRFXS5iYXNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRmluYWxpemUgdGhlIGJhc2UgZHJhZnQuXG4gICAgcmVzdWx0ID0gdGhpcy5maW5hbGl6ZShiYXNlRHJhZnQsIFtdLCBzY29wZSk7XG4gIH1cblxuICBzY29wZS5yZXZva2UoKTtcblxuICBpZiAoc2NvcGUucGF0Y2hlcykge1xuICAgIHNjb3BlLnBhdGNoTGlzdGVuZXIoc2NvcGUucGF0Y2hlcywgc2NvcGUuaW52ZXJzZVBhdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCAhPT0gTk9USElORyA/IHJlc3VsdCA6IHVuZGVmaW5lZDtcbn07XG4vKipcbiAqIEBpbnRlcm5hbFxuICogRmluYWxpemUgYSBkcmFmdCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgdW5tb2RpZmllZCBiYXNlIHN0YXRlIG9yIGEgbW9kaWZpZWRcbiAqIGNvcHkgb2YgdGhlIGJhc2Ugc3RhdGUuXG4gKi9cblxuXG5JbW1lci5wcm90b3R5cGUuZmluYWxpemUgPSBmdW5jdGlvbiBmaW5hbGl6ZSAoZHJhZnQsIHBhdGgsIHNjb3BlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gZHJhZnRbRFJBRlRfU1RBVEVdO1xuXG4gIGlmICghc3RhdGUpIHtcbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGRyYWZ0KSkgeyByZXR1cm4gZHJhZnQ7IH1cbiAgICByZXR1cm4gdGhpcy5maW5hbGl6ZVRyZWUoZHJhZnQsIG51bGwsIHNjb3BlKTtcbiAgfSAvLyBOZXZlciBmaW5hbGl6ZSBkcmFmdHMgb3duZWQgYnkgYW5vdGhlciBzY29wZS5cblxuXG4gIGlmIChzdGF0ZS5zY29wZSAhPT0gc2NvcGUpIHtcbiAgICByZXR1cm4gZHJhZnQ7XG4gIH1cblxuICBpZiAoIXN0YXRlLm1vZGlmaWVkKSB7XG4gICAgdGhpcy5tYXliZUZyZWV6ZShzdGF0ZS5iYXNlLCB0cnVlKTtcbiAgICByZXR1cm4gc3RhdGUuYmFzZTtcbiAgfVxuXG4gIGlmICghc3RhdGUuZmluYWxpemVkKSB7XG4gICAgc3RhdGUuZmluYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpbmFsaXplVHJlZShzdGF0ZS5kcmFmdCwgcGF0aCwgc2NvcGUpOyAvLyBXZSBjYW5ub3QgcmVhbGx5IGRlbGV0ZSBhbnl0aGluZyBpbnNpZGUgb2YgYSBTZXQuIFdlIGNhbiBvbmx5IHJlcGxhY2UgdGhlIHdob2xlIFNldC5cblxuICAgIGlmICh0aGlzLm9uRGVsZXRlICYmICFpc1NldChzdGF0ZS5iYXNlKSkge1xuICAgICAgLy8gVGhlIGBhc3NpZ25lZGAgb2JqZWN0IGlzIHVucmVsaWFibGUgd2l0aCBFUzUgZHJhZnRzLlxuICAgICAgaWYgKHRoaXMudXNlUHJveGllcykge1xuICAgICAgICB2YXIgYXNzaWduZWQgPSBzdGF0ZS5hc3NpZ25lZDtcbiAgICAgICAgZWFjaChhc3NpZ25lZCwgZnVuY3Rpb24gKHByb3AsIGV4aXN0cykge1xuICAgICAgICAgIGlmICghZXhpc3RzKSB7IHRoaXMkMS5vbkRlbGV0ZShzdGF0ZSwgcHJvcCk7IH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBGaWd1cmUgaXQgb3V0IGZvciBNYXBzIGFuZCBTZXRzIGlmIHdlIG5lZWQgdG8gc3VwcG9ydCBFUzVcbiAgICAgICAgdmFyIGJhc2UgPSBzdGF0ZS5iYXNlO1xuICAgICAgICAgIHZhciBjb3B5ID0gc3RhdGUuY29weTtcbiAgICAgICAgZWFjaChiYXNlLCBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIGlmICghaGFzKGNvcHksIHByb3ApKSB7IHRoaXMkMS5vbkRlbGV0ZShzdGF0ZSwgcHJvcCk7IH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25Db3B5KSB7XG4gICAgICB0aGlzLm9uQ29weShzdGF0ZSk7XG4gICAgfSAvLyBBdCB0aGlzIHBvaW50LCBhbGwgZGVzY2VuZGFudHMgb2YgYHN0YXRlLmNvcHlgIGhhdmUgYmVlbiBmaW5hbGl6ZWQsXG4gICAgLy8gc28gd2UgY2FuIGJlIHN1cmUgdGhhdCBgc2NvcGUuY2FuQXV0b0ZyZWV6ZWAgaXMgYWNjdXJhdGUuXG5cblxuICAgIGlmICh0aGlzLmF1dG9GcmVlemUgJiYgc2NvcGUuY2FuQXV0b0ZyZWV6ZSkge1xuICAgICAgZnJlZXplKHN0YXRlLmNvcHksIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGF0aCAmJiBzY29wZS5wYXRjaGVzKSB7XG4gICAgICBnZW5lcmF0ZVBhdGNoZXMoc3RhdGUsIHBhdGgsIHNjb3BlLnBhdGNoZXMsIHNjb3BlLmludmVyc2VQYXRjaGVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY29weTtcbn07XG4vKipcbiAqIEBpbnRlcm5hbFxuICogRmluYWxpemUgYWxsIGRyYWZ0cyBpbiB0aGUgZ2l2ZW4gc3RhdGUgdHJlZS5cbiAqL1xuXG5cbkltbWVyLnByb3RvdHlwZS5maW5hbGl6ZVRyZWUgPSBmdW5jdGlvbiBmaW5hbGl6ZVRyZWUgKHJvb3QsIHJvb3RQYXRoLCBzY29wZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHJvb3RbRFJBRlRfU1RBVEVdO1xuXG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICghdGhpcy51c2VQcm94aWVzKSB7XG4gICAgICAvLyBDcmVhdGUgdGhlIGZpbmFsIGNvcHksIHdpdGggYWRkZWQga2V5cyBhbmQgd2l0aG91dCBkZWxldGVkIGtleXMuXG4gICAgICBzdGF0ZS5jb3B5ID0gc2hhbGxvd0NvcHkoc3RhdGUuZHJhZnQsIHRydWUpO1xuICAgIH1cblxuICAgIHJvb3QgPSBzdGF0ZS5jb3B5O1xuICB9XG5cbiAgdmFyIG5lZWRQYXRjaGVzID0gISFyb290UGF0aCAmJiAhIXNjb3BlLnBhdGNoZXM7XG5cbiAgdmFyIGZpbmFsaXplUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcCwgdmFsdWUsIHBhcmVudCkge1xuICAgIGlmICh2YWx1ZSA9PT0gcGFyZW50KSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkltbWVyIGZvcmJpZHMgY2lyY3VsYXIgcmVmZXJlbmNlc1wiKTtcbiAgICB9IC8vIEluIHRoZSBgZmluYWxpemVUcmVlYCBtZXRob2QsIG9ubHkgdGhlIGByb290YCBvYmplY3QgbWF5IGJlIGEgZHJhZnQuXG5cblxuICAgIHZhciBpc0RyYWZ0UHJvcCA9ICEhc3RhdGUgJiYgcGFyZW50ID09PSByb290O1xuICAgIHZhciBpc1NldE1lbWJlciA9IGlzU2V0KHBhcmVudCk7XG5cbiAgICBpZiAoaXNEcmFmdCh2YWx1ZSkpIHtcbiAgICAgIHZhciBwYXRoID0gaXNEcmFmdFByb3AgJiYgbmVlZFBhdGNoZXMgJiYgIWlzU2V0TWVtYmVyICYmIC8vIFNldCBvYmplY3RzIGFyZSBhdG9taWMgc2luY2UgdGhleSBoYXZlIG5vIGtleXMuXG4gICAgICAhaGFzKHN0YXRlLmFzc2lnbmVkLCBwcm9wKSAvLyBTa2lwIGRlZXAgcGF0Y2hlcyBmb3IgYXNzaWduZWQga2V5cy5cbiAgICAgID8gcm9vdFBhdGguY29uY2F0KHByb3ApIDogbnVsbDsgLy8gRHJhZnRzIG93bmVkIGJ5IGBzY29wZWAgYXJlIGZpbmFsaXplZCBoZXJlLlxuXG4gICAgICB2YWx1ZSA9IHRoaXMkMS5maW5hbGl6ZSh2YWx1ZSwgcGF0aCwgc2NvcGUpO1xuICAgICAgcmVwbGFjZShwYXJlbnQsIHByb3AsIHZhbHVlKTsgLy8gRHJhZnRzIGZyb20gYW5vdGhlciBzY29wZSBtdXN0IHByZXZlbnQgYXV0by1mcmVlemluZy5cblxuICAgICAgaWYgKGlzRHJhZnQodmFsdWUpKSB7XG4gICAgICAgIHNjb3BlLmNhbkF1dG9GcmVlemUgPSBmYWxzZTtcbiAgICAgIH0gLy8gVW5jaGFuZ2VkIGRyYWZ0cyBhcmUgbmV2ZXIgcGFzc2VkIHRvIHRoZSBgb25Bc3NpZ25gIGhvb2suXG5cblxuICAgICAgaWYgKGlzRHJhZnRQcm9wICYmIHZhbHVlID09PSBnZXQoc3RhdGUuYmFzZSwgcHJvcCkpIHsgcmV0dXJuOyB9XG4gICAgfSAvLyBVbmNoYW5nZWQgZHJhZnQgcHJvcGVydGllcyBhcmUgaWdub3JlZC5cbiAgICBlbHNlIGlmIChpc0RyYWZ0UHJvcCAmJiBpcyh2YWx1ZSwgZ2V0KHN0YXRlLmJhc2UsIHByb3ApKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFNlYXJjaCBuZXcgb2JqZWN0cyBmb3IgdW5maW5hbGl6ZWQgZHJhZnRzLiBGcm96ZW4gb2JqZWN0cyBzaG91bGQgbmV2ZXIgY29udGFpbiBkcmFmdHMuXG4gICAgICBlbHNlIGlmIChpc0RyYWZ0YWJsZSh2YWx1ZSkgJiYgIU9iamVjdC5pc0Zyb3plbih2YWx1ZSkpIHtcbiAgICAgICAgICBlYWNoKHZhbHVlLCBmaW5hbGl6ZVByb3BlcnR5KTtcbiAgICAgICAgICB0aGlzJDEubWF5YmVGcmVlemUodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICBpZiAoaXNEcmFmdFByb3AgJiYgdGhpcyQxLm9uQXNzaWduICYmICFpc1NldE1lbWJlcikge1xuICAgICAgdGhpcyQxLm9uQXNzaWduKHN0YXRlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGVhY2gocm9vdCwgZmluYWxpemVQcm9wZXJ0eSk7XG4gIHJldHVybiByb290O1xufTtcblxuSW1tZXIucHJvdG90eXBlLm1heWJlRnJlZXplID0gZnVuY3Rpb24gbWF5YmVGcmVlemUgKHZhbHVlLCBkZWVwKSB7XG4gICAgaWYgKCBkZWVwID09PSB2b2lkIDAgKSBkZWVwID0gZmFsc2U7XG5cbiAgaWYgKHRoaXMuYXV0b0ZyZWV6ZSAmJiAhaXNEcmFmdCh2YWx1ZSkpIHtcbiAgICBmcmVlemUodmFsdWUsIGRlZXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZXBsYWNlKHBhcmVudCwgcHJvcCwgdmFsdWUpIHtcbiAgaWYgKGlzTWFwKHBhcmVudCkpIHtcbiAgICBwYXJlbnQuc2V0KHByb3AsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc1NldChwYXJlbnQpKSB7XG4gICAgLy8gSW4gdGhpcyBjYXNlLCB0aGUgYHByb3BgIGlzIGFjdHVhbGx5IGEgZHJhZnQuXG4gICAgcGFyZW50LmRlbGV0ZShwcm9wKTtcbiAgICBwYXJlbnQuYWRkKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhcmVudCkgfHwgaXNFbnVtZXJhYmxlKHBhcmVudCwgcHJvcCkpIHtcbiAgICAvLyBQcmVzZXJ2ZSBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgIHBhcmVudFtwcm9wXSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwYXJlbnQsIHByb3AsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGltbWVyID0gbmV3IEltbWVyKCk7XG4vKipcbiAqIFRoZSBgcHJvZHVjZWAgZnVuY3Rpb24gdGFrZXMgYSB2YWx1ZSBhbmQgYSBcInJlY2lwZSBmdW5jdGlvblwiICh3aG9zZVxuICogcmV0dXJuIHZhbHVlIG9mdGVuIGRlcGVuZHMgb24gdGhlIGJhc2Ugc3RhdGUpLiBUaGUgcmVjaXBlIGZ1bmN0aW9uIGlzXG4gKiBmcmVlIHRvIG11dGF0ZSBpdHMgZmlyc3QgYXJndW1lbnQgaG93ZXZlciBpdCB3YW50cy4gQWxsIG11dGF0aW9ucyBhcmVcbiAqIG9ubHkgZXZlciBhcHBsaWVkIHRvIGEgX19jb3B5X18gb2YgdGhlIGJhc2Ugc3RhdGUuXG4gKlxuICogUGFzcyBvbmx5IGEgZnVuY3Rpb24gdG8gY3JlYXRlIGEgXCJjdXJyaWVkIHByb2R1Y2VyXCIgd2hpY2ggcmVsaWV2ZXMgeW91XG4gKiBmcm9tIHBhc3NpbmcgdGhlIHJlY2lwZSBmdW5jdGlvbiBldmVyeSB0aW1lLlxuICpcbiAqIE9ubHkgcGxhaW4gb2JqZWN0cyBhbmQgYXJyYXlzIGFyZSBtYWRlIG11dGFibGUuIEFsbCBvdGhlciBvYmplY3RzIGFyZVxuICogY29uc2lkZXJlZCB1bmNvcHlhYmxlLlxuICpcbiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgX19ib3VuZF9fIHRvIGl0cyBgSW1tZXJgIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBiYXNlIC0gdGhlIGluaXRpYWwgc3RhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb2R1Y2VyIC0gZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHByb3h5IG9mIHRoZSBiYXNlIHN0YXRlIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB3aGljaCBjYW4gYmUgZnJlZWx5IG1vZGlmaWVkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXRjaExpc3RlbmVyIC0gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB0aGUgcGF0Y2hlcyBwcm9kdWNlZCBoZXJlXG4gKiBAcmV0dXJucyB7YW55fSBhIG5ldyBzdGF0ZSwgb3IgdGhlIGluaXRpYWwgc3RhdGUgaWYgbm90aGluZyB3YXMgbW9kaWZpZWRcbiAqL1xuXG52YXIgcHJvZHVjZSA9IGltbWVyLnByb2R1Y2U7XG4vKipcbiAqIExpa2UgYHByb2R1Y2VgLCBidXQgYHByb2R1Y2VXaXRoUGF0Y2hlc2AgYWx3YXlzIHJldHVybnMgYSB0dXBsZVxuICogW25leHRTdGF0ZSwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXNdIChpbnN0ZWFkIG9mIGp1c3QgdGhlIG5leHQgc3RhdGUpXG4gKi9cblxudmFyIHByb2R1Y2VXaXRoUGF0Y2hlcyA9IGltbWVyLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKGltbWVyKTtcbi8qKlxuICogUGFzcyB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgZnJlZXplIGFsbCBjb3BpZXMgY3JlYXRlZCBieSBJbW1lci5cbiAqXG4gKiBCeSBkZWZhdWx0LCBhdXRvLWZyZWV6aW5nIGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHNldEF1dG9GcmVlemUgPSBpbW1lci5zZXRBdXRvRnJlZXplLmJpbmQoaW1tZXIpO1xuLyoqXG4gKiBQYXNzIHRydWUgdG8gdXNlIHRoZSBFUzIwMTUgYFByb3h5YCBjbGFzcyB3aGVuIGNyZWF0aW5nIGRyYWZ0cywgd2hpY2ggaXNcbiAqIGFsd2F5cyBmYXN0ZXIgdGhhbiB1c2luZyBFUzUgcHJveGllcy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBmZWF0dXJlIGRldGVjdGlvbiBpcyB1c2VkLCBzbyBjYWxsaW5nIHRoaXMgaXMgcmFyZWx5IG5lY2Vzc2FyeS5cbiAqL1xuXG52YXIgc2V0VXNlUHJveGllcyA9IGltbWVyLnNldFVzZVByb3hpZXMuYmluZChpbW1lcik7XG4vKipcbiAqIEFwcGx5IGFuIGFycmF5IG9mIEltbWVyIHBhdGNoZXMgdG8gdGhlIGZpcnN0IGFyZ3VtZW50LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBwcm9kdWNlciwgd2hpY2ggbWVhbnMgY29weS1vbi13cml0ZSBpcyBpbiBlZmZlY3QuXG4gKi9cblxudmFyIGFwcGx5UGF0Y2hlcyQxID0gaW1tZXIuYXBwbHlQYXRjaGVzLmJpbmQoaW1tZXIpO1xuLyoqXG4gKiBDcmVhdGUgYW4gSW1tZXIgZHJhZnQgZnJvbSB0aGUgZ2l2ZW4gYmFzZSBzdGF0ZSwgd2hpY2ggbWF5IGJlIGEgZHJhZnQgaXRzZWxmLlxuICogVGhlIGRyYWZ0IGNhbiBiZSBtb2RpZmllZCB1bnRpbCB5b3UgZmluYWxpemUgaXQgd2l0aCB0aGUgYGZpbmlzaERyYWZ0YCBmdW5jdGlvbi5cbiAqL1xuXG52YXIgY3JlYXRlRHJhZnQgPSBpbW1lci5jcmVhdGVEcmFmdC5iaW5kKGltbWVyKTtcbi8qKlxuICogRmluYWxpemUgYW4gSW1tZXIgZHJhZnQgZnJvbSBhIGBjcmVhdGVEcmFmdGAgY2FsbCwgcmV0dXJuaW5nIHRoZSBiYXNlIHN0YXRlXG4gKiAoaWYgbm8gY2hhbmdlcyB3ZXJlIG1hZGUpIG9yIGEgbW9kaWZpZWQgY29weS4gVGhlIGRyYWZ0IG11c3QgKm5vdCogYmVcbiAqIG11dGF0ZWQgYWZ0ZXJ3YXJkcy5cbiAqXG4gKiBQYXNzIGEgZnVuY3Rpb24gYXMgdGhlIDJuZCBhcmd1bWVudCB0byBnZW5lcmF0ZSBJbW1lciBwYXRjaGVzIGJhc2VkIG9uIHRoZVxuICogY2hhbmdlcyB0aGF0IHdlcmUgbWFkZS5cbiAqL1xuXG52YXIgZmluaXNoRHJhZnQgPSBpbW1lci5maW5pc2hEcmFmdC5iaW5kKGltbWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvZHVjZTtcbmV4cG9ydCB7IEltbWVyLCBhcHBseVBhdGNoZXMkMSBhcyBhcHBseVBhdGNoZXMsIGNyZWF0ZURyYWZ0LCBmaW5pc2hEcmFmdCwgRFJBRlRBQkxFIGFzIGltbWVyYWJsZSwgaXNEcmFmdCwgaXNEcmFmdGFibGUsIE5PVEhJTkcgYXMgbm90aGluZywgb3JpZ2luYWwsIHByb2R1Y2UsIHByb2R1Y2VXaXRoUGF0Y2hlcywgc2V0QXV0b0ZyZWV6ZSwgc2V0VXNlUHJveGllcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgaXNUaGVuYWJsZSwgbm9ybWFsaXplLCBTeW5jUHJvbWlzZSwgdGltZXN0YW1wV2l0aE1zIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKipcbiAqIEhvbGRzIGFkZGl0aW9uYWwgZXZlbnQgaW5mb3JtYXRpb24uIHtAbGluayBTY29wZS5hcHBseVRvRXZlbnR9IHdpbGwgYmVcbiAqIGNhbGxlZCBieSB0aGUgY2xpZW50IGJlZm9yZSBhbiBldmVudCB3aWxsIGJlIHNlbnQuXG4gKi9cbnZhciBTY29wZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY29wZSgpIHtcbiAgICAgICAgLyoqIEZsYWcgaWYgbm90aWZpeWluZyBpcyBoYXBwZW5pbmcuICovXG4gICAgICAgIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IGZhbHNlO1xuICAgICAgICAvKiogQ2FsbGJhY2sgZm9yIGNsaWVudCB0byByZWNlaXZlIHNjb3BlIGNoYW5nZXMuICovXG4gICAgICAgIHRoaXMuX3Njb3BlTGlzdGVuZXJzID0gW107XG4gICAgICAgIC8qKiBDYWxsYmFjayBsaXN0IHRoYXQgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIge0BsaW5rIGFwcGx5VG9FdmVudH0uICovXG4gICAgICAgIHRoaXMuX2V2ZW50UHJvY2Vzc29ycyA9IFtdO1xuICAgICAgICAvKiogQXJyYXkgb2YgYnJlYWRjcnVtYnMuICovXG4gICAgICAgIHRoaXMuX2JyZWFkY3J1bWJzID0gW107XG4gICAgICAgIC8qKiBVc2VyICovXG4gICAgICAgIHRoaXMuX3VzZXIgPSB7fTtcbiAgICAgICAgLyoqIFRhZ3MgKi9cbiAgICAgICAgdGhpcy5fdGFncyA9IHt9O1xuICAgICAgICAvKiogRXh0cmEgKi9cbiAgICAgICAgdGhpcy5fZXh0cmEgPSB7fTtcbiAgICAgICAgLyoqIENvbnRleHRzICovXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGludGVybmFsIG9uIGNoYW5nZSBsaXN0ZW5lci4gVXNlZCBmb3Igc3ViIFNES3MgdGhhdCBuZWVkIHRvIHN0b3JlIHRoZSBzY29wZS5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmFkZFNjb3BlTGlzdGVuZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fc2NvcGVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5hZGRFdmVudFByb2Nlc3NvciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9ldmVudFByb2Nlc3NvcnMucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyB3aWxsIGJlIGNhbGxlZCBvbiBldmVyeSBzZXQgY2FsbC5cbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuX25vdGlmeVNjb3BlTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX25vdGlmeWluZ0xpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zY29wZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhfdGhpcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIge0BsaW5rIGFwcGx5VG9FdmVudH0gaXMgZmluaXNoZWQuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMgPSBmdW5jdGlvbiAocHJvY2Vzc29ycywgZXZlbnQsIGhpbnQsIGluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW2luZGV4XTtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHByb2Nlc3Nvcih0c2xpYl8xLl9fYXNzaWduKHt9LCBldmVudCksIGhpbnQpO1xuICAgICAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZmluYWwpIHsgcmV0dXJuIF90aGlzLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgZmluYWwsIGhpbnQsIGluZGV4ICsgMSkudGhlbihyZXNvbHZlKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzKHByb2Nlc3NvcnMsIHJlc3VsdCwgaGludCwgaW5kZXggKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFVzZXIgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB0aGlzLl91c2VyID0gbm9ybWFsaXplKHVzZXIpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFRhZ3MgPSBmdW5jdGlvbiAodGFncykge1xuICAgICAgICB0aGlzLl90YWdzID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5fdGFncywgbm9ybWFsaXplKHRhZ3MpKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRUYWcgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuX3RhZ3MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLl90YWdzLCAoX2EgPSB7fSwgX2Fba2V5XSA9IG5vcm1hbGl6ZSh2YWx1ZSksIF9hKSk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0RXh0cmFzID0gZnVuY3Rpb24gKGV4dHJhKSB7XG4gICAgICAgIHRoaXMuX2V4dHJhID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5fZXh0cmEsIG5vcm1hbGl6ZShleHRyYSkpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldEV4dHJhID0gZnVuY3Rpb24gKGtleSwgZXh0cmEpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLl9leHRyYSA9IHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuX2V4dHJhLCAoX2EgPSB7fSwgX2Fba2V5XSA9IG5vcm1hbGl6ZShleHRyYSksIF9hKSk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0RmluZ2VycHJpbnQgPSBmdW5jdGlvbiAoZmluZ2VycHJpbnQpIHtcbiAgICAgICAgdGhpcy5fZmluZ2VycHJpbnQgPSBub3JtYWxpemUoZmluZ2VycHJpbnQpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHRoaXMuX2xldmVsID0gbm9ybWFsaXplKGxldmVsKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldENvbnRleHQgPSBmdW5jdGlvbiAobmFtZSwgY29udGV4dCkge1xuICAgICAgICB0aGlzLl9jb250ZXh0W25hbWVdID0gY29udGV4dCA/IG5vcm1hbGl6ZShjb250ZXh0KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRTcGFuID0gZnVuY3Rpb24gKHNwYW4pIHtcbiAgICAgICAgdGhpcy5fc3BhbiA9IHNwYW47XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZ2V0dGVyIGZvciBTcGFuLCB1c2VkIGluIEh1Yi5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmdldFNwYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zcGFuO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5oZXJpdCB2YWx1ZXMgZnJvbSB0aGUgcGFyZW50IHNjb3BlLlxuICAgICAqIEBwYXJhbSBzY29wZSB0byBjbG9uZS5cbiAgICAgKi9cbiAgICBTY29wZS5jbG9uZSA9IGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICB2YXIgbmV3U2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdTY29wZS5fYnJlYWRjcnVtYnMgPSB0c2xpYl8xLl9fc3ByZWFkKHNjb3BlLl9icmVhZGNydW1icyk7XG4gICAgICAgICAgICBuZXdTY29wZS5fdGFncyA9IHRzbGliXzEuX19hc3NpZ24oe30sIHNjb3BlLl90YWdzKTtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9leHRyYSA9IHRzbGliXzEuX19hc3NpZ24oe30sIHNjb3BlLl9leHRyYSk7XG4gICAgICAgICAgICBuZXdTY29wZS5fY29udGV4dCA9IHRzbGliXzEuX19hc3NpZ24oe30sIHNjb3BlLl9jb250ZXh0KTtcbiAgICAgICAgICAgIG5ld1Njb3BlLl91c2VyID0gc2NvcGUuX3VzZXI7XG4gICAgICAgICAgICBuZXdTY29wZS5fbGV2ZWwgPSBzY29wZS5fbGV2ZWw7XG4gICAgICAgICAgICBuZXdTY29wZS5fc3BhbiA9IHNjb3BlLl9zcGFuO1xuICAgICAgICAgICAgbmV3U2NvcGUuX3RyYW5zYWN0aW9uID0gc2NvcGUuX3RyYW5zYWN0aW9uO1xuICAgICAgICAgICAgbmV3U2NvcGUuX2ZpbmdlcnByaW50ID0gc2NvcGUuX2ZpbmdlcnByaW50O1xuICAgICAgICAgICAgbmV3U2NvcGUuX2V2ZW50UHJvY2Vzc29ycyA9IHRzbGliXzEuX19zcHJlYWQoc2NvcGUuX2V2ZW50UHJvY2Vzc29ycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1Njb3BlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2JyZWFkY3J1bWJzID0gW107XG4gICAgICAgIHRoaXMuX3RhZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5fZXh0cmEgPSB7fTtcbiAgICAgICAgdGhpcy5fdXNlciA9IHt9O1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0ge307XG4gICAgICAgIHRoaXMuX2xldmVsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZmluZ2VycHJpbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuYWRkQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChicmVhZGNydW1iLCBtYXhCcmVhZGNydW1icykge1xuICAgICAgICB2YXIgdGltZXN0YW1wID0gdGltZXN0YW1wV2l0aE1zKCk7XG4gICAgICAgIHZhciBtZXJnZWRCcmVhZGNydW1iID0gdHNsaWJfMS5fX2Fzc2lnbih7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0sIGJyZWFkY3J1bWIpO1xuICAgICAgICB0aGlzLl9icmVhZGNydW1icyA9XG4gICAgICAgICAgICBtYXhCcmVhZGNydW1icyAhPT0gdW5kZWZpbmVkICYmIG1heEJyZWFkY3J1bWJzID49IDBcbiAgICAgICAgICAgICAgICA/IHRzbGliXzEuX19zcHJlYWQodGhpcy5fYnJlYWRjcnVtYnMsIFtub3JtYWxpemUobWVyZ2VkQnJlYWRjcnVtYildKS5zbGljZSgtbWF4QnJlYWRjcnVtYnMpXG4gICAgICAgICAgICAgICAgOiB0c2xpYl8xLl9fc3ByZWFkKHRoaXMuX2JyZWFkY3J1bWJzLCBbbm9ybWFsaXplKG1lcmdlZEJyZWFkY3J1bWIpXSk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuY2xlYXJCcmVhZGNydW1icyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGZpbmdlcnByaW50IGZyb20gdGhlIHNjb3BlIHRvIHRoZSBldmVudCBpZiB0aGVyZSdzIG9uZSxcbiAgICAgKiB1c2VzIG1lc3NhZ2UgaWYgdGhlcmUncyBvbmUgaW5zdGVhZCBvciBnZXQgcmlkIG9mIGVtcHR5IGZpbmdlcnByaW50XG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLl9hcHBseUZpbmdlcnByaW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBpdCdzIGFuIGFycmF5IGZpcnN0IGFuZCB3ZSBhY3R1YWxseSBoYXZlIHNvbWV0aGluZyBpbiBwbGFjZVxuICAgICAgICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50XG4gICAgICAgICAgICA/IEFycmF5LmlzQXJyYXkoZXZlbnQuZmluZ2VycHJpbnQpXG4gICAgICAgICAgICAgICAgPyBldmVudC5maW5nZXJwcmludFxuICAgICAgICAgICAgICAgIDogW2V2ZW50LmZpbmdlcnByaW50XVxuICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBzb21ldGhpbmcgb24gdGhlIHNjb3BlLCB0aGVuIG1lcmdlIGl0IHdpdGggZXZlbnRcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmdlcnByaW50KSB7XG4gICAgICAgICAgICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50LmNvbmNhdCh0aGlzLl9maW5nZXJwcmludCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBubyBkYXRhIGF0IGFsbCwgcmVtb3ZlIGVtcHR5IGFycmF5IGRlZmF1bHRcbiAgICAgICAgaWYgKGV2ZW50LmZpbmdlcnByaW50ICYmICFldmVudC5maW5nZXJwcmludC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudC5maW5nZXJwcmludDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgY3VycmVudCBjb250ZXh0IGFuZCBmaW5nZXJwcmludCB0byB0aGUgZXZlbnQuXG4gICAgICogTm90ZSB0aGF0IGJyZWFkY3J1bWJzIHdpbGwgYmUgYWRkZWQgYnkgdGhlIGNsaWVudC5cbiAgICAgKiBBbHNvIGlmIHRoZSBldmVudCBoYXMgYWxyZWFkeSBicmVhZGNydW1icyBvbiBpdCwgd2UgZG8gbm90IG1lcmdlIHRoZW0uXG4gICAgICogQHBhcmFtIGV2ZW50IEV2ZW50XG4gICAgICogQHBhcmFtIGhpbnQgTWF5IGNvbnRhaW4gYWRkaXRpb25hbCBpbmZvcm1hcnRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbi5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmFwcGx5VG9FdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGludCkge1xuICAgICAgICBpZiAodGhpcy5fZXh0cmEgJiYgT2JqZWN0LmtleXModGhpcy5fZXh0cmEpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQuZXh0cmEgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLl9leHRyYSwgZXZlbnQuZXh0cmEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90YWdzICYmIE9iamVjdC5rZXlzKHRoaXMuX3RhZ3MpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQudGFncyA9IHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuX3RhZ3MsIGV2ZW50LnRhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl91c2VyICYmIE9iamVjdC5rZXlzKHRoaXMuX3VzZXIpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQudXNlciA9IHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuX3VzZXIsIGV2ZW50LnVzZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb250ZXh0ICYmIE9iamVjdC5rZXlzKHRoaXMuX2NvbnRleHQpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQuY29udGV4dHMgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLl9jb250ZXh0LCBldmVudC5jb250ZXh0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xldmVsKSB7XG4gICAgICAgICAgICBldmVudC5sZXZlbCA9IHRoaXMuX2xldmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgZXZlbnQudHJhbnNhY3Rpb24gPSB0aGlzLl90cmFuc2FjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcHBseUZpbmdlcnByaW50KGV2ZW50KTtcbiAgICAgICAgZXZlbnQuYnJlYWRjcnVtYnMgPSB0c2xpYl8xLl9fc3ByZWFkKChldmVudC5icmVhZGNydW1icyB8fCBbXSksIHRoaXMuX2JyZWFkY3J1bWJzKTtcbiAgICAgICAgZXZlbnQuYnJlYWRjcnVtYnMgPSBldmVudC5icmVhZGNydW1icy5sZW5ndGggPiAwID8gZXZlbnQuYnJlYWRjcnVtYnMgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3RpZnlFdmVudFByb2Nlc3NvcnModHNsaWJfMS5fX3NwcmVhZChnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKSwgdGhpcy5fZXZlbnRQcm9jZXNzb3JzKSwgZXZlbnQsIGhpbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIFNjb3BlO1xufSgpKTtcbmV4cG9ydCB7IFNjb3BlIH07XG4vKipcbiAqIFJldHJ1bnMgdGhlIGdsb2JhbCBldmVudCBwcm9jZXNzb3JzLlxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKSB7XG4gICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIGdsb2JhbC5fX1NFTlRSWV9fID0gZ2xvYmFsLl9fU0VOVFJZX18gfHwge307XG4gICAgZ2xvYmFsLl9fU0VOVFJZX18uZ2xvYmFsRXZlbnRQcm9jZXNzb3JzID0gZ2xvYmFsLl9fU0VOVFJZX18uZ2xvYmFsRXZlbnRQcm9jZXNzb3JzIHx8IFtdO1xuICAgIHJldHVybiBnbG9iYWwuX19TRU5UUllfXy5nbG9iYWxFdmVudFByb2Nlc3NvcnM7XG59XG4vKipcbiAqIEFkZCBhIEV2ZW50UHJvY2Vzc29yIHRvIGJlIGtlcHQgZ2xvYmFsbHkuXG4gKiBAcGFyYW0gY2FsbGJhY2sgRXZlbnRQcm9jZXNzb3IgdG8gYWRkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihjYWxsYmFjaykge1xuICAgIGdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycygpLnB1c2goY2FsbGJhY2spO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGUuanMubWFwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9Db21wb25lbnQnKSxcbiAgICBDb3B5VG9DbGlwYm9hcmQgPSBfcmVxdWlyZS5Db3B5VG9DbGlwYm9hcmQ7XG5cbkNvcHlUb0NsaXBib2FyZC5Db3B5VG9DbGlwYm9hcmQgPSBDb3B5VG9DbGlwYm9hcmQ7XG5tb2R1bGUuZXhwb3J0cyA9IENvcHlUb0NsaXBib2FyZDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRNT0RFX05VTUJFUiA6XHRcdDEgPDwgMCxcblx0TU9ERV9BTFBIQV9OVU0gOiBcdDEgPDwgMSxcblx0TU9ERV84QklUX0JZVEUgOiBcdDEgPDwgMixcblx0TU9ERV9LQU5KSSA6XHRcdDEgPDwgM1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRMIDogMSxcblx0TSA6IDAsXG5cdFEgOiAzLFxuXHRIIDogMlxufTtcblxuIiwidmFyIG1hdGggPSByZXF1aXJlKCcuL21hdGgnKTtcblxuZnVuY3Rpb24gUVJQb2x5bm9taWFsKG51bSwgc2hpZnQpIHtcblxuXHRpZiAobnVtLmxlbmd0aCA9PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IobnVtLmxlbmd0aCArIFwiL1wiICsgc2hpZnQpO1xuXHR9XG5cblx0dmFyIG9mZnNldCA9IDA7XG5cblx0d2hpbGUgKG9mZnNldCA8IG51bS5sZW5ndGggJiYgbnVtW29mZnNldF0gPT0gMCkge1xuXHRcdG9mZnNldCsrO1xuXHR9XG5cblx0dGhpcy5udW0gPSBuZXcgQXJyYXkobnVtLmxlbmd0aCAtIG9mZnNldCArIHNoaWZ0KTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoIC0gb2Zmc2V0OyBpKyspIHtcblx0XHR0aGlzLm51bVtpXSA9IG51bVtpICsgb2Zmc2V0XTtcblx0fVxufVxuXG5RUlBvbHlub21pYWwucHJvdG90eXBlID0ge1xuXG5cdGdldCA6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMubnVtW2luZGV4XTtcblx0fSxcblx0XG5cdGdldExlbmd0aCA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm51bS5sZW5ndGg7XG5cdH0sXG5cdFxuXHRtdWx0aXBseSA6IGZ1bmN0aW9uKGUpIHtcblx0XG5cdFx0dmFyIG51bSA9IG5ldyBBcnJheSh0aGlzLmdldExlbmd0aCgpICsgZS5nZXRMZW5ndGgoKSAtIDEpO1xuXHRcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2V0TGVuZ3RoKCk7IGkrKykge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBlLmdldExlbmd0aCgpOyBqKyspIHtcblx0XHRcdFx0bnVtW2kgKyBqXSBePSBtYXRoLmdleHAobWF0aC5nbG9nKHRoaXMuZ2V0KGkpICkgKyBtYXRoLmdsb2coZS5nZXQoaikgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIG5ldyBRUlBvbHlub21pYWwobnVtLCAwKTtcblx0fSxcblx0XG5cdG1vZCA6IGZ1bmN0aW9uKGUpIHtcblx0XG5cdFx0aWYgKHRoaXMuZ2V0TGVuZ3RoKCkgLSBlLmdldExlbmd0aCgpIDwgMCkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcblx0XHR2YXIgcmF0aW8gPSBtYXRoLmdsb2codGhpcy5nZXQoMCkgKSAtIG1hdGguZ2xvZyhlLmdldCgwKSApO1xuXHRcblx0XHR2YXIgbnVtID0gbmV3IEFycmF5KHRoaXMuZ2V0TGVuZ3RoKCkgKTtcblx0XHRcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2V0TGVuZ3RoKCk7IGkrKykge1xuXHRcdFx0bnVtW2ldID0gdGhpcy5nZXQoaSk7XG5cdFx0fVxuXHRcdFxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZS5nZXRMZW5ndGgoKTsgaSsrKSB7XG5cdFx0XHRudW1baV0gXj0gbWF0aC5nZXhwKG1hdGguZ2xvZyhlLmdldChpKSApICsgcmF0aW8pO1xuXHRcdH1cblx0XG5cdFx0Ly8gcmVjdXJzaXZlIGNhbGxcblx0XHRyZXR1cm4gbmV3IFFSUG9seW5vbWlhbChudW0sIDApLm1vZChlKTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRUlBvbHlub21pYWw7XG4iLCJ2YXIgUVJNYXRoID0ge1xuXG5cdGdsb2cgOiBmdW5jdGlvbihuKSB7XG5cdFxuXHRcdGlmIChuIDwgMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiZ2xvZyhcIiArIG4gKyBcIilcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBRUk1hdGguTE9HX1RBQkxFW25dO1xuXHR9LFxuXHRcblx0Z2V4cCA6IGZ1bmN0aW9uKG4pIHtcblx0XG5cdFx0d2hpbGUgKG4gPCAwKSB7XG5cdFx0XHRuICs9IDI1NTtcblx0XHR9XG5cdFxuXHRcdHdoaWxlIChuID49IDI1Nikge1xuXHRcdFx0biAtPSAyNTU7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gUVJNYXRoLkVYUF9UQUJMRVtuXTtcblx0fSxcblx0XG5cdEVYUF9UQUJMRSA6IG5ldyBBcnJheSgyNTYpLFxuXHRcblx0TE9HX1RBQkxFIDogbmV3IEFycmF5KDI1NilcblxufTtcblx0XG5mb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHRRUk1hdGguRVhQX1RBQkxFW2ldID0gMSA8PCBpO1xufVxuZm9yICh2YXIgaSA9IDg7IGkgPCAyNTY7IGkrKykge1xuXHRRUk1hdGguRVhQX1RBQkxFW2ldID0gUVJNYXRoLkVYUF9UQUJMRVtpIC0gNF1cblx0XHReIFFSTWF0aC5FWFBfVEFCTEVbaSAtIDVdXG5cdFx0XiBRUk1hdGguRVhQX1RBQkxFW2kgLSA2XVxuXHRcdF4gUVJNYXRoLkVYUF9UQUJMRVtpIC0gOF07XG59XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XG5cdFFSTWF0aC5MT0dfVEFCTEVbUVJNYXRoLkVYUF9UQUJMRVtpXSBdID0gaTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRUk1hdGg7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNyBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFNEUFV0aWxzID0gcmVxdWlyZSgnc2RwJyk7XG5cbmZ1bmN0aW9uIGZpeFN0YXRzVHlwZShzdGF0KSB7XG4gIHJldHVybiB7XG4gICAgaW5ib3VuZHJ0cDogJ2luYm91bmQtcnRwJyxcbiAgICBvdXRib3VuZHJ0cDogJ291dGJvdW5kLXJ0cCcsXG4gICAgY2FuZGlkYXRlcGFpcjogJ2NhbmRpZGF0ZS1wYWlyJyxcbiAgICBsb2NhbGNhbmRpZGF0ZTogJ2xvY2FsLWNhbmRpZGF0ZScsXG4gICAgcmVtb3RlY2FuZGlkYXRlOiAncmVtb3RlLWNhbmRpZGF0ZSdcbiAgfVtzdGF0LnR5cGVdIHx8IHN0YXQudHlwZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIsIGNhcHMsIHR5cGUsIHN0cmVhbSwgZHRsc1JvbGUpIHtcbiAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlUnRwRGVzY3JpcHRpb24odHJhbnNjZWl2ZXIua2luZCwgY2Fwcyk7XG5cbiAgLy8gTWFwIElDRSBwYXJhbWV0ZXJzICh1ZnJhZywgcHdkKSB0byBTRFAuXG4gIHNkcCArPSBTRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMoXG4gICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5nZXRMb2NhbFBhcmFtZXRlcnMoKSk7XG5cbiAgLy8gTWFwIERUTFMgcGFyYW1ldGVycyB0byBTRFAuXG4gIHNkcCArPSBTRFBVdGlscy53cml0ZUR0bHNQYXJhbWV0ZXJzKFxuICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydC5nZXRMb2NhbFBhcmFtZXRlcnMoKSxcbiAgICAgIHR5cGUgPT09ICdvZmZlcicgPyAnYWN0cGFzcycgOiBkdGxzUm9sZSB8fCAnYWN0aXZlJyk7XG5cbiAgc2RwICs9ICdhPW1pZDonICsgdHJhbnNjZWl2ZXIubWlkICsgJ1xcclxcbic7XG5cbiAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1zZW5kcmVjdlxcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgc2RwICs9ICdhPXNlbmRvbmx5XFxyXFxuJztcbiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1yZWN2b25seVxcclxcbic7XG4gIH0gZWxzZSB7XG4gICAgc2RwICs9ICdhPWluYWN0aXZlXFxyXFxuJztcbiAgfVxuXG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICB2YXIgdHJhY2tJZCA9IHRyYW5zY2VpdmVyLnJ0cFNlbmRlci5faW5pdGlhbFRyYWNrSWQgfHxcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnRyYWNrLmlkO1xuICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci5faW5pdGlhbFRyYWNrSWQgPSB0cmFja0lkO1xuICAgIC8vIHNwZWMuXG4gICAgdmFyIG1zaWQgPSAnbXNpZDonICsgKHN0cmVhbSA/IHN0cmVhbS5pZCA6ICctJykgKyAnICcgK1xuICAgICAgICB0cmFja0lkICsgJ1xcclxcbic7XG4gICAgc2RwICs9ICdhPScgKyBtc2lkO1xuICAgIC8vIGZvciBDaHJvbWUuIExlZ2FjeSBzaG91bGQgbm8gbG9uZ2VyIGJlIHJlcXVpcmVkLlxuICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgK1xuICAgICAgICAnICcgKyBtc2lkO1xuXG4gICAgLy8gUlRYXG4gICAgaWYgKHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICAgJyAnICsgbXNpZDtcbiAgICAgIHNkcCArPSAnYT1zc3JjLWdyb3VwOkZJRCAnICtcbiAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgKyAnICcgK1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAgICdcXHJcXG4nO1xuICAgIH1cbiAgfVxuICAvLyBGSVhNRTogdGhpcyBzaG91bGQgYmUgd3JpdHRlbiBieSB3cml0ZVJ0cERlc2NyaXB0aW9uLlxuICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICtcbiAgICAgICcgY25hbWU6JyArIFNEUFV0aWxzLmxvY2FsQ05hbWUgKyAnXFxyXFxuJztcbiAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJiB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgJyBjbmFtZTonICsgU0RQVXRpbHMubG9jYWxDTmFtZSArICdcXHJcXG4nO1xuICB9XG4gIHJldHVybiBzZHA7XG59XG5cbi8vIEVkZ2UgZG9lcyBub3QgbGlrZVxuLy8gMSkgc3R1bjogZmlsdGVyZWQgYWZ0ZXIgMTQzOTMgdW5sZXNzID90cmFuc3BvcnQ9dWRwIGlzIHByZXNlbnRcbi8vIDIpIHR1cm46IHRoYXQgZG9lcyBub3QgaGF2ZSBhbGwgb2YgdHVybjpob3N0OnBvcnQ/dHJhbnNwb3J0PXVkcFxuLy8gMykgdHVybjogd2l0aCBpcHY2IGFkZHJlc3Nlc1xuLy8gNCkgdHVybjogb2NjdXJyaW5nIG11bGlwbGUgdGltZXNcbmZ1bmN0aW9uIGZpbHRlckljZVNlcnZlcnMoaWNlU2VydmVycywgZWRnZVZlcnNpb24pIHtcbiAgdmFyIGhhc1R1cm4gPSBmYWxzZTtcbiAgaWNlU2VydmVycyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaWNlU2VydmVycykpO1xuICByZXR1cm4gaWNlU2VydmVycy5maWx0ZXIoZnVuY3Rpb24oc2VydmVyKSB7XG4gICAgaWYgKHNlcnZlciAmJiAoc2VydmVyLnVybHMgfHwgc2VydmVyLnVybCkpIHtcbiAgICAgIHZhciB1cmxzID0gc2VydmVyLnVybHMgfHwgc2VydmVyLnVybDtcbiAgICAgIGlmIChzZXJ2ZXIudXJsICYmICFzZXJ2ZXIudXJscykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1JUQ0ljZVNlcnZlci51cmwgaXMgZGVwcmVjYXRlZCEgVXNlIHVybHMgaW5zdGVhZC4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiB1cmxzID09PSAnc3RyaW5nJztcbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICB1cmxzID0gW3VybHNdO1xuICAgICAgfVxuICAgICAgdXJscyA9IHVybHMuZmlsdGVyKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICB2YXIgdmFsaWRUdXJuID0gdXJsLmluZGV4T2YoJ3R1cm46JykgPT09IDAgJiZcbiAgICAgICAgICAgIHVybC5pbmRleE9mKCd0cmFuc3BvcnQ9dWRwJykgIT09IC0xICYmXG4gICAgICAgICAgICB1cmwuaW5kZXhPZigndHVybjpbJykgPT09IC0xICYmXG4gICAgICAgICAgICAhaGFzVHVybjtcblxuICAgICAgICBpZiAodmFsaWRUdXJuKSB7XG4gICAgICAgICAgaGFzVHVybiA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVybC5pbmRleE9mKCdzdHVuOicpID09PSAwICYmIGVkZ2VWZXJzaW9uID49IDE0MzkzICYmXG4gICAgICAgICAgICB1cmwuaW5kZXhPZignP3RyYW5zcG9ydD11ZHAnKSA9PT0gLTE7XG4gICAgICB9KTtcblxuICAgICAgZGVsZXRlIHNlcnZlci51cmw7XG4gICAgICBzZXJ2ZXIudXJscyA9IGlzU3RyaW5nID8gdXJsc1swXSA6IHVybHM7XG4gICAgICByZXR1cm4gISF1cmxzLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBEZXRlcm1pbmVzIHRoZSBpbnRlcnNlY3Rpb24gb2YgbG9jYWwgYW5kIHJlbW90ZSBjYXBhYmlsaXRpZXMuXG5mdW5jdGlvbiBnZXRDb21tb25DYXBhYmlsaXRpZXMobG9jYWxDYXBhYmlsaXRpZXMsIHJlbW90ZUNhcGFiaWxpdGllcykge1xuICB2YXIgY29tbW9uQ2FwYWJpbGl0aWVzID0ge1xuICAgIGNvZGVjczogW10sXG4gICAgaGVhZGVyRXh0ZW5zaW9uczogW10sXG4gICAgZmVjTWVjaGFuaXNtczogW11cbiAgfTtcblxuICB2YXIgZmluZENvZGVjQnlQYXlsb2FkVHlwZSA9IGZ1bmN0aW9uKHB0LCBjb2RlY3MpIHtcbiAgICBwdCA9IHBhcnNlSW50KHB0LCAxMCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjb2RlY3NbaV0ucGF5bG9hZFR5cGUgPT09IHB0IHx8XG4gICAgICAgICAgY29kZWNzW2ldLnByZWZlcnJlZFBheWxvYWRUeXBlID09PSBwdCkge1xuICAgICAgICByZXR1cm4gY29kZWNzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgcnR4Q2FwYWJpbGl0eU1hdGNoZXMgPSBmdW5jdGlvbihsUnR4LCByUnR4LCBsQ29kZWNzLCByQ29kZWNzKSB7XG4gICAgdmFyIGxDb2RlYyA9IGZpbmRDb2RlY0J5UGF5bG9hZFR5cGUobFJ0eC5wYXJhbWV0ZXJzLmFwdCwgbENvZGVjcyk7XG4gICAgdmFyIHJDb2RlYyA9IGZpbmRDb2RlY0J5UGF5bG9hZFR5cGUoclJ0eC5wYXJhbWV0ZXJzLmFwdCwgckNvZGVjcyk7XG4gICAgcmV0dXJuIGxDb2RlYyAmJiByQ29kZWMgJiZcbiAgICAgICAgbENvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gckNvZGVjLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihsQ29kZWMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbW90ZUNhcGFiaWxpdGllcy5jb2RlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciByQ29kZWMgPSByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzW2ldO1xuICAgICAgaWYgKGxDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IHJDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCkgJiZcbiAgICAgICAgICBsQ29kZWMuY2xvY2tSYXRlID09PSByQ29kZWMuY2xvY2tSYXRlKSB7XG4gICAgICAgIGlmIChsQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpID09PSAncnR4JyAmJlxuICAgICAgICAgICAgbENvZGVjLnBhcmFtZXRlcnMgJiYgckNvZGVjLnBhcmFtZXRlcnMuYXB0KSB7XG4gICAgICAgICAgLy8gZm9yIFJUWCB3ZSBuZWVkIHRvIGZpbmQgdGhlIGxvY2FsIHJ0eCB0aGF0IGhhcyBhIGFwdFxuICAgICAgICAgIC8vIHdoaWNoIHBvaW50cyB0byB0aGUgc2FtZSBsb2NhbCBjb2RlYyBhcyB0aGUgcmVtb3RlIG9uZS5cbiAgICAgICAgICBpZiAoIXJ0eENhcGFiaWxpdHlNYXRjaGVzKGxDb2RlYywgckNvZGVjLFxuICAgICAgICAgICAgICBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MsIHJlbW90ZUNhcGFiaWxpdGllcy5jb2RlY3MpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgckNvZGVjID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyQ29kZWMpKTsgLy8gZGVlcGNvcHlcbiAgICAgICAgLy8gbnVtYmVyIG9mIGNoYW5uZWxzIGlzIHRoZSBoaWdoZXN0IGNvbW1vbiBudW1iZXIgb2YgY2hhbm5lbHNcbiAgICAgICAgckNvZGVjLm51bUNoYW5uZWxzID0gTWF0aC5taW4obENvZGVjLm51bUNoYW5uZWxzLFxuICAgICAgICAgICAgckNvZGVjLm51bUNoYW5uZWxzKTtcbiAgICAgICAgLy8gcHVzaCByQ29kZWMgc28gd2UgcmVwbHkgd2l0aCBvZmZlcmVyIHBheWxvYWQgdHlwZVxuICAgICAgICBjb21tb25DYXBhYmlsaXRpZXMuY29kZWNzLnB1c2gockNvZGVjKTtcblxuICAgICAgICAvLyBkZXRlcm1pbmUgY29tbW9uIGZlZWRiYWNrIG1lY2hhbmlzbXNcbiAgICAgICAgckNvZGVjLnJ0Y3BGZWVkYmFjayA9IHJDb2RlYy5ydGNwRmVlZGJhY2suZmlsdGVyKGZ1bmN0aW9uKGZiKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsQ29kZWMucnRjcEZlZWRiYWNrLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAobENvZGVjLnJ0Y3BGZWVkYmFja1tqXS50eXBlID09PSBmYi50eXBlICYmXG4gICAgICAgICAgICAgICAgbENvZGVjLnJ0Y3BGZWVkYmFja1tqXS5wYXJhbWV0ZXIgPT09IGZiLnBhcmFtZXRlcikge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gRklYTUU6IGFsc28gbmVlZCB0byBkZXRlcm1pbmUgLnBhcmFtZXRlcnNcbiAgICAgICAgLy8gIHNlZSBodHRwczovL2dpdGh1Yi5jb20vb3BlbnBlZXIvb3J0Yy9pc3N1ZXMvNTY5XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgbG9jYWxDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGxIZWFkZXJFeHRlbnNpb24pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbW90ZUNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLmxlbmd0aDtcbiAgICAgICAgIGkrKykge1xuICAgICAgdmFyIHJIZWFkZXJFeHRlbnNpb24gPSByZW1vdGVDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9uc1tpXTtcbiAgICAgIGlmIChsSGVhZGVyRXh0ZW5zaW9uLnVyaSA9PT0gckhlYWRlckV4dGVuc2lvbi51cmkpIHtcbiAgICAgICAgY29tbW9uQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMucHVzaChySGVhZGVyRXh0ZW5zaW9uKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBGSVhNRTogZmVjTWVjaGFuaXNtc1xuICByZXR1cm4gY29tbW9uQ2FwYWJpbGl0aWVzO1xufVxuXG4vLyBpcyBhY3Rpb249c2V0TG9jYWxEZXNjcmlwdGlvbiB3aXRoIHR5cGUgYWxsb3dlZCBpbiBzaWduYWxpbmdTdGF0ZVxuZnVuY3Rpb24gaXNBY3Rpb25BbGxvd2VkSW5TaWduYWxpbmdTdGF0ZShhY3Rpb24sIHR5cGUsIHNpZ25hbGluZ1N0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgb2ZmZXI6IHtcbiAgICAgIHNldExvY2FsRGVzY3JpcHRpb246IFsnc3RhYmxlJywgJ2hhdmUtbG9jYWwtb2ZmZXInXSxcbiAgICAgIHNldFJlbW90ZURlc2NyaXB0aW9uOiBbJ3N0YWJsZScsICdoYXZlLXJlbW90ZS1vZmZlciddXG4gICAgfSxcbiAgICBhbnN3ZXI6IHtcbiAgICAgIHNldExvY2FsRGVzY3JpcHRpb246IFsnaGF2ZS1yZW1vdGUtb2ZmZXInLCAnaGF2ZS1sb2NhbC1wcmFuc3dlciddLFxuICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb246IFsnaGF2ZS1sb2NhbC1vZmZlcicsICdoYXZlLXJlbW90ZS1wcmFuc3dlciddXG4gICAgfVxuICB9W3R5cGVdW2FjdGlvbl0uaW5kZXhPZihzaWduYWxpbmdTdGF0ZSkgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBtYXliZUFkZENhbmRpZGF0ZShpY2VUcmFuc3BvcnQsIGNhbmRpZGF0ZSkge1xuICAvLyBFZGdlJ3MgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gYWRkcyBzb21lIGZpZWxkcyB0aGVyZWZvcmVcbiAgLy8gbm90IGFsbCBmaWVsZNGVIGFyZSB0YWtlbiBpbnRvIGFjY291bnQuXG4gIHZhciBhbHJlYWR5QWRkZWQgPSBpY2VUcmFuc3BvcnQuZ2V0UmVtb3RlQ2FuZGlkYXRlcygpXG4gICAgICAuZmluZChmdW5jdGlvbihyZW1vdGVDYW5kaWRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZS5mb3VuZGF0aW9uID09PSByZW1vdGVDYW5kaWRhdGUuZm91bmRhdGlvbiAmJlxuICAgICAgICAgICAgY2FuZGlkYXRlLmlwID09PSByZW1vdGVDYW5kaWRhdGUuaXAgJiZcbiAgICAgICAgICAgIGNhbmRpZGF0ZS5wb3J0ID09PSByZW1vdGVDYW5kaWRhdGUucG9ydCAmJlxuICAgICAgICAgICAgY2FuZGlkYXRlLnByaW9yaXR5ID09PSByZW1vdGVDYW5kaWRhdGUucHJpb3JpdHkgJiZcbiAgICAgICAgICAgIGNhbmRpZGF0ZS5wcm90b2NvbCA9PT0gcmVtb3RlQ2FuZGlkYXRlLnByb3RvY29sICYmXG4gICAgICAgICAgICBjYW5kaWRhdGUudHlwZSA9PT0gcmVtb3RlQ2FuZGlkYXRlLnR5cGU7XG4gICAgICB9KTtcbiAgaWYgKCFhbHJlYWR5QWRkZWQpIHtcbiAgICBpY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKGNhbmRpZGF0ZSk7XG4gIH1cbiAgcmV0dXJuICFhbHJlYWR5QWRkZWQ7XG59XG5cblxuZnVuY3Rpb24gbWFrZUVycm9yKG5hbWUsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKGRlc2NyaXB0aW9uKTtcbiAgZS5uYW1lID0gbmFtZTtcbiAgLy8gbGVnYWN5IGVycm9yIGNvZGVzIGZyb20gaHR0cHM6Ly9oZXljYW0uZ2l0aHViLmlvL3dlYmlkbC8jaWRsLURPTUV4Y2VwdGlvbi1lcnJvci1uYW1lc1xuICBlLmNvZGUgPSB7XG4gICAgTm90U3VwcG9ydGVkRXJyb3I6IDksXG4gICAgSW52YWxpZFN0YXRlRXJyb3I6IDExLFxuICAgIEludmFsaWRBY2Nlc3NFcnJvcjogMTUsXG4gICAgVHlwZUVycm9yOiB1bmRlZmluZWQsXG4gICAgT3BlcmF0aW9uRXJyb3I6IHVuZGVmaW5lZFxuICB9W25hbWVdO1xuICByZXR1cm4gZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih3aW5kb3csIGVkZ2VWZXJzaW9uKSB7XG4gIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tZWRpYWNhcHR1cmUtbWFpbi8jbWVkaWFzdHJlYW1cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGFkZCB0aGUgdHJhY2sgdG8gdGhlIHN0cmVhbSBhbmRcbiAgLy8gZGlzcGF0Y2ggdGhlIGV2ZW50IG91cnNlbHZlcy5cbiAgZnVuY3Rpb24gYWRkVHJhY2tUb1N0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtKSB7XG4gICAgc3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcbiAgICBzdHJlYW0uZGlzcGF0Y2hFdmVudChuZXcgd2luZG93Lk1lZGlhU3RyZWFtVHJhY2tFdmVudCgnYWRkdHJhY2snLFxuICAgICAgICB7dHJhY2s6IHRyYWNrfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVHJhY2tGcm9tU3RyZWFtQW5kRmlyZUV2ZW50KHRyYWNrLCBzdHJlYW0pIHtcbiAgICBzdHJlYW0ucmVtb3ZlVHJhY2sodHJhY2spO1xuICAgIHN0cmVhbS5kaXNwYXRjaEV2ZW50KG5ldyB3aW5kb3cuTWVkaWFTdHJlYW1UcmFja0V2ZW50KCdyZW1vdmV0cmFjaycsXG4gICAgICAgIHt0cmFjazogdHJhY2t9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBmaXJlQWRkVHJhY2socGMsIHRyYWNrLCByZWNlaXZlciwgc3RyZWFtcykge1xuICAgIHZhciB0cmFja0V2ZW50ID0gbmV3IEV2ZW50KCd0cmFjaycpO1xuICAgIHRyYWNrRXZlbnQudHJhY2sgPSB0cmFjaztcbiAgICB0cmFja0V2ZW50LnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgdHJhY2tFdmVudC50cmFuc2NlaXZlciA9IHtyZWNlaXZlcjogcmVjZWl2ZXJ9O1xuICAgIHRyYWNrRXZlbnQuc3RyZWFtcyA9IHN0cmVhbXM7XG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBwYy5fZGlzcGF0Y2hFdmVudCgndHJhY2snLCB0cmFja0V2ZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBSVENQZWVyQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIHZhciBwYyA9IHRoaXM7XG5cbiAgICB2YXIgX2V2ZW50VGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIFsnYWRkRXZlbnRMaXN0ZW5lcicsICdyZW1vdmVFdmVudExpc3RlbmVyJywgJ2Rpc3BhdGNoRXZlbnQnXVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICBwY1ttZXRob2RdID0gX2V2ZW50VGFyZ2V0W21ldGhvZF0uYmluZChfZXZlbnRUYXJnZXQpO1xuICAgICAgICB9KTtcblxuICAgIHRoaXMuY2FuVHJpY2tsZUljZUNhbmRpZGF0ZXMgPSBudWxsO1xuXG4gICAgdGhpcy5uZWVkTmVnb3RpYXRpb24gPSBmYWxzZTtcblxuICAgIHRoaXMubG9jYWxTdHJlYW1zID0gW107XG4gICAgdGhpcy5yZW1vdGVTdHJlYW1zID0gW107XG5cbiAgICB0aGlzLl9sb2NhbERlc2NyaXB0aW9uID0gbnVsbDtcbiAgICB0aGlzLl9yZW1vdGVEZXNjcmlwdGlvbiA9IG51bGw7XG5cbiAgICB0aGlzLnNpZ25hbGluZ1N0YXRlID0gJ3N0YWJsZSc7XG4gICAgdGhpcy5pY2VDb25uZWN0aW9uU3RhdGUgPSAnbmV3JztcbiAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9ICduZXcnO1xuICAgIHRoaXMuaWNlR2F0aGVyaW5nU3RhdGUgPSAnbmV3JztcblxuICAgIGNvbmZpZyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnIHx8IHt9KSk7XG5cbiAgICB0aGlzLnVzaW5nQnVuZGxlID0gY29uZmlnLmJ1bmRsZVBvbGljeSA9PT0gJ21heC1idW5kbGUnO1xuICAgIGlmIChjb25maWcucnRjcE11eFBvbGljeSA9PT0gJ25lZ290aWF0ZScpIHtcbiAgICAgIHRocm93KG1ha2VFcnJvcignTm90U3VwcG9ydGVkRXJyb3InLFxuICAgICAgICAgICdydGNwTXV4UG9saWN5IFxcJ25lZ290aWF0ZVxcJyBpcyBub3Qgc3VwcG9ydGVkJykpO1xuICAgIH0gZWxzZSBpZiAoIWNvbmZpZy5ydGNwTXV4UG9saWN5KSB7XG4gICAgICBjb25maWcucnRjcE11eFBvbGljeSA9ICdyZXF1aXJlJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3kpIHtcbiAgICAgIGNhc2UgJ2FsbCc6XG4gICAgICBjYXNlICdyZWxheSc6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uZmlnLmljZVRyYW5zcG9ydFBvbGljeSA9ICdhbGwnO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGNvbmZpZy5idW5kbGVQb2xpY3kpIHtcbiAgICAgIGNhc2UgJ2JhbGFuY2VkJzpcbiAgICAgIGNhc2UgJ21heC1jb21wYXQnOlxuICAgICAgY2FzZSAnbWF4LWJ1bmRsZSc6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uZmlnLmJ1bmRsZVBvbGljeSA9ICdiYWxhbmNlZCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbmZpZy5pY2VTZXJ2ZXJzID0gZmlsdGVySWNlU2VydmVycyhjb25maWcuaWNlU2VydmVycyB8fCBbXSwgZWRnZVZlcnNpb24pO1xuXG4gICAgdGhpcy5faWNlR2F0aGVyZXJzID0gW107XG4gICAgaWYgKGNvbmZpZy5pY2VDYW5kaWRhdGVQb29sU2l6ZSkge1xuICAgICAgZm9yICh2YXIgaSA9IGNvbmZpZy5pY2VDYW5kaWRhdGVQb29sU2l6ZTsgaSA+IDA7IGktLSkge1xuICAgICAgICB0aGlzLl9pY2VHYXRoZXJlcnMucHVzaChuZXcgd2luZG93LlJUQ0ljZUdhdGhlcmVyKHtcbiAgICAgICAgICBpY2VTZXJ2ZXJzOiBjb25maWcuaWNlU2VydmVycyxcbiAgICAgICAgICBnYXRoZXJQb2xpY3k6IGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3lcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcuaWNlQ2FuZGlkYXRlUG9vbFNpemUgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcblxuICAgIC8vIHBlci10cmFjayBpY2VHYXRoZXJzLCBpY2VUcmFuc3BvcnRzLCBkdGxzVHJhbnNwb3J0cywgcnRwU2VuZGVycywgLi4uXG4gICAgLy8gZXZlcnl0aGluZyB0aGF0IGlzIG5lZWRlZCB0byBkZXNjcmliZSBhIFNEUCBtLWxpbmUuXG4gICAgdGhpcy50cmFuc2NlaXZlcnMgPSBbXTtcblxuICAgIHRoaXMuX3NkcFNlc3Npb25JZCA9IFNEUFV0aWxzLmdlbmVyYXRlU2Vzc2lvbklkKCk7XG4gICAgdGhpcy5fc2RwU2Vzc2lvblZlcnNpb24gPSAwO1xuXG4gICAgdGhpcy5fZHRsc1JvbGUgPSB1bmRlZmluZWQ7IC8vIHJvbGUgZm9yIGE9c2V0dXAgdG8gdXNlIGluIGFuc3dlcnMuXG5cbiAgICB0aGlzLl9pc0Nsb3NlZCA9IGZhbHNlO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdsb2NhbERlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsRGVzY3JpcHRpb247XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ3JlbW90ZURlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZURlc2NyaXB0aW9uO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gc2V0IHVwIGV2ZW50IGhhbmRsZXJzIG9uIHByb3RvdHlwZVxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25pY2VjYW5kaWRhdGUgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25hZGRzdHJlYW0gPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub250cmFjayA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbnJlbW92ZXN0cmVhbSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25uZWdvdGlhdGlvbm5lZWRlZCA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmRhdGFjaGFubmVsID0gbnVsbDtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2Rpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihuYW1lLCBldmVudCkge1xuICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIGlmICh0eXBlb2YgdGhpc1snb24nICsgbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbJ29uJyArIG5hbWVdKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9lbWl0R2F0aGVyaW5nU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2ljZWdhdGhlcmluZ3N0YXRlY2hhbmdlJyk7XG4gICAgdGhpcy5fZGlzcGF0Y2hFdmVudCgnaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UnLCBldmVudCk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbFN0cmVhbXM7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlbW90ZVN0cmVhbXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdGVTdHJlYW1zO1xuICB9O1xuXG4gIC8vIGludGVybmFsIGhlbHBlciB0byBjcmVhdGUgYSB0cmFuc2NlaXZlciBvYmplY3QuXG4gIC8vICh3aGljaCBpcyBub3QgeWV0IHRoZSBzYW1lIGFzIHRoZSBXZWJSVEMgMS4wIHRyYW5zY2VpdmVyKVxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2NyZWF0ZVRyYW5zY2VpdmVyID0gZnVuY3Rpb24oa2luZCwgZG9Ob3RBZGQpIHtcbiAgICB2YXIgaGFzQnVuZGxlVHJhbnNwb3J0ID0gdGhpcy50cmFuc2NlaXZlcnMubGVuZ3RoID4gMDtcbiAgICB2YXIgdHJhbnNjZWl2ZXIgPSB7XG4gICAgICB0cmFjazogbnVsbCxcbiAgICAgIGljZUdhdGhlcmVyOiBudWxsLFxuICAgICAgaWNlVHJhbnNwb3J0OiBudWxsLFxuICAgICAgZHRsc1RyYW5zcG9ydDogbnVsbCxcbiAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzOiBudWxsLFxuICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzOiBudWxsLFxuICAgICAgcnRwU2VuZGVyOiBudWxsLFxuICAgICAgcnRwUmVjZWl2ZXI6IG51bGwsXG4gICAgICBraW5kOiBraW5kLFxuICAgICAgbWlkOiBudWxsLFxuICAgICAgc2VuZEVuY29kaW5nUGFyYW1ldGVyczogbnVsbCxcbiAgICAgIHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM6IG51bGwsXG4gICAgICBzdHJlYW06IG51bGwsXG4gICAgICBhc3NvY2lhdGVkUmVtb3RlTWVkaWFTdHJlYW1zOiBbXSxcbiAgICAgIHdhbnRSZWNlaXZlOiB0cnVlXG4gICAgfTtcbiAgICBpZiAodGhpcy51c2luZ0J1bmRsZSAmJiBoYXNCdW5kbGVUcmFuc3BvcnQpIHtcbiAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzWzBdLmljZVRyYW5zcG9ydDtcbiAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQgPSB0aGlzLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdHJhbnNwb3J0cyA9IHRoaXMuX2NyZWF0ZUljZUFuZER0bHNUcmFuc3BvcnRzKCk7XG4gICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgPSB0cmFuc3BvcnRzLmljZVRyYW5zcG9ydDtcbiAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQgPSB0cmFuc3BvcnRzLmR0bHNUcmFuc3BvcnQ7XG4gICAgfVxuICAgIGlmICghZG9Ob3RBZGQpIHtcbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzLnB1c2godHJhbnNjZWl2ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNjZWl2ZXI7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID0gZnVuY3Rpb24odHJhY2ssIHN0cmVhbSkge1xuICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkge1xuICAgICAgdGhyb3cgbWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0F0dGVtcHRlZCB0byBjYWxsIGFkZFRyYWNrIG9uIGEgY2xvc2VkIHBlZXJjb25uZWN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5RXhpc3RzID0gdGhpcy50cmFuc2NlaXZlcnMuZmluZChmdW5jdGlvbihzKSB7XG4gICAgICByZXR1cm4gcy50cmFjayA9PT0gdHJhY2s7XG4gICAgfSk7XG5cbiAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgdGhyb3cgbWFrZUVycm9yKCdJbnZhbGlkQWNjZXNzRXJyb3InLCAnVHJhY2sgYWxyZWFkeSBleGlzdHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zY2VpdmVyO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50cmFuc2NlaXZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy50cmFuc2NlaXZlcnNbaV0udHJhY2sgJiZcbiAgICAgICAgICB0aGlzLnRyYW5zY2VpdmVyc1tpXS5raW5kID09PSB0cmFjay5raW5kKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyID0gdGhpcy50cmFuc2NlaXZlcnNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdHJhbnNjZWl2ZXIpIHtcbiAgICAgIHRyYW5zY2VpdmVyID0gdGhpcy5fY3JlYXRlVHJhbnNjZWl2ZXIodHJhY2sua2luZCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQoKTtcblxuICAgIGlmICh0aGlzLmxvY2FsU3RyZWFtcy5pbmRleE9mKHN0cmVhbSkgPT09IC0xKSB7XG4gICAgICB0aGlzLmxvY2FsU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgfVxuXG4gICAgdHJhbnNjZWl2ZXIudHJhY2sgPSB0cmFjaztcbiAgICB0cmFuc2NlaXZlci5zdHJlYW0gPSBzdHJlYW07XG4gICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyID0gbmV3IHdpbmRvdy5SVENSdHBTZW5kZXIodHJhY2ssXG4gICAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQpO1xuICAgIHJldHVybiB0cmFuc2NlaXZlci5ydHBTZW5kZXI7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgaWYgKGVkZ2VWZXJzaW9uID49IDE1MDI1KSB7XG4gICAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICBwYy5hZGRUcmFjayh0cmFjaywgc3RyZWFtKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbG9uZSBpcyBuZWNlc3NhcnkgZm9yIGxvY2FsIGRlbW9zIG1vc3RseSwgYXR0YWNoaW5nIGRpcmVjdGx5XG4gICAgICAvLyB0byB0d28gZGlmZmVyZW50IHNlbmRlcnMgZG9lcyBub3Qgd29yayAoYnVpbGQgMTA1NDcpLlxuICAgICAgLy8gRml4ZWQgaW4gMTUwMjUgKG9yIGVhcmxpZXIpXG4gICAgICB2YXIgY2xvbmVkU3RyZWFtID0gc3RyZWFtLmNsb25lKCk7XG4gICAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaywgaWR4KSB7XG4gICAgICAgIHZhciBjbG9uZWRUcmFjayA9IGNsb25lZFN0cmVhbS5nZXRUcmFja3MoKVtpZHhdO1xuICAgICAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdlbmFibGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBjbG9uZWRUcmFjay5lbmFibGVkID0gZXZlbnQuZW5hYmxlZDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGNsb25lZFN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XG4gICAgICAgIHBjLmFkZFRyYWNrKHRyYWNrLCBjbG9uZWRTdHJlYW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjayA9IGZ1bmN0aW9uKHNlbmRlcikge1xuICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkge1xuICAgICAgdGhyb3cgbWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0F0dGVtcHRlZCB0byBjYWxsIHJlbW92ZVRyYWNrIG9uIGEgY2xvc2VkIHBlZXJjb25uZWN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmICghKHNlbmRlciBpbnN0YW5jZW9mIHdpbmRvdy5SVENSdHBTZW5kZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCAxIG9mIFJUQ1BlZXJDb25uZWN0aW9uLnJlbW92ZVRyYWNrICcgK1xuICAgICAgICAgICdkb2VzIG5vdCBpbXBsZW1lbnQgaW50ZXJmYWNlIFJUQ1J0cFNlbmRlci4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNjZWl2ZXIgPSB0aGlzLnRyYW5zY2VpdmVycy5maW5kKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0LnJ0cFNlbmRlciA9PT0gc2VuZGVyO1xuICAgIH0pO1xuXG4gICAgaWYgKCF0cmFuc2NlaXZlcikge1xuICAgICAgdGhyb3cgbWFrZUVycm9yKCdJbnZhbGlkQWNjZXNzRXJyb3InLFxuICAgICAgICAgICdTZW5kZXIgd2FzIG5vdCBjcmVhdGVkIGJ5IHRoaXMgY29ubmVjdGlvbi4nKTtcbiAgICB9XG4gICAgdmFyIHN0cmVhbSA9IHRyYW5zY2VpdmVyLnN0cmVhbTtcblxuICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci5zdG9wKCk7XG4gICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyID0gbnVsbDtcbiAgICB0cmFuc2NlaXZlci50cmFjayA9IG51bGw7XG4gICAgdHJhbnNjZWl2ZXIuc3RyZWFtID0gbnVsbDtcblxuICAgIC8vIHJlbW92ZSB0aGUgc3RyZWFtIGZyb20gdGhlIHNldCBvZiBsb2NhbCBzdHJlYW1zXG4gICAgdmFyIGxvY2FsU3RyZWFtcyA9IHRoaXMudHJhbnNjZWl2ZXJzLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5zdHJlYW07XG4gICAgfSk7XG4gICAgaWYgKGxvY2FsU3RyZWFtcy5pbmRleE9mKHN0cmVhbSkgPT09IC0xICYmXG4gICAgICAgIHRoaXMubG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA+IC0xKSB7XG4gICAgICB0aGlzLmxvY2FsU3RyZWFtcy5zcGxpY2UodGhpcy5sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pLCAxKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XG4gICAgICB2YXIgc2VuZGVyID0gcGMuZ2V0U2VuZGVycygpLmZpbmQoZnVuY3Rpb24ocykge1xuICAgICAgICByZXR1cm4gcy50cmFjayA9PT0gdHJhY2s7XG4gICAgICB9KTtcbiAgICAgIGlmIChzZW5kZXIpIHtcbiAgICAgICAgcGMucmVtb3ZlVHJhY2soc2VuZGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIHJldHVybiAhIXRyYW5zY2VpdmVyLnJ0cFNlbmRlcjtcbiAgICB9KVxuICAgIC5tYXAoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIHJldHVybiB0cmFuc2NlaXZlci5ydHBTZW5kZXI7XG4gICAgfSk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIHJldHVybiAhIXRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyO1xuICAgIH0pXG4gICAgLm1hcChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyO1xuICAgIH0pO1xuICB9O1xuXG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9jcmVhdGVJY2VHYXRoZXJlciA9IGZ1bmN0aW9uKHNkcE1MaW5lSW5kZXgsXG4gICAgICB1c2luZ0J1bmRsZSkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgaWYgKHVzaW5nQnVuZGxlICYmIHNkcE1MaW5lSW5kZXggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2NlaXZlcnNbMF0uaWNlR2F0aGVyZXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9pY2VHYXRoZXJlcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWNlR2F0aGVyZXJzLnNoaWZ0KCk7XG4gICAgfVxuICAgIHZhciBpY2VHYXRoZXJlciA9IG5ldyB3aW5kb3cuUlRDSWNlR2F0aGVyZXIoe1xuICAgICAgaWNlU2VydmVyczogdGhpcy5fY29uZmlnLmljZVNlcnZlcnMsXG4gICAgICBnYXRoZXJQb2xpY3k6IHRoaXMuX2NvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3lcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaWNlR2F0aGVyZXIsICdzdGF0ZScsXG4gICAgICAgIHt2YWx1ZTogJ25ldycsIHdyaXRhYmxlOiB0cnVlfVxuICAgICk7XG5cbiAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJlZENhbmRpZGF0ZUV2ZW50cyA9IFtdO1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlckNhbmRpZGF0ZXMgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGVuZCA9ICFldmVudC5jYW5kaWRhdGUgfHwgT2JqZWN0LmtleXMoZXZlbnQuY2FuZGlkYXRlKS5sZW5ndGggPT09IDA7XG4gICAgICAvLyBwb2x5ZmlsbCBzaW5jZSBSVENJY2VHYXRoZXJlci5zdGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQgaW5cbiAgICAgIC8vIEVkZ2UgMTA1NDcgeWV0LlxuICAgICAgaWNlR2F0aGVyZXIuc3RhdGUgPSBlbmQgPyAnY29tcGxldGVkJyA6ICdnYXRoZXJpbmcnO1xuICAgICAgaWYgKHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJlZENhbmRpZGF0ZUV2ZW50cyAhPT0gbnVsbCkge1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMucHVzaChldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpY2VHYXRoZXJlci5hZGRFdmVudExpc3RlbmVyKCdsb2NhbGNhbmRpZGF0ZScsXG4gICAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJDYW5kaWRhdGVzKTtcbiAgICByZXR1cm4gaWNlR2F0aGVyZXI7XG4gIH07XG5cbiAgLy8gc3RhcnQgZ2F0aGVyaW5nIGZyb20gYW4gUlRDSWNlR2F0aGVyZXIuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fZ2F0aGVyID0gZnVuY3Rpb24obWlkLCBzZHBNTGluZUluZGV4KSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICB2YXIgaWNlR2F0aGVyZXIgPSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VHYXRoZXJlcjtcbiAgICBpZiAoaWNlR2F0aGVyZXIub25sb2NhbGNhbmRpZGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMgPVxuICAgICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyZWRDYW5kaWRhdGVFdmVudHM7XG4gICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMgPSBudWxsO1xuICAgIGljZUdhdGhlcmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvY2FsY2FuZGlkYXRlJyxcbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlckNhbmRpZGF0ZXMpO1xuICAgIGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGUgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgIGlmIChwYy51c2luZ0J1bmRsZSAmJiBzZHBNTGluZUluZGV4ID4gMCkge1xuICAgICAgICAvLyBpZiB3ZSBrbm93IHRoYXQgd2UgdXNlIGJ1bmRsZSB3ZSBjYW4gZHJvcCBjYW5kaWRhdGVzIHdpdGhcbiAgICAgICAgLy8g0ZVkcE1MaW5lSW5kZXggPiAwLiBJZiB3ZSBkb24ndCBkbyB0aGlzIHRoZW4gb3VyIHN0YXRlIGdldHNcbiAgICAgICAgLy8gY29uZnVzZWQgc2luY2Ugd2UgZGlzcG9zZSB0aGUgZXh0cmEgaWNlIGdhdGhlcmVyLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2ljZWNhbmRpZGF0ZScpO1xuICAgICAgZXZlbnQuY2FuZGlkYXRlID0ge3NkcE1pZDogbWlkLCBzZHBNTGluZUluZGV4OiBzZHBNTGluZUluZGV4fTtcblxuICAgICAgdmFyIGNhbmQgPSBldnQuY2FuZGlkYXRlO1xuICAgICAgLy8gRWRnZSBlbWl0cyBhbiBlbXB0eSBvYmplY3QgZm9yIFJUQ0ljZUNhbmRpZGF0ZUNvbXBsZXRl4oClXG4gICAgICB2YXIgZW5kID0gIWNhbmQgfHwgT2JqZWN0LmtleXMoY2FuZCkubGVuZ3RoID09PSAwO1xuICAgICAgaWYgKGVuZCkge1xuICAgICAgICAvLyBwb2x5ZmlsbCBzaW5jZSBSVENJY2VHYXRoZXJlci5zdGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQgaW5cbiAgICAgICAgLy8gRWRnZSAxMDU0NyB5ZXQuXG4gICAgICAgIGlmIChpY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ25ldycgfHwgaWNlR2F0aGVyZXIuc3RhdGUgPT09ICdnYXRoZXJpbmcnKSB7XG4gICAgICAgICAgaWNlR2F0aGVyZXIuc3RhdGUgPSAnY29tcGxldGVkJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGljZUdhdGhlcmVyLnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgIGljZUdhdGhlcmVyLnN0YXRlID0gJ2dhdGhlcmluZyc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUlRDSWNlQ2FuZGlkYXRlIGRvZXNuJ3QgaGF2ZSBhIGNvbXBvbmVudCwgbmVlZHMgdG8gYmUgYWRkZWRcbiAgICAgICAgY2FuZC5jb21wb25lbnQgPSAxO1xuICAgICAgICAvLyBhbHNvIHRoZSB1c2VybmFtZUZyYWdtZW50LiBUT0RPOiB1cGRhdGUgU0RQIHRvIHRha2UgYm90aCB2YXJpYW50cy5cbiAgICAgICAgY2FuZC51ZnJhZyA9IGljZUdhdGhlcmVyLmdldExvY2FsUGFyYW1ldGVycygpLnVzZXJuYW1lRnJhZ21lbnQ7XG5cbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRDYW5kaWRhdGUgPSBTRFBVdGlscy53cml0ZUNhbmRpZGF0ZShjYW5kKTtcbiAgICAgICAgZXZlbnQuY2FuZGlkYXRlID0gT2JqZWN0LmFzc2lnbihldmVudC5jYW5kaWRhdGUsXG4gICAgICAgICAgICBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShzZXJpYWxpemVkQ2FuZGlkYXRlKSk7XG5cbiAgICAgICAgZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSA9IHNlcmlhbGl6ZWRDYW5kaWRhdGU7XG4gICAgICAgIGV2ZW50LmNhbmRpZGF0ZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FuZGlkYXRlOiBldmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlLFxuICAgICAgICAgICAgc2RwTWlkOiBldmVudC5jYW5kaWRhdGUuc2RwTWlkLFxuICAgICAgICAgICAgc2RwTUxpbmVJbmRleDogZXZlbnQuY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXgsXG4gICAgICAgICAgICB1c2VybmFtZUZyYWdtZW50OiBldmVudC5jYW5kaWRhdGUudXNlcm5hbWVGcmFnbWVudFxuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIHVwZGF0ZSBsb2NhbCBkZXNjcmlwdGlvbi5cbiAgICAgIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLmdldE1lZGlhU2VjdGlvbnMocGMuX2xvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgIGlmICghZW5kKSB7XG4gICAgICAgIHNlY3Rpb25zW2V2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4XSArPVxuICAgICAgICAgICAgJ2E9JyArIGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUgKyAnXFxyXFxuJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlY3Rpb25zW2V2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4XSArPVxuICAgICAgICAgICAgJ2E9ZW5kLW9mLWNhbmRpZGF0ZXNcXHJcXG4nO1xuICAgICAgfVxuICAgICAgcGMuX2xvY2FsRGVzY3JpcHRpb24uc2RwID1cbiAgICAgICAgICBTRFBVdGlscy5nZXREZXNjcmlwdGlvbihwYy5fbG9jYWxEZXNjcmlwdGlvbi5zZHApICtcbiAgICAgICAgICBzZWN0aW9ucy5qb2luKCcnKTtcbiAgICAgIHZhciBjb21wbGV0ZSA9IHBjLnRyYW5zY2VpdmVycy5ldmVyeShmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLnN0YXRlID09PSAnY29tcGxldGVkJztcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGMuaWNlR2F0aGVyaW5nU3RhdGUgIT09ICdnYXRoZXJpbmcnKSB7XG4gICAgICAgIHBjLmljZUdhdGhlcmluZ1N0YXRlID0gJ2dhdGhlcmluZyc7XG4gICAgICAgIHBjLl9lbWl0R2F0aGVyaW5nU3RhdGVDaGFuZ2UoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRW1pdCBjYW5kaWRhdGUuIEFsc28gZW1pdCBudWxsIGNhbmRpZGF0ZSB3aGVuIGFsbCBnYXRoZXJlcnMgYXJlXG4gICAgICAvLyBjb21wbGV0ZS5cbiAgICAgIGlmICghZW5kKSB7XG4gICAgICAgIHBjLl9kaXNwYXRjaEV2ZW50KCdpY2VjYW5kaWRhdGUnLCBldmVudCk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGxldGUpIHtcbiAgICAgICAgcGMuX2Rpc3BhdGNoRXZlbnQoJ2ljZWNhbmRpZGF0ZScsIG5ldyBFdmVudCgnaWNlY2FuZGlkYXRlJykpO1xuICAgICAgICBwYy5pY2VHYXRoZXJpbmdTdGF0ZSA9ICdjb21wbGV0ZSc7XG4gICAgICAgIHBjLl9lbWl0R2F0aGVyaW5nU3RhdGVDaGFuZ2UoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZW1pdCBhbHJlYWR5IGdhdGhlcmVkIGNhbmRpZGF0ZXMuXG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBidWZmZXJlZENhbmRpZGF0ZUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWNlR2F0aGVyZXIub25sb2NhbGNhbmRpZGF0ZShlKTtcbiAgICAgIH0pO1xuICAgIH0sIDApO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBJQ0UgdHJhbnNwb3J0IGFuZCBEVExTIHRyYW5zcG9ydC5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgdmFyIGljZVRyYW5zcG9ydCA9IG5ldyB3aW5kb3cuUlRDSWNlVHJhbnNwb3J0KG51bGwpO1xuICAgIGljZVRyYW5zcG9ydC5vbmljZXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICBwYy5fdXBkYXRlSWNlQ29ubmVjdGlvblN0YXRlKCk7XG4gICAgICBwYy5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCk7XG4gICAgfTtcblxuICAgIHZhciBkdGxzVHJhbnNwb3J0ID0gbmV3IHdpbmRvdy5SVENEdGxzVHJhbnNwb3J0KGljZVRyYW5zcG9ydCk7XG4gICAgZHRsc1RyYW5zcG9ydC5vbmR0bHNzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcGMuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZSgpO1xuICAgIH07XG4gICAgZHRsc1RyYW5zcG9ydC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBvbmVycm9yIGRvZXMgbm90IHNldCBzdGF0ZSB0byBmYWlsZWQgYnkgaXRzZWxmLlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGR0bHNUcmFuc3BvcnQsICdzdGF0ZScsXG4gICAgICAgICAge3ZhbHVlOiAnZmFpbGVkJywgd3JpdGFibGU6IHRydWV9KTtcbiAgICAgIHBjLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGljZVRyYW5zcG9ydDogaWNlVHJhbnNwb3J0LFxuICAgICAgZHRsc1RyYW5zcG9ydDogZHRsc1RyYW5zcG9ydFxuICAgIH07XG4gIH07XG5cbiAgLy8gRGVzdHJveSBJQ0UgZ2F0aGVyZXIsIElDRSB0cmFuc3BvcnQgYW5kIERUTFMgdHJhbnNwb3J0LlxuICAvLyBXaXRob3V0IHRyaWdnZXJpbmcgdGhlIGNhbGxiYWNrcy5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9kaXNwb3NlSWNlQW5kRHRsc1RyYW5zcG9ydHMgPSBmdW5jdGlvbihcbiAgICAgIHNkcE1MaW5lSW5kZXgpIHtcbiAgICB2YXIgaWNlR2F0aGVyZXIgPSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VHYXRoZXJlcjtcbiAgICBpZiAoaWNlR2F0aGVyZXIpIHtcbiAgICAgIGRlbGV0ZSBpY2VHYXRoZXJlci5vbmxvY2FsY2FuZGlkYXRlO1xuICAgICAgZGVsZXRlIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZUdhdGhlcmVyO1xuICAgIH1cbiAgICB2YXIgaWNlVHJhbnNwb3J0ID0gdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlVHJhbnNwb3J0O1xuICAgIGlmIChpY2VUcmFuc3BvcnQpIHtcbiAgICAgIGRlbGV0ZSBpY2VUcmFuc3BvcnQub25pY2VzdGF0ZWNoYW5nZTtcbiAgICAgIGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VUcmFuc3BvcnQ7XG4gICAgfVxuICAgIHZhciBkdGxzVHJhbnNwb3J0ID0gdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uZHRsc1RyYW5zcG9ydDtcbiAgICBpZiAoZHRsc1RyYW5zcG9ydCkge1xuICAgICAgZGVsZXRlIGR0bHNUcmFuc3BvcnQub25kdGxzc3RhdGVjaGFuZ2U7XG4gICAgICBkZWxldGUgZHRsc1RyYW5zcG9ydC5vbmVycm9yO1xuICAgICAgZGVsZXRlIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmR0bHNUcmFuc3BvcnQ7XG4gICAgfVxuICB9O1xuXG4gIC8vIFN0YXJ0IHRoZSBSVFAgU2VuZGVyIGFuZCBSZWNlaXZlciBmb3IgYSB0cmFuc2NlaXZlci5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl90cmFuc2NlaXZlID0gZnVuY3Rpb24odHJhbnNjZWl2ZXIsXG4gICAgICBzZW5kLCByZWN2KSB7XG4gICAgdmFyIHBhcmFtcyA9IGdldENvbW1vbkNhcGFiaWxpdGllcyh0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzKTtcbiAgICBpZiAoc2VuZCAmJiB0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICAgIHBhcmFtcy5lbmNvZGluZ3MgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgcGFyYW1zLnJ0Y3AgPSB7XG4gICAgICAgIGNuYW1lOiBTRFBVdGlscy5sb2NhbENOYW1lLFxuICAgICAgICBjb21wb3VuZDogdHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMuY29tcG91bmRcbiAgICAgIH07XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgcGFyYW1zLnJ0Y3Auc3NyYyA9IHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYztcbiAgICAgIH1cbiAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci5zZW5kKHBhcmFtcyk7XG4gICAgfVxuICAgIGlmIChyZWN2ICYmIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyICYmIHBhcmFtcy5jb2RlY3MubGVuZ3RoID4gMCkge1xuICAgICAgLy8gcmVtb3ZlIFJUWCBmaWVsZCBpbiBFZGdlIDE0OTQyXG4gICAgICBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJ1xuICAgICAgICAgICYmIHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnNcbiAgICAgICAgICAmJiBlZGdlVmVyc2lvbiA8IDE1MDE5KSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgZGVsZXRlIHAucnR4O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCkge1xuICAgICAgICBwYXJhbXMuZW5jb2RpbmdzID0gdHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5lbmNvZGluZ3MgPSBbe31dO1xuICAgICAgfVxuICAgICAgcGFyYW1zLnJ0Y3AgPSB7XG4gICAgICAgIGNvbXBvdW5kOiB0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycy5jb21wb3VuZFxuICAgICAgfTtcbiAgICAgIGlmICh0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycy5jbmFtZSkge1xuICAgICAgICBwYXJhbXMucnRjcC5jbmFtZSA9IHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzLmNuYW1lO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBhcmFtcy5ydGNwLnNzcmMgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmM7XG4gICAgICB9XG4gICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci5yZWNlaXZlKHBhcmFtcyk7XG4gICAgfVxuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuXG4gICAgLy8gTm90ZTogcHJhbnN3ZXIgaXMgbm90IHN1cHBvcnRlZC5cbiAgICBpZiAoWydvZmZlcicsICdhbnN3ZXInXS5pbmRleE9mKGRlc2NyaXB0aW9uLnR5cGUpID09PSAtMSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignVHlwZUVycm9yJyxcbiAgICAgICAgICAnVW5zdXBwb3J0ZWQgdHlwZSBcIicgKyBkZXNjcmlwdGlvbi50eXBlICsgJ1wiJykpO1xuICAgIH1cblxuICAgIGlmICghaXNBY3Rpb25BbGxvd2VkSW5TaWduYWxpbmdTdGF0ZSgnc2V0TG9jYWxEZXNjcmlwdGlvbicsXG4gICAgICAgIGRlc2NyaXB0aW9uLnR5cGUsIHBjLnNpZ25hbGluZ1N0YXRlKSB8fCBwYy5faXNDbG9zZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQ2FuIG5vdCBzZXQgbG9jYWwgJyArIGRlc2NyaXB0aW9uLnR5cGUgK1xuICAgICAgICAgICcgaW4gc3RhdGUgJyArIHBjLnNpZ25hbGluZ1N0YXRlKSk7XG4gICAgfVxuXG4gICAgdmFyIHNlY3Rpb25zO1xuICAgIHZhciBzZXNzaW9ucGFydDtcbiAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykge1xuICAgICAgLy8gVkVSWSBsaW1pdGVkIHN1cHBvcnQgZm9yIFNEUCBtdW5naW5nLiBMaW1pdGVkIHRvOlxuICAgICAgLy8gKiBjaGFuZ2luZyB0aGUgb3JkZXIgb2YgY29kZWNzXG4gICAgICBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoZGVzY3JpcHRpb24uc2RwKTtcbiAgICAgIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTtcbiAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICAgIHZhciBjYXBzID0gU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5sb2NhbENhcGFiaWxpdGllcyA9IGNhcHM7XG4gICAgICB9KTtcblxuICAgICAgcGMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgICAgcGMuX2dhdGhlcih0cmFuc2NlaXZlci5taWQsIHNkcE1MaW5lSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnYW5zd2VyJykge1xuICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgc2Vzc2lvbnBhcnQgPSBzZWN0aW9ucy5zaGlmdCgpO1xuICAgICAgdmFyIGlzSWNlTGl0ZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KHNlc3Npb25wYXJ0LFxuICAgICAgICAgICdhPWljZS1saXRlJykubGVuZ3RoID4gMDtcbiAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICAgIHZhciB0cmFuc2NlaXZlciA9IHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XTtcbiAgICAgICAgdmFyIGljZUdhdGhlcmVyID0gdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXI7XG4gICAgICAgIHZhciBpY2VUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQ7XG4gICAgICAgIHZhciBkdGxzVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydDtcbiAgICAgICAgdmFyIGxvY2FsQ2FwYWJpbGl0aWVzID0gdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXM7XG4gICAgICAgIHZhciByZW1vdGVDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXM7XG5cbiAgICAgICAgLy8gdHJlYXQgYnVuZGxlLW9ubHkgYXMgbm90LXJlamVjdGVkLlxuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBTRFBVdGlscy5pc1JlamVjdGVkKG1lZGlhU2VjdGlvbikgJiZcbiAgICAgICAgICAgIFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9YnVuZGxlLW9ubHknKS5sZW5ndGggPT09IDA7XG5cbiAgICAgICAgaWYgKCFyZWplY3RlZCAmJiAhdHJhbnNjZWl2ZXIucmVqZWN0ZWQpIHtcbiAgICAgICAgICB2YXIgcmVtb3RlSWNlUGFyYW1ldGVycyA9IFNEUFV0aWxzLmdldEljZVBhcmFtZXRlcnMoXG4gICAgICAgICAgICAgIG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpO1xuICAgICAgICAgIHZhciByZW1vdGVEdGxzUGFyYW1ldGVycyA9IFNEUFV0aWxzLmdldER0bHNQYXJhbWV0ZXJzKFxuICAgICAgICAgICAgICBtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTtcbiAgICAgICAgICBpZiAoaXNJY2VMaXRlKSB7XG4gICAgICAgICAgICByZW1vdGVEdGxzUGFyYW1ldGVycy5yb2xlID0gJ3NlcnZlcic7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFwYy51c2luZ0J1bmRsZSB8fCBzZHBNTGluZUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBwYy5fZ2F0aGVyKHRyYW5zY2VpdmVyLm1pZCwgc2RwTUxpbmVJbmRleCk7XG4gICAgICAgICAgICBpZiAoaWNlVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgICAgICBpY2VUcmFuc3BvcnQuc3RhcnQoaWNlR2F0aGVyZXIsIHJlbW90ZUljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICBpc0ljZUxpdGUgPyAnY29udHJvbGxpbmcnIDogJ2NvbnRyb2xsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkdGxzVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgICAgICBkdGxzVHJhbnNwb3J0LnN0YXJ0KHJlbW90ZUR0bHNQYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDYWxjdWxhdGUgaW50ZXJzZWN0aW9uIG9mIGNhcGFiaWxpdGllcy5cbiAgICAgICAgICB2YXIgcGFyYW1zID0gZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKGxvY2FsQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgICAgLy8gU3RhcnQgdGhlIFJUQ1J0cFNlbmRlci4gVGhlIFJUQ1J0cFJlY2VpdmVyIGZvciB0aGlzXG4gICAgICAgICAgLy8gdHJhbnNjZWl2ZXIgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGluIHNldFJlbW90ZURlc2NyaXB0aW9uLlxuICAgICAgICAgIHBjLl90cmFuc2NlaXZlKHRyYW5zY2VpdmVyLFxuICAgICAgICAgICAgICBwYXJhbXMuY29kZWNzLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGMuX2xvY2FsRGVzY3JpcHRpb24gPSB7XG4gICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgc2RwOiBkZXNjcmlwdGlvbi5zZHBcbiAgICB9O1xuICAgIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInKSB7XG4gICAgICBwYy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ2hhdmUtbG9jYWwtb2ZmZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdzdGFibGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuXG4gICAgLy8gTm90ZTogcHJhbnN3ZXIgaXMgbm90IHN1cHBvcnRlZC5cbiAgICBpZiAoWydvZmZlcicsICdhbnN3ZXInXS5pbmRleE9mKGRlc2NyaXB0aW9uLnR5cGUpID09PSAtMSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignVHlwZUVycm9yJyxcbiAgICAgICAgICAnVW5zdXBwb3J0ZWQgdHlwZSBcIicgKyBkZXNjcmlwdGlvbi50eXBlICsgJ1wiJykpO1xuICAgIH1cblxuICAgIGlmICghaXNBY3Rpb25BbGxvd2VkSW5TaWduYWxpbmdTdGF0ZSgnc2V0UmVtb3RlRGVzY3JpcHRpb24nLFxuICAgICAgICBkZXNjcmlwdGlvbi50eXBlLCBwYy5zaWduYWxpbmdTdGF0ZSkgfHwgcGMuX2lzQ2xvc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0NhbiBub3Qgc2V0IHJlbW90ZSAnICsgZGVzY3JpcHRpb24udHlwZSArXG4gICAgICAgICAgJyBpbiBzdGF0ZSAnICsgcGMuc2lnbmFsaW5nU3RhdGUpKTtcbiAgICB9XG5cbiAgICB2YXIgc3RyZWFtcyA9IHt9O1xuICAgIHBjLnJlbW90ZVN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHN0cmVhbXNbc3RyZWFtLmlkXSA9IHN0cmVhbTtcbiAgICB9KTtcbiAgICB2YXIgcmVjZWl2ZXJMaXN0ID0gW107XG4gICAgdmFyIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhkZXNjcmlwdGlvbi5zZHApO1xuICAgIHZhciBzZXNzaW9ucGFydCA9IHNlY3Rpb25zLnNoaWZ0KCk7XG4gICAgdmFyIGlzSWNlTGl0ZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KHNlc3Npb25wYXJ0LFxuICAgICAgICAnYT1pY2UtbGl0ZScpLmxlbmd0aCA+IDA7XG4gICAgdmFyIHVzaW5nQnVuZGxlID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoc2Vzc2lvbnBhcnQsXG4gICAgICAgICdhPWdyb3VwOkJVTkRMRSAnKS5sZW5ndGggPiAwO1xuICAgIHBjLnVzaW5nQnVuZGxlID0gdXNpbmdCdW5kbGU7XG4gICAgdmFyIGljZU9wdGlvbnMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChzZXNzaW9ucGFydCxcbiAgICAgICAgJ2E9aWNlLW9wdGlvbnM6JylbMF07XG4gICAgaWYgKGljZU9wdGlvbnMpIHtcbiAgICAgIHBjLmNhblRyaWNrbGVJY2VDYW5kaWRhdGVzID0gaWNlT3B0aW9ucy5zdWJzdHIoMTQpLnNwbGl0KCcgJylcbiAgICAgICAgICAuaW5kZXhPZigndHJpY2tsZScpID49IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBjLmNhblRyaWNrbGVJY2VDYW5kaWRhdGVzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgICAgIHZhciBraW5kID0gU0RQVXRpbHMuZ2V0S2luZChtZWRpYVNlY3Rpb24pO1xuICAgICAgLy8gdHJlYXQgYnVuZGxlLW9ubHkgYXMgbm90LXJlamVjdGVkLlxuICAgICAgdmFyIHJlamVjdGVkID0gU0RQVXRpbHMuaXNSZWplY3RlZChtZWRpYVNlY3Rpb24pICYmXG4gICAgICAgICAgU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1idW5kbGUtb25seScpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHZhciBwcm90b2NvbCA9IGxpbmVzWzBdLnN1YnN0cigyKS5zcGxpdCgnICcpWzJdO1xuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gU0RQVXRpbHMuZ2V0RGlyZWN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpO1xuICAgICAgdmFyIHJlbW90ZU1zaWQgPSBTRFBVdGlscy5wYXJzZU1zaWQobWVkaWFTZWN0aW9uKTtcblxuICAgICAgdmFyIG1pZCA9IFNEUFV0aWxzLmdldE1pZChtZWRpYVNlY3Rpb24pIHx8IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpO1xuXG4gICAgICAvLyBSZWplY3QgZGF0YWNoYW5uZWxzIHdoaWNoIGFyZSBub3QgaW1wbGVtZW50ZWQgeWV0LlxuICAgICAgaWYgKHJlamVjdGVkIHx8IChraW5kID09PSAnYXBwbGljYXRpb24nICYmIChwcm90b2NvbCA9PT0gJ0RUTFMvU0NUUCcgfHxcbiAgICAgICAgICBwcm90b2NvbCA9PT0gJ1VEUC9EVExTL1NDVFAnKSkpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBkYW5nZXJvdXMgaW4gdGhlIGNhc2Ugd2hlcmUgYSBub24tcmVqZWN0ZWQgbS1saW5lXG4gICAgICAgIC8vICAgICBiZWNvbWVzIHJlamVjdGVkLlxuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0gPSB7XG4gICAgICAgICAgbWlkOiBtaWQsXG4gICAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgICBwcm90b2NvbDogcHJvdG9jb2wsXG4gICAgICAgICAgcmVqZWN0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJlamVjdGVkICYmIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSAmJlxuICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5yZWplY3RlZCkge1xuICAgICAgICAvLyByZWN5Y2xlIGEgcmVqZWN0ZWQgdHJhbnNjZWl2ZXIuXG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSA9IHBjLl9jcmVhdGVUcmFuc2NlaXZlcihraW5kLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zY2VpdmVyO1xuICAgICAgdmFyIGljZUdhdGhlcmVyO1xuICAgICAgdmFyIGljZVRyYW5zcG9ydDtcbiAgICAgIHZhciBkdGxzVHJhbnNwb3J0O1xuICAgICAgdmFyIHJ0cFJlY2VpdmVyO1xuICAgICAgdmFyIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICB2YXIgcmVjdkVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgIHZhciBsb2NhbENhcGFiaWxpdGllcztcblxuICAgICAgdmFyIHRyYWNrO1xuICAgICAgLy8gRklYTUU6IGVuc3VyZSB0aGUgbWVkaWFTZWN0aW9uIGhhcyBydGNwLW11eCBzZXQuXG4gICAgICB2YXIgcmVtb3RlQ2FwYWJpbGl0aWVzID0gU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG4gICAgICB2YXIgcmVtb3RlSWNlUGFyYW1ldGVycztcbiAgICAgIHZhciByZW1vdGVEdGxzUGFyYW1ldGVycztcbiAgICAgIGlmICghcmVqZWN0ZWQpIHtcbiAgICAgICAgcmVtb3RlSWNlUGFyYW1ldGVycyA9IFNEUFV0aWxzLmdldEljZVBhcmFtZXRlcnMobWVkaWFTZWN0aW9uLFxuICAgICAgICAgICAgc2Vzc2lvbnBhcnQpO1xuICAgICAgICByZW1vdGVEdGxzUGFyYW1ldGVycyA9IFNEUFV0aWxzLmdldER0bHNQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbixcbiAgICAgICAgICAgIHNlc3Npb25wYXJ0KTtcbiAgICAgICAgcmVtb3RlRHRsc1BhcmFtZXRlcnMucm9sZSA9ICdjbGllbnQnO1xuICAgICAgfVxuICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVycyA9XG4gICAgICAgICAgU0RQVXRpbHMucGFyc2VSdHBFbmNvZGluZ1BhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcblxuICAgICAgdmFyIHJ0Y3BQYXJhbWV0ZXJzID0gU0RQVXRpbHMucGFyc2VSdGNwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuXG4gICAgICB2YXIgaXNDb21wbGV0ZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbixcbiAgICAgICAgICAnYT1lbmQtb2YtY2FuZGlkYXRlcycsIHNlc3Npb25wYXJ0KS5sZW5ndGggPiAwO1xuICAgICAgdmFyIGNhbmRzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1jYW5kaWRhdGU6JylcbiAgICAgICAgICAubWFwKGZ1bmN0aW9uKGNhbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShjYW5kKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oY2FuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbmQuY29tcG9uZW50ID09PSAxO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAvLyBDaGVjayBpZiB3ZSBjYW4gdXNlIEJVTkRMRSBhbmQgZGlzcG9zZSB0cmFuc3BvcnRzLlxuICAgICAgaWYgKChkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInIHx8IGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInKSAmJlxuICAgICAgICAgICFyZWplY3RlZCAmJiB1c2luZ0J1bmRsZSAmJiBzZHBNTGluZUluZGV4ID4gMCAmJlxuICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSkge1xuICAgICAgICBwYy5fZGlzcG9zZUljZUFuZER0bHNUcmFuc3BvcnRzKHNkcE1MaW5lSW5kZXgpO1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlR2F0aGVyZXIgPVxuICAgICAgICAgICAgcGMudHJhbnNjZWl2ZXJzWzBdLmljZUdhdGhlcmVyO1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlVHJhbnNwb3J0ID1cbiAgICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1swXS5pY2VUcmFuc3BvcnQ7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5kdGxzVHJhbnNwb3J0ID1cbiAgICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0O1xuICAgICAgICBpZiAocGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJ0cFNlbmRlcikge1xuICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5ydHBTZW5kZXIuc2V0VHJhbnNwb3J0KFxuICAgICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5ydHBSZWNlaXZlcikge1xuICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5ydHBSZWNlaXZlci5zZXRUcmFuc3BvcnQoXG4gICAgICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicgJiYgIXJlamVjdGVkKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyID0gcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdIHx8XG4gICAgICAgICAgICBwYy5fY3JlYXRlVHJhbnNjZWl2ZXIoa2luZCk7XG4gICAgICAgIHRyYW5zY2VpdmVyLm1pZCA9IG1pZDtcblxuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyLmljZUdhdGhlcmVyKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIgPSBwYy5fY3JlYXRlSWNlR2F0aGVyZXIoc2RwTUxpbmVJbmRleCxcbiAgICAgICAgICAgICAgdXNpbmdCdW5kbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbmRzLmxlbmd0aCAmJiB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgaWYgKGlzQ29tcGxldGUgJiYgKCF1c2luZ0J1bmRsZSB8fCBzZHBNTGluZUluZGV4ID09PSAwKSkge1xuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnNldFJlbW90ZUNhbmRpZGF0ZXMoY2FuZHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYW5kcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICBtYXliZUFkZENhbmRpZGF0ZSh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQsIGNhbmRpZGF0ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbENhcGFiaWxpdGllcyA9IHdpbmRvdy5SVENSdHBSZWNlaXZlci5nZXRDYXBhYmlsaXRpZXMoa2luZCk7XG5cbiAgICAgICAgLy8gZmlsdGVyIFJUWCB1bnRpbCBhZGRpdGlvbmFsIHN0dWZmIG5lZWRlZCBmb3IgUlRYIGlzIGltcGxlbWVudGVkXG4gICAgICAgIC8vIGluIGFkYXB0ZXIuanNcbiAgICAgICAgaWYgKGVkZ2VWZXJzaW9uIDwgMTUwMTkpIHtcbiAgICAgICAgICBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MgPSBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MuZmlsdGVyKFxuICAgICAgICAgICAgICBmdW5jdGlvbihjb2RlYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlYy5uYW1lICE9PSAncnR4JztcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycyB8fCBbe1xuICAgICAgICAgIHNzcmM6ICgyICogc2RwTUxpbmVJbmRleCArIDIpICogMTAwMVxuICAgICAgICB9XTtcblxuICAgICAgICAvLyBUT0RPOiByZXdyaXRlIHRvIHVzZSBodHRwOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtcGMvI3NldC1hc3NvY2lhdGVkLXJlbW90ZS1zdHJlYW1zXG4gICAgICAgIHZhciBpc05ld1RyYWNrID0gZmFsc2U7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgZGlyZWN0aW9uID09PSAnc2VuZG9ubHknKSB7XG4gICAgICAgICAgaXNOZXdUcmFjayA9ICF0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICAgICAgICBydHBSZWNlaXZlciA9IHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyIHx8XG4gICAgICAgICAgICAgIG5ldyB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIodHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCwga2luZCk7XG5cbiAgICAgICAgICBpZiAoaXNOZXdUcmFjaykge1xuICAgICAgICAgICAgdmFyIHN0cmVhbTtcbiAgICAgICAgICAgIHRyYWNrID0gcnRwUmVjZWl2ZXIudHJhY2s7XG4gICAgICAgICAgICAvLyBGSVhNRTogZG9lcyBub3Qgd29yayB3aXRoIFBsYW4gQi5cbiAgICAgICAgICAgIGlmIChyZW1vdGVNc2lkICYmIHJlbW90ZU1zaWQuc3RyZWFtID09PSAnLScpIHtcbiAgICAgICAgICAgICAgLy8gbm8tb3AuIGEgc3RyZWFtIGlkIG9mICctJyBtZWFuczogbm8gYXNzb2NpYXRlZCBzdHJlYW0uXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlbW90ZU1zaWQpIHtcbiAgICAgICAgICAgICAgaWYgKCFzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXSkge1xuICAgICAgICAgICAgICAgIHN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbSgpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXSwgJ2lkJywge1xuICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbW90ZU1zaWQuc3RyZWFtO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0cmFjaywgJ2lkJywge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3RlTXNpZC50cmFjaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzdHJlYW0gPSBzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghc3RyZWFtcy5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtcy5kZWZhdWx0ID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0cmVhbSA9IHN0cmVhbXMuZGVmYXVsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgYWRkVHJhY2tUb1N0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtKTtcbiAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuYXNzb2NpYXRlZFJlbW90ZU1lZGlhU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNlaXZlckxpc3QucHVzaChbdHJhY2ssIHJ0cFJlY2VpdmVyLCBzdHJlYW1dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIudHJhY2spIHtcbiAgICAgICAgICB0cmFuc2NlaXZlci5hc3NvY2lhdGVkUmVtb3RlTWVkaWFTdHJlYW1zLmZvckVhY2goZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgdmFyIG5hdGl2ZVRyYWNrID0gcy5nZXRUcmFja3MoKS5maW5kKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQuaWQgPT09IHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnRyYWNrLmlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobmF0aXZlVHJhY2spIHtcbiAgICAgICAgICAgICAgcmVtb3ZlVHJhY2tGcm9tU3RyZWFtQW5kRmlyZUV2ZW50KG5hdGl2ZVRyYWNrLCBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0cmFuc2NlaXZlci5hc3NvY2lhdGVkUmVtb3RlTWVkaWFTdHJlYW1zID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyA9IGxvY2FsQ2FwYWJpbGl0aWVzO1xuICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMgPSByZW1vdGVDYXBhYmlsaXRpZXM7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyID0gcnRwUmVjZWl2ZXI7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzID0gcnRjcFBhcmFtZXRlcnM7XG4gICAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgICB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzID0gcmVjdkVuY29kaW5nUGFyYW1ldGVycztcblxuICAgICAgICAvLyBTdGFydCB0aGUgUlRDUnRwUmVjZWl2ZXIgbm93LiBUaGUgUlRQU2VuZGVyIGlzIHN0YXJ0ZWQgaW5cbiAgICAgICAgLy8gc2V0TG9jYWxEZXNjcmlwdGlvbi5cbiAgICAgICAgcGMuX3RyYW5zY2VpdmUocGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBpc05ld1RyYWNrKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ2Fuc3dlcicgJiYgIXJlamVjdGVkKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyID0gcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdO1xuICAgICAgICBpY2VHYXRoZXJlciA9IHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyO1xuICAgICAgICBpY2VUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQ7XG4gICAgICAgIGR0bHNUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0O1xuICAgICAgICBydHBSZWNlaXZlciA9IHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyO1xuICAgICAgICBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcztcblxuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucmVjdkVuY29kaW5nUGFyYW1ldGVycyA9XG4gICAgICAgICAgICByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucmVtb3RlQ2FwYWJpbGl0aWVzID1cbiAgICAgICAgICAgIHJlbW90ZUNhcGFiaWxpdGllcztcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJ0Y3BQYXJhbWV0ZXJzID0gcnRjcFBhcmFtZXRlcnM7XG5cbiAgICAgICAgaWYgKGNhbmRzLmxlbmd0aCAmJiBpY2VUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgaWYgKChpc0ljZUxpdGUgfHwgaXNDb21wbGV0ZSkgJiZcbiAgICAgICAgICAgICAgKCF1c2luZ0J1bmRsZSB8fCBzZHBNTGluZUluZGV4ID09PSAwKSkge1xuICAgICAgICAgICAgaWNlVHJhbnNwb3J0LnNldFJlbW90ZUNhbmRpZGF0ZXMoY2FuZHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYW5kcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICBtYXliZUFkZENhbmRpZGF0ZSh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQsIGNhbmRpZGF0ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXVzaW5nQnVuZGxlIHx8IHNkcE1MaW5lSW5kZXggPT09IDApIHtcbiAgICAgICAgICBpZiAoaWNlVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgICAgaWNlVHJhbnNwb3J0LnN0YXJ0KGljZUdhdGhlcmVyLCByZW1vdGVJY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICdjb250cm9sbGluZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZHRsc1RyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgIGR0bHNUcmFuc3BvcnQuc3RhcnQocmVtb3RlRHRsc1BhcmFtZXRlcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZSBvZmZlciBjb250YWluZWQgUlRYIGJ1dCB0aGUgYW5zd2VyIGRpZCBub3QsXG4gICAgICAgIC8vIHJlbW92ZSBSVFggZnJvbSBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzLlxuICAgICAgICB2YXIgY29tbW9uQ2FwYWJpbGl0aWVzID0gZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKFxuICAgICAgICAgIHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyk7XG5cbiAgICAgICAgdmFyIGhhc1J0eCA9IGNvbW1vbkNhcGFiaWxpdGllcy5jb2RlY3MuZmlsdGVyKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdydHgnO1xuICAgICAgICB9KS5sZW5ndGg7XG4gICAgICAgIGlmICghaGFzUnR4ICYmIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICAgICAgZGVsZXRlIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4O1xuICAgICAgICB9XG5cbiAgICAgICAgcGMuX3RyYW5zY2VpdmUodHJhbnNjZWl2ZXIsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgZGlyZWN0aW9uID09PSAncmVjdm9ubHknLFxuICAgICAgICAgICAgZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5Jyk7XG5cbiAgICAgICAgLy8gVE9ETzogcmV3cml0ZSB0byB1c2UgaHR0cDovL3czYy5naXRodWIuaW8vd2VicnRjLXBjLyNzZXQtYXNzb2NpYXRlZC1yZW1vdGUtc3RyZWFtc1xuICAgICAgICBpZiAocnRwUmVjZWl2ZXIgJiZcbiAgICAgICAgICAgIChkaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgZGlyZWN0aW9uID09PSAnc2VuZG9ubHknKSkge1xuICAgICAgICAgIHRyYWNrID0gcnRwUmVjZWl2ZXIudHJhY2s7XG4gICAgICAgICAgaWYgKHJlbW90ZU1zaWQpIHtcbiAgICAgICAgICAgIGlmICghc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0pIHtcbiAgICAgICAgICAgICAgc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0gPSBuZXcgd2luZG93Lk1lZGlhU3RyZWFtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRUcmFja1RvU3RyZWFtQW5kRmlyZUV2ZW50KHRyYWNrLCBzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXSk7XG4gICAgICAgICAgICByZWNlaXZlckxpc3QucHVzaChbdHJhY2ssIHJ0cFJlY2VpdmVyLCBzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXN0cmVhbXMuZGVmYXVsdCkge1xuICAgICAgICAgICAgICBzdHJlYW1zLmRlZmF1bHQgPSBuZXcgd2luZG93Lk1lZGlhU3RyZWFtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRUcmFja1RvU3RyZWFtQW5kRmlyZUV2ZW50KHRyYWNrLCBzdHJlYW1zLmRlZmF1bHQpO1xuICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlciwgc3RyZWFtcy5kZWZhdWx0XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZJWE1FOiBhY3R1YWxseSB0aGUgcmVjZWl2ZXIgc2hvdWxkIGJlIGNyZWF0ZWQgbGF0ZXIuXG4gICAgICAgICAgZGVsZXRlIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocGMuX2R0bHNSb2xlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBjLl9kdGxzUm9sZSA9IGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicgPyAnYWN0aXZlJyA6ICdwYXNzaXZlJztcbiAgICB9XG5cbiAgICBwYy5fcmVtb3RlRGVzY3JpcHRpb24gPSB7XG4gICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgc2RwOiBkZXNjcmlwdGlvbi5zZHBcbiAgICB9O1xuICAgIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInKSB7XG4gICAgICBwYy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ2hhdmUtcmVtb3RlLW9mZmVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBjLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnc3RhYmxlJyk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHN0cmVhbXMpLmZvckVhY2goZnVuY3Rpb24oc2lkKSB7XG4gICAgICB2YXIgc3RyZWFtID0gc3RyZWFtc1tzaWRdO1xuICAgICAgaWYgKHN0cmVhbS5nZXRUcmFja3MoKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHBjLnJlbW90ZVN0cmVhbXMuaW5kZXhPZihzdHJlYW0pID09PSAtMSkge1xuICAgICAgICAgIHBjLnJlbW90ZVN0cmVhbXMucHVzaChzdHJlYW0pO1xuICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnYWRkc3RyZWFtJyk7XG4gICAgICAgICAgZXZlbnQuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcGMuX2Rpc3BhdGNoRXZlbnQoJ2FkZHN0cmVhbScsIGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlY2VpdmVyTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICB2YXIgdHJhY2sgPSBpdGVtWzBdO1xuICAgICAgICAgIHZhciByZWNlaXZlciA9IGl0ZW1bMV07XG4gICAgICAgICAgaWYgKHN0cmVhbS5pZCAhPT0gaXRlbVsyXS5pZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaXJlQWRkVHJhY2socGMsIHRyYWNrLCByZWNlaXZlciwgW3N0cmVhbV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZWNlaXZlckxpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmaXJlQWRkVHJhY2socGMsIGl0ZW1bMF0sIGl0ZW1bMV0sIFtdKTtcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIHdoZXRoZXIgYWRkSWNlQ2FuZGlkYXRlKHt9KSB3YXMgY2FsbGVkIHdpdGhpbiBmb3VyIHNlY29uZHMgYWZ0ZXJcbiAgICAvLyBzZXRSZW1vdGVEZXNjcmlwdGlvbi5cbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmICghKHBjICYmIHBjLnRyYW5zY2VpdmVycykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3JyAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LmdldFJlbW90ZUNhbmRpZGF0ZXMoKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdUaW1lb3V0IGZvciBhZGRSZW1vdGVDYW5kaWRhdGUuIENvbnNpZGVyIHNlbmRpbmcgJyArXG4gICAgICAgICAgICAgICdhbiBlbmQtb2YtY2FuZGlkYXRlcyBub3RpZmljYXRpb24nKTtcbiAgICAgICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKHt9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgNDAwMCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgLyogbm90IHlldFxuICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLmNsb3NlKCk7XG4gICAgICB9XG4gICAgICAqL1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCkge1xuICAgICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuc3RvcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydC5zdG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci5zdG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIuc3RvcCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEZJWE1FOiBjbGVhbiB1cCB0cmFja3MsIGxvY2FsIHN0cmVhbXMsIHJlbW90ZSBzdHJlYW1zLCBldGNcbiAgICB0aGlzLl9pc0Nsb3NlZCA9IHRydWU7XG4gICAgdGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ2Nsb3NlZCcpO1xuICB9O1xuXG4gIC8vIFVwZGF0ZSB0aGUgc2lnbmFsaW5nIHN0YXRlLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlID0gZnVuY3Rpb24obmV3U3RhdGUpIHtcbiAgICB0aGlzLnNpZ25hbGluZ1N0YXRlID0gbmV3U3RhdGU7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdzaWduYWxpbmdzdGF0ZWNoYW5nZScpO1xuICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ3NpZ25hbGluZ3N0YXRlY2hhbmdlJywgZXZlbnQpO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIHRvIGZpcmUgdGhlIG5lZ290aWF0aW9ubmVlZGVkIGV2ZW50LlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICBpZiAodGhpcy5zaWduYWxpbmdTdGF0ZSAhPT0gJ3N0YWJsZScgfHwgdGhpcy5uZWVkTmVnb3RpYXRpb24gPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5uZWVkTmVnb3RpYXRpb24gPSB0cnVlO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHBjLm5lZWROZWdvdGlhdGlvbikge1xuICAgICAgICBwYy5uZWVkTmVnb3RpYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCduZWdvdGlhdGlvbm5lZWRlZCcpO1xuICAgICAgICBwYy5fZGlzcGF0Y2hFdmVudCgnbmVnb3RpYXRpb25uZWVkZWQnLCBldmVudCk7XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH07XG5cbiAgLy8gVXBkYXRlIHRoZSBpY2UgY29ubmVjdGlvbiBzdGF0ZS5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl91cGRhdGVJY2VDb25uZWN0aW9uU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3U3RhdGU7XG4gICAgdmFyIHN0YXRlcyA9IHtcbiAgICAgICduZXcnOiAwLFxuICAgICAgY2xvc2VkOiAwLFxuICAgICAgY2hlY2tpbmc6IDAsXG4gICAgICBjb25uZWN0ZWQ6IDAsXG4gICAgICBjb21wbGV0ZWQ6IDAsXG4gICAgICBkaXNjb25uZWN0ZWQ6IDAsXG4gICAgICBmYWlsZWQ6IDBcbiAgICB9O1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgJiYgIXRyYW5zY2VpdmVyLnJlamVjdGVkKSB7XG4gICAgICAgIHN0YXRlc1t0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuc3RhdGVdKys7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBuZXdTdGF0ZSA9ICduZXcnO1xuICAgIGlmIChzdGF0ZXMuZmFpbGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnZmFpbGVkJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5jaGVja2luZyA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2NoZWNraW5nJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5kaXNjb25uZWN0ZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdkaXNjb25uZWN0ZWQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLm5ldyA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ25ldyc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY29ubmVjdGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnY29ubmVjdGVkJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5jb21wbGV0ZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdjb21wbGV0ZWQnO1xuICAgIH1cblxuICAgIGlmIChuZXdTdGF0ZSAhPT0gdGhpcy5pY2VDb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgIHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlID0gbmV3U3RhdGU7XG4gICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScpO1xuICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudCgnaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICAvLyBVcGRhdGUgdGhlIGNvbm5lY3Rpb24gc3RhdGUuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlQ29ubmVjdGlvblN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld1N0YXRlO1xuICAgIHZhciBzdGF0ZXMgPSB7XG4gICAgICAnbmV3JzogMCxcbiAgICAgIGNsb3NlZDogMCxcbiAgICAgIGNvbm5lY3Rpbmc6IDAsXG4gICAgICBjb25uZWN0ZWQ6IDAsXG4gICAgICBjb21wbGV0ZWQ6IDAsXG4gICAgICBkaXNjb25uZWN0ZWQ6IDAsXG4gICAgICBmYWlsZWQ6IDBcbiAgICB9O1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgJiYgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCAmJlxuICAgICAgICAgICF0cmFuc2NlaXZlci5yZWplY3RlZCkge1xuICAgICAgICBzdGF0ZXNbdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0YXRlXSsrO1xuICAgICAgICBzdGF0ZXNbdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydC5zdGF0ZV0rKztcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBJQ0VUcmFuc3BvcnQuY29tcGxldGVkIGFuZCBjb25uZWN0ZWQgYXJlIHRoZSBzYW1lIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgc3RhdGVzLmNvbm5lY3RlZCArPSBzdGF0ZXMuY29tcGxldGVkO1xuXG4gICAgbmV3U3RhdGUgPSAnbmV3JztcbiAgICBpZiAoc3RhdGVzLmZhaWxlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2ZhaWxlZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY29ubmVjdGluZyA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2Nvbm5lY3RpbmcnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmRpc2Nvbm5lY3RlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2Rpc2Nvbm5lY3RlZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMubmV3ID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnbmV3JztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5jb25uZWN0ZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdjb25uZWN0ZWQnO1xuICAgIH1cblxuICAgIGlmIChuZXdTdGF0ZSAhPT0gdGhpcy5jb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gbmV3U3RhdGU7XG4gICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScpO1xuICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudCgnY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuXG4gICAgaWYgKHBjLl9pc0Nsb3NlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdDYW4gbm90IGNhbGwgY3JlYXRlT2ZmZXIgYWZ0ZXIgY2xvc2UnKSk7XG4gICAgfVxuXG4gICAgdmFyIG51bUF1ZGlvVHJhY2tzID0gcGMudHJhbnNjZWl2ZXJzLmZpbHRlcihmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5raW5kID09PSAnYXVkaW8nO1xuICAgIH0pLmxlbmd0aDtcbiAgICB2YXIgbnVtVmlkZW9UcmFja3MgPSBwYy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0LmtpbmQgPT09ICd2aWRlbyc7XG4gICAgfSkubGVuZ3RoO1xuXG4gICAgLy8gRGV0ZXJtaW5lIG51bWJlciBvZiBhdWRpbyBhbmQgdmlkZW8gdHJhY2tzIHdlIG5lZWQgdG8gc2VuZC9yZWN2LlxuICAgIHZhciBvZmZlck9wdGlvbnMgPSBhcmd1bWVudHNbMF07XG4gICAgaWYgKG9mZmVyT3B0aW9ucykge1xuICAgICAgLy8gUmVqZWN0IENocm9tZSBsZWdhY3kgY29uc3RyYWludHMuXG4gICAgICBpZiAob2ZmZXJPcHRpb25zLm1hbmRhdG9yeSB8fCBvZmZlck9wdGlvbnMub3B0aW9uYWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdMZWdhY3kgbWFuZGF0b3J5L29wdGlvbmFsIGNvbnN0cmFpbnRzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICB9XG4gICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gPT09IHRydWUpIHtcbiAgICAgICAgICBudW1BdWRpb1RyYWNrcyA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgbnVtQXVkaW9UcmFja3MgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG51bUF1ZGlvVHJhY2tzID0gb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG51bVZpZGVvVHJhY2tzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBudW1WaWRlb1RyYWNrcyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbnVtVmlkZW9UcmFja3MgPSBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ2F1ZGlvJykge1xuICAgICAgICBudW1BdWRpb1RyYWNrcy0tO1xuICAgICAgICBpZiAobnVtQXVkaW9UcmFja3MgPCAwKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIud2FudFJlY2VpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgIG51bVZpZGVvVHJhY2tzLS07XG4gICAgICAgIGlmIChudW1WaWRlb1RyYWNrcyA8IDApIHtcbiAgICAgICAgICB0cmFuc2NlaXZlci53YW50UmVjZWl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgTS1saW5lcyBmb3IgcmVjdm9ubHkgc3RyZWFtcy5cbiAgICB3aGlsZSAobnVtQXVkaW9UcmFja3MgPiAwIHx8IG51bVZpZGVvVHJhY2tzID4gMCkge1xuICAgICAgaWYgKG51bUF1ZGlvVHJhY2tzID4gMCkge1xuICAgICAgICBwYy5fY3JlYXRlVHJhbnNjZWl2ZXIoJ2F1ZGlvJyk7XG4gICAgICAgIG51bUF1ZGlvVHJhY2tzLS07XG4gICAgICB9XG4gICAgICBpZiAobnVtVmlkZW9UcmFja3MgPiAwKSB7XG4gICAgICAgIHBjLl9jcmVhdGVUcmFuc2NlaXZlcigndmlkZW8nKTtcbiAgICAgICAgbnVtVmlkZW9UcmFja3MtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2RwID0gU0RQVXRpbHMud3JpdGVTZXNzaW9uQm9pbGVycGxhdGUocGMuX3NkcFNlc3Npb25JZCxcbiAgICAgICAgcGMuX3NkcFNlc3Npb25WZXJzaW9uKyspO1xuICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICAvLyBGb3IgZWFjaCB0cmFjaywgY3JlYXRlIGFuIGljZSBnYXRoZXJlciwgaWNlIHRyYW5zcG9ydCxcbiAgICAgIC8vIGR0bHMgdHJhbnNwb3J0LCBwb3RlbnRpYWxseSBydHBzZW5kZXIgYW5kIHJ0cHJlY2VpdmVyLlxuICAgICAgdmFyIHRyYWNrID0gdHJhbnNjZWl2ZXIudHJhY2s7XG4gICAgICB2YXIga2luZCA9IHRyYW5zY2VpdmVyLmtpbmQ7XG4gICAgICB2YXIgbWlkID0gdHJhbnNjZWl2ZXIubWlkIHx8IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpO1xuICAgICAgdHJhbnNjZWl2ZXIubWlkID0gbWlkO1xuXG4gICAgICBpZiAoIXRyYW5zY2VpdmVyLmljZUdhdGhlcmVyKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyID0gcGMuX2NyZWF0ZUljZUdhdGhlcmVyKHNkcE1MaW5lSW5kZXgsXG4gICAgICAgICAgICBwYy51c2luZ0J1bmRsZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsb2NhbENhcGFiaWxpdGllcyA9IHdpbmRvdy5SVENSdHBTZW5kZXIuZ2V0Q2FwYWJpbGl0aWVzKGtpbmQpO1xuICAgICAgLy8gZmlsdGVyIFJUWCB1bnRpbCBhZGRpdGlvbmFsIHN0dWZmIG5lZWRlZCBmb3IgUlRYIGlzIGltcGxlbWVudGVkXG4gICAgICAvLyBpbiBhZGFwdGVyLmpzXG4gICAgICBpZiAoZWRnZVZlcnNpb24gPCAxNTAxOSkge1xuICAgICAgICBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MgPSBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MuZmlsdGVyKFxuICAgICAgICAgICAgZnVuY3Rpb24oY29kZWMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvZGVjLm5hbWUgIT09ICdydHgnO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykge1xuICAgICAgICAvLyB3b3JrIGFyb3VuZCBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3Avd2VicnRjL2lzc3Vlcy9kZXRhaWw/aWQ9NjU1MlxuICAgICAgICAvLyBieSBhZGRpbmcgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MVxuICAgICAgICBpZiAoY29kZWMubmFtZSA9PT0gJ0gyNjQnICYmXG4gICAgICAgICAgICBjb2RlYy5wYXJhbWV0ZXJzWydsZXZlbC1hc3ltbWV0cnktYWxsb3dlZCddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb2RlYy5wYXJhbWV0ZXJzWydsZXZlbC1hc3ltbWV0cnktYWxsb3dlZCddID0gJzEnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZm9yIHN1YnNlcXVlbnQgb2ZmZXJzLCB3ZSBtaWdodCBoYXZlIHRvIHJlLXVzZSB0aGUgcGF5bG9hZFxuICAgICAgICAvLyB0eXBlIG9mIHRoZSBsYXN0IG9mZmVyLlxuICAgICAgICBpZiAodHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKHJlbW90ZUNvZGVjKSB7XG4gICAgICAgICAgICBpZiAoY29kZWMubmFtZS50b0xvd2VyQ2FzZSgpID09PSByZW1vdGVDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCkgJiZcbiAgICAgICAgICAgICAgICBjb2RlYy5jbG9ja1JhdGUgPT09IHJlbW90ZUNvZGVjLmNsb2NrUmF0ZSkge1xuICAgICAgICAgICAgICBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSA9IHJlbW90ZUNvZGVjLnBheWxvYWRUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihoZHJFeHQpIHtcbiAgICAgICAgdmFyIHJlbW90ZUV4dGVuc2lvbnMgPSB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zIHx8IFtdO1xuICAgICAgICByZW1vdGVFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24ockhkckV4dCkge1xuICAgICAgICAgIGlmIChoZHJFeHQudXJpID09PSBySGRyRXh0LnVyaSkge1xuICAgICAgICAgICAgaGRyRXh0LmlkID0gckhkckV4dC5pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGdlbmVyYXRlIGFuIHNzcmMgbm93LCB0byBiZSB1c2VkIGxhdGVyIGluIHJ0cFNlbmRlci5zZW5kXG4gICAgICB2YXIgc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgfHwgW3tcbiAgICAgICAgc3NyYzogKDIgKiBzZHBNTGluZUluZGV4ICsgMSkgKiAxMDAxXG4gICAgICB9XTtcbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAvLyBhZGQgUlRYXG4gICAgICAgIGlmIChlZGdlVmVyc2lvbiA+PSAxNTAxOSAmJiBraW5kID09PSAndmlkZW8nICYmXG4gICAgICAgICAgICAhc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICAgICAgICBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCA9IHtcbiAgICAgICAgICAgIHNzcmM6IHNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArIDFcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2NlaXZlci53YW50UmVjZWl2ZSkge1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlciA9IG5ldyB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIoXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LCBraW5kKTtcbiAgICAgIH1cblxuICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMgPSBsb2NhbENhcGFiaWxpdGllcztcbiAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgIH0pO1xuXG4gICAgLy8gYWx3YXlzIG9mZmVyIEJVTkRMRSBhbmQgZGlzcG9zZSBvbiByZXR1cm4gaWYgbm90IHN1cHBvcnRlZC5cbiAgICBpZiAocGMuX2NvbmZpZy5idW5kbGVQb2xpY3kgIT09ICdtYXgtY29tcGF0Jykge1xuICAgICAgc2RwICs9ICdhPWdyb3VwOkJVTkRMRSAnICsgcGMudHJhbnNjZWl2ZXJzLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Lm1pZDtcbiAgICAgIH0pLmpvaW4oJyAnKSArICdcXHJcXG4nO1xuICAgIH1cbiAgICBzZHAgKz0gJ2E9aWNlLW9wdGlvbnM6dHJpY2tsZVxcclxcbic7XG5cbiAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlciwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgc2RwICs9IHdyaXRlTWVkaWFTZWN0aW9uKHRyYW5zY2VpdmVyLCB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgICAnb2ZmZXInLCB0cmFuc2NlaXZlci5zdHJlYW0sIHBjLl9kdGxzUm9sZSk7XG4gICAgICBzZHAgKz0gJ2E9cnRjcC1yc2l6ZVxcclxcbic7XG5cbiAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VHYXRoZXJlciAmJiBwYy5pY2VHYXRoZXJpbmdTdGF0ZSAhPT0gJ25ldycgJiZcbiAgICAgICAgICAoc2RwTUxpbmVJbmRleCA9PT0gMCB8fCAhcGMudXNpbmdCdW5kbGUpKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLmdldExvY2FsQ2FuZGlkYXRlcygpLmZvckVhY2goZnVuY3Rpb24oY2FuZCkge1xuICAgICAgICAgIGNhbmQuY29tcG9uZW50ID0gMTtcbiAgICAgICAgICBzZHAgKz0gJ2E9JyArIFNEUFV0aWxzLndyaXRlQ2FuZGlkYXRlKGNhbmQpICsgJ1xcclxcbic7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgICAgICBzZHAgKz0gJ2E9ZW5kLW9mLWNhbmRpZGF0ZXNcXHJcXG4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgZGVzYyA9IG5ldyB3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgIHR5cGU6ICdvZmZlcicsXG4gICAgICBzZHA6IHNkcFxuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVzYyk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUFuc3dlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYyA9IHRoaXM7XG5cbiAgICBpZiAocGMuX2lzQ2xvc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0NhbiBub3QgY2FsbCBjcmVhdGVBbnN3ZXIgYWZ0ZXIgY2xvc2UnKSk7XG4gICAgfVxuXG4gICAgaWYgKCEocGMuc2lnbmFsaW5nU3RhdGUgPT09ICdoYXZlLXJlbW90ZS1vZmZlcicgfHxcbiAgICAgICAgcGMuc2lnbmFsaW5nU3RhdGUgPT09ICdoYXZlLWxvY2FsLXByYW5zd2VyJykpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQ2FuIG5vdCBjYWxsIGNyZWF0ZUFuc3dlciBpbiBzaWduYWxpbmdTdGF0ZSAnICsgcGMuc2lnbmFsaW5nU3RhdGUpKTtcbiAgICB9XG5cbiAgICB2YXIgc2RwID0gU0RQVXRpbHMud3JpdGVTZXNzaW9uQm9pbGVycGxhdGUocGMuX3NkcFNlc3Npb25JZCxcbiAgICAgICAgcGMuX3NkcFNlc3Npb25WZXJzaW9uKyspO1xuICAgIGlmIChwYy51c2luZ0J1bmRsZSkge1xuICAgICAgc2RwICs9ICdhPWdyb3VwOkJVTkRMRSAnICsgcGMudHJhbnNjZWl2ZXJzLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Lm1pZDtcbiAgICAgIH0pLmpvaW4oJyAnKSArICdcXHJcXG4nO1xuICAgIH1cbiAgICBzZHAgKz0gJ2E9aWNlLW9wdGlvbnM6dHJpY2tsZVxcclxcbic7XG5cbiAgICB2YXIgbWVkaWFTZWN0aW9uc0luT2ZmZXIgPSBTRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zKFxuICAgICAgICBwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKS5sZW5ndGg7XG4gICAgcGMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgIGlmIChzZHBNTGluZUluZGV4ICsgMSA+IG1lZGlhU2VjdGlvbnNJbk9mZmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5yZWplY3RlZCkge1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ2FwcGxpY2F0aW9uJykge1xuICAgICAgICAgIGlmICh0cmFuc2NlaXZlci5wcm90b2NvbCA9PT0gJ0RUTFMvU0NUUCcpIHsgLy8gbGVnYWN5IGZtdFxuICAgICAgICAgICAgc2RwICs9ICdtPWFwcGxpY2F0aW9uIDAgRFRMUy9TQ1RQIDUwMDBcXHJcXG4nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZHAgKz0gJ209YXBwbGljYXRpb24gMCAnICsgdHJhbnNjZWl2ZXIucHJvdG9jb2wgK1xuICAgICAgICAgICAgICAgICcgd2VicnRjLWRhdGFjaGFubmVsXFxyXFxuJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgIHNkcCArPSAnbT1hdWRpbyAwIFVEUC9UTFMvUlRQL1NBVlBGIDBcXHJcXG4nICtcbiAgICAgICAgICAgICAgJ2E9cnRwbWFwOjAgUENNVS84MDAwXFxyXFxuJztcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgc2RwICs9ICdtPXZpZGVvIDAgVURQL1RMUy9SVFAvU0FWUEYgMTIwXFxyXFxuJyArXG4gICAgICAgICAgICAgICdhPXJ0cG1hcDoxMjAgVlA4LzkwMDAwXFxyXFxuJztcbiAgICAgICAgfVxuICAgICAgICBzZHAgKz0gJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nICtcbiAgICAgICAgICAgICdhPWluYWN0aXZlXFxyXFxuJyArXG4gICAgICAgICAgICAnYT1taWQ6JyArIHRyYW5zY2VpdmVyLm1pZCArICdcXHJcXG4nO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEZJWE1FOiBsb29rIGF0IGRpcmVjdGlvbi5cbiAgICAgIGlmICh0cmFuc2NlaXZlci5zdHJlYW0pIHtcbiAgICAgICAgdmFyIGxvY2FsVHJhY2s7XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgbG9jYWxUcmFjayA9IHRyYW5zY2VpdmVyLnN0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICBsb2NhbFRyYWNrID0gdHJhbnNjZWl2ZXIuc3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsVHJhY2spIHtcbiAgICAgICAgICAvLyBhZGQgUlRYXG4gICAgICAgICAgaWYgKGVkZ2VWZXJzaW9uID49IDE1MDE5ICYmIHRyYW5zY2VpdmVyLmtpbmQgPT09ICd2aWRlbycgJiZcbiAgICAgICAgICAgICAgIXRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCA9IHtcbiAgICAgICAgICAgICAgc3NyYzogdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICsgMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ2FsY3VsYXRlIGludGVyc2VjdGlvbiBvZiBjYXBhYmlsaXRpZXMuXG4gICAgICB2YXIgY29tbW9uQ2FwYWJpbGl0aWVzID0gZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKFxuICAgICAgICAgIHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyk7XG5cbiAgICAgIHZhciBoYXNSdHggPSBjb21tb25DYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcihmdW5jdGlvbihjKSB7XG4gICAgICAgIHJldHVybiBjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3J0eCc7XG4gICAgICB9KS5sZW5ndGg7XG4gICAgICBpZiAoIWhhc1J0eCAmJiB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgICBkZWxldGUgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHg7XG4gICAgICB9XG5cbiAgICAgIHNkcCArPSB3cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwgY29tbW9uQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICdhbnN3ZXInLCB0cmFuc2NlaXZlci5zdHJlYW0sIHBjLl9kdGxzUm9sZSk7XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMgJiZcbiAgICAgICAgICB0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycy5yZWR1Y2VkU2l6ZSkge1xuICAgICAgICBzZHAgKz0gJ2E9cnRjcC1yc2l6ZVxcclxcbic7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgZGVzYyA9IG5ldyB3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgIHR5cGU6ICdhbnN3ZXInLFxuICAgICAgc2RwOiBzZHBcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlc2MpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPSBmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIHZhciBzZWN0aW9ucztcbiAgICBpZiAoY2FuZGlkYXRlICYmICEoY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXggIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBjYW5kaWRhdGUuc2RwTWlkKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ3NkcE1MaW5lSW5kZXggb3Igc2RwTWlkIHJlcXVpcmVkJykpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IG5lZWRzIHRvIGdvIGludG8gb3BzIHF1ZXVlLlxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICghcGMuX3JlbW90ZURlc2NyaXB0aW9uKSB7XG4gICAgICAgIHJldHVybiByZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgICAnQ2FuIG5vdCBhZGQgSUNFIGNhbmRpZGF0ZSB3aXRob3V0IGEgcmVtb3RlIGRlc2NyaXB0aW9uJykpO1xuICAgICAgfSBlbHNlIGlmICghY2FuZGlkYXRlIHx8IGNhbmRpZGF0ZS5jYW5kaWRhdGUgPT09ICcnKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGMudHJhbnNjZWl2ZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHBjLnRyYW5zY2VpdmVyc1tqXS5yZWplY3RlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1tqXS5pY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKHt9KTtcbiAgICAgICAgICBzZWN0aW9ucyA9IFNEUFV0aWxzLmdldE1lZGlhU2VjdGlvbnMocGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCk7XG4gICAgICAgICAgc2VjdGlvbnNbal0gKz0gJ2E9ZW5kLW9mLWNhbmRpZGF0ZXNcXHJcXG4nO1xuICAgICAgICAgIHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHAgPVxuICAgICAgICAgICAgICBTRFBVdGlscy5nZXREZXNjcmlwdGlvbihwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKSArXG4gICAgICAgICAgICAgIHNlY3Rpb25zLmpvaW4oJycpO1xuICAgICAgICAgIGlmIChwYy51c2luZ0J1bmRsZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2RwTUxpbmVJbmRleCA9IGNhbmRpZGF0ZS5zZHBNTGluZUluZGV4O1xuICAgICAgICBpZiAoY2FuZGlkYXRlLnNkcE1pZCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGMudHJhbnNjZWl2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocGMudHJhbnNjZWl2ZXJzW2ldLm1pZCA9PT0gY2FuZGlkYXRlLnNkcE1pZCkge1xuICAgICAgICAgICAgICBzZHBNTGluZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0cmFuc2NlaXZlciA9IHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XTtcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlamVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2FuZCA9IE9iamVjdC5rZXlzKGNhbmRpZGF0ZS5jYW5kaWRhdGUpLmxlbmd0aCA+IDAgP1xuICAgICAgICAgICAgICBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShjYW5kaWRhdGUuY2FuZGlkYXRlKSA6IHt9O1xuICAgICAgICAgIC8vIElnbm9yZSBDaHJvbWUncyBpbnZhbGlkIGNhbmRpZGF0ZXMgc2luY2UgRWRnZSBkb2VzIG5vdCBsaWtlIHRoZW0uXG4gICAgICAgICAgaWYgKGNhbmQucHJvdG9jb2wgPT09ICd0Y3AnICYmIChjYW5kLnBvcnQgPT09IDAgfHwgY2FuZC5wb3J0ID09PSA5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gSWdub3JlIFJUQ1AgY2FuZGlkYXRlcywgd2UgYXNzdW1lIFJUQ1AtTVVYLlxuICAgICAgICAgIGlmIChjYW5kLmNvbXBvbmVudCAmJiBjYW5kLmNvbXBvbmVudCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2hlbiB1c2luZyBidW5kbGUsIGF2b2lkIGFkZGluZyBjYW5kaWRhdGVzIHRvIHRoZSB3cm9uZ1xuICAgICAgICAgIC8vIGljZSB0cmFuc3BvcnQuIEFuZCBhdm9pZCBhZGRpbmcgY2FuZGlkYXRlcyBhZGRlZCBpbiB0aGUgU0RQLlxuICAgICAgICAgIGlmIChzZHBNTGluZUluZGV4ID09PSAwIHx8IChzZHBNTGluZUluZGV4ID4gMCAmJlxuICAgICAgICAgICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgIT09IHBjLnRyYW5zY2VpdmVyc1swXS5pY2VUcmFuc3BvcnQpKSB7XG4gICAgICAgICAgICBpZiAoIW1heWJlQWRkQ2FuZGlkYXRlKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCwgY2FuZCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChtYWtlRXJyb3IoJ09wZXJhdGlvbkVycm9yJyxcbiAgICAgICAgICAgICAgICAgICdDYW4gbm90IGFkZCBJQ0UgY2FuZGlkYXRlJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgcmVtb3RlRGVzY3JpcHRpb24uXG4gICAgICAgICAgdmFyIGNhbmRpZGF0ZVN0cmluZyA9IGNhbmRpZGF0ZS5jYW5kaWRhdGUudHJpbSgpO1xuICAgICAgICAgIGlmIChjYW5kaWRhdGVTdHJpbmcuaW5kZXhPZignYT0nKSA9PT0gMCkge1xuICAgICAgICAgICAgY2FuZGlkYXRlU3RyaW5nID0gY2FuZGlkYXRlU3RyaW5nLnN1YnN0cigyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zKHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAgIHNlY3Rpb25zW3NkcE1MaW5lSW5kZXhdICs9ICdhPScgK1xuICAgICAgICAgICAgICAoY2FuZC50eXBlID8gY2FuZGlkYXRlU3RyaW5nIDogJ2VuZC1vZi1jYW5kaWRhdGVzJylcbiAgICAgICAgICAgICAgKyAnXFxyXFxuJztcbiAgICAgICAgICBwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwID1cbiAgICAgICAgICAgICAgU0RQVXRpbHMuZ2V0RGVzY3JpcHRpb24ocGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCkgK1xuICAgICAgICAgICAgICBzZWN0aW9ucy5qb2luKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG1ha2VFcnJvcignT3BlcmF0aW9uRXJyb3InLFxuICAgICAgICAgICAgICAnQ2FuIG5vdCBhZGQgSUNFIGNhbmRpZGF0ZScpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgaWYgKHNlbGVjdG9yICYmIHNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93Lk1lZGlhU3RyZWFtVHJhY2spIHtcbiAgICAgIHZhciBzZW5kZXJPclJlY2VpdmVyID0gbnVsbDtcbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnRyYWNrID09PSBzZWxlY3Rvcikge1xuICAgICAgICAgIHNlbmRlck9yUmVjZWl2ZXIgPSB0cmFuc2NlaXZlci5ydHBTZW5kZXI7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnRyYWNrID09PSBzZWxlY3Rvcikge1xuICAgICAgICAgIHNlbmRlck9yUmVjZWl2ZXIgPSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIXNlbmRlck9yUmVjZWl2ZXIpIHtcbiAgICAgICAgdGhyb3cgbWFrZUVycm9yKCdJbnZhbGlkQWNjZXNzRXJyb3InLCAnSW52YWxpZCBzZWxlY3Rvci4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZW5kZXJPclJlY2VpdmVyLmdldFN0YXRzKCk7XG4gICAgfVxuXG4gICAgdmFyIHByb21pc2VzID0gW107XG4gICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgWydydHBTZW5kZXInLCAncnRwUmVjZWl2ZXInLCAnaWNlR2F0aGVyZXInLCAnaWNlVHJhbnNwb3J0JyxcbiAgICAgICAgICAnZHRsc1RyYW5zcG9ydCddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXJbbWV0aG9kXSkge1xuICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRyYW5zY2VpdmVyW21ldGhvZF0uZ2V0U3RhdHMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFsbFN0YXRzKSB7XG4gICAgICB2YXIgcmVzdWx0cyA9IG5ldyBNYXAoKTtcbiAgICAgIGFsbFN0YXRzLmZvckVhY2goZnVuY3Rpb24oc3RhdHMpIHtcbiAgICAgICAgc3RhdHMuZm9yRWFjaChmdW5jdGlvbihzdGF0KSB7XG4gICAgICAgICAgcmVzdWx0cy5zZXQoc3RhdC5pZCwgc3RhdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KTtcbiAgfTtcblxuICAvLyBmaXggbG93LWxldmVsIHN0YXQgbmFtZXMgYW5kIHJldHVybiBNYXAgaW5zdGVhZCBvZiBvYmplY3QuXG4gIHZhciBvcnRjT2JqZWN0cyA9IFsnUlRDUnRwU2VuZGVyJywgJ1JUQ1J0cFJlY2VpdmVyJywgJ1JUQ0ljZUdhdGhlcmVyJyxcbiAgICAnUlRDSWNlVHJhbnNwb3J0JywgJ1JUQ0R0bHNUcmFuc3BvcnQnXTtcbiAgb3J0Y09iamVjdHMuZm9yRWFjaChmdW5jdGlvbihvcnRjT2JqZWN0TmFtZSkge1xuICAgIHZhciBvYmogPSB3aW5kb3dbb3J0Y09iamVjdE5hbWVdO1xuICAgIGlmIChvYmogJiYgb2JqLnByb3RvdHlwZSAmJiBvYmoucHJvdG90eXBlLmdldFN0YXRzKSB7XG4gICAgICB2YXIgbmF0aXZlR2V0c3RhdHMgPSBvYmoucHJvdG90eXBlLmdldFN0YXRzO1xuICAgICAgb2JqLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlR2V0c3RhdHMuYXBwbHkodGhpcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24obmF0aXZlU3RhdHMpIHtcbiAgICAgICAgICB2YXIgbWFwU3RhdHMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgT2JqZWN0LmtleXMobmF0aXZlU3RhdHMpLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIG5hdGl2ZVN0YXRzW2lkXS50eXBlID0gZml4U3RhdHNUeXBlKG5hdGl2ZVN0YXRzW2lkXSk7XG4gICAgICAgICAgICBtYXBTdGF0cy5zZXQoaWQsIG5hdGl2ZVN0YXRzW2lkXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG1hcFN0YXRzO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcblxuICAvLyBsZWdhY3kgY2FsbGJhY2sgc2hpbXMuIFNob3VsZCBiZSBtb3ZlZCB0byBhZGFwdGVyLmpzIHNvbWUgZGF5cy5cbiAgdmFyIG1ldGhvZHMgPSBbJ2NyZWF0ZU9mZmVyJywgJ2NyZWF0ZUFuc3dlciddO1xuICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdmFyIG5hdGl2ZU1ldGhvZCA9IFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdO1xuICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7IC8vIGxlZ2FjeVxuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIFthcmd1bWVudHNbMl1dKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJnc1swXS5hcHBseShudWxsLCBbZGVzY3JpcHRpb25dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhcmdzWzFdLmFwcGx5KG51bGwsIFtlcnJvcl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgbWV0aG9kcyA9IFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbicsICdhZGRJY2VDYW5kaWRhdGUnXTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBuYXRpdmVNZXRob2QgPSBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICB0eXBlb2YgYXJnc1syXSA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBsZWdhY3lcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJnc1sxXS5hcHBseShudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzJdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhcmdzWzJdLmFwcGx5KG51bGwsIFtlcnJvcl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gZ2V0U3RhdHMgaXMgc3BlY2lhbC4gSXQgZG9lc24ndCBoYXZlIGEgc3BlYyBsZWdhY3kgbWV0aG9kIHlldCB3ZSBzdXBwb3J0XG4gIC8vIGdldFN0YXRzKHNvbWV0aGluZywgY2IpIHdpdGhvdXQgZXJyb3IgY2FsbGJhY2tzLlxuICBbJ2dldFN0YXRzJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgbmF0aXZlTWV0aG9kID0gUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3NbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4gUlRDUGVlckNvbm5lY3Rpb247XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7IC8vIHFyLmpzIGRvZXNuJ3QgaGFuZGxlIGVycm9yIGxldmVsIG9mIHplcm8gKE0pIHNvIHdlIG5lZWQgdG8gZG8gaXQgcmlnaHQsXG4vLyB0aHVzIHRoZSBkZWVwIHJlcXVpcmUuXG5cblxudmFyIFFSQ29kZUltcGwgPSByZXF1aXJlKCdxci5qcy9saWIvUVJDb2RlJyk7XG5cbnZhciBFcnJvckNvcnJlY3RMZXZlbCA9IHJlcXVpcmUoJ3FyLmpzL2xpYi9FcnJvckNvcnJlY3RMZXZlbCcpOyAvLyBUT0RPOiBwdWxsIHRoaXMgb2ZmIG9mIHRoZSBRUkNvZGUgY2xhc3MgdHlwZSBzbyBpdCBtYXRjaGVzLlxuXG5cbi8vIENvbnZlcnQgZnJvbSBVVEYtMTYsIGZvcmNpbmcgdGhlIHVzZSBvZiBieXRlLW1vZGUgZW5jb2RpbmcgaW4gb3VyIFFSIENvZGUuXG4vLyBUaGlzIGFsbG93cyB1cyB0byBlbmNvZGUgSGFuamksIEthbmppLCBlbW9qaSwgZXRjLiBJZGVhbGx5IHdlJ2QgZG8gbW9yZVxuLy8gZGV0ZWN0aW9uIGFuZCBub3QgcmVzb3J0IHRvIGJ5dGUtbW9kZSBpZiBwb3NzaWJsZSwgYnV0IHdlJ3JlIHRyYWRpbmcgb2ZmXG4vLyBhIHNtYWxsZXIgbGlicmFyeSBmb3IgYSBzbWFsbGVyIGFtb3VudCBvZiBkYXRhIHdlIGNhbiBwb3RlbnRpYWxseSBlbmNvZGUuXG4vLyBCYXNlZCBvbiBodHRwOi8vam9uaXNhbG9uZW4uY29tLzIwMTIvZnJvbS11dGYtMTYtdG8tdXRmLTgtaW4tamF2YXNjcmlwdC9cbmZ1bmN0aW9uIGNvbnZlcnRTdHIoc3RyKSB7XG4gIHZhciBvdXQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGFyY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgaWYgKGNoYXJjb2RlIDwgMHgwMDgwKSB7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyY29kZSk7XG4gICAgfSBlbHNlIGlmIChjaGFyY29kZSA8IDB4MDgwMCkge1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhjMCB8IGNoYXJjb2RlID4+IDYpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlICYgMHgzZik7XG4gICAgfSBlbHNlIGlmIChjaGFyY29kZSA8IDB4ZDgwMCB8fCBjaGFyY29kZSA+PSAweGUwMDApIHtcbiAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZTAgfCBjaGFyY29kZSA+PiAxMik7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgY2hhcmNvZGUgPj4gNiAmIDB4M2YpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlICYgMHgzZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzdXJyb2dhdGUgcGFpciwgc28gd2UnbGwgcmVjb25zaXR1dGUgdGhlIHBpZWNlcyBhbmQgd29ya1xuICAgICAgLy8gZnJvbSB0aGF0XG4gICAgICBpKys7XG4gICAgICBjaGFyY29kZSA9IDB4MTAwMDAgKyAoKGNoYXJjb2RlICYgMHgzZmYpIDw8IDEwIHwgc3RyLmNoYXJDb2RlQXQoaSkgJiAweDNmZik7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGYwIHwgY2hhcmNvZGUgPj4gMTgpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlID4+IDEyICYgMHgzZik7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgY2hhcmNvZGUgPj4gNiAmIDB4M2YpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8IGNoYXJjb2RlICYgMHgzZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cblxudmFyIERFRkFVTFRfUFJPUFMgPSB7XG4gIHNpemU6IDEyOCxcbiAgbGV2ZWw6ICdMJyxcbiAgYmdDb2xvcjogJyNGRkZGRkYnLFxuICBmZ0NvbG9yOiAnIzAwMDAwMCcsXG4gIGluY2x1ZGVNYXJnaW46IGZhbHNlXG59O1xudmFyIFBST1BfVFlQRVMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICBsZXZlbDogUHJvcFR5cGVzLm9uZU9mKFsnTCcsICdNJywgJ1EnLCAnSCddKSxcbiAgYmdDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgZmdDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgaW5jbHVkZU1hcmdpbjogUHJvcFR5cGVzLmJvb2wsXG4gIGltYWdlU2V0dGluZ3M6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBleGNhdmF0ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgeDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB5OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXG59IDoge307XG52YXIgTUFSR0lOX1NJWkUgPSA0OyAvLyBUaGlzIGlzICp2ZXJ5KiByb3VnaCBlc3RpbWF0ZSBvZiBtYXggYW1vdW50IG9mIFFSQ29kZSBhbGxvd2VkIHRvIGJlIGNvdmVyZWQuXG4vLyBJdCBpcyBcIndyb25nXCIgaW4gYSBsb3Qgb2Ygd2F5cyAoYXJlYSBpcyBhIHRlcnJpYmxlIHdheSB0byBlc3RpbWF0ZSwgaXRcbi8vIHJlYWxseSBzaG91bGQgYmUgbnVtYmVyIG9mIG1vZHVsZXMgY292ZXJlZCksIGJ1dCBpZiBmb3Igc29tZSByZWFzb24gd2UgZG9uJ3Rcbi8vIGdldCBhbiBleHBsaWNpdCBoZWlnaHQgb3Igd2lkdGgsIEknZCByYXRoZXIgZGVmYXVsdCB0byBzb21ldGhpbmcgdGhhbiB0aHJvdy5cblxudmFyIERFRkFVTFRfSU1HX1NDQUxFID0gMC4xO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgobW9kdWxlcykge1xuICB2YXIgbWFyZ2luID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgb3BzID0gW107XG4gIG1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAocm93LCB5KSB7XG4gICAgdmFyIHN0YXJ0ID0gbnVsbDtcbiAgICByb3cuZm9yRWFjaChmdW5jdGlvbiAoY2VsbCwgeCkge1xuICAgICAgaWYgKCFjZWxsICYmIHN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIE0wIDBoN3YxSDB6IGluamVjdHMgdGhlIHNwYWNlIHdpdGggdGhlIG1vdmUgYW5kIGRyb3BzIHRoZSBjb21tYSxcbiAgICAgICAgLy8gc2F2aW5nIGEgY2hhciBwZXIgb3BlcmF0aW9uXG4gICAgICAgIG9wcy5wdXNoKFwiTVwiLmNvbmNhdChzdGFydCArIG1hcmdpbiwgXCIgXCIpLmNvbmNhdCh5ICsgbWFyZ2luLCBcImhcIikuY29uY2F0KHggLSBzdGFydCwgXCJ2MUhcIikuY29uY2F0KHN0YXJ0ICsgbWFyZ2luLCBcInpcIikpO1xuICAgICAgICBzdGFydCA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gZW5kIG9mIHJvdywgY2xlYW4gdXAgb3Igc2tpcFxuXG5cbiAgICAgIGlmICh4ID09PSByb3cubGVuZ3RoIC0gMSkge1xuICAgICAgICBpZiAoIWNlbGwpIHtcbiAgICAgICAgICAvLyBXZSB3b3VsZCBoYXZlIGNsb3NlZCB0aGUgb3AgYWJvdmUgYWxyZWFkeSBzbyB0aGlzIGNhbiBvbmx5IG1lYW5cbiAgICAgICAgICAvLyAyKyBsaWdodCBtb2R1bGVzIGluIGEgcm93LlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIEp1c3QgYSBzaW5nbGUgZGFyayBtb2R1bGUuXG4gICAgICAgICAgb3BzLnB1c2goXCJNXCIuY29uY2F0KHggKyBtYXJnaW4sIFwiLFwiKS5jb25jYXQoeSArIG1hcmdpbiwgXCIgaDF2MUhcIikuY29uY2F0KHggKyBtYXJnaW4sIFwielwiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGZpbmlzaCB0aGUgY3VycmVudCBsaW5lLlxuICAgICAgICAgIG9wcy5wdXNoKFwiTVwiLmNvbmNhdChzdGFydCArIG1hcmdpbiwgXCIsXCIpLmNvbmNhdCh5ICsgbWFyZ2luLCBcIiBoXCIpLmNvbmNhdCh4ICsgMSAtIHN0YXJ0LCBcInYxSFwiKS5jb25jYXQoc3RhcnQgKyBtYXJnaW4sIFwielwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChjZWxsICYmIHN0YXJ0ID09PSBudWxsKSB7XG4gICAgICAgIHN0YXJ0ID0geDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvcHMuam9pbignJyk7XG59IC8vIFdlIGNvdWxkIGp1c3QgZG8gdGhpcyBpbiBnZW5lcmF0ZVBhdGgsIGV4Y2VwdCB0aGF0IHdlIHdhbnQgdG8gc3VwcG9ydFxuLy8gbm9uLVBhdGgyRCBjYW52YXMsIHNvIHdlIG5lZWQgdG8ga2VlcCBpdCBhbiBleHBsaWNpdCBzdGVwLlxuXG5cbmZ1bmN0aW9uIGV4Y2F2YXRlTW9kdWxlcyhtb2R1bGVzLCBleGNhdmF0aW9uKSB7XG4gIHJldHVybiBtb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uIChyb3csIHkpIHtcbiAgICBpZiAoeSA8IGV4Y2F2YXRpb24ueSB8fCB5ID49IGV4Y2F2YXRpb24ueSArIGV4Y2F2YXRpb24uaCkge1xuICAgICAgcmV0dXJuIHJvdztcbiAgICB9XG5cbiAgICByZXR1cm4gcm93Lm1hcChmdW5jdGlvbiAoY2VsbCwgeCkge1xuICAgICAgaWYgKHggPCBleGNhdmF0aW9uLnggfHwgeCA+PSBleGNhdmF0aW9uLnggKyBleGNhdmF0aW9uLncpIHtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEltYWdlU2V0dGluZ3MocHJvcHMsIGNlbGxzKSB7XG4gIHZhciBpbWFnZVNldHRpbmdzID0gcHJvcHMuaW1hZ2VTZXR0aW5ncyxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgaW5jbHVkZU1hcmdpbiA9IHByb3BzLmluY2x1ZGVNYXJnaW47XG5cbiAgaWYgKGltYWdlU2V0dGluZ3MgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG1hcmdpbiA9IGluY2x1ZGVNYXJnaW4gPyBNQVJHSU5fU0laRSA6IDA7XG4gIHZhciBudW1DZWxscyA9IGNlbGxzLmxlbmd0aCArIG1hcmdpbiAqIDI7XG4gIHZhciBkZWZhdWx0U2l6ZSA9IE1hdGguZmxvb3Ioc2l6ZSAqIERFRkFVTFRfSU1HX1NDQUxFKTtcbiAgdmFyIHNjYWxlID0gbnVtQ2VsbHMgLyBzaXplO1xuICB2YXIgdyA9IChpbWFnZVNldHRpbmdzLndpZHRoIHx8IGRlZmF1bHRTaXplKSAqIHNjYWxlO1xuICB2YXIgaCA9IChpbWFnZVNldHRpbmdzLmhlaWdodCB8fCBkZWZhdWx0U2l6ZSkgKiBzY2FsZTtcbiAgdmFyIHggPSBpbWFnZVNldHRpbmdzLnggPT0gbnVsbCA/IGNlbGxzLmxlbmd0aCAvIDIgLSB3IC8gMiA6IGltYWdlU2V0dGluZ3MueCAqIHNjYWxlO1xuICB2YXIgeSA9IGltYWdlU2V0dGluZ3MueSA9PSBudWxsID8gY2VsbHMubGVuZ3RoIC8gMiAtIGggLyAyIDogaW1hZ2VTZXR0aW5ncy55ICogc2NhbGU7XG4gIHZhciBleGNhdmF0aW9uID0gbnVsbDtcblxuICBpZiAoaW1hZ2VTZXR0aW5ncy5leGNhdmF0ZSkge1xuICAgIHZhciBmbG9vclggPSBNYXRoLmZsb29yKHgpO1xuICAgIHZhciBmbG9vclkgPSBNYXRoLmZsb29yKHkpO1xuICAgIHZhciBjZWlsVyA9IE1hdGguY2VpbCh3ICsgeCAtIGZsb29yWCk7XG4gICAgdmFyIGNlaWxIID0gTWF0aC5jZWlsKGggKyB5IC0gZmxvb3JZKTtcbiAgICBleGNhdmF0aW9uID0ge1xuICAgICAgeDogZmxvb3JYLFxuICAgICAgeTogZmxvb3JZLFxuICAgICAgdzogY2VpbFcsXG4gICAgICBoOiBjZWlsSFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHgsXG4gICAgeTogeSxcbiAgICBoOiBoLFxuICAgIHc6IHcsXG4gICAgZXhjYXZhdGlvbjogZXhjYXZhdGlvblxuICB9O1xufSAvLyBGb3IgY2FudmFzIHdlJ3JlIGdvaW5nIHRvIHN3aXRjaCBvdXIgZHJhd2luZyBtb2RlIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90XG4vLyB0aGUgZW52aXJvbm1lbnQgc3VwcG9ydHMgUGF0aDJELiBXZSBvbmx5IG5lZWQgdGhlIGNvbnN0cnVjdG9yIHRvIGJlXG4vLyBzdXBwb3J0ZWQsIGJ1dCBFZGdlIGRvZXNuJ3QgYWN0dWFsbHkgc3VwcG9ydCB0aGUgcGF0aCAoc3RyaW5nKSB0eXBlXG4vLyBhcmd1bWVudC4gTHVja2lseSBpdCBhbHNvIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgYWRkUGF0aCgpIG1ldGhvZC4gV2UgY2FuXG4vLyB0cmVhdCB0aGF0IGFzIHRoZSBzYW1lIHRoaW5nLlxuXG5cbnZhciBTVVBQT1JUU19QQVRIMkQgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgbmV3IFBhdGgyRCgpLmFkZFBhdGgobmV3IFBhdGgyRCgpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSgpO1xuXG52YXIgUVJDb2RlQ2FudmFzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUVJDb2RlQ2FudmFzLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUVJDb2RlQ2FudmFzKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFFSQ29kZUNhbnZhcyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihRUkNvZGVDYW52YXMpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfY2FudmFzXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiX2ltYWdlXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RhdGVcIiwge1xuICAgICAgaW1nTG9hZGVkOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUltYWdlTG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGltZ0xvYWRlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUVJDb2RlQ2FudmFzLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlLFxuICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICAgIGxldmVsID0gX3RoaXMkcHJvcHMubGV2ZWwsXG4gICAgICAgICAgYmdDb2xvciA9IF90aGlzJHByb3BzLmJnQ29sb3IsXG4gICAgICAgICAgZmdDb2xvciA9IF90aGlzJHByb3BzLmZnQ29sb3IsXG4gICAgICAgICAgaW5jbHVkZU1hcmdpbiA9IF90aGlzJHByb3BzLmluY2x1ZGVNYXJnaW4sXG4gICAgICAgICAgaW1hZ2VTZXR0aW5ncyA9IF90aGlzJHByb3BzLmltYWdlU2V0dGluZ3M7IC8vIFdlJ2xsIHVzZSB0eXBlPT09LTEgdG8gZm9yY2UgUVJDb2RlIHRvIGF1dG9tYXRpY2FsbHkgcGljayB0aGUgYmVzdCB0eXBlXG5cbiAgICAgIHZhciBxcmNvZGUgPSBuZXcgUVJDb2RlSW1wbCgtMSwgRXJyb3JDb3JyZWN0TGV2ZWxbbGV2ZWxdKTtcbiAgICAgIHFyY29kZS5hZGREYXRhKGNvbnZlcnRTdHIodmFsdWUpKTtcbiAgICAgIHFyY29kZS5tYWtlKCk7XG5cbiAgICAgIGlmICh0aGlzLl9jYW52YXMgIT0gbnVsbCkge1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5fY2FudmFzO1xuICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2VsbHMgPSBxcmNvZGUubW9kdWxlcztcblxuICAgICAgICBpZiAoY2VsbHMgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWFyZ2luID0gaW5jbHVkZU1hcmdpbiA/IE1BUkdJTl9TSVpFIDogMDtcbiAgICAgICAgdmFyIG51bUNlbGxzID0gY2VsbHMubGVuZ3RoICsgbWFyZ2luICogMjtcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRJbWFnZVNldHRpbmdzID0gZ2V0SW1hZ2VTZXR0aW5ncyh0aGlzLnByb3BzLCBjZWxscyk7XG5cbiAgICAgICAgaWYgKGltYWdlU2V0dGluZ3MgIT0gbnVsbCAmJiBjYWxjdWxhdGVkSW1hZ2VTZXR0aW5ncyAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKGNhbGN1bGF0ZWRJbWFnZVNldHRpbmdzLmV4Y2F2YXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgY2VsbHMgPSBleGNhdmF0ZU1vZHVsZXMoY2VsbHMsIGNhbGN1bGF0ZWRJbWFnZVNldHRpbmdzLmV4Y2F2YXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBXZSdyZSBnb2luZyB0byBzY2FsZSB0aGlzIHNvIHRoYXQgdGhlIG51bWJlciBvZiBkcmF3YWJsZSB1bml0c1xuICAgICAgICAvLyBtYXRjaGVzIHRoZSBudW1iZXIgb2YgY2VsbHMuIFRoaXMgYXZvaWRzIHJvdW5kaW5nIGlzc3VlcywgYnV0IGRvZXNcbiAgICAgICAgLy8gcmVzdWx0IGluIHNvbWUgcG90ZW50aWFsbHkgdW53YW50ZWQgc2luZ2xlIHBpeGVsIGlzc3VlcyBiZXR3ZWVuXG4gICAgICAgIC8vIGJsb2Nrcywgb25seSBpbiBlbnZpcm9ubWVudHMgdGhhdCBkb24ndCBzdXBwb3J0IFBhdGgyRC5cblxuXG4gICAgICAgIHZhciBwaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy53aWR0aCA9IHNpemUgKiBwaXhlbFJhdGlvO1xuICAgICAgICB2YXIgc2NhbGUgPSBzaXplIC8gbnVtQ2VsbHMgKiBwaXhlbFJhdGlvO1xuICAgICAgICBjdHguc2NhbGUoc2NhbGUsIHNjYWxlKTsgLy8gRHJhdyBzb2xpZCBiYWNrZ3JvdW5kLCBvbmx5IHBhaW50IGRhcmsgbW9kdWxlcy5cblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gYmdDb2xvcjtcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIG51bUNlbGxzLCBudW1DZWxscyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBmZ0NvbG9yO1xuXG4gICAgICAgIGlmIChTVVBQT1JUU19QQVRIMkQpIHtcbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lOiBQYXRoMkQgYyd0b3IgZG9lc24ndCBzdXBwb3J0IGFyZ3MgeWV0LlxuICAgICAgICAgIGN0eC5maWxsKG5ldyBQYXRoMkQoZ2VuZXJhdGVQYXRoKGNlbGxzLCBtYXJnaW4pKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2VsbHMuZm9yRWFjaChmdW5jdGlvbiAocm93LCByZHgpIHtcbiAgICAgICAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsLCBjZHgpIHtcbiAgICAgICAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoY2R4ICsgbWFyZ2luLCByZHggKyBtYXJnaW4sIDEsIDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmltZ0xvYWRlZCAmJiB0aGlzLl9pbWFnZSAmJiBjYWxjdWxhdGVkSW1hZ2VTZXR0aW5ncyAhPSBudWxsKSB7XG4gICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLl9pbWFnZSwgY2FsY3VsYXRlZEltYWdlU2V0dGluZ3MueCArIG1hcmdpbiwgY2FsY3VsYXRlZEltYWdlU2V0dGluZ3MueSArIG1hcmdpbiwgY2FsY3VsYXRlZEltYWdlU2V0dGluZ3MudywgY2FsY3VsYXRlZEltYWdlU2V0dGluZ3MuaCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzMi52YWx1ZSxcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMyLnNpemUsXG4gICAgICAgICAgbGV2ZWwgPSBfdGhpcyRwcm9wczIubGV2ZWwsXG4gICAgICAgICAgYmdDb2xvciA9IF90aGlzJHByb3BzMi5iZ0NvbG9yLFxuICAgICAgICAgIGZnQ29sb3IgPSBfdGhpcyRwcm9wczIuZmdDb2xvcixcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMi5zdHlsZSxcbiAgICAgICAgICBpbmNsdWRlTWFyZ2luID0gX3RoaXMkcHJvcHMyLmluY2x1ZGVNYXJnaW4sXG4gICAgICAgICAgaW1hZ2VTZXR0aW5ncyA9IF90aGlzJHByb3BzMi5pbWFnZVNldHRpbmdzLFxuICAgICAgICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBbXCJ2YWx1ZVwiLCBcInNpemVcIiwgXCJsZXZlbFwiLCBcImJnQ29sb3JcIiwgXCJmZ0NvbG9yXCIsIFwic3R5bGVcIiwgXCJpbmNsdWRlTWFyZ2luXCIsIFwiaW1hZ2VTZXR0aW5nc1wiXSk7XG5cbiAgICAgIHZhciBjYW52YXNTdHlsZSA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgIHdpZHRoOiBzaXplXG4gICAgICB9LCBzdHlsZSk7XG5cbiAgICAgIHZhciBpbWcgPSBudWxsO1xuICAgICAgdmFyIGltZ1NyYyA9IGltYWdlU2V0dGluZ3MgJiYgaW1hZ2VTZXR0aW5ncy5zcmM7XG5cbiAgICAgIGlmIChpbWFnZVNldHRpbmdzICE9IG51bGwgJiYgaW1nU3JjICE9IG51bGwpIHtcbiAgICAgICAgaW1nID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgICAgICAgc3JjOiBpbWdTcmMsXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25Mb2FkOiB0aGlzLmhhbmRsZUltYWdlTG9hZCxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9pbWFnZSA9IF9yZWY7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiwgX2V4dGVuZHMoe1xuICAgICAgICBzdHlsZTogY2FudmFzU3R5bGUsXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fY2FudmFzID0gX3JlZjI7XG4gICAgICAgIH1cbiAgICAgIH0sIG90aGVyUHJvcHMpKSwgaW1nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUVJDb2RlQ2FudmFzO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFFSQ29kZUNhbnZhcywgXCJkZWZhdWx0UHJvcHNcIiwgREVGQVVMVF9QUk9QUyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFFSQ29kZUNhbnZhcy5wcm9wVHlwZXMgPSBQUk9QX1RZUEVTO1xufVxuXG52YXIgUVJDb2RlU1ZHID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudDIpIHtcbiAgX2luaGVyaXRzKFFSQ29kZVNWRywgX1JlYWN0JFB1cmVDb21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBRUkNvZGVTVkcoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFFSQ29kZVNWRyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFFSQ29kZVNWRykuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUVJDb2RlU1ZHLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczMudmFsdWUsXG4gICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMy5zaXplLFxuICAgICAgICAgIGxldmVsID0gX3RoaXMkcHJvcHMzLmxldmVsLFxuICAgICAgICAgIGJnQ29sb3IgPSBfdGhpcyRwcm9wczMuYmdDb2xvcixcbiAgICAgICAgICBmZ0NvbG9yID0gX3RoaXMkcHJvcHMzLmZnQ29sb3IsXG4gICAgICAgICAgaW5jbHVkZU1hcmdpbiA9IF90aGlzJHByb3BzMy5pbmNsdWRlTWFyZ2luLFxuICAgICAgICAgIGltYWdlU2V0dGluZ3MgPSBfdGhpcyRwcm9wczMuaW1hZ2VTZXR0aW5ncyxcbiAgICAgICAgICBvdGhlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMywgW1widmFsdWVcIiwgXCJzaXplXCIsIFwibGV2ZWxcIiwgXCJiZ0NvbG9yXCIsIFwiZmdDb2xvclwiLCBcImluY2x1ZGVNYXJnaW5cIiwgXCJpbWFnZVNldHRpbmdzXCJdKTsgLy8gV2UnbGwgdXNlIHR5cGU9PT0tMSB0byBmb3JjZSBRUkNvZGUgdG8gYXV0b21hdGljYWxseSBwaWNrIHRoZSBiZXN0IHR5cGVcblxuXG4gICAgICB2YXIgcXJjb2RlID0gbmV3IFFSQ29kZUltcGwoLTEsIEVycm9yQ29ycmVjdExldmVsW2xldmVsXSk7XG4gICAgICBxcmNvZGUuYWRkRGF0YShjb252ZXJ0U3RyKHZhbHVlKSk7XG4gICAgICBxcmNvZGUubWFrZSgpO1xuICAgICAgdmFyIGNlbGxzID0gcXJjb2RlLm1vZHVsZXM7XG5cbiAgICAgIGlmIChjZWxscyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIG1hcmdpbiA9IGluY2x1ZGVNYXJnaW4gPyBNQVJHSU5fU0laRSA6IDA7XG4gICAgICB2YXIgbnVtQ2VsbHMgPSBjZWxscy5sZW5ndGggKyBtYXJnaW4gKiAyO1xuICAgICAgdmFyIGNhbGN1bGF0ZWRJbWFnZVNldHRpbmdzID0gZ2V0SW1hZ2VTZXR0aW5ncyh0aGlzLnByb3BzLCBjZWxscyk7XG4gICAgICB2YXIgaW1hZ2UgPSBudWxsO1xuXG4gICAgICBpZiAoaW1hZ2VTZXR0aW5ncyAhPSBudWxsICYmIGNhbGN1bGF0ZWRJbWFnZVNldHRpbmdzICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGNhbGN1bGF0ZWRJbWFnZVNldHRpbmdzLmV4Y2F2YXRpb24gIT0gbnVsbCkge1xuICAgICAgICAgIGNlbGxzID0gZXhjYXZhdGVNb2R1bGVzKGNlbGxzLCBjYWxjdWxhdGVkSW1hZ2VTZXR0aW5ncy5leGNhdmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGltYWdlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImltYWdlXCIsIHtcbiAgICAgICAgICB4bGlua0hyZWY6IGltYWdlU2V0dGluZ3Muc3JjLFxuICAgICAgICAgIGhlaWdodDogY2FsY3VsYXRlZEltYWdlU2V0dGluZ3MuaCxcbiAgICAgICAgICB3aWR0aDogY2FsY3VsYXRlZEltYWdlU2V0dGluZ3MudyxcbiAgICAgICAgICB4OiBjYWxjdWxhdGVkSW1hZ2VTZXR0aW5ncy54ICsgbWFyZ2luLFxuICAgICAgICAgIHk6IGNhbGN1bGF0ZWRJbWFnZVNldHRpbmdzLnkgKyBtYXJnaW4sXG4gICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogXCJub25lXCJcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIERyYXdpbmcgc3RyYXRlZ3k6IGluc3RlYWQgb2YgYSByZWN0IHBlciBtb2R1bGUsIHdlJ3JlIGdvaW5nIHRvIGNyZWF0ZSBhXG4gICAgICAvLyBzaW5nbGUgcGF0aCBmb3IgdGhlIGRhcmsgbW9kdWxlcyBhbmQgbGF5ZXIgdGhhdCBvbiB0b3Agb2YgYSBsaWdodCByZWN0LFxuICAgICAgLy8gZm9yIGEgdG90YWwgb2YgMiBET00gbm9kZXMuIFdlIHBheSBhIGJpdCBtb3JlIGluIHN0cmluZyBjb25jYXQgYnV0IHRoYXQnc1xuICAgICAgLy8gd2F5IGZhc3RlciB0aGFuIERPTSBvcHMuXG4gICAgICAvLyBGb3IgbGV2ZWwgMSwgNDQxIG5vZGVzIC0+IDJcbiAgICAgIC8vIEZvciBsZXZlbCA0MCwgMzEzMjkgLT4gMlxuXG5cbiAgICAgIHZhciBmZ1BhdGggPSBnZW5lcmF0ZVBhdGgoY2VsbHMsIG1hcmdpbik7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHNoYXBlUmVuZGVyaW5nOiBcImNyaXNwRWRnZXNcIixcbiAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgdmlld0JveDogXCIwIDAgXCIuY29uY2F0KG51bUNlbGxzLCBcIiBcIikuY29uY2F0KG51bUNlbGxzKVxuICAgICAgfSwgb3RoZXJQcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICAgICAgZmlsbDogYmdDb2xvcixcbiAgICAgICAgZDogXCJNMCwwIGhcIi5jb25jYXQobnVtQ2VsbHMsIFwidlwiKS5jb25jYXQobnVtQ2VsbHMsIFwiSDB6XCIpXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgICAgICBmaWxsOiBmZ0NvbG9yLFxuICAgICAgICBkOiBmZ1BhdGhcbiAgICAgIH0pLCBpbWFnZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFFSQ29kZVNWRztcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShRUkNvZGVTVkcsIFwiZGVmYXVsdFByb3BzXCIsIERFRkFVTFRfUFJPUFMpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBRUkNvZGVTVkcucHJvcFR5cGVzID0gUFJPUF9UWVBFUztcbn1cblxudmFyIFFSQ29kZSA9IGZ1bmN0aW9uIFFSQ29kZShwcm9wcykge1xuICB2YXIgcmVuZGVyQXMgPSBwcm9wcy5yZW5kZXJBcyxcbiAgICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcInJlbmRlckFzXCJdKTtcblxuICB2YXIgQ29tcG9uZW50ID0gcmVuZGVyQXMgPT09ICdzdmcnID8gUVJDb2RlU1ZHIDogUVJDb2RlQ2FudmFzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIG90aGVyUHJvcHMpO1xufTtcblxuUVJDb2RlLmRlZmF1bHRQcm9wcyA9IF9vYmplY3RTcHJlYWQoe1xuICByZW5kZXJBczogJ2NhbnZhcydcbn0sIERFRkFVTFRfUFJPUFMpO1xubW9kdWxlLmV4cG9ydHMgPSBRUkNvZGU7IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gcihuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIG89dFtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsciksby5sPSEwLG8uZXhwb3J0c312YXIgdD17fTtyZXR1cm4gci5tPWUsci5jPXQsci5kPWZ1bmN0aW9uKGUsdCxuKXtyLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om59KX0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSxyKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscil9LHIucD1cIlwiLHIoci5zPTApfShbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO3IuX19lc01vZHVsZT0hMCxyLmRlZmF1bHQ9ZnVuY3Rpb24oZSxyKXtpZihlJiZyKXt2YXIgdD1BcnJheS5pc0FycmF5KHIpP3I6ci5zcGxpdChcIixcIiksbj1lLm5hbWV8fFwiXCIsbz1lLnR5cGV8fFwiXCIsdT1vLnJlcGxhY2UoL1xcLy4qJC8sXCJcIik7cmV0dXJuIHQuc29tZShmdW5jdGlvbihlKXt2YXIgcj1lLnRyaW0oKTtyZXR1cm5cIi5cIj09PXIuY2hhckF0KDApP24udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChyLnRvTG93ZXJDYXNlKCkpOnIuZW5kc1dpdGgoXCIvKlwiKT91PT09ci5yZXBsYWNlKC9cXC8uKiQvLFwiXCIpOm89PT1yfSl9cmV0dXJuITB9fV0pOyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaCh0aGlzICYmIHRoaXNbYXJnXSB8fCBhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkodGhpcywgYXJnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2godGhpcyAmJiB0aGlzW2tleV0gfHwga2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYnRuLXByaW1hcnlcIjpcIl8xZWZXT1pcIixcImJ0blByaW1hcnlcIjpcIl8xZWZXT1pcIixcImJ0bi1zZWNvbmRhcnlcIjpcIl8xV1puOHVcIixcImJ0blNlY29uZGFyeVwiOlwiXzFXWm44dVwiLFwiYnRuLWRpc2FibGVkXCI6XCJoU0Q5YWJcIixcImJ0bkRpc2FibGVkXCI6XCJoU0Q5YWJcIn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgZW1pdHRlciwgb25jZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XSkgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgZW1pdHRlci5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdLmZuKSBlbWl0dGVyLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IFtlbWl0dGVyLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiBlbWl0dGVyO1xufVxuXG4vKipcbiAqIENsZWFyIGV2ZW50IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldnQgVGhlIEV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhckV2ZW50KGVtaXR0ZXIsIGV2dCkge1xuICBpZiAoLS1lbWl0dGVyLl9ldmVudHNDb3VudCA9PT0gMCkgZW1pdHRlci5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBlbHNlIGRlbGV0ZSBlbWl0dGVyLl9ldmVudHNbZXZ0XTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBoYW5kbGVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghaGFuZGxlcnMpIHJldHVybiBbXTtcbiAgaWYgKGhhbmRsZXJzLmZuKSByZXR1cm4gW2hhbmRsZXJzLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGhhbmRsZXJzW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgbGlzdGVuaW5nIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm4gMDtcbiAgaWYgKGxpc3RlbmVycy5mbikgcmV0dXJuIDE7XG4gIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuICYmXG4gICAgICAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpICYmXG4gICAgICAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm4gfHxcbiAgICAgICAgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKSB8fFxuICAgICAgICAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIi8vIHRzbGludDpkaXNhYmxlOm5vLXVuc2FmZS1hbnlcbi8qKlxuICogTWVtbyBjbGFzcyB1c2VkIGZvciBkZWN5Y2xlIGpzb24gb2JqZWN0cy4gVXNlcyBXZWFrU2V0IGlmIGF2YWlsYWJsZSBvdGhlcndpc2UgYXJyYXkuXG4gKi9cbnZhciBNZW1vID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lbW8oKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB0aGlzLl9oYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHRoaXMuX2lubmVyID0gdGhpcy5faGFzV2Vha1NldCA/IG5ldyBXZWFrU2V0KCkgOiBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBvYmogdG8gcmVtZW1iZXIuXG4gICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gcmVtZW1iZXJcbiAgICAgKi9cbiAgICBNZW1vLnByb3RvdHlwZS5tZW1vaXplID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAodGhpcy5faGFzV2Vha1NldCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lubmVyLmhhcyhvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbm5lci5hZGQob2JqKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWZvci1vZlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2lubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9pbm5lcltpXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5uZXIucHVzaChvYmopO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIG9iamVjdCBmcm9tIGludGVybmFsIHN0b3JhZ2UuXG4gICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gZm9yZ2V0XG4gICAgICovXG4gICAgTWVtby5wcm90b3R5cGUudW5tZW1vaXplID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAodGhpcy5faGFzV2Vha1NldCkge1xuICAgICAgICAgICAgdGhpcy5faW5uZXIuZGVsZXRlKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2lubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lubmVyW2ldID09PSBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5uZXIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZW1vO1xufSgpKTtcbmV4cG9ydCB7IE1lbW8gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbW8uanMubWFwIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMztuJiZTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtcbnZhciB6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtuJiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7biYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7dmFyIEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9Y3x8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihCKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9Y3x8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztoKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsbD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihsPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxtPTA7bTxmO20rKylrW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpsLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBiYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixjLGUpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGw9MDtsPGEubGVuZ3RoO2wrKyl7ZD1hW2xdO3ZhciBmPWIrVChkLGwpO2crPVMoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGw9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitUKGQsbCsrKSxnKz1TKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gY2EoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZGEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1iYShhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxlLGQpO1UoYSxkYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1JLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQigzMjEpKTtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1YoYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsYyk7VShhLGNhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFOKGEpKXRocm93IEVycm9yKEIoMTQzKSk7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjphYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixjKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsYyl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixQcm9maWxlcjp1LFN0cmljdE1vZGU6dCxTdXNwZW5zZTp5LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEIoMjY3LGEpKTt2YXIgZT1oKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixsPWEuX293bmVyO1xuaWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGw9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGsgaW4gYilLLmNhbGwoYixrKSYmIUwuaGFzT3duUHJvcGVydHkoaykmJihlW2tdPXZvaWQgMD09PWJba10mJnZvaWQgMCE9PWY/ZltrXTpiW2tdKX12YXIgaz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWspZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxrKXtmPUFycmF5KGspO2Zvcih2YXIgbT0wO208azttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6bH19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjEyLjBcIixcbl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpofX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7dmFyIGJhPW51bGwsY2E9e307XG5mdW5jdGlvbiBkYSgpe2lmKGJhKWZvcih2YXIgYSBpbiBjYSl7dmFyIGI9Y2FbYV0sYz1iYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIWVhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO2VhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYoZmEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7ZmFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmaGEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KGhhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiBoYShhLGIsYyl7aWYoaWFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO2lhW2FdPWI7amFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgZWE9W10sZmE9e30saWE9e30samE9e307ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGxhPSExLG1hPW51bGwsbmE9ITEsb2E9bnVsbCxwYT17b25FcnJvcjpmdW5jdGlvbihhKXtsYT0hMDttYT1hfX07ZnVuY3Rpb24gcWEoYSxiLGMsZCxlLGYsZyxoLGspe2xhPSExO21hPW51bGw7a2EuYXBwbHkocGEsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHJhKGEsYixjLGQsZSxmLGcsaCxrKXtxYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYobGEpe2lmKGxhKXt2YXIgbD1tYTtsYT0hMTttYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtuYXx8KG5hPSEwLG9hPWwpfX12YXIgc2E9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO3JhKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEJhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhKXt5YShhLEFhKTtpZih6YSl0aHJvdyBFcnJvcih1KDk1KSk7aWYobmEpdGhyb3cgYT1vYSxuYT0hMSxvYT1udWxsLGE7fX1cbnZhciBDYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtpZihiYSl0aHJvdyBFcnJvcih1KDEwMSkpO2JhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO2RhKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighY2EuaGFzT3duUHJvcGVydHkoYyl8fGNhW2NdIT09ZCl7aWYoY2FbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO2NhW2NdPWQ7Yj0hMH19YiYmZGEoKX19O1xuZnVuY3Rpb24gRGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1zYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxiLHR5cGVvZiBjKSk7XG5yZXR1cm4gY312YXIgRWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7RWEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoRWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7RWEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KEVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG52YXIgRmE9L14oLiopW1xcXFxcXC9dLyx3PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsR2E9dz9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxIYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsSWE9dz9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsSmE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsS2E9dz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsTGE9dz9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksTWE9dz9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxOYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsT2E9dz9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsUGE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsUWE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLFJhPXc/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsU2E9dz9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjt3JiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7dyYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTt3JiZTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7dmFyIFRhPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBVYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9VGEmJmFbVGFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBWYShhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIFdhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgSWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgSGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEthOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIEphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgUGE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgUWE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgTWE6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBMYTpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIE9hOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBSYTpyZXR1cm4gV2EoYS50eXBlKTtjYXNlIFNhOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gV2EoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGEoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPVdhKGEudHlwZSk7Yz1udWxsO2QmJihjPVdhKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoRmEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBZYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksWmE9bnVsbCwkYT1udWxsLGFiPW51bGw7ZnVuY3Rpb24gYmIoYSl7aWYoYT11YShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIFphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9c2EoYS5zdGF0ZU5vZGUpO1phKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gY2IoYSl7JGE/YWI/YWIucHVzaChhKTphYj1bYV06JGE9YX1mdW5jdGlvbiBkYigpe2lmKCRhKXt2YXIgYT0kYSxiPWFiO2FiPSRhPW51bGw7YmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJiKGJbYV0pfX1mdW5jdGlvbiBlYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGZiKGEsYixjLGQpe3JldHVybiBhKGIsYyxkKX1mdW5jdGlvbiBnYigpe31cbnZhciBoYj1lYixpYj0hMSxqYj0hMTtmdW5jdGlvbiBrYigpe2lmKG51bGwhPT0kYXx8bnVsbCE9PWFiKWdiKCksZGIoKX1uZXcgTWFwO3ZhciBsYj0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbWI9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuYj17fSxvYj17fTtcbmZ1bmN0aW9uIHBiKGEpe2lmKG1iLmNhbGwob2IsYSkpcmV0dXJuITA7aWYobWIuY2FsbChuYixhKSlyZXR1cm4hMTtpZihsYi50ZXN0KGEpKXJldHVybiBvYlthXT0hMDtuYlthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBxYihhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHJiKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHFiKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIHNiPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gdGIoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsXG50Yik7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHNiLHRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHNiLHRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7ZnVuY3Rpb24gdWIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gdmIoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwocmIoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3BiKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB3YihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24geGIoYSl7dmFyIGI9d2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHliKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj14YihhKSl9ZnVuY3Rpb24gemIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXdiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQmIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9dWIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBDYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnZiKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBFYihhLGIpe0NiKGEsYik7dmFyIGM9dWIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRmIoYSxiLnR5cGUsdWIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBHYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBGYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gSGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gSWIoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1IYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBKYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEtiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gTGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5kZWZhdWx0VmFsdWU7Yj1iLmNoaWxkcmVuO2lmKG51bGwhPWIpe2lmKG51bGwhPWMpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYikpe2lmKCEoMT49Yi5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtiPWJbMF19Yz1ifW51bGw9PWMmJihjPVwiXCIpfWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnViKGMpfX1cbmZ1bmN0aW9uIE1iKGEsYil7dmFyIGM9dWIoYi52YWx1ZSksZD11YihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIE5iKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE9iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIFBiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1BiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFJiLFNiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU9iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1JiPVJifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1JiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVJiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFRiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gVWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmI9e2FuaW1hdGlvbmVuZDpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlViKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2I9e30sWGI9e307XG5ZYSYmKFhiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWIoYSl7aWYoV2JbYV0pcmV0dXJuIFdiW2FdO2lmKCFWYlthXSlyZXR1cm4gYTt2YXIgYj1WYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYYilyZXR1cm4gV2JbYV09YltjXTtyZXR1cm4gYX12YXIgWmI9WWIoXCJhbmltYXRpb25lbmRcIiksJGI9WWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYWM9WWIoXCJhbmltYXRpb25zdGFydFwiKSxiYz1ZYihcInRyYW5zaXRpb25lbmRcIiksY2M9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZWMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBnYyhhKXtpZihlYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBoYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1lYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBnYyhlKSxhO2lmKGY9PT1kKXJldHVybiBnYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGljKGEpe2E9aGMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgamMsa2MsbGMsbWM9ITEsbmM9W10sb2M9bnVsbCxwYz1udWxsLHFjPW51bGwscmM9bmV3IE1hcCxzYz1uZXcgTWFwLHRjPVtdLHVjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksdmM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9eGMoYSk7dWMuZm9yRWFjaChmdW5jdGlvbihjKXt5YyhjLGEsYil9KTt2Yy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ljKGMsYSxiKX0pfWZ1bmN0aW9uIHpjKGEsYixjLGQpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZH19ZnVuY3Rpb24gQWMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpvYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6cGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6cWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOnJjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOnNjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gQmMoYSxiLGMsZCxlKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWUpcmV0dXJuIGE9emMoYixjLGQsZSksbnVsbCE9PWImJihiPUNjKGIpLG51bGwhPT1iJiZrYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9ZnVuY3Rpb24gRGMoYSxiLGMsZCl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBvYz1CYyhvYyxhLGIsYyxkKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIHBjPUJjKHBjLGEsYixjLGQpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gcWM9QmMocWMsYSxiLGMsZCksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGU9ZC5wb2ludGVySWQ7cmMuc2V0KGUsQmMocmMuZ2V0KGUpfHxudWxsLGEsYixjLGQpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZT1kLnBvaW50ZXJJZCxzYy5zZXQoZSxCYyhzYy5nZXQoZSl8fG51bGwsYSxiLGMsZCkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gRWMoYSl7dmFyIGI9RmMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1lYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1mYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtxLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7bGMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIEdjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1IYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPUNjKGIpO251bGwhPT1jJiZrYyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gSWMoYSxiLGMpe0djKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBKYygpe2ZvcihtYz0hMTswPG5jLmxlbmd0aDspe3ZhciBhPW5jWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmpjKGEpO2JyZWFrfXZhciBiPUhjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOm5jLnNoaWZ0KCl9bnVsbCE9PW9jJiZHYyhvYykmJihvYz1udWxsKTtudWxsIT09cGMmJkdjKHBjKSYmKHBjPW51bGwpO251bGwhPT1xYyYmR2MocWMpJiYocWM9bnVsbCk7cmMuZm9yRWFjaChJYyk7c2MuZm9yRWFjaChJYyl9ZnVuY3Rpb24gS2MoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLG1jfHwobWM9ITAscS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksSmMpKSl9XG5mdW5jdGlvbiBMYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBLYyhiLGEpfWlmKDA8bmMubGVuZ3RoKXtLYyhuY1swXSxhKTtmb3IodmFyIGM9MTtjPG5jLmxlbmd0aDtjKyspe3ZhciBkPW5jW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09b2MmJktjKG9jLGEpO251bGwhPT1wYyYmS2MocGMsYSk7bnVsbCE9PXFjJiZLYyhxYyxhKTtyYy5mb3JFYWNoKGIpO3NjLmZvckVhY2goYik7Zm9yKGM9MDtjPHRjLmxlbmd0aDtjKyspZD10Y1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8dGMubGVuZ3RoJiYoYz10Y1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylFYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnRjLnNoaWZ0KCl9XG5mdW5jdGlvbiBNYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gTmMoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBPYyhhLGIsYyl7aWYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gUGMoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1OYyhiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspT2MoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylPYyhjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBRYyhhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFJjKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUWMoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gU2MoYSl7eWEoYSxQYyl9ZnVuY3Rpb24gVGMoKXtyZXR1cm4hMH1mdW5jdGlvbiBVYygpe3JldHVybiExfWZ1bmN0aW9uIEUoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP1RjOlVjO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9VWM7cmV0dXJuIHRoaXN9XG5uKEUucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9VGMpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9VGMpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9VGN9LGlzUGVyc2lzdGVudDpVYyxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1VYzt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0UuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtWYyhjKTtyZXR1cm4gY307VmMoRSk7ZnVuY3Rpb24gV2MoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBYYyhhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBWYyhhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1XYzthLnJlbGVhc2U9WGN9dmFyIFljPUUuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxaYz1FLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLCRjPUUuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxhZD0kYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gYmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgY2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LGRkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxlZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gZ2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1lZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGhkKCl7cmV0dXJuIGdkfVxudmFyIGlkPSRjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1jZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1iZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/ZGRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9iZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2JkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksamQ9MCxrZD0wLGxkPSExLG1kPSExLG5kPSRjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpoZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1qZDtqZD1hLnNjcmVlblg7cmV0dXJuIGxkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLVxuYjowOihsZD0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTt2YXIgYj1rZDtrZD1hLnNjcmVlblk7cmV0dXJuIG1kP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDoobWQ9ITAsMCl9fSksb2Q9bmQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLHBkPW5kLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxxZD0kYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpoZH0pLHJkPUUuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxcbmVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9bmQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJibHVyXCIsXCJibHVyXCIsMF0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIiwwXSxbXCJjbGlja1wiLFwiY2xpY2tcIiwwXSxbXCJjbG9zZVwiLFwiY2xvc2VcIiwwXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIiwwXSxbXCJjb3B5XCIsXCJjb3B5XCIsMF0sW1wiY3V0XCIsXCJjdXRcIiwwXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIiwwXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIiwwXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCIsXG4wXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiLDBdLFtcImRyb3BcIixcImRyb3BcIiwwXSxbXCJmb2N1c1wiLFwiZm9jdXNcIiwwXSxbXCJpbnB1dFwiLFwiaW5wdXRcIiwwXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCIsMF0sW1wia2V5ZG93blwiLFwia2V5RG93blwiLDBdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiLDBdLFtcImtleXVwXCIsXCJrZXlVcFwiLDBdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCIsMF0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiLDBdLFtcInBhc3RlXCIsXCJwYXN0ZVwiLDBdLFtcInBhdXNlXCIsXCJwYXVzZVwiLDBdLFtcInBsYXlcIixcInBsYXlcIiwwXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCIsMF0sW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCIsMF0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIiwwXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCIsMF0sW1wicmVzZXRcIixcInJlc2V0XCIsMF0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIiwwXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiLDBdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiLFxuMF0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCIsMF0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiLDBdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCIsMF0sW1wiZHJhZ1wiLFwiZHJhZ1wiLDFdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCIsMV0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCIsMV0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIiwxXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIiwxXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiLDFdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiLDFdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCIsMV0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCIsMV0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiLDFdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiLDFdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCIsMV0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIiwxXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiLDFdLFtcIndoZWVsXCIsXCJ3aGVlbFwiLDFdLFtcImFib3J0XCIsXCJhYm9ydFwiLFxuMl0sW1piLFwiYW5pbWF0aW9uRW5kXCIsMl0sWyRiLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsMl0sW2FjLFwiYW5pbWF0aW9uU3RhcnRcIiwyXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsMl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsMl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsMl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiLDJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsMl0sW1wiZW5kZWRcIixcImVuZGVkXCIsMl0sW1wiZXJyb3JcIixcImVycm9yXCIsMl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wibG9hZFwiLFwibG9hZFwiLDJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIiwyXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIiwyXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLDJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiLDJdLFtcInByb2dyZXNzXCIsXG5cInByb2dyZXNzXCIsMl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiLDJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIiwyXSxbXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsMl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLDJdLFtiYyxcInRyYW5zaXRpb25FbmRcIiwyXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCIsMl1dLHVkPXt9LHZkPXt9LHdkPTA7Zm9yKDt3ZDx0ZC5sZW5ndGg7d2QrKyl7dmFyIHlkPXRkW3dkXSx6ZD15ZFswXSxBZD15ZFsxXSxCZD15ZFsyXSxDZD1cIm9uXCIrKEFkWzBdLnRvVXBwZXJDYXNlKCkrQWQuc2xpY2UoMSkpLERkPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpDZCxjYXB0dXJlZDpDZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlt6ZF0sZXZlbnRQcmlvcml0eTpCZH07dWRbQWRdPURkO3ZkW3pkXT1EZH1cbnZhciBFZD17ZXZlbnRUeXBlczp1ZCxnZXRFdmVudFByaW9yaXR5OmZ1bmN0aW9uKGEpe2E9dmRbYV07cmV0dXJuIHZvaWQgMCE9PWE/YS5ldmVudFByaW9yaXR5OjJ9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1iZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9aWQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWFkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9bmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBaYjpjYXNlICRiOmNhc2UgYWM6YT1ZYzticmVhaztjYXNlIGJjOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9JGM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPVpjO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9b2Q7YnJlYWs7ZGVmYXVsdDphPUV9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtTYyhiKTtyZXR1cm4gYn19LEZkPXEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG5HZD1xLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxIZD1FZC5nZXRFdmVudFByaW9yaXR5LElkPTEwLEpkPVtdO1xuZnVuY3Rpb24gS2QoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPUZjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU1jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3MsaD1udWxsLGs9MDtrPGVhLmxlbmd0aDtrKyspe3ZhciBsPWVhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9eGEoaCxsKSl9QmEoaCl9fVxudmFyIExkPSEwO2Z1bmN0aW9uIEYoYSxiKXtNZChiLGEsITEpfWZ1bmN0aW9uIE1kKGEsYixjKXtzd2l0Y2goSGQoYikpe2Nhc2UgMDp2YXIgZD1OZC5iaW5kKG51bGwsYiwxKTticmVhaztjYXNlIDE6ZD1PZC5iaW5kKG51bGwsYiwxKTticmVhaztkZWZhdWx0OmQ9UGQuYmluZChudWxsLGIsMSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBOZChhLGIsYyl7aWJ8fGdiKCk7dmFyIGQ9UGQsZT1pYjtpYj0hMDt0cnl7ZmIoZCxhLGIsYyl9ZmluYWxseXsoaWI9ZSl8fGtiKCl9fWZ1bmN0aW9uIE9kKGEsYixjKXtHZChGZCxQZC5iaW5kKG51bGwsYSxiLGMpKX1cbmZ1bmN0aW9uIFFkKGEsYixjLGQpe2lmKEpkLmxlbmd0aCl7dmFyIGU9SmQucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9YjtlLm5hdGl2ZUV2ZW50PWM7ZS50YXJnZXRJbnN0PWQ7YT1lfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpiLG5hdGl2ZUV2ZW50OmMsdGFyZ2V0SW5zdDpkLGFuY2VzdG9yczpbXX07dHJ5e2lmKGI9S2QsYz1hLGpiKWIoYyx2b2lkIDApO2Vsc2V7amI9ITA7dHJ5e2hiKGIsYyx2b2lkIDApfWZpbmFsbHl7amI9ITEsa2IoKX19fWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsSmQubGVuZ3RoPElkJiZKZC5wdXNoKGEpfX1cbmZ1bmN0aW9uIFBkKGEsYixjKXtpZihMZClpZigwPG5jLmxlbmd0aCYmLTE8dWMuaW5kZXhPZihhKSlhPXpjKG51bGwsYSxiLGMpLG5jLnB1c2goYSk7ZWxzZXt2YXIgZD1IYyhhLGIsYyk7bnVsbD09PWQ/QWMoYSxjKTotMTx1Yy5pbmRleE9mKGEpPyhhPXpjKGQsYSxiLGMpLG5jLnB1c2goYSkpOkRjKGQsYSxiLGMpfHwoQWMoYSxjKSxRZChhLGIsYyxudWxsKSl9fWZ1bmN0aW9uIEhjKGEsYixjKXt2YXIgZD1NYyhjKTtkPUZjKGQpO2lmKG51bGwhPT1kKXt2YXIgZT1lYyhkKTtpZihudWxsPT09ZSlkPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2Q9ZmMoZSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7ZD1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZD1udWxsfWVsc2UgZSE9PWQmJihkPW51bGwpfX1RZChhLGIsYyxkKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2lmKCFZYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgU2Q9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24geGMoYSl7dmFyIGI9U2QuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBTZXQsU2Quc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24geWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjpNZChiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6TWQoYixcImZvY3VzXCIsITApO01kKGIsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpSZChhKSYmTWQoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09Y2MuaW5kZXhPZihhKSYmRihhLGIpfWMuYWRkKGEpfX1cbnZhciBUZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxVZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoVGQpLmZvckVhY2goZnVuY3Rpb24oYSl7VWQuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtUZFtiXT1UZFthXX0pfSk7ZnVuY3Rpb24gVmQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fFRkLmhhc093blByb3BlcnR5KGEpJiZUZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBXZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1WZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBYZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWWQoYSxiKXtpZihiKXtpZihYZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIFpkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiAkZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz14YyhhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXljKGJbZF0sYSxjKX1mdW5jdGlvbiBhZSgpe31cbmZ1bmN0aW9uIGJlKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBjZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz1jZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1jZShjKX19XG5mdW5jdGlvbiBlZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP2VlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiBmZSgpe2Zvcih2YXIgYT13aW5kb3csYj1iZSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1iZShhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGdlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIGhlPVwiJFwiLGllPVwiLyRcIixqZT1cIiQ/XCIsa2U9XCIkIVwiLGxlPW51bGwsbWU9bnVsbDtmdW5jdGlvbiBuZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBvZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIHBlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHFlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiByZShhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIHNlKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PWhlfHxjPT09a2V8fGM9PT1qZSl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PWllJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGU9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksdWU9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIit0ZSx2ZT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK3RlLHdlPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrdGU7XG5mdW5jdGlvbiBGYyhhKXt2YXIgYj1hW3VlXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t3ZV18fGNbdWVdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2UoYSk7bnVsbCE9PWE7KXtpZihjPWFbdWVdKXJldHVybiBjO2E9c2UoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENjKGEpe2E9YVt1ZV18fGFbd2VdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB4ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiB5ZShhKXtyZXR1cm4gYVt2ZV18fG51bGx9dmFyIHplPW51bGwsQWU9bnVsbCxCZT1udWxsO1xuZnVuY3Rpb24gQ2UoKXtpZihCZSlyZXR1cm4gQmU7dmFyIGEsYj1BZSxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiB6ZT96ZS52YWx1ZTp6ZS50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBCZT1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfXZhciBEZT1FLmV4dGVuZCh7ZGF0YTpudWxsfSksRWU9RS5leHRlbmQoe2RhdGE6bnVsbH0pLEZlPVs5LDEzLDI3LDMyXSxHZT1ZYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csSGU9bnVsbDtZYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoSGU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBJZT1ZYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIUhlLEplPVlhJiYoIUdlfHxIZSYmODxIZSYmMTE+PUhlKSxLZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxMZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxNZT0hMTtcbmZ1bmN0aW9uIE5lKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09RmUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBPZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBQZT0hMTtmdW5jdGlvbiBRZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gT2UoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO01lPSEwO3JldHVybiBLZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1LZSYmTWU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUmUoYSxiKXtpZihQZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhR2UmJk5lKGEsYik/KGE9Q2UoKSxCZT1BZT16ZT1udWxsLFBlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBKZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgU2U9e2V2ZW50VHlwZXM6TGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihHZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1MZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1MZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9TGUuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIFBlP05lKGEsYykmJihmPUxlLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9TGUuY29tcG9zaXRpb25TdGFydCk7Zj8oSmUmJlwia29cIiE9PWMubG9jYWxlJiYoUGV8fGYhPT1MZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1MZS5jb21wb3NpdGlvbkVuZCYmUGUmJihlPUNlKCkpOih6ZT1kLEFlPVwidmFsdWVcImluIHplP3plLnZhbHVlOnplLnRleHRDb250ZW50LFBlPSEwKSksZj1EZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPU9lKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxTYyhmKSxlPWYpOmU9bnVsbDsoYT1JZT9RZShhLGMpOlJlKGEsYykpPyhiPUVlLmdldFBvb2xlZChMZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsU2MoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sVGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gVWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFUZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgVmU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gV2UoYSxiLGMpe2E9RS5nZXRQb29sZWQoVmUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtjYihjKTtTYyhhKTtyZXR1cm4gYX12YXIgWGU9bnVsbCxZZT1udWxsO2Z1bmN0aW9uIFplKGEpe0JhKGEpfWZ1bmN0aW9uICRlKGEpe3ZhciBiPXhlKGEpO2lmKHpiKGIpKXJldHVybiBhfWZ1bmN0aW9uIGFmKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGJmPSExO1lhJiYoYmY9UmQoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBjZigpe1hlJiYoWGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsZGYpLFllPVhlPW51bGwpfWZ1bmN0aW9uIGRmKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiYkZShZZSkpaWYoYT1XZShZZSxhLE1jKGEpKSxpYilCYShhKTtlbHNle2liPSEwO3RyeXtlYihaZSxhKX1maW5hbGx5e2liPSExLGtiKCl9fX1mdW5jdGlvbiBlZihhLGIsYyl7XCJmb2N1c1wiPT09YT8oY2YoKSxYZT1iLFllPWMsWGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsZGYpKTpcImJsdXJcIj09PWEmJmNmKCl9ZnVuY3Rpb24gZmYoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gJGUoWWUpfWZ1bmN0aW9uIGdmKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gJGUoYil9ZnVuY3Rpb24gaGYoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gJGUoYil9XG52YXIgamY9e2V2ZW50VHlwZXM6VmUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpiZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/eGUoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1hZjtlbHNlIGlmKFVlKGUpKWlmKGJmKWc9aGY7ZWxzZXtnPWZmO3ZhciBoPWVmfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1nZik7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gV2UoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZGYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxrZj17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLFxuZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sbGYsbWY9e2V2ZW50VHlwZXM6a2YsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7XG5lPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0ZjKGIpOm51bGwsbnVsbCE9PWImJihmPWVjKGIpLGIhPT1mfHw1IT09Yi50YWcmJjYhPT1iLnRhZykpYj1udWxsfWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKXt2YXIgaD1uZDt2YXIgaz1rZi5tb3VzZUxlYXZlO3ZhciBsPWtmLm1vdXNlRW50ZXI7dmFyIG09XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWg9b2Qsaz1rZi5wb2ludGVyTGVhdmUsbD1rZi5wb2ludGVyRW50ZXIsbT1cInBvaW50ZXJcIjthPW51bGw9PWc/ZTp4ZShnKTtlPW51bGw9PWI/ZTp4ZShiKTtrPWguZ2V0UG9vbGVkKGssZyxjLGQpO2sudHlwZT1tK1wibGVhdmVcIjtrLnRhcmdldD1cbmE7ay5yZWxhdGVkVGFyZ2V0PWU7ZD1oLmdldFBvb2xlZChsLGIsYyxkKTtkLnR5cGU9bStcImVudGVyXCI7ZC50YXJnZXQ9ZTtkLnJlbGF0ZWRUYXJnZXQ9YTtoPWc7bT1iO2lmKGgmJm0pYTp7bD1oO2E9bTtnPTA7Zm9yKGI9bDtiO2I9TmMoYikpZysrO2I9MDtmb3IoZT1hO2U7ZT1OYyhlKSliKys7Zm9yKDswPGctYjspbD1OYyhsKSxnLS07Zm9yKDswPGItZzspYT1OYyhhKSxiLS07Zm9yKDtnLS07KXtpZihsPT09YXx8bD09PWEuYWx0ZXJuYXRlKWJyZWFrIGE7bD1OYyhsKTthPU5jKGEpfWw9bnVsbH1lbHNlIGw9bnVsbDthPWw7Zm9yKGw9W107aCYmaCE9PWE7KXtnPWguYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09YSlicmVhaztsLnB1c2goaCk7aD1OYyhoKX1mb3IoaD1bXTttJiZtIT09YTspe2c9bS5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1hKWJyZWFrO2gucHVzaChtKTttPU5jKG0pfWZvcihtPTA7bTxsLmxlbmd0aDttKyspUWMobFttXSxcImJ1YmJsZWRcIixrKTtmb3IobT1cbmgubGVuZ3RoOzA8bS0tOylRYyhoW21dLFwiY2FwdHVyZWRcIixkKTtpZihjPT09bGYpcmV0dXJuIGxmPW51bGwsW2tdO2xmPWM7cmV0dXJuW2ssZF19fTtmdW5jdGlvbiBuZihhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOm5mLHBmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gcWYoYSxiKXtpZihvZihhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIXBmLmNhbGwoYixjW2RdKXx8IW9mKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgcmY9WWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxzZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sdGY9bnVsbCx1Zj1udWxsLHZmPW51bGwsd2Y9ITE7XG5mdW5jdGlvbiB4ZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKHdmfHxudWxsPT10Znx8dGYhPT1iZShjKSlyZXR1cm4gbnVsbDtjPXRmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJmdlKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIHZmJiZxZih2ZixjKT9udWxsOih2Zj1jLGE9RS5nZXRQb29sZWQoc2Yuc2VsZWN0LHVmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9dGYsU2MoYSksYSl9XG52YXIgeWY9e2V2ZW50VHlwZXM6c2YsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9eGMoZSk7Zj1qYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/eGUoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihVZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSl0Zj1lLHVmPWIsdmY9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOnZmPXVmPXRmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOndmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gd2Y9ITEseGYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYocmYpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiB4ZihjLGQpfXJldHVybiBudWxsfX07Q2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt2YXIgemY9Q2M7c2E9eWU7dWE9emY7dmE9eGU7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpFZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46bWYsQ2hhbmdlRXZlbnRQbHVnaW46amYsU2VsZWN0RXZlbnRQbHVnaW46eWYsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpTZX0pO25ldyBTZXQ7dmFyIEFmPVtdLEJmPS0xO2Z1bmN0aW9uIEcoYSl7MD5CZnx8KGEuY3VycmVudD1BZltCZl0sQWZbQmZdPW51bGwsQmYtLSl9XG5mdW5jdGlvbiBJKGEsYil7QmYrKztBZltCZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxKPXtjdXJyZW50OkNmfSxLPXtjdXJyZW50OiExfSxEZj1DZjtmdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIEZmKGEpe0coSyxhKTtHKEosYSl9ZnVuY3Rpb24gR2YoYSl7RyhLLGEpO0coSixhKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoSi5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYixhKTtJKEssYyxhKX1mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LFdhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBKZihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPUouY3VycmVudDtJKEosYixhKTtJKEssSy5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYj1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixHKEssYSksRyhKLGEpLEkoSixiLGEpKTpHKEssYSk7SShLLGMsYSl9XG52YXIgTGY9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksTWY9cS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLE5mPXEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssT2Y9cS51bnN0YWJsZV9zaG91bGRZaWVsZCxQZj1xLnVuc3RhYmxlX3JlcXVlc3RQYWludCxRZj1xLnVuc3RhYmxlX25vdyxSZj1xLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFNmPXEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVGY9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxVZj1xLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFZmPXEudW5zdGFibGVfTG93UHJpb3JpdHksV2Y9cS51bnN0YWJsZV9JZGxlUHJpb3JpdHksWGY9e30sWWY9dm9pZCAwIT09UGY/UGY6ZnVuY3Rpb24oKXt9LFpmPW51bGwsJGY9bnVsbCxhZz0hMSxiZz1RZigpLGNnPTFFND5iZz9RZjpmdW5jdGlvbigpe3JldHVybiBRZigpLWJnfTtcbmZ1bmN0aW9uIGRnKCl7c3dpdGNoKFJmKCkpe2Nhc2UgU2Y6cmV0dXJuIDk5O2Nhc2UgVGY6cmV0dXJuIDk4O2Nhc2UgVWY6cmV0dXJuIDk3O2Nhc2UgVmY6cmV0dXJuIDk2O2Nhc2UgV2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGVnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBTZjtjYXNlIDk4OnJldHVybiBUZjtjYXNlIDk3OnJldHVybiBVZjtjYXNlIDk2OnJldHVybiBWZjtjYXNlIDk1OnJldHVybiBXZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBmZyhhLGIpe2E9ZWcoYSk7cmV0dXJuIExmKGEsYil9ZnVuY3Rpb24gZ2coYSxiLGMpe2E9ZWcoYSk7cmV0dXJuIE1mKGEsYixjKX1mdW5jdGlvbiBoZyhhKXtudWxsPT09WmY/KFpmPVthXSwkZj1NZihTZixpZykpOlpmLnB1c2goYSk7cmV0dXJuIFhmfWZ1bmN0aW9uIGpnKCl7aWYobnVsbCE9PSRmKXt2YXIgYT0kZjskZj1udWxsO05mKGEpfWlnKCl9XG5mdW5jdGlvbiBpZygpe2lmKCFhZyYmbnVsbCE9PVpmKXthZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1aZjtmZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7WmY9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09WmYmJihaZj1aZi5zbGljZShhKzEpKSxNZihTZixqZyksYzt9ZmluYWxseXthZz0hMX19fXZhciBrZz0zO2Z1bmN0aW9uIGxnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIG1nKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBuZz17Y3VycmVudDpudWxsfSxvZz1udWxsLHBnPW51bGwscWc9bnVsbDtmdW5jdGlvbiByZygpe3FnPXBnPW9nPW51bGx9XG5mdW5jdGlvbiBzZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtJKG5nLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB0ZyhhKXt2YXIgYj1uZy5jdXJyZW50O0cobmcsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB1ZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1cbmZ1bmN0aW9uIHZnKGEsYil7b2c9YTtxZz1wZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJih3Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24geGcoYSxiKXtpZihxZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PXBnKXtpZihudWxsPT09b2cpdGhyb3cgRXJyb3IodSgzMDgpKTtwZz1iO29nLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgcGc9cGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHlnPSExO1xuZnVuY3Rpb24gemcoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIEFnKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIEJnKGEsYil7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBDZyhhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBEZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9emcoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPUFnKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPUFnKGQpKTtudWxsPT09ZXx8ZD09PWU/Q2coZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhDZyhkLGIpLENnKGUsYikpOihDZyhkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIEVnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKTpGZyhhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPUFnKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEdnKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6eWc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBIZyhhLGIsYyxkLGUpe3lnPSExO2I9RmcoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1rOyl7dmFyIG09ay5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1rLGY9bCksaDxtJiYoaD1tKSk6KElnKG0say5zdXNwZW5zZUNvbmZpZyksbD1HZyhhLGIsayxsLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSkpO2s9ay5uZXh0fW09bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgQz1rLmV4cGlyYXRpb25UaW1lO0M8ZT8obnVsbD09PW0mJihtPWssbnVsbD09PWcmJihmPWwpKSxoPEMmJihoPUMpKToobD1HZyhhLGIsayxsLGMsZCksbnVsbCE9PVxuay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSkpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9bCk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07SmcoaCk7YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1sfVxuZnVuY3Rpb24gS2coYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO0xnKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtMZyhiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gTGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgxOTEsYykpO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG52YXIgTWc9RWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsTmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gT2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgU2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2VjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1QZygpLGU9TWcuc3VzcGVuc2U7ZD1RZyhkLGEsZSk7ZT1CZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtEZyhhLGUpO1JnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVBnKCksZT1NZy5zdXNwZW5zZTtkPVFnKGQsYSxlKTtlPUJnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7RGcoYSxlKTtSZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1QZygpLGQ9TWcuc3VzcGVuc2U7XG5jPVFnKGMsYSxkKTtkPUJnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7RGcoYSxkKTtSZyhhLGMpfX07ZnVuY3Rpb24gVGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hcWYoYyxkKXx8IXFmKGUsZik6ITB9XG5mdW5jdGlvbiBVZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj14ZyhmKTooZT1MKGIpP0RmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1TZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBWZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmU2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBXZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPU5nO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9eGcoZik6KGY9TChiKT9EZjpKLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKEhnKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihPZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZTZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihIZyhhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIFhnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBZZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09TmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFpnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiAkZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPWFoKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YmgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVlnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1jaChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1ZZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWRoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPWVoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBDKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1iaChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBHYTpyZXR1cm4gYz1jaChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1ZZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgSGE6cmV0dXJuIGI9ZGgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFhnKGIpfHxcblVhKGIpKXJldHVybiBiPWVoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1pnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBHYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PUlhP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihYZyhjKXx8VWEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1pnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSChhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1JYT9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBIYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihYZyhkKXx8VWEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1pnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscj1nLHg9Zz0wLEE9bnVsbDtudWxsIT09ciYmeDxoLmxlbmd0aDt4Kyspe3IuaW5kZXg+eD8oQT1yLHI9bnVsbCk6QT1yLnNpYmxpbmc7dmFyIHA9eShlLHIsaFt4XSxrKTtpZihudWxsPT09cCl7bnVsbD09PXImJihyPUEpO2JyZWFrfWEmJlxuciYmbnVsbD09PXAuYWx0ZXJuYXRlJiZiKGUscik7Zz1mKHAsZyx4KTtudWxsPT09bT9sPXA6bS5zaWJsaW5nPXA7bT1wO3I9QX1pZih4PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxyKSxsO2lmKG51bGw9PT1yKXtmb3IoO3g8aC5sZW5ndGg7eCsrKXI9QyhlLGhbeF0sayksbnVsbCE9PXImJihnPWYocixnLHgpLG51bGw9PT1tP2w9cjptLnNpYmxpbmc9cixtPXIpO3JldHVybiBsfWZvcihyPWQoZSxyKTt4PGgubGVuZ3RoO3grKylBPUgocixlLHgsaFt4XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PUEua2V5P3g6QS5rZXkpLGc9ZihBLGcseCksbnVsbD09PW0/bD1BOm0uc2libGluZz1BLG09QSk7YSYmci5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB0YShlLGcsaCxrKXt2YXIgbD1VYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih1KDE1MCkpO2g9bC5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1sPW51bGwscj1nLHg9Zz0wLEE9bnVsbCxwPWgubmV4dCgpO251bGwhPT1yJiYhcC5kb25lO3grKyxwPWgubmV4dCgpKXtyLmluZGV4Png/KEE9cixyPW51bGwpOkE9ci5zaWJsaW5nO3ZhciB6PXkoZSxyLHAudmFsdWUsayk7aWYobnVsbD09PXope251bGw9PT1yJiYocj1BKTticmVha31hJiZyJiZudWxsPT09ei5hbHRlcm5hdGUmJmIoZSxyKTtnPWYoeixnLHgpO251bGw9PT1tP2w9ejptLnNpYmxpbmc9ejttPXo7cj1BfWlmKHAuZG9uZSlyZXR1cm4gYyhlLHIpLGw7aWYobnVsbD09PXIpe2Zvcig7IXAuZG9uZTt4KysscD1oLm5leHQoKSlwPUMoZSxwLnZhbHVlLGspLG51bGwhPT1wJiYoZz1mKHAsZyx4KSxudWxsPT09bT9sPXA6bS5zaWJsaW5nPXAsbT1wKTtyZXR1cm4gbH1mb3Iocj1kKGUscik7IXAuZG9uZTt4KysscD1oLm5leHQoKSlwPUgocixlLHgscC52YWx1ZSxrKSxudWxsIT09cCYmKGEmJm51bGwhPT1cbnAuYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09cC5rZXk/eDpwLmtleSksZz1mKHAsZyx4KSxudWxsPT09bT9sPXA6bS5zaWJsaW5nPXAsbT1wKTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1JYSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBHYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PUlhOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PUlhP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1ZZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxcbmspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PUlhPyhkPWVoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1jaChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1ZZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgSGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1kaChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09XG50eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YmgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoWGcoZikpcmV0dXJuIHooYSxkLGYsaCk7aWYoVWEoZikpcmV0dXJuIHRhKGEsZCxmLGgpO2wmJlpnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBmaD0kZyghMCksZ2g9JGcoITEpLGhoPXt9LGloPXtjdXJyZW50OmhofSxqaD17Y3VycmVudDpoaH0sa2g9e2N1cnJlbnQ6aGh9O2Z1bmN0aW9uIGxoKGEpe2lmKGE9PT1oaCl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24gbWgoYSxiKXtJKGtoLGIsYSk7SShqaCxhLGEpO0koaWgsaGgsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6UWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPVFiKGIsYyl9RyhpaCxhKTtJKGloLGIsYSl9ZnVuY3Rpb24gbmgoYSl7RyhpaCxhKTtHKGpoLGEpO0coa2gsYSl9ZnVuY3Rpb24gb2goYSl7bGgoa2guY3VycmVudCk7dmFyIGI9bGgoaWguY3VycmVudCk7dmFyIGM9UWIoYixhLnR5cGUpO2IhPT1jJiYoSShqaCxhLGEpLEkoaWgsYyxhKSl9ZnVuY3Rpb24gcGgoYSl7amguY3VycmVudD09PWEmJihHKGloLGEpLEcoamgsYSkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gcWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09amV8fGMuZGF0YT09PWtlKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIHJoKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIHNoPUVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsTj1FYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx0aD0wLHVoPW51bGwsTz1udWxsLHZoPW51bGwsd2g9bnVsbCxQPW51bGwseGg9bnVsbCx5aD0wLHpoPW51bGwsQWg9MCxCaD0hMSxDaD1udWxsLEdoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIEhoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIW9mKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBJaChhLGIsYyxkLGUsZil7dGg9Zjt1aD1iO3ZoPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO3NoLmN1cnJlbnQ9bnVsbD09PXZoP0poOktoO2I9YyhkLGUpO2lmKEJoKXtkbyBCaD0hMSxHaCs9MSx2aD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCx4aD13aCx6aD1QPU89bnVsbCxzaC5jdXJyZW50PUtoLGI9YyhkLGUpO3doaWxlKEJoKTtDaD1udWxsO0doPTB9c2guY3VycmVudD1MaDthPXVoO2EubWVtb2l6ZWRTdGF0ZT13aDthLmV4cGlyYXRpb25UaW1lPXloO2EudXBkYXRlUXVldWU9emg7YS5lZmZlY3RUYWd8PUFoO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7dGg9MDt4aD1QPXdoPXZoPU89dWg9bnVsbDt5aD0wO3poPW51bGw7QWg9MDtpZihhKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNaCgpe3NoLmN1cnJlbnQ9TGg7dGg9MDt4aD1QPXdoPXZoPU89dWg9bnVsbDt5aD0wO3poPW51bGw7QWg9MDtCaD0hMTtDaD1udWxsO0doPTB9ZnVuY3Rpb24gTmgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/d2g9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gT2goKXtpZihudWxsIT09eGgpUD14aCx4aD1QLm5leHQsTz12aCx2aD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle2lmKG51bGw9PT12aCl0aHJvdyBFcnJvcih1KDMxMCkpO089dmg7dmFyIGE9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxxdWV1ZTpPLnF1ZXVlLGJhc2VVcGRhdGU6Ty5iYXNlVXBkYXRlLG5leHQ6bnVsbH07UD1udWxsPT09UD93aD1hOlAubmV4dD1hO3ZoPU8ubmV4dH1yZXR1cm4gUH1cbmZ1bmN0aW9uIFBoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gUWgoYSl7dmFyIGI9T2goKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPEdoKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1DaCl7dmFyIGU9Q2guZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe0NoLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtvZihmLGIubWVtb2l6ZWRTdGF0ZSl8fCh3Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgaD1lPW51bGwsaz1kLGw9ITE7ZG97dmFyIG09ay5leHBpcmF0aW9uVGltZTttPHRoPyhsfHwobD0hMCxoPWcsZT1mKSxtPnloJiYoeWg9bSxKZyh5aCkpKTooSWcobSxrLnN1c3BlbnNlQ29uZmlnKSxmPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShmLGsuYWN0aW9uKSk7Zz1rO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZCk7bHx8KGg9ZyxlPWYpO29mKGYsYi5tZW1vaXplZFN0YXRlKXx8KHdnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9aDtiLmJhc2VTdGF0ZT1lO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gUmgoYSl7dmFyIGI9TmgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6UGgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPVNoLmJpbmQobnVsbCx1aCxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIFRoKGEpe3JldHVybiBRaChQaCxhKX1mdW5jdGlvbiBVaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PXpoPyh6aD17bGFzdEVmZmVjdDpudWxsfSx6aC5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj16aC5sYXN0RWZmZWN0LG51bGw9PT1iP3poLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLHpoLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9TmgoKTtBaHw9YTtlLm1lbW9pemVkU3RhdGU9VWgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gV2goYSxiLGMsZCl7dmFyIGU9T2goKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZIaChkLGcuZGVwcykpe1VoKDAsYyxmLGQpO3JldHVybn19QWh8PWE7ZS5tZW1vaXplZFN0YXRlPVVoKGIsYyxmLGQpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiwxOTIsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBXaCg1MTYsMTkyLGEsYil9XG5mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uICRoKCl7fWZ1bmN0aW9uIGFpKGEsYil7TmgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBiaShhLGIpe3ZhciBjPU9oKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZIaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFNoKGEsYixjKXtpZighKDI1PkdoKSl0aHJvdyBFcnJvcih1KDMwMSkpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT11aHx8bnVsbCE9PWQmJmQ9PT11aClpZihCaD0hMCxhPXtleHBpcmF0aW9uVGltZTp0aCxzdXNwZW5zZUNvbmZpZzpudWxsLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1DaCYmKENoPW5ldyBNYXApLGM9Q2guZ2V0KGIpLHZvaWQgMD09PWMpQ2guc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7dmFyIGU9UGcoKSxmPU1nLnN1c3BlbnNlO2U9UWcoZSxhLGYpO2Y9e2V4cGlyYXRpb25UaW1lOmUsc3VzcGVuc2VDb25maWc6ZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJlxuKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBrPWIubGFzdFJlbmRlcmVkU3RhdGUsbD1kKGssYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9bDtpZihvZihsLGspKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9UmcoYSxlKX19XG52YXIgTGg9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LEpoPXtyZWFkQ29udGV4dDp4Zyx1c2VDYWxsYmFjazphaSx1c2VDb250ZXh0OnhnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwzNixaaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFZoKDQsMzYsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPU5oKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9XG5bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TmgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1TaC5iaW5kKG51bGwsdWgsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPU5oKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOlJoLHVzZURlYnVnVmFsdWU6JGgsdXNlUmVzcG9uZGVyOnJoLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1SaChhKSxkPWNbMF0sZT1jWzFdO1hoKGZ1bmN0aW9uKCl7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7Ti5zdXNwZW5zZT1cbmN9fSl9LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1SaCghMSksYz1iWzBdLGQ9YlsxXTtyZXR1cm5bYWkoZnVuY3Rpb24oYil7ZCghMCk7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWE/bnVsbDphO3RyeXtkKCExKSxiKCl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGNdKSxjXX19LEtoPXtyZWFkQ29udGV4dDp4Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnhnLHVzZUVmZmVjdDpZaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gV2goNCwzNixaaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFdoKDQsMzYsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPU9oKCk7Yj12b2lkIDA9PT1iP1xubnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkhoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOlFoLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBPaCgpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOlRoLHVzZURlYnVnVmFsdWU6JGgsdXNlUmVzcG9uZGVyOnJoLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaChhKSxkPWNbMF0sZT1jWzFdO1loKGZ1bmN0aW9uKCl7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7Ti5zdXNwZW5zZT1jfX0pfSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9VGgoITEpLGM9YlswXSxkPWJbMV07cmV0dXJuW2JpKGZ1bmN0aW9uKGIpe2QoITApO3EudW5zdGFibGVfbmV4dChmdW5jdGlvbigpe3ZhciBjPVxuTi5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWE/bnVsbDphO3RyeXtkKCExKSxiKCl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGNdKSxjXX19LGNpPW51bGwsZGk9bnVsbCxlaT0hMTtmdW5jdGlvbiBmaShhLGIpe3ZhciBjPWdpKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBoaShhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gaWkoYSl7aWYoZWkpe3ZhciBiPWRpO2lmKGIpe3ZhciBjPWI7aWYoIWhpKGEsYikpe2I9cmUoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFoaShhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO2VpPSExO2NpPWE7cmV0dXJufWZpKGNpLGMpfWNpPWE7ZGk9cmUoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsZWk9ITEsY2k9YX19ZnVuY3Rpb24gamkoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2NpPWF9XG5mdW5jdGlvbiBraShhKXtpZihhIT09Y2kpcmV0dXJuITE7aWYoIWVpKXJldHVybiBqaShhKSxlaT0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW9lKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1kaTtiOylmaShhLGIpLGI9cmUoYi5uZXh0U2libGluZyk7amkoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1pZSl7aWYoMD09PWIpe2RpPXJlKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PWhlJiZjIT09a2UmJmMhPT1qZXx8YisrfWE9YS5uZXh0U2libGluZ31kaT1udWxsfX1lbHNlIGRpPWNpP3JlKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gbGkoKXtkaT1jaT1udWxsO2VpPSExfXZhciBtaT1FYS5SZWFjdEN1cnJlbnRPd25lcix3Zz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Z2goYixudWxsLGMsZCk6ZmgoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gbmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3ZnKGIsZSk7ZD1JaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF3ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLG9pKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFxaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxyaShhLGIsZyxkLGUsZik7YT1jaChjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOnFmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIG9pKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPWFoKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiByaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZxZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJih3Zz0hMSxlPGYpP29pKGEsYixmKTpzaShhLGIsYyxkLGYpfWZ1bmN0aW9uIHRpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gc2koYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0RmOkouY3VycmVudDtmPUVmKGIsZik7dmcoYixlKTtjPUloKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXdnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksb2koYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB1aShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt2ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksVWcoYixjLGQsZSksV2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9eGcobCk6KGw9TChjKT9EZjpKLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtDfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmVmcoYixnLGQsbCk7eWc9ITE7dmFyIHk9Yi5tZW1vaXplZFN0YXRlO2s9Zy5zdGF0ZT15O3ZhciBIPWIudXBkYXRlUXVldWU7bnVsbCE9PUgmJihIZyhiLEgsZCxnLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8eSE9PWt8fEsuY3VycmVudHx8eWc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoT2coYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXlnfHxUZyhiLGMsaCxkLHksayxsKSk/KEN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDptZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD14ZyhsKToobD1MKGMpP0RmOkouY3VycmVudCxsPUVmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKEM9XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJlZnKGIsZyxkLGwpLHlnPSExLGs9Yi5tZW1vaXplZFN0YXRlLHk9Zy5zdGF0ZT1rLEg9Yi51cGRhdGVRdWV1ZSxudWxsIT09SCYmKEhnKGIsSCxkLGcsZSkseT1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxrIT09eXx8Sy5jdXJyZW50fHx5Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihPZyhiLGMsbSxkKSx5PWIubWVtb2l6ZWRTdGF0ZSksKG09eWd8fFRnKGIsYyxoLGQsayx5LGwpKT8oQ3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHksbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx5LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXkpLGcucHJvcHM9ZCxnLnN0YXRlPXksZy5jb250ZXh0PWwsZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIHZpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHZpKGEsYixjLGQsZSxmKXt0aShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxvaShhLGIsZik7ZD1iLnN0YXRlTm9kZTttaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1maChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPWZoKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gd2koYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7bWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHhpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24geWkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSxiKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmaWkoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9ZWgobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1laChnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPXhpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9Z2goYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPWFoKGEsYS5wZW5kaW5nUHJvcHMsMCk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1haChkLGUsZC5leHBpcmF0aW9uVGltZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1jO3JldHVybiBkfWM9ZmgoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPVxubnVsbDtyZXR1cm4gYi5jaGlsZD1jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1laChudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPWVoKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPXhpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1maChiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIHppKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt1ZyhhLnJldHVybixiKX1mdW5jdGlvbiBBaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEJpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ6aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl6aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCxiKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09cWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtBaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1xaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9QWkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOkFpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmSmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPWFoKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPWFoKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBDaShhKXthLmVmZmVjdFRhZ3w9NH12YXIgSGksSWksSmksS2k7XG5IaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07SWk9ZnVuY3Rpb24oKXt9O1xuSmk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2xoKGloLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj1BYihnLGYpO2Q9QWIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUtiKGcsZik7ZD1LYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPWFlKX1ZZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJihpYS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmJGQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZDaShiKX19O0tpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZDaShiKX07XG5mdW5jdGlvbiBMaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBNaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkZmKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6bmgoYSk7R2YoYSk7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIHBoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gRyhNLGEpLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRyhNLGEpLG51bGw7Y2FzZSA0OnJldHVybiBuaChhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHRnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gTmkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpYYShiKX19XG52YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gUGkoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1YYShjKSk7bnVsbCE9PWMmJldhKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJldhKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIFFpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtSaShhLGMpfX1mdW5jdGlvbiBTaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtSaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVaSgyLDAsYik7YnJlYWs7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYzKSk7fX1cbmZ1bmN0aW9uIFVpKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoMCE9PShkLnRhZyZhKSl7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfTAhPT0oZC50YWcmYikmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiBWaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFdpJiZXaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtmZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7UmkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOlNpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJlFpKGIsYyk7YnJlYWs7Y2FzZSA1OlNpKGIpO2JyZWFrO2Nhc2UgNDpYaShhLGIsYyl9fVxuZnVuY3Rpb24gWWkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDtudWxsIT09YiYmWWkoYil9ZnVuY3Rpb24gWmkoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiAkaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihaaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoVGIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFppKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7dmFyIGY9NT09PWUudGFnfHw2PT09ZS50YWc7aWYoZil7dmFyIGc9Zj9lLnN0YXRlTm9kZTplLnN0YXRlTm9kZS5pbnN0YW5jZTtpZihjKWlmKGQpe2Y9Yjt2YXIgaD1nO2c9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGgsZyk6Zi5pbnNlcnRCZWZvcmUoaCxnKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGcsYyk7ZWxzZSBkPyhoPWIsOD09PWgubm9kZVR5cGU/KGY9aC5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGcsaCkpOihmPWgsZi5hcHBlbmRDaGlsZChnKSksaD1oLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWgmJnZvaWQgMCE9PWh8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9YWUpKTpiLmFwcGVuZENoaWxkKGcpfWVsc2UgaWYoNCE9PVxuZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIFhpKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoVmkoaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhaztmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKFZpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBhaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlVpKDQsOCxiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3ZlXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZDYihjLGQpO1pkKGEsZSk7Yj1aZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/V2QoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1NiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9UYihjLGgpOnZiKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpFYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOk1iKGMsXG5kKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9KYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkpiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19YnJlYWs7Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLExjKGIuY29udGFpbmVySW5mbykpO2JyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9kPSExOihkPSEwLGM9Yi5jaGlsZCxiaj1jZygpKTtcbmlmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1WZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPVxuYTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31jaihiKTticmVhaztjYXNlIDE5OmNqKGIpO2JyZWFrO2Nhc2UgMTc6YnJlYWs7Y2FzZSAyMDpicmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fWZ1bmN0aW9uIGNqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IE9pKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9ZGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19dmFyIGVqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO1xuZnVuY3Rpb24gZmooYSxiLGMpe2M9QmcoYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtnanx8KGdqPSEwLGhqPWQpO1BpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gaWooYSxiLGMpe2M9QmcoYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7UGkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWpqP2pqPW5ldyBTZXQoW3RoaXNdKTpqai5hZGQodGhpcyksUGkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIga2o9TWF0aC5jZWlsLGxqPUVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsbWo9RWEuUmVhY3RDdXJyZW50T3duZXIsUz0wLG5qPTgsb2o9MTYscGo9MzIscWo9MCxyaj0xLHNqPTIsdGo9Myx1aj00LHZqPTUsVD1TLFU9bnVsbCxWPW51bGwsVz0wLFg9cWosd2o9bnVsbCx4aj0xMDczNzQxODIzLHlqPTEwNzM3NDE4MjMsemo9bnVsbCxBaj0wLEJqPSExLGJqPTAsQ2o9NTAwLFk9bnVsbCxnaj0hMSxoaj1udWxsLGpqPW51bGwsRGo9ITEsRWo9bnVsbCxGaj05MCxHaj1udWxsLEhqPTAsSWo9bnVsbCxKaj0wO2Z1bmN0aW9uIFBnKCl7cmV0dXJuKFQmKG9qfHBqKSkhPT1TPzEwNzM3NDE4MjEtKGNnKCkvMTB8MCk6MCE9PUpqP0pqOkpqPTEwNzM3NDE4MjEtKGNnKCkvMTB8MCl9XG5mdW5jdGlvbiBRZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWRnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChUJm9qKSE9PVMpcmV0dXJuIFc7aWYobnVsbCE9PWMpYT1sZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1sZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWxnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VSYmYT09PVcmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoNTA8SGopdGhyb3cgSGo9MCxJaj1udWxsLEVycm9yKHUoMTg1KSk7YT1LaihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1kZygpOzEwNzM3NDE4MjM9PT1iPyhUJm5qKSE9PVMmJihUJihvanxwaikpPT09Uz9MaihhKTooWihhKSxUPT09UyYmamcoKSk6WihhKTsoVCY0KT09PVN8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PUdqP0dqPW5ldyBNYXAoW1thLGJdXSk6KGM9R2ouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZHai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIEtqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihVPT09ZSYmKEpnKGIpLFg9PT11aiYmTWooZSxXKSksTmooZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBPaihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighUGooYSxiKSlyZXR1cm4gYjtiPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDtyZXR1cm4gYj5hP2I6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1oZyhMai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9T2ooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPVBnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVhmJiZOZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/aGcoTGouYmluZChudWxsLGEpKTpnZyhkLFFqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS1jZygpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gUWooYSxiKXtKaj0wO2lmKGIpcmV0dXJuIGI9UGcoKSxSaihhLGIpLFooYSksbnVsbDt2YXIgYz1PaihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMjcpKTtTaigpO2E9PT1VJiZjPT09V3x8VGooYSxjKTtpZihudWxsIT09Vil7dmFyIGQ9VDtUfD1vajt2YXIgZT1VaihhKTtkbyB0cnl7VmooKTticmVha31jYXRjaChoKXtXaihhLGgpfXdoaWxlKDEpO3JnKCk7VD1kO2xqLmN1cnJlbnQ9ZTtpZihYPT09cmopdGhyb3cgYj13aixUaihhLGMpLE1qKGEsYyksWihhKSxiO2lmKG51bGw9PT1WKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1YLFU9bnVsbCxkKXtjYXNlIHFqOmNhc2Ugcmo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIHNqOlJqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB0ajpNaihhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9WGooZSkpO2lmKDEwNzM3NDE4MjM9PT14aiYmKGU9YmorQ2otY2coKSwxMDxlKSl7aWYoQmope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztUaihhLGMpO2JyZWFrfX1mPU9qKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9cGUoWWouYmluZChudWxsLGEpLGUpO2JyZWFrfVlqKGEpO2JyZWFrO2Nhc2UgdWo6TWooYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1YaihlKSk7aWYoQmomJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7VGooYSxjKTticmVha31lPU9qKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT15aj9kPTEwKigxMDczNzQxODIxLXlqKS1jZygpOjEwNzM3NDE4MjM9PT14aj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEteGopLTVFMyxlPWNnKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpraihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1wZShZai5iaW5kKG51bGwsYSksZCk7YnJlYWt9WWooYSk7YnJlYWs7Y2FzZSB2ajppZigxMDczNzQxODIzIT09eGomJm51bGwhPT16ail7Zj14ajt2YXIgZz16ajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj1jZygpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe01qKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxucGUoWWouYmluZChudWxsLGEpLGQpO2JyZWFrfX1ZaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBRai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gTGooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilZaihhKTtlbHNle2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO1NqKCk7YT09PVUmJmI9PT1XfHxUaihhLGIpO2lmKG51bGwhPT1WKXt2YXIgYz1UO1R8PW9qO3ZhciBkPVVqKGEpO2RvIHRyeXtaaigpO2JyZWFrfWNhdGNoKGUpe1dqKGEsZSl9d2hpbGUoMSk7cmcoKTtUPWM7bGouY3VycmVudD1kO2lmKFg9PT1yail0aHJvdyBjPXdqLFRqKGEsYiksTWooYSxiKSxaKGEpLGM7aWYobnVsbCE9PVYpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1U9bnVsbDtZaihhKTtaKGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGFrKCl7aWYobnVsbCE9PUdqKXt2YXIgYT1HajtHaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe1JqKGMsYSk7WihjKX0pO2pnKCl9fWZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9VDtUfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19ZnVuY3Rpb24gY2soYSxiKXt2YXIgYz1UO1QmPS0yO1R8PW5qO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19XG5mdW5jdGlvbiBUaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxxZShjKSk7aWYobnVsbCE9PVYpZm9yKGM9Vi5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOnZhciBlPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZSYmdm9pZCAwIT09ZSYmRmYoZCk7YnJlYWs7Y2FzZSAzOm5oKGQpO0dmKGQpO2JyZWFrO2Nhc2UgNTpwaChkKTticmVhaztjYXNlIDQ6bmgoZCk7YnJlYWs7Y2FzZSAxMzpHKE0sZCk7YnJlYWs7Y2FzZSAxOTpHKE0sZCk7YnJlYWs7Y2FzZSAxMDp0ZyhkKX1jPWMucmV0dXJufVU9YTtWPWFoKGEuY3VycmVudCxudWxsLGIpO1c9YjtYPXFqO3dqPW51bGw7eWo9eGo9MTA3Mzc0MTgyMzt6aj1udWxsO0FqPTA7Qmo9ITF9XG5mdW5jdGlvbiBXaihhLGIpe2Rve3RyeXtyZygpO01oKCk7aWYobnVsbD09PVZ8fG51bGw9PT1WLnJldHVybilyZXR1cm4gWD1yaix3aj1iLG51bGw7YTp7dmFyIGM9YSxkPVYucmV0dXJuLGU9VixmPWI7Yj1XO2UuZWZmZWN0VGFnfD0yMDQ4O2UuZmlyc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWYmJlwib2JqZWN0XCI9PT10eXBlb2YgZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYudGhlbil7dmFyIGc9ZixoPTAhPT0oTS5jdXJyZW50JjEpLGs9ZDtkb3t2YXIgbDtpZihsPTEzPT09ay50YWcpe3ZhciBtPWsubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSlsPW51bGwhPT1tLmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgQz1rLm1lbW9pemVkUHJvcHM7bD12b2lkIDA9PT1DLmZhbGxiYWNrPyExOiEwIT09Qy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpoPyExOiEwfX1pZihsKXt2YXIgeT1rLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT15KXt2YXIgSD1uZXcgU2V0O1xuSC5hZGQoZyk7ay51cGRhdGVRdWV1ZT1IfWVsc2UgeS5hZGQoZyk7aWYoMD09PShrLm1vZGUmMikpe2suZWZmZWN0VGFnfD02NDtlLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWUudGFnKWlmKG51bGw9PT1lLmFsdGVybmF0ZSllLnRhZz0xNztlbHNle3ZhciB6PUJnKDEwNzM3NDE4MjMsbnVsbCk7ei50YWc9MjtEZyhlLHopfWUuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWY9dm9pZCAwO2U9Yjt2YXIgdGE9Yy5waW5nQ2FjaGU7bnVsbD09PXRhPyh0YT1jLnBpbmdDYWNoZT1uZXcgZWosZj1uZXcgU2V0LHRhLnNldChnLGYpKTooZj10YS5nZXQoZyksdm9pZCAwPT09ZiYmKGY9bmV3IFNldCx0YS5zZXQoZyxmKSkpO2lmKCFmLmhhcyhlKSl7Zi5hZGQoZSk7dmFyIHI9ZGsuYmluZChudWxsLGMsZyxlKTtnLnRoZW4ocixyKX1rLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1rPWsucmV0dXJufXdoaWxlKG51bGwhPT1rKTtmPUVycm9yKChXYShlLnR5cGUpfHxcblwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitYYShlKSl9WCE9PXZqJiYoWD1zaik7Zj1OaShmLGUpO2s9ZDtkb3tzd2l0Y2goay50YWcpe2Nhc2UgMzpnPWY7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB4PWZqKGssZyxiKTtFZyhrLHgpO2JyZWFrIGE7Y2FzZSAxOmc9Zjt2YXIgQT1rLnR5cGUscD1rLnN0YXRlTm9kZTtpZigwPT09KGsuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXAmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwLmNvbXBvbmVudERpZENhdGNoJiZcbihudWxsPT09amp8fCFqai5oYXMocCkpKSl7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB0PWlqKGssZyxiKTtFZyhrLHQpO2JyZWFrIGF9fWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspfVY9ZWsoVil9Y2F0Y2godil7Yj12O2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIFVqKCl7dmFyIGE9bGouY3VycmVudDtsai5jdXJyZW50PUxoO3JldHVybiBudWxsPT09YT9MaDphfWZ1bmN0aW9uIElnKGEsYil7YTx4aiYmMjxhJiYoeGo9YSk7bnVsbCE9PWImJmE8eWomJjI8YSYmKHlqPWEsemo9Yil9ZnVuY3Rpb24gSmcoYSl7YT5BaiYmKEFqPWEpfWZ1bmN0aW9uIFpqKCl7Zm9yKDtudWxsIT09VjspVj1mayhWKX1mdW5jdGlvbiBWaigpe2Zvcig7bnVsbCE9PVYmJiFPZigpOylWPWZrKFYpfVxuZnVuY3Rpb24gZmsoYSl7dmFyIGI9Z2soYS5hbHRlcm5hdGUsYSxXKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWVrKGEpKTttai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBlayhhKXtWPWE7ZG97dmFyIGI9Vi5hbHRlcm5hdGU7YT1WLnJldHVybjtpZigwPT09KFYuZWZmZWN0VGFnJjIwNDgpKXthOnt2YXIgYz1iO2I9Vjt2YXIgZD1XO3ZhciBlPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmRmYoYik7YnJlYWs7Y2FzZSAzOm5oKGIpO0dmKGIpO2U9Yi5zdGF0ZU5vZGU7ZS5wZW5kaW5nQ29udGV4dCYmKGUuY29udGV4dD1lLnBlbmRpbmdDb250ZXh0LGUucGVuZGluZ0NvbnRleHQ9bnVsbCk7KG51bGw9PT1jfHxudWxsPT09Yy5jaGlsZCkmJmtpKGIpJiZDaShiKTtJaShiKTticmVhaztjYXNlIDU6cGgoYik7ZD1saChraC5jdXJyZW50KTt2YXIgZj1iLnR5cGU7aWYobnVsbCE9PWMmJm51bGwhPWIuc3RhdGVOb2RlKUppKGMsYixmLGUsZCksYy5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2UgaWYoZSl7dmFyIGc9XG5saChpaC5jdXJyZW50KTtpZihraShiKSl7ZT1iO3ZhciBoPWUuc3RhdGVOb2RlO2M9ZS50eXBlO3ZhciBrPWUubWVtb2l6ZWRQcm9wcyxsPWQ7aFt1ZV09ZTtoW3ZlXT1rO2Y9dm9pZCAwO2Q9aDtzd2l0Y2goYyl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxjYy5sZW5ndGg7aCsrKUYoY2NbaF0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmIoZCxrKTtGKFwiaW52YWxpZFwiLGQpOyRkKGwsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhay5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTskZChsLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGIoZCxrKSxGKFwiaW52YWxpZFwiLGQpLCRkKGwsXCJvbkNoYW5nZVwiKX1ZZChjLGspO2g9bnVsbDtmb3IoZiBpbiBrKWsuaGFzT3duUHJvcGVydHkoZikmJihnPWtbZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/ZC50ZXh0Q29udGVudCE9PWcmJihoPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmZC50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGg9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTppYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmJGQobCxmKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOnliKGQpO0diKGQsaywhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWIoZCk7TmIoZCxrKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGsub25DbGljayYmXG4oZC5vbmNsaWNrPWFlKX1mPWg7ZS51cGRhdGVRdWV1ZT1mO2U9bnVsbCE9PWY/ITA6ITE7ZSYmQ2koYil9ZWxzZXtjPWI7bD1mO2s9ZTtoPTk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50O2c9PT1PYi5odG1sJiYoZz1QYihsKSk7Zz09PU9iLmh0bWw/XCJzY3JpcHRcIj09PWw/KGs9aC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGsuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaD1rLnJlbW92ZUNoaWxkKGsuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2Ygay5pcz9oPWguY3JlYXRlRWxlbWVudChsLHtpczprLmlzfSk6KGg9aC5jcmVhdGVFbGVtZW50KGwpLFwic2VsZWN0XCI9PT1sJiYobD1oLGsubXVsdGlwbGU/bC5tdWx0aXBsZT0hMDprLnNpemUmJihsLnNpemU9ay5zaXplKSkpOmg9aC5jcmVhdGVFbGVtZW50TlMoZyxsKTtrPWg7a1t1ZV09YztrW3ZlXT1lO0hpKGssYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9aztsPWY7Yz1lO3ZhciBtPWQsQz1aZChsLGMpO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5rKTtkPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGQ9MDtkPGNjLmxlbmd0aDtkKyspRihjY1tkXSxrKTtkPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGspO2Q9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixrKTtGKFwibG9hZFwiLGspO2Q9YzticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGspO0YoXCJzdWJtaXRcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJiKGssYyk7ZD1BYihrLGMpO0YoXCJpbnZhbGlkXCIsayk7JGQobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpkPUliKGssYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmsuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFjLm11bHRpcGxlfTtkPW4oe30sYyx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixrKTskZChtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGIoayxcbmMpO2Q9S2IoayxjKTtGKFwiaW52YWxpZFwiLGspOyRkKG0sXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmQ9Y31ZZChsLGQpO2g9dm9pZCAwO2c9bDt2YXIgeT1rLEg9ZDtmb3IoaCBpbiBIKWlmKEguaGFzT3duUHJvcGVydHkoaCkpe3ZhciB6PUhbaF07XCJzdHlsZVwiPT09aD9XZCh5LHopOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KHo9ej96Ll9faHRtbDp2b2lkIDAsbnVsbCE9eiYmU2IoeSx6KSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIHo/KFwidGV4dGFyZWFcIiE9PWd8fFwiXCIhPT16KSYmVGIoeSx6KTpcIm51bWJlclwiPT09dHlwZW9mIHomJlRiKHksXCJcIit6KTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9eiYmJGQobSxoKTpudWxsIT16JiZ2Yih5LGgseixDKSl9c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOnliKGspO1xuR2IoayxjLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5YihrKTtOYihrLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZrLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit1YihjLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQ9aztkLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtrPWMudmFsdWU7bnVsbCE9az9KYihkLCEhYy5tdWx0aXBsZSxrLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSmIoZCwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGsub25jbGljaz1hZSl9KGU9bmUoZixlKSkmJkNpKGIpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7YnJlYWs7Y2FzZSA2OmlmKGMmJm51bGwhPWIuc3RhdGVOb2RlKUtpKGMsYixjLm1lbW9pemVkUHJvcHMsZSk7ZWxzZXtpZihcInN0cmluZ1wiIT09XG50eXBlb2YgZSYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7ZD1saChraC5jdXJyZW50KTtsaChpaC5jdXJyZW50KTtraShiKT8oZT1iLGY9ZS5zdGF0ZU5vZGUsZD1lLm1lbW9pemVkUHJvcHMsZlt1ZV09ZSwoZT1mLm5vZGVWYWx1ZSE9PWQpJiZDaShiKSk6KGY9YixlPSg5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZSksZVt1ZV09ZixiLnN0YXRlTm9kZT1lKX1icmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6RyhNLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWQ7YnJlYWsgYX1lPW51bGwhPT1lO2Y9ITE7bnVsbD09PWM/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZraShiKTooZD1jLm1lbW9pemVkU3RhdGUsZj1udWxsIT09ZCxlfHxudWxsPT09ZHx8KGQ9Yy5jaGlsZC5zaWJsaW5nLG51bGwhPT1kJiYoaz1iLmZpcnN0RWZmZWN0LFxubnVsbCE9PWs/KGIuZmlyc3RFZmZlY3Q9ZCxkLm5leHRFZmZlY3Q9ayk6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWQsZC5uZXh0RWZmZWN0PW51bGwpLGQuZWZmZWN0VGFnPTgpKSk7aWYoZSYmIWYmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1jJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpWD09PXFqJiYoWD10aik7ZWxzZXtpZihYPT09cWp8fFg9PT10ailYPXVqOzAhPT1BaiYmbnVsbCE9PVUmJihNaihVLFcpLE5qKFUsQWopKX1pZihlfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6bmgoYik7SWkoYik7YnJlYWs7Y2FzZSAxMDp0ZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkwoYi50eXBlKSYmRmYoYik7YnJlYWs7Y2FzZSAxOTpHKE0sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PVxuZSlicmVhaztmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2s9ZS5yZW5kZXJpbmc7aWYobnVsbD09PWspaWYoZilMaShlLCExKTtlbHNle2lmKFghPT1xanx8bnVsbCE9PWMmJjAhPT0oYy5lZmZlY3RUYWcmNjQpKWZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KXtrPXFoKGMpO2lmKG51bGwhPT1rKXtiLmVmZmVjdFRhZ3w9NjQ7TGkoZSwhMSk7Zj1rLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZS5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0O2U9ZDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOylkPWYsYz1lLGQuZWZmZWN0VGFnJj0yLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCxrPWQuYWx0ZXJuYXRlLG51bGw9PT1rPyhkLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxkLmV4cGlyYXRpb25UaW1lPWMsZC5jaGlsZD1udWxsLFxuZC5tZW1vaXplZFByb3BzPW51bGwsZC5tZW1vaXplZFN0YXRlPW51bGwsZC51cGRhdGVRdWV1ZT1udWxsLGQuZGVwZW5kZW5jaWVzPW51bGwpOihkLmNoaWxkRXhwaXJhdGlvblRpbWU9ay5jaGlsZEV4cGlyYXRpb25UaW1lLGQuZXhwaXJhdGlvblRpbWU9ay5leHBpcmF0aW9uVGltZSxkLmNoaWxkPWsuY2hpbGQsZC5tZW1vaXplZFByb3BzPWsubWVtb2l6ZWRQcm9wcyxkLm1lbW9pemVkU3RhdGU9ay5tZW1vaXplZFN0YXRlLGQudXBkYXRlUXVldWU9ay51cGRhdGVRdWV1ZSxjPWsuZGVwZW5kZW5jaWVzLGQuZGVwZW5kZW5jaWVzPW51bGw9PT1jP251bGw6e2V4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmMuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yy5yZXNwb25kZXJzfSksZj1mLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIsYik7Yj1iLmNoaWxkO2JyZWFrIGF9Yz1jLnNpYmxpbmd9fWVsc2V7aWYoIWYpaWYoYz1xaChrKSxudWxsIT09Yyl7aWYoYi5lZmZlY3RUYWd8PVxuNjQsZj0hMCxkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5lZmZlY3RUYWd8PTQpLExpKGUsITApLG51bGw9PT1lLnRhaWwmJlwiaGlkZGVuXCI9PT1lLnRhaWxNb2RlJiYhay5hbHRlcm5hdGUpe2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBjZygpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLExpKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oay5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1rKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWs6Yi5jaGlsZD1rLGUubGFzdD1rKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249Y2coKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztcbmUubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3Q7ZC5zaWJsaW5nPW51bGw7ZT1NLmN1cnJlbnQ7ZT1mP2UmMXwyOmUmMTtJKE0sZSxiKTtiPWQ7YnJlYWsgYX1icmVhaztjYXNlIDIwOmJyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO31iPW51bGx9ZT1WO2lmKDE9PT1XfHwxIT09ZS5jaGlsZEV4cGlyYXRpb25UaW1lKXtmPTA7Zm9yKGQ9ZS5jaGlsZDtudWxsIT09ZDspYz1kLmV4cGlyYXRpb25UaW1lLGs9ZC5jaGlsZEV4cGlyYXRpb25UaW1lLGM+ZiYmKGY9Yyksaz5mJiYoZj1rKSxkPWQuc2libGluZztlLmNoaWxkRXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxudWxsIT09Vi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVxuVi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVYubGFzdEVmZmVjdCksMTxWLmVmZmVjdFRhZyYmKG51bGwhPT1hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9VjphLmZpcnN0RWZmZWN0PVYsYS5sYXN0RWZmZWN0PVYpKX1lbHNle2I9TWkoVixXKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9Vi5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1Y9YX13aGlsZShudWxsIT09Vik7WD09PXFqJiYoWD12aik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBZaihhKXt2YXIgYj1kZygpO2ZnKDk5LGlrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGlrKGEsYil7ZG8gU2ooKTt3aGlsZShudWxsIT09RWopO2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9WGooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VSYmKFY9VT1udWxsLFc9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VDtUfD1wajttai5jdXJyZW50PW51bGw7bGU9TGQ7dmFyIGc9ZmUoKTtpZihnZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKERiKXtoPW51bGw7YnJlYWsgYX12YXIgQz0wLHk9LTEsSD0tMSx6PTAsdGE9MCxyPWcseD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7ciE9PWh8fDAhPT1sJiYzIT09ci5ub2RlVHlwZXx8KHk9QytsKTtyIT09bXx8MCE9PWsmJjMhPT1yLm5vZGVUeXBlfHwoSD1DK2spOzM9PT1yLm5vZGVUeXBlJiYoQys9ci5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9ci5maXJzdENoaWxkKSlicmVhazt4PXI7cj1BfWZvcig7Oyl7aWYocj09PWcpYnJlYWsgYjt4PT09aCYmKyt6PT09bCYmKHk9Qyk7eD09PW0mJisrdGE9PT1rJiYoSD1DKTtpZihudWxsIT09KEE9ci5uZXh0U2libGluZykpYnJlYWs7cj14O3g9ci5wYXJlbnROb2RlfXI9QX1oPS0xPT09eXx8LTE9PT1IP251bGw6e3N0YXJ0OnksZW5kOkh9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7bWU9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07TGQ9ITE7WT1lO2RvIHRyeXtqaygpfWNhdGNoKERiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKFksRGIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHA9WS5lZmZlY3RUYWc7cCYxNiYmVGIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocCYxMjgpe3ZhciB0PVkuYWx0ZXJuYXRlO2lmKG51bGwhPT10KXt2YXIgdj10LnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2gocCYxMDM4KXtjYXNlIDI6JGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjokaShZKTtZLmVmZmVjdFRhZyY9LTM7YWooWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPS0xMDI1O2FqKFkuYWx0ZXJuYXRlLFxuWSk7YnJlYWs7Y2FzZSA0OmFqKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksWGkoZyxsLGgpLFlpKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaChEYil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtSaShZLERiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dj1tZTt0PWZlKCk7cD12LmZvY3VzZWRFbGVtO2g9di5zZWxlY3Rpb25SYW5nZTtpZih0IT09cCYmcCYmcC5vd25lckRvY3VtZW50JiZlZShwLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHApKXtudWxsIT09aCYmZ2UocCkmJih0PWguc3RhcnQsdj1oLmVuZCx2b2lkIDA9PT12JiYodj10KSxcInNlbGVjdGlvblN0YXJ0XCJpbiBwPyhwLnNlbGVjdGlvblN0YXJ0PXQscC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odixwLnZhbHVlLmxlbmd0aCkpOih2PSh0PXAub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZ0LmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksXG5sPXAudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXYuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD1kZShwLGcpLG09ZGUocCxoKSxsJiZtJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09bC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PW0ubm9kZXx8di5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKHQ9dC5jcmVhdGVSYW5nZSgpLHQuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8odi5hZGRSYW5nZSh0KSx2LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKToodC5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx2LmFkZFJhbmdlKHQpKSkpKSk7dD1bXTtmb3Iodj1wO3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmdC5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgcC5mb2N1cyYmcC5mb2N1cygpO2ZvcihwPTA7cDx0Lmxlbmd0aDtwKyspdj10W3BdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfW1lPW51bGw7TGQ9ISFsZTtsZT1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHA9ZDtudWxsIT09WTspe3ZhciBEaD1ZLmVmZmVjdFRhZztpZihEaCYzNil7dmFyIGRjPVkuYWx0ZXJuYXRlO3Q9WTt2PXA7c3dpdGNoKHQudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDE2LDMyLHQpO2JyZWFrO2Nhc2UgMTp2YXIgZmQ9dC5zdGF0ZU5vZGU7aWYodC5lZmZlY3RUYWcmNClpZihudWxsPT09ZGMpZmQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBoaz10LmVsZW1lbnRUeXBlPT09dC50eXBlP2RjLm1lbW9pemVkUHJvcHM6bWcodC50eXBlLGRjLm1lbW9pemVkUHJvcHMpO2ZkLmNvbXBvbmVudERpZFVwZGF0ZShoayxkYy5tZW1vaXplZFN0YXRlLFxuZmQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBFaD10LnVwZGF0ZVF1ZXVlO251bGwhPT1FaCYmS2codCxFaCxmZCx2KTticmVhaztjYXNlIDM6dmFyIEZoPXQudXBkYXRlUXVldWU7aWYobnVsbCE9PUZoKXtnPW51bGw7aWYobnVsbCE9PXQuY2hpbGQpc3dpdGNoKHQuY2hpbGQudGFnKXtjYXNlIDU6Zz10LmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Zz10LmNoaWxkLnN0YXRlTm9kZX1LZyh0LEZoLGcsdil9YnJlYWs7Y2FzZSA1OnZhciB4az10LnN0YXRlTm9kZTtudWxsPT09ZGMmJnQuZWZmZWN0VGFnJjQmJm5lKHQudHlwZSx0Lm1lbW9pemVkUHJvcHMpJiZ4ay5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT10Lm1lbW9pemVkU3RhdGUpe3ZhciBEaT10LmFsdGVybmF0ZTtpZihudWxsIT09RGkpe3ZhciBFaT1EaS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1FaSl7dmFyIEZpPVxuRWkuZGVoeWRyYXRlZDtudWxsIT09RmkmJkxjKEZpKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MykpO319aWYoRGgmMTI4KXt0PXZvaWQgMDt2YXIgeGQ9WS5yZWY7aWYobnVsbCE9PXhkKXt2YXIgR2k9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6dD1HaTticmVhaztkZWZhdWx0OnQ9R2l9XCJmdW5jdGlvblwiPT09dHlwZW9mIHhkP3hkKHQpOnhkLmN1cnJlbnQ9dH19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKERiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKFksRGIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPW51bGw7WWYoKTtUPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihEailEaj0hMSxFaj1hLEZqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJlxuKGpqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT1Jaj9IaisrOihIaj0wLElqPWEpOkhqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIGtrJiZrayhjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKGdqKXRocm93IGdqPSExLGE9aGosaGo9bnVsbCxhO2lmKChUJm5qKSE9PVMpcmV0dXJuIG51bGw7amcoKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBqaygpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmVGkoWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fERqfHwoRGo9ITAsZ2coOTcsZnVuY3Rpb24oKXtTaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1mdW5jdGlvbiBTaigpe2lmKDkwIT09Rmope3ZhciBhPTk3PEZqPzk3OkZqO0ZqPTkwO3JldHVybiBmZyhhLGxrKX19XG5mdW5jdGlvbiBsaygpe2lmKG51bGw9PT1FailyZXR1cm4hMTt2YXIgYT1FajtFaj1udWxsO2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVQ7VHw9cGo7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVaSgxMjgsMCxjKSxVaSgwLDY0LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVQ9YjtqZygpO3JldHVybiEwfWZ1bmN0aW9uIG1rKGEsYixjKXtiPU5pKGMsYik7Yj1maihhLGIsMTA3Mzc0MTgyMyk7RGcoYSxiKTthPUtqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9XG5mdW5jdGlvbiBSaShhLGIpe2lmKDM9PT1hLnRhZyltayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe21rKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWpqfHwhamouaGFzKGQpKSl7YT1OaShiLGEpO2E9aWooYyxhLDEwNzM3NDE4MjMpO0RnKGMsYSk7Yz1LaihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIGRrKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VT09PWEmJlc9PT1jP1g9PT11anx8WD09PXRqJiYxMDczNzQxODIzPT09eGomJmNnKCktYmo8Q2o/VGooYSxXKTpCaj0hMDpQaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YyYmKGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wLGEuZmluaXNoZWRXb3JrPW51bGwpLFooYSkpKX1mdW5jdGlvbiBkaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPVBnKCksYj1RZyhiLGEsbnVsbCkpO2E9S2ooYSxiKTtudWxsIT09YSYmWihhKX12YXIgZ2s7XG5naz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXdnPSEwO2Vsc2V7aWYoZDxjKXt3Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzp3aShiKTtsaSgpO2JyZWFrO2Nhc2UgNTpvaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0Om1oKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpzZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4geWkoYSxiLGMpO0koTSxNLmN1cnJlbnQmXG4xLGIpO2I9b2koYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEsYik7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gQmkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQsYik7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuIG9pKGEsYixjKX13Zz0hMX19ZWxzZSB3Zz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLEouY3VycmVudCk7dmcoYixjKTtlPUloKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtNaCgpO2lmKEwoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZPZyhiLGQsZyxhKTtlLnVwZGF0ZXI9U2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtXZyhiLGQsYSxjKTtiPXZpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO1ZhKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O1xuZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1uayhlKTthPW1nKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPXNpKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxOmI9dWkobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDExOmI9bmkobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE0OmI9cGkobnVsbCxiLGUsbWcoZS50eXBlLGEpLGQsYyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLHNpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLHVpKGEsYixkLGUsYyk7Y2FzZSAzOndpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50OlxubnVsbDtIZyhiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKWxpKCksYj1vaShhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpZGk9cmUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxjaT1iLGU9ZWk9ITA7aWYoZSlmb3IoYz1naChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksbGkoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBvaChiKSxudWxsPT09YSYmaWkoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixvZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmb2UoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksdGkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPVxuYi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmaWkoYiksbnVsbDtjYXNlIDEzOnJldHVybiB5aShhLGIsYyk7Y2FzZSA0OnJldHVybiBtaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1maChiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSxuaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O1xuZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7c2coYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPW9mKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9b2koYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPUJnKGMsbnVsbCksbC50YWc9MixEZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPVxuYyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTt1ZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdmcoYixjKSxlPXhnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7XG5jYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPW1nKGUsYi5wZW5kaW5nUHJvcHMpLGY9bWcoZS50eXBlLGYpLHBpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiByaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEpmKGIpKTphPSExLHZnKGIsYyksVWcoYixkLGUsYyksV2coYixkLGUsYyksdmkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBCaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBraz1udWxsLFdpPW51bGw7XG5mdW5jdGlvbiBvayhhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtraz1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtXaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIHBrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gZ2koYSxiLGMsZCl7cmV0dXJuIG5ldyBwayhhLGIsYyxkKX1cbmZ1bmN0aW9uIHFpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gbmsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIHFpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1PYSlyZXR1cm4gMTE7aWYoYT09PVJhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIGFoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9Z2koYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBjaChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcWkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgSWE6cmV0dXJuIGVoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgTmE6Zz04O2V8PTc7YnJlYWs7Y2FzZSBKYTpnPTg7ZXw9MTticmVhaztjYXNlIEthOnJldHVybiBhPWdpKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9S2EsYS50eXBlPUthLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgUGE6cmV0dXJuIGE9Z2koMTMsYyxiLGUpLGEudHlwZT1QYSxhLmVsZW1lbnRUeXBlPVBhLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgUWE6cmV0dXJuIGE9Z2koMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9UWEsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIExhOmc9XG4xMDticmVhayBhO2Nhc2UgTWE6Zz05O2JyZWFrIGE7Y2FzZSBPYTpnPTExO2JyZWFrIGE7Y2FzZSBSYTpnPTE0O2JyZWFrIGE7Y2FzZSBTYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9Z2koZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBlaChhLGIsYyxkKXthPWdpKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBiaChhLGIsYyl7YT1naSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBkaChhLGIsYyl7Yj1naSg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBQaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIE5qKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gUmooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiByayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1QZygpLGc9TWcuc3VzcGVuc2U7Zj1RZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihlYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9QmcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTtEZyhlLGIpO1JnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gc2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiB0ayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gdWsoYSxiKXt0ayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmdGsoYSxiKX1cbmZ1bmN0aW9uIHZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBxayhhLGIsYyksZT1naSgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDthW3dlXT1kLmN1cnJlbnQ7YyYmMCE9PWImJndjKDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH12ay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7cmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCx2b2lkIDA9PT1iP251bGw6Yil9O3ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPXZvaWQgMD09PWE/bnVsbDphLGQ9Yi5jb250YWluZXJJbmZvO3JrKG51bGwsYixudWxsLGZ1bmN0aW9uKCl7ZFt3ZV09bnVsbDtudWxsIT09YyYmYygpfSl9O1xuZnVuY3Rpb24gd2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHlrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgdmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB6ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXNrKGcpO2guY2FsbChhKX19cmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj15ayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1zayhnKTtrLmNhbGwoYSl9fWNrKGZ1bmN0aW9uKCl7cmsoYixnLGEsZSl9KX1yZXR1cm4gc2soZyl9ZnVuY3Rpb24gQWsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpIYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmpjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxnKFBnKCksMTUwLDEwMCk7UmcoYSxiKTt1ayhhLGIpfX07a2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7UGcoKTt2YXIgYj1rZysrO1JnKGEsYik7dWsoYSxiKX19O2xjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVBnKCk7Yj1RZyhiLGEsbnVsbCk7UmcoYSxiKTt1ayhhLGIpfX07XG5aYT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkViKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT15ZShkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7emIoZCk7RWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOk1iKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZKYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O2ViPWJrO1xuZmI9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9VDtUfD00O3RyeXtyZXR1cm4gZmcoOTgsYS5iaW5kKG51bGwsYixjLGQpKX1maW5hbGx5e1Q9ZSxUPT09UyYmamcoKX19O2diPWZ1bmN0aW9uKCl7KFQmKDF8b2p8cGopKT09PVMmJihhaygpLFNqKCkpfTtoYj1mdW5jdGlvbihhLGIpe3ZhciBjPVQ7VHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtUPWMsVD09PVMmJmpnKCl9fTtmdW5jdGlvbiBCayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCF3ayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBBayhhLGIsbnVsbCxjKX1cbnZhciBDaz17Y3JlYXRlUG9ydGFsOkJrLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aWMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtpZighd2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gemsobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7aWYoIXdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIHprKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtpZighd2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtcbmlmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIHprKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe2lmKCF3ayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oY2soZnVuY3Rpb24oKXt6ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2Fbd2VdPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEJrLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpiayxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1UO1R8PTE7dHJ5e3JldHVybiBmZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtUPWMsamcoKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0NjLFxueGUseWUsQ2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLGZhLFNjLGZ1bmN0aW9uKGEpe3lhKGEsUmMpfSxjYixkYixQZCxCYSxTaix7Y3VycmVudDohMX1dfX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gb2sobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOkVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1pYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkZjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTIuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIERrPXtkZWZhdWx0OkNrfSxFaz1EayYmQ2t8fERrO21vZHVsZS5leHBvcnRzPUVrLmRlZmF1bHR8fEVrO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOC4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPU1hdGguZmxvb3IoKGMtMSkvMiksZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7ZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHooYSl7cmV0dXJuIHkoYSk9PT1tfVxuZXhwb3J0cy50eXBlT2Y9eTtleHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT12fHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXgpfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpfHx5KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXo7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09dH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNvcHlUb0NsaXBib2FyZCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jb3B5VG9DbGlwYm9hcmQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3B5LXRvLWNsaXBib2FyZFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIENvcHlUb0NsaXBib2FyZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvcHlUb0NsaXBib2FyZCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvcHlUb0NsaXBib2FyZCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb3B5VG9DbGlwYm9hcmQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQ29weVRvQ2xpcGJvYXJkKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25DbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRleHQgPSBfdGhpcyRwcm9wcy50ZXh0LFxuICAgICAgICAgIG9uQ29weSA9IF90aGlzJHByb3BzLm9uQ29weSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIG9wdGlvbnMgPSBfdGhpcyRwcm9wcy5vcHRpb25zO1xuXG4gICAgICB2YXIgZWxlbSA9IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICAgIHZhciByZXN1bHQgPSAoMCwgX2NvcHlUb0NsaXBib2FyZFtcImRlZmF1bHRcIl0pKHRleHQsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAob25Db3B5KSB7XG4gICAgICAgIG9uQ29weSh0ZXh0LCByZXN1bHQpO1xuICAgICAgfSAvLyBCeXBhc3Mgb25DbGljayBpZiBpdCB3YXMgcHJlc2VudFxuXG5cbiAgICAgIGlmIChlbGVtICYmIGVsZW0ucHJvcHMgJiYgdHlwZW9mIGVsZW0ucHJvcHMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbGVtLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvcHlUb0NsaXBib2FyZCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIF90ZXh0ID0gX3RoaXMkcHJvcHMyLnRleHQsXG4gICAgICAgICAgX29uQ29weSA9IF90aGlzJHByb3BzMi5vbkNvcHksXG4gICAgICAgICAgX29wdGlvbnMgPSBfdGhpcyRwcm9wczIub3B0aW9ucyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczIsIFtcInRleHRcIiwgXCJvbkNvcHlcIiwgXCJvcHRpb25zXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgICB2YXIgZWxlbSA9IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudChlbGVtLCBfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcywge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xpY2tcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29weVRvQ2xpcGJvYXJkO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQpO1xuXG5leHBvcnRzLkNvcHlUb0NsaXBib2FyZCA9IENvcHlUb0NsaXBib2FyZDtcblxuX2RlZmluZVByb3BlcnR5KENvcHlUb0NsaXBib2FyZCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBvbkNvcHk6IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogdW5kZWZpbmVkXG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGRlc2VsZWN0Q3VycmVudCA9IHJlcXVpcmUoXCJ0b2dnbGUtc2VsZWN0aW9uXCIpO1xuXG52YXIgZGVmYXVsdE1lc3NhZ2UgPSBcIkNvcHkgdG8gY2xpcGJvYXJkOiAje2tleX0sIEVudGVyXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdChtZXNzYWdlKSB7XG4gIHZhciBjb3B5S2V5ID0gKC9tYWMgb3MgeC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPyBcIuKMmFwiIDogXCJDdHJsXCIpICsgXCIrQ1wiO1xuICByZXR1cm4gbWVzc2FnZS5yZXBsYWNlKC8je1xccyprZXlcXHMqfS9nLCBjb3B5S2V5KTtcbn1cblxuZnVuY3Rpb24gY29weSh0ZXh0LCBvcHRpb25zKSB7XG4gIHZhciBkZWJ1ZyxcbiAgICBtZXNzYWdlLFxuICAgIHJlc2VsZWN0UHJldmlvdXMsXG4gICAgcmFuZ2UsXG4gICAgc2VsZWN0aW9uLFxuICAgIG1hcmssXG4gICAgc3VjY2VzcyA9IGZhbHNlO1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZGVidWcgPSBvcHRpb25zLmRlYnVnIHx8IGZhbHNlO1xuICB0cnkge1xuICAgIHJlc2VsZWN0UHJldmlvdXMgPSBkZXNlbGVjdEN1cnJlbnQoKTtcblxuICAgIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcblxuICAgIG1hcmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBtYXJrLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAvLyByZXNldCB1c2VyIHN0eWxlcyBmb3Igc3BhbiBlbGVtZW50XG4gICAgbWFyay5zdHlsZS5hbGwgPSBcInVuc2V0XCI7XG4gICAgLy8gcHJldmVudHMgc2Nyb2xsaW5nIHRvIHRoZSBlbmQgb2YgdGhlIHBhZ2VcbiAgICBtYXJrLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIG1hcmsuc3R5bGUudG9wID0gMDtcbiAgICBtYXJrLnN0eWxlLmNsaXAgPSBcInJlY3QoMCwgMCwgMCwgMClcIjtcbiAgICAvLyB1c2VkIHRvIHByZXNlcnZlIHNwYWNlcyBhbmQgbGluZSBicmVha3NcbiAgICBtYXJrLnN0eWxlLndoaXRlU3BhY2UgPSBcInByZVwiO1xuICAgIC8vIGRvIG5vdCBpbmhlcml0IHVzZXItc2VsZWN0IChpdCBtYXkgYmUgYG5vbmVgKVxuICAgIG1hcmsuc3R5bGUud2Via2l0VXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUuTW96VXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUubXNVc2VyU2VsZWN0ID0gXCJ0ZXh0XCI7XG4gICAgbWFyay5zdHlsZS51c2VyU2VsZWN0ID0gXCJ0ZXh0XCI7XG4gICAgbWFyay5hZGRFdmVudExpc3RlbmVyKFwiY29weVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5jbGlwYm9hcmREYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YShvcHRpb25zLmZvcm1hdCwgdGV4dCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1hcmspO1xuXG4gICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG1hcmspO1xuICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG5cbiAgICB2YXIgc3VjY2Vzc2Z1bCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICBpZiAoIXN1Y2Nlc3NmdWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNvcHkgY29tbWFuZCB3YXMgdW5zdWNjZXNzZnVsXCIpO1xuICAgIH1cbiAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVidWcgJiYgY29uc29sZS5lcnJvcihcInVuYWJsZSB0byBjb3B5IHVzaW5nIGV4ZWNDb21tYW5kOiBcIiwgZXJyKTtcbiAgICBkZWJ1ZyAmJiBjb25zb2xlLndhcm4oXCJ0cnlpbmcgSUUgc3BlY2lmaWMgc3R1ZmZcIik7XG4gICAgdHJ5IHtcbiAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEob3B0aW9ucy5mb3JtYXQgfHwgXCJ0ZXh0XCIsIHRleHQpO1xuICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBkZWJ1ZyAmJiBjb25zb2xlLmVycm9yKFwidW5hYmxlIHRvIGNvcHkgdXNpbmcgY2xpcGJvYXJkRGF0YTogXCIsIGVycik7XG4gICAgICBkZWJ1ZyAmJiBjb25zb2xlLmVycm9yKFwiZmFsbGluZyBiYWNrIHRvIHByb21wdFwiKTtcbiAgICAgIG1lc3NhZ2UgPSBmb3JtYXQoXCJtZXNzYWdlXCIgaW4gb3B0aW9ucyA/IG9wdGlvbnMubWVzc2FnZSA6IGRlZmF1bHRNZXNzYWdlKTtcbiAgICAgIHdpbmRvdy5wcm9tcHQobWVzc2FnZSwgdGV4dCk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0aW9uLnJlbW92ZVJhbmdlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlUmFuZ2UocmFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXJrKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG1hcmspO1xuICAgIH1cbiAgICByZXNlbGVjdFByZXZpb3VzKCk7XG4gIH1cblxuICByZXR1cm4gc3VjY2Vzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICBpZiAoIXNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuICB9XG4gIHZhciBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gIHZhciByYW5nZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3Rpb24ucmFuZ2VDb3VudDsgaSsrKSB7XG4gICAgcmFuZ2VzLnB1c2goc2VsZWN0aW9uLmdldFJhbmdlQXQoaSkpO1xuICB9XG5cbiAgc3dpdGNoIChhY3RpdmUudGFnTmFtZS50b1VwcGVyQ2FzZSgpKSB7IC8vIC50b1VwcGVyQ2FzZSBoYW5kbGVzIFhIVE1MXG4gICAgY2FzZSAnSU5QVVQnOlxuICAgIGNhc2UgJ1RFWFRBUkVBJzpcbiAgICAgIGFjdGl2ZS5ibHVyKCk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBhY3RpdmUgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZWN0aW9uLnR5cGUgPT09ICdDYXJldCcgJiZcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoIXNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgICByYW5nZXMuZm9yRWFjaChmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWN0aXZlICYmXG4gICAgYWN0aXZlLmZvY3VzKCk7XG4gIH07XG59O1xuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZVxuLy8gYnJvd3NlciB0aGlzIGlzIGEgbGl0dGxlIGNvbXBsaWNhdGVkIGR1ZSB0byB1bmtub3duIHF1YWxpdHkgb2YgTWF0aC5yYW5kb20oKVxuLy8gYW5kIGluY29uc2lzdGVudCBzdXBwb3J0IGZvciB0aGUgYGNyeXB0b2AgQVBJLiAgV2UgZG8gdGhlIGJlc3Qgd2UgY2FuIHZpYVxuLy8gZmVhdHVyZS1kZXRlY3Rpb25cblxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvXG4vLyBpbXBsZW1lbnRhdGlvbi4gQWxzbywgZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0bykpO1xuXG5pZiAoZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cbiIsIi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xudmFyIGJ5dGVUb0hleCA9IFtdO1xuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXhbaV0gPSAoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpO1xufVxuXG5mdW5jdGlvbiBieXRlc1RvVXVpZChidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IG9mZnNldCB8fCAwO1xuICB2YXIgYnRoID0gYnl0ZVRvSGV4O1xuICAvLyBqb2luIHVzZWQgdG8gZml4IG1lbW9yeSBpc3N1ZSBjYXVzZWQgYnkgY29uY2F0ZW5hdGlvbjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzE3NSNjNFxuICByZXR1cm4gKFtidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCBcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dXSkuam9pbignJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXNUb1V1aWQ7XG4iLCJ2YXIgQml0Qnl0ZSA9IHJlcXVpcmUoJy4vOEJpdEJ5dGUnKTtcbnZhciBSU0Jsb2NrID0gcmVxdWlyZSgnLi9SU0Jsb2NrJyk7XG52YXIgQml0QnVmZmVyID0gcmVxdWlyZSgnLi9CaXRCdWZmZXInKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgUG9seW5vbWlhbCA9IHJlcXVpcmUoJy4vUG9seW5vbWlhbCcpO1xuXG5mdW5jdGlvbiBRUkNvZGUodHlwZU51bWJlciwgZXJyb3JDb3JyZWN0TGV2ZWwpIHtcblx0dGhpcy50eXBlTnVtYmVyID0gdHlwZU51bWJlcjtcblx0dGhpcy5lcnJvckNvcnJlY3RMZXZlbCA9IGVycm9yQ29ycmVjdExldmVsO1xuXHR0aGlzLm1vZHVsZXMgPSBudWxsO1xuXHR0aGlzLm1vZHVsZUNvdW50ID0gMDtcblx0dGhpcy5kYXRhQ2FjaGUgPSBudWxsO1xuXHR0aGlzLmRhdGFMaXN0ID0gW107XG59XG5cbi8vIGZvciBjbGllbnQgc2lkZSBtaW5pZmljYXRpb25cbnZhciBwcm90byA9IFFSQ29kZS5wcm90b3R5cGU7XG5cbnByb3RvLmFkZERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG5cdHZhciBuZXdEYXRhID0gbmV3IEJpdEJ5dGUoZGF0YSk7XG5cdHRoaXMuZGF0YUxpc3QucHVzaChuZXdEYXRhKTtcblx0dGhpcy5kYXRhQ2FjaGUgPSBudWxsO1xufTtcblxucHJvdG8uaXNEYXJrID0gZnVuY3Rpb24ocm93LCBjb2wpIHtcblx0aWYgKHJvdyA8IDAgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSByb3cgfHwgY29sIDwgMCB8fCB0aGlzLm1vZHVsZUNvdW50IDw9IGNvbCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihyb3cgKyBcIixcIiArIGNvbCk7XG5cdH1cblx0cmV0dXJuIHRoaXMubW9kdWxlc1tyb3ddW2NvbF07XG59O1xuXG5wcm90by5nZXRNb2R1bGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5tb2R1bGVDb3VudDtcbn07XG5cbnByb3RvLm1ha2UgPSBmdW5jdGlvbigpIHtcblx0Ly8gQ2FsY3VsYXRlIGF1dG9tYXRpY2FsbHkgdHlwZU51bWJlciBpZiBwcm92aWRlZCBpcyA8IDFcblx0aWYgKHRoaXMudHlwZU51bWJlciA8IDEgKXtcblx0XHR2YXIgdHlwZU51bWJlciA9IDE7XG5cdFx0Zm9yICh0eXBlTnVtYmVyID0gMTsgdHlwZU51bWJlciA8IDQwOyB0eXBlTnVtYmVyKyspIHtcblx0XHRcdHZhciByc0Jsb2NrcyA9IFJTQmxvY2suZ2V0UlNCbG9ja3ModHlwZU51bWJlciwgdGhpcy5lcnJvckNvcnJlY3RMZXZlbCk7XG5cblx0XHRcdHZhciBidWZmZXIgPSBuZXcgQml0QnVmZmVyKCk7XG5cdFx0XHR2YXIgdG90YWxEYXRhQ291bnQgPSAwO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByc0Jsb2Nrcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0b3RhbERhdGFDb3VudCArPSByc0Jsb2Nrc1tpXS5kYXRhQ291bnQ7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgZGF0YSA9IHRoaXMuZGF0YUxpc3RbaV07XG5cdFx0XHRcdGJ1ZmZlci5wdXQoZGF0YS5tb2RlLCA0KTtcblx0XHRcdFx0YnVmZmVyLnB1dChkYXRhLmdldExlbmd0aCgpLCB1dGlsLmdldExlbmd0aEluQml0cyhkYXRhLm1vZGUsIHR5cGVOdW1iZXIpICk7XG5cdFx0XHRcdGRhdGEud3JpdGUoYnVmZmVyKTtcblx0XHRcdH1cblx0XHRcdGlmIChidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKCkgPD0gdG90YWxEYXRhQ291bnQgKiA4KVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0dGhpcy50eXBlTnVtYmVyID0gdHlwZU51bWJlcjtcblx0fVxuXHR0aGlzLm1ha2VJbXBsKGZhbHNlLCB0aGlzLmdldEJlc3RNYXNrUGF0dGVybigpICk7XG59O1xuXG5wcm90by5tYWtlSW1wbCA9IGZ1bmN0aW9uKHRlc3QsIG1hc2tQYXR0ZXJuKSB7XG5cdFxuXHR0aGlzLm1vZHVsZUNvdW50ID0gdGhpcy50eXBlTnVtYmVyICogNCArIDE3O1xuXHR0aGlzLm1vZHVsZXMgPSBuZXcgQXJyYXkodGhpcy5tb2R1bGVDb3VudCk7XG5cdFxuXHRmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLm1vZHVsZUNvdW50OyByb3crKykge1xuXHRcdFxuXHRcdHRoaXMubW9kdWxlc1tyb3ddID0gbmV3IEFycmF5KHRoaXMubW9kdWxlQ291bnQpO1xuXHRcdFxuXHRcdGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMubW9kdWxlQ291bnQ7IGNvbCsrKSB7XG5cdFx0XHR0aGlzLm1vZHVsZXNbcm93XVtjb2xdID0gbnVsbDsvLyhjb2wgKyByb3cpICUgMztcblx0XHR9XG5cdH1cblxuXHR0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4oMCwgMCk7XG5cdHRoaXMuc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybih0aGlzLm1vZHVsZUNvdW50IC0gNywgMCk7XG5cdHRoaXMuc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybigwLCB0aGlzLm1vZHVsZUNvdW50IC0gNyk7XG5cdHRoaXMuc2V0dXBQb3NpdGlvbkFkanVzdFBhdHRlcm4oKTtcblx0dGhpcy5zZXR1cFRpbWluZ1BhdHRlcm4oKTtcblx0dGhpcy5zZXR1cFR5cGVJbmZvKHRlc3QsIG1hc2tQYXR0ZXJuKTtcblx0XG5cdGlmICh0aGlzLnR5cGVOdW1iZXIgPj0gNykge1xuXHRcdHRoaXMuc2V0dXBUeXBlTnVtYmVyKHRlc3QpO1xuXHR9XG5cblx0aWYgKHRoaXMuZGF0YUNhY2hlID09IG51bGwpIHtcblx0XHR0aGlzLmRhdGFDYWNoZSA9IFFSQ29kZS5jcmVhdGVEYXRhKHRoaXMudHlwZU51bWJlciwgdGhpcy5lcnJvckNvcnJlY3RMZXZlbCwgdGhpcy5kYXRhTGlzdCk7XG5cdH1cblxuXHR0aGlzLm1hcERhdGEodGhpcy5kYXRhQ2FjaGUsIG1hc2tQYXR0ZXJuKTtcbn07XG5cbnByb3RvLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4gPSBmdW5jdGlvbihyb3csIGNvbCkgIHtcblx0XG5cdGZvciAodmFyIHIgPSAtMTsgciA8PSA3OyByKyspIHtcblx0XHRcblx0XHRpZiAocm93ICsgciA8PSAtMSB8fCB0aGlzLm1vZHVsZUNvdW50IDw9IHJvdyArIHIpIGNvbnRpbnVlO1xuXHRcdFxuXHRcdGZvciAodmFyIGMgPSAtMTsgYyA8PSA3OyBjKyspIHtcblx0XHRcdFxuXHRcdFx0aWYgKGNvbCArIGMgPD0gLTEgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSBjb2wgKyBjKSBjb250aW51ZTtcblx0XHRcdFxuXHRcdFx0aWYgKCAoMCA8PSByICYmIHIgPD0gNiAmJiAoYyA9PSAwIHx8IGMgPT0gNikgKVxuXHRcdFx0XHRcdHx8ICgwIDw9IGMgJiYgYyA8PSA2ICYmIChyID09IDAgfHwgciA9PSA2KSApXG5cdFx0XHRcdFx0fHwgKDIgPD0gciAmJiByIDw9IDQgJiYgMiA8PSBjICYmIGMgPD0gNCkgKSB7XG5cdFx0XHRcdHRoaXMubW9kdWxlc1tyb3cgKyByXVtjb2wgKyBjXSA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLm1vZHVsZXNbcm93ICsgcl1bY29sICsgY10gPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XHRcdFxuXHR9XHRcdFxufTtcblxucHJvdG8uZ2V0QmVzdE1hc2tQYXR0ZXJuID0gZnVuY3Rpb24oKSB7XG5cblx0dmFyIG1pbkxvc3RQb2ludCA9IDA7XG5cdHZhciBwYXR0ZXJuID0gMDtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHRcdFxuXHRcdHRoaXMubWFrZUltcGwodHJ1ZSwgaSk7XG5cblx0XHR2YXIgbG9zdFBvaW50ID0gdXRpbC5nZXRMb3N0UG9pbnQodGhpcyk7XG5cblx0XHRpZiAoaSA9PSAwIHx8IG1pbkxvc3RQb2ludCA+ICBsb3N0UG9pbnQpIHtcblx0XHRcdG1pbkxvc3RQb2ludCA9IGxvc3RQb2ludDtcblx0XHRcdHBhdHRlcm4gPSBpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBwYXR0ZXJuO1xufTtcblxucHJvdG8uY3JlYXRlTW92aWVDbGlwID0gZnVuY3Rpb24odGFyZ2V0X21jLCBpbnN0YW5jZV9uYW1lLCBkZXB0aCkge1xuXG5cdHZhciBxcl9tYyA9IHRhcmdldF9tYy5jcmVhdGVFbXB0eU1vdmllQ2xpcChpbnN0YW5jZV9uYW1lLCBkZXB0aCk7XG5cdHZhciBjcyA9IDE7XG5cblx0dGhpcy5tYWtlKCk7XG5cblx0Zm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5tb2R1bGVzLmxlbmd0aDsgcm93KyspIHtcblx0XHRcblx0XHR2YXIgeSA9IHJvdyAqIGNzO1xuXHRcdFxuXHRcdGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMubW9kdWxlc1tyb3ddLmxlbmd0aDsgY29sKyspIHtcblxuXHRcdFx0dmFyIHggPSBjb2wgKiBjcztcblx0XHRcdHZhciBkYXJrID0gdGhpcy5tb2R1bGVzW3Jvd11bY29sXTtcblx0XHRcblx0XHRcdGlmIChkYXJrKSB7XG5cdFx0XHRcdHFyX21jLmJlZ2luRmlsbCgwLCAxMDApO1xuXHRcdFx0XHRxcl9tYy5tb3ZlVG8oeCwgeSk7XG5cdFx0XHRcdHFyX21jLmxpbmVUbyh4ICsgY3MsIHkpO1xuXHRcdFx0XHRxcl9tYy5saW5lVG8oeCArIGNzLCB5ICsgY3MpO1xuXHRcdFx0XHRxcl9tYy5saW5lVG8oeCwgeSArIGNzKTtcblx0XHRcdFx0cXJfbWMuZW5kRmlsbCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmV0dXJuIHFyX21jO1xufTtcblxucHJvdG8uc2V0dXBUaW1pbmdQYXR0ZXJuID0gZnVuY3Rpb24oKSB7XG5cdFxuXHRmb3IgKHZhciByID0gODsgciA8IHRoaXMubW9kdWxlQ291bnQgLSA4OyByKyspIHtcblx0XHRpZiAodGhpcy5tb2R1bGVzW3JdWzZdICE9IG51bGwpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHR0aGlzLm1vZHVsZXNbcl1bNl0gPSAociAlIDIgPT0gMCk7XG5cdH1cblxuXHRmb3IgKHZhciBjID0gODsgYyA8IHRoaXMubW9kdWxlQ291bnQgLSA4OyBjKyspIHtcblx0XHRpZiAodGhpcy5tb2R1bGVzWzZdW2NdICE9IG51bGwpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHR0aGlzLm1vZHVsZXNbNl1bY10gPSAoYyAlIDIgPT0gMCk7XG5cdH1cbn07XG5cbnByb3RvLnNldHVwUG9zaXRpb25BZGp1c3RQYXR0ZXJuID0gZnVuY3Rpb24oKSB7XG5cblx0dmFyIHBvcyA9IHV0aWwuZ2V0UGF0dGVyblBvc2l0aW9uKHRoaXMudHlwZU51bWJlcik7XG5cdFxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xuXHRcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHBvcy5sZW5ndGg7IGorKykge1xuXHRcdFxuXHRcdFx0dmFyIHJvdyA9IHBvc1tpXTtcblx0XHRcdHZhciBjb2wgPSBwb3Nbal07XG5cdFx0XHRcblx0XHRcdGlmICh0aGlzLm1vZHVsZXNbcm93XVtjb2xdICE9IG51bGwpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGZvciAodmFyIHIgPSAtMjsgciA8PSAyOyByKyspIHtcblx0XHRcdFxuXHRcdFx0XHRmb3IgKHZhciBjID0gLTI7IGMgPD0gMjsgYysrKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdGlmIChyID09IC0yIHx8IHIgPT0gMiB8fCBjID09IC0yIHx8IGMgPT0gMlxuXHRcdFx0XHRcdFx0XHR8fCAociA9PSAwICYmIGMgPT0gMCkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm1vZHVsZXNbcm93ICsgcl1bY29sICsgY10gPSB0cnVlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLm1vZHVsZXNbcm93ICsgcl1bY29sICsgY10gPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbnByb3RvLnNldHVwVHlwZU51bWJlciA9IGZ1bmN0aW9uKHRlc3QpIHtcblxuXHR2YXIgYml0cyA9IHV0aWwuZ2V0QkNIVHlwZU51bWJlcih0aGlzLnR5cGVOdW1iZXIpO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMTg7IGkrKykge1xuXHRcdHZhciBtb2QgPSAoIXRlc3QgJiYgKCAoYml0cyA+PiBpKSAmIDEpID09IDEpO1xuXHRcdHRoaXMubW9kdWxlc1tNYXRoLmZsb29yKGkgLyAzKV1baSAlIDMgKyB0aGlzLm1vZHVsZUNvdW50IC0gOCAtIDNdID0gbW9kO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxODsgaSsrKSB7XG5cdFx0dmFyIG1vZCA9ICghdGVzdCAmJiAoIChiaXRzID4+IGkpICYgMSkgPT0gMSk7XG5cdFx0dGhpcy5tb2R1bGVzW2kgJSAzICsgdGhpcy5tb2R1bGVDb3VudCAtIDggLSAzXVtNYXRoLmZsb29yKGkgLyAzKV0gPSBtb2Q7XG5cdH1cbn07XG5cbnByb3RvLnNldHVwVHlwZUluZm8gPSBmdW5jdGlvbih0ZXN0LCBtYXNrUGF0dGVybikge1xuXG5cdHZhciBkYXRhID0gKHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwgPDwgMykgfCBtYXNrUGF0dGVybjtcblx0dmFyIGJpdHMgPSB1dGlsLmdldEJDSFR5cGVJbmZvKGRhdGEpO1xuXG5cdC8vIHZlcnRpY2FsXHRcdFxuXHRmb3IgKHZhciBpID0gMDsgaSA8IDE1OyBpKyspIHtcblxuXHRcdHZhciBtb2QgPSAoIXRlc3QgJiYgKCAoYml0cyA+PiBpKSAmIDEpID09IDEpO1xuXG5cdFx0aWYgKGkgPCA2KSB7XG5cdFx0XHR0aGlzLm1vZHVsZXNbaV1bOF0gPSBtb2Q7XG5cdFx0fSBlbHNlIGlmIChpIDwgOCkge1xuXHRcdFx0dGhpcy5tb2R1bGVzW2kgKyAxXVs4XSA9IG1vZDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5tb2R1bGVzW3RoaXMubW9kdWxlQ291bnQgLSAxNSArIGldWzhdID0gbW9kO1xuXHRcdH1cblx0fVxuXG5cdC8vIGhvcml6b250YWxcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxNTsgaSsrKSB7XG5cblx0XHR2YXIgbW9kID0gKCF0ZXN0ICYmICggKGJpdHMgPj4gaSkgJiAxKSA9PSAxKTtcblx0XHRcblx0XHRpZiAoaSA8IDgpIHtcblx0XHRcdHRoaXMubW9kdWxlc1s4XVt0aGlzLm1vZHVsZUNvdW50IC0gaSAtIDFdID0gbW9kO1xuXHRcdH0gZWxzZSBpZiAoaSA8IDkpIHtcblx0XHRcdHRoaXMubW9kdWxlc1s4XVsxNSAtIGkgLSAxICsgMV0gPSBtb2Q7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubW9kdWxlc1s4XVsxNSAtIGkgLSAxXSA9IG1vZDtcblx0XHR9XG5cdH1cblxuXHQvLyBmaXhlZCBtb2R1bGVcblx0dGhpcy5tb2R1bGVzW3RoaXMubW9kdWxlQ291bnQgLSA4XVs4XSA9ICghdGVzdCk7XG59O1xuXG5wcm90by5tYXBEYXRhID0gZnVuY3Rpb24oZGF0YSwgbWFza1BhdHRlcm4pIHtcblx0XG5cdHZhciBpbmMgPSAtMTtcblx0dmFyIHJvdyA9IHRoaXMubW9kdWxlQ291bnQgLSAxO1xuXHR2YXIgYml0SW5kZXggPSA3O1xuXHR2YXIgYnl0ZUluZGV4ID0gMDtcblx0XG5cdGZvciAodmFyIGNvbCA9IHRoaXMubW9kdWxlQ291bnQgLSAxOyBjb2wgPiAwOyBjb2wgLT0gMikge1xuXG5cdFx0aWYgKGNvbCA9PSA2KSBjb2wtLTtcblxuXHRcdHdoaWxlICh0cnVlKSB7XG5cblx0XHRcdGZvciAodmFyIGMgPSAwOyBjIDwgMjsgYysrKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAodGhpcy5tb2R1bGVzW3Jvd11bY29sIC0gY10gPT0gbnVsbCkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHZhciBkYXJrID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoYnl0ZUluZGV4IDwgZGF0YS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGRhcmsgPSAoICggKGRhdGFbYnl0ZUluZGV4XSA+Pj4gYml0SW5kZXgpICYgMSkgPT0gMSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIG1hc2sgPSB1dGlsLmdldE1hc2sobWFza1BhdHRlcm4sIHJvdywgY29sIC0gYyk7XG5cblx0XHRcdFx0XHRpZiAobWFzaykge1xuXHRcdFx0XHRcdFx0ZGFyayA9ICFkYXJrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLm1vZHVsZXNbcm93XVtjb2wgLSBjXSA9IGRhcms7XG5cdFx0XHRcdFx0Yml0SW5kZXgtLTtcblxuXHRcdFx0XHRcdGlmIChiaXRJbmRleCA9PSAtMSkge1xuXHRcdFx0XHRcdFx0Ynl0ZUluZGV4Kys7XG5cdFx0XHRcdFx0XHRiaXRJbmRleCA9IDc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0cm93ICs9IGluYztcblxuXHRcdFx0aWYgKHJvdyA8IDAgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSByb3cpIHtcblx0XHRcdFx0cm93IC09IGluYztcblx0XHRcdFx0aW5jID0gLWluYztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5RUkNvZGUuUEFEMCA9IDB4RUM7XG5RUkNvZGUuUEFEMSA9IDB4MTE7XG5cblFSQ29kZS5jcmVhdGVEYXRhID0gZnVuY3Rpb24odHlwZU51bWJlciwgZXJyb3JDb3JyZWN0TGV2ZWwsIGRhdGFMaXN0KSB7XG5cdFxuXHR2YXIgcnNCbG9ja3MgPSBSU0Jsb2NrLmdldFJTQmxvY2tzKHR5cGVOdW1iZXIsIGVycm9yQ29ycmVjdExldmVsKTtcblx0XG5cdHZhciBidWZmZXIgPSBuZXcgQml0QnVmZmVyKCk7XG5cdFxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFMaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGRhdGEgPSBkYXRhTGlzdFtpXTtcblx0XHRidWZmZXIucHV0KGRhdGEubW9kZSwgNCk7XG5cdFx0YnVmZmVyLnB1dChkYXRhLmdldExlbmd0aCgpLCB1dGlsLmdldExlbmd0aEluQml0cyhkYXRhLm1vZGUsIHR5cGVOdW1iZXIpICk7XG5cdFx0ZGF0YS53cml0ZShidWZmZXIpO1xuXHR9XG5cblx0Ly8gY2FsYyBudW0gbWF4IGRhdGEuXG5cdHZhciB0b3RhbERhdGFDb3VudCA9IDA7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcnNCbG9ja3MubGVuZ3RoOyBpKyspIHtcblx0XHR0b3RhbERhdGFDb3VudCArPSByc0Jsb2Nrc1tpXS5kYXRhQ291bnQ7XG5cdH1cblxuXHRpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpID4gdG90YWxEYXRhQ291bnQgKiA4KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY29kZSBsZW5ndGggb3ZlcmZsb3cuIChcIlxuXHRcdFx0KyBidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKClcblx0XHRcdCsgXCI+XCJcblx0XHRcdCsgIHRvdGFsRGF0YUNvdW50ICogOFxuXHRcdFx0KyBcIilcIik7XG5cdH1cblxuXHQvLyBlbmQgY29kZVxuXHRpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpICsgNCA8PSB0b3RhbERhdGFDb3VudCAqIDgpIHtcblx0XHRidWZmZXIucHV0KDAsIDQpO1xuXHR9XG5cblx0Ly8gcGFkZGluZ1xuXHR3aGlsZSAoYnVmZmVyLmdldExlbmd0aEluQml0cygpICUgOCAhPSAwKSB7XG5cdFx0YnVmZmVyLnB1dEJpdChmYWxzZSk7XG5cdH1cblxuXHQvLyBwYWRkaW5nXG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0XG5cdFx0aWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSA+PSB0b3RhbERhdGFDb3VudCAqIDgpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRidWZmZXIucHV0KFFSQ29kZS5QQUQwLCA4KTtcblx0XHRcblx0XHRpZiAoYnVmZmVyLmdldExlbmd0aEluQml0cygpID49IHRvdGFsRGF0YUNvdW50ICogOCkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGJ1ZmZlci5wdXQoUVJDb2RlLlBBRDEsIDgpO1xuXHR9XG5cblx0cmV0dXJuIFFSQ29kZS5jcmVhdGVCeXRlcyhidWZmZXIsIHJzQmxvY2tzKTtcbn07XG5cblFSQ29kZS5jcmVhdGVCeXRlcyA9IGZ1bmN0aW9uKGJ1ZmZlciwgcnNCbG9ja3MpIHtcblxuXHR2YXIgb2Zmc2V0ID0gMDtcblx0XG5cdHZhciBtYXhEY0NvdW50ID0gMDtcblx0dmFyIG1heEVjQ291bnQgPSAwO1xuXHRcblx0dmFyIGRjZGF0YSA9IG5ldyBBcnJheShyc0Jsb2Nrcy5sZW5ndGgpO1xuXHR2YXIgZWNkYXRhID0gbmV3IEFycmF5KHJzQmxvY2tzLmxlbmd0aCk7XG5cdFxuXHRmb3IgKHZhciByID0gMDsgciA8IHJzQmxvY2tzLmxlbmd0aDsgcisrKSB7XG5cblx0XHR2YXIgZGNDb3VudCA9IHJzQmxvY2tzW3JdLmRhdGFDb3VudDtcblx0XHR2YXIgZWNDb3VudCA9IHJzQmxvY2tzW3JdLnRvdGFsQ291bnQgLSBkY0NvdW50O1xuXG5cdFx0bWF4RGNDb3VudCA9IE1hdGgubWF4KG1heERjQ291bnQsIGRjQ291bnQpO1xuXHRcdG1heEVjQ291bnQgPSBNYXRoLm1heChtYXhFY0NvdW50LCBlY0NvdW50KTtcblx0XHRcblx0XHRkY2RhdGFbcl0gPSBuZXcgQXJyYXkoZGNDb3VudCk7XG5cdFx0XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkY2RhdGFbcl0ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGRjZGF0YVtyXVtpXSA9IDB4ZmYgJiBidWZmZXIuYnVmZmVyW2kgKyBvZmZzZXRdO1xuXHRcdH1cblx0XHRvZmZzZXQgKz0gZGNDb3VudDtcblx0XHRcblx0XHR2YXIgcnNQb2x5ID0gdXRpbC5nZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsKGVjQ291bnQpO1xuXHRcdHZhciByYXdQb2x5ID0gbmV3IFBvbHlub21pYWwoZGNkYXRhW3JdLCByc1BvbHkuZ2V0TGVuZ3RoKCkgLSAxKTtcblxuXHRcdHZhciBtb2RQb2x5ID0gcmF3UG9seS5tb2QocnNQb2x5KTtcblx0XHRlY2RhdGFbcl0gPSBuZXcgQXJyYXkocnNQb2x5LmdldExlbmd0aCgpIC0gMSk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlY2RhdGFbcl0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtb2RJbmRleCA9IGkgKyBtb2RQb2x5LmdldExlbmd0aCgpIC0gZWNkYXRhW3JdLmxlbmd0aDtcblx0XHRcdGVjZGF0YVtyXVtpXSA9IChtb2RJbmRleCA+PSAwKT8gbW9kUG9seS5nZXQobW9kSW5kZXgpIDogMDtcblx0XHR9XG5cblx0fVxuXHRcblx0dmFyIHRvdGFsQ29kZUNvdW50ID0gMDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCByc0Jsb2Nrcy5sZW5ndGg7IGkrKykge1xuXHRcdHRvdGFsQ29kZUNvdW50ICs9IHJzQmxvY2tzW2ldLnRvdGFsQ291bnQ7XG5cdH1cblxuXHR2YXIgZGF0YSA9IG5ldyBBcnJheSh0b3RhbENvZGVDb3VudCk7XG5cdHZhciBpbmRleCA9IDA7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXhEY0NvdW50OyBpKyspIHtcblx0XHRmb3IgKHZhciByID0gMDsgciA8IHJzQmxvY2tzLmxlbmd0aDsgcisrKSB7XG5cdFx0XHRpZiAoaSA8IGRjZGF0YVtyXS5sZW5ndGgpIHtcblx0XHRcdFx0ZGF0YVtpbmRleCsrXSA9IGRjZGF0YVtyXVtpXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IG1heEVjQ291bnQ7IGkrKykge1xuXHRcdGZvciAodmFyIHIgPSAwOyByIDwgcnNCbG9ja3MubGVuZ3RoOyByKyspIHtcblx0XHRcdGlmIChpIDwgZWNkYXRhW3JdLmxlbmd0aCkge1xuXHRcdFx0XHRkYXRhW2luZGV4KytdID0gZWNkYXRhW3JdW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBkYXRhO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRUkNvZGU7XG5cbiIsInZhciBtb2RlID0gcmVxdWlyZSgnLi9tb2RlJyk7XG5cbmZ1bmN0aW9uIFFSOGJpdEJ5dGUoZGF0YSkge1xuXHR0aGlzLm1vZGUgPSBtb2RlLk1PREVfOEJJVF9CWVRFO1xuXHR0aGlzLmRhdGEgPSBkYXRhO1xufVxuXG5RUjhiaXRCeXRlLnByb3RvdHlwZSA9IHtcblxuXHRnZXRMZW5ndGggOiBmdW5jdGlvbihidWZmZXIpIHtcblx0XHRyZXR1cm4gdGhpcy5kYXRhLmxlbmd0aDtcblx0fSxcblx0XG5cdHdyaXRlIDogZnVuY3Rpb24oYnVmZmVyKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdC8vIG5vdCBKSVMgLi4uXG5cdFx0XHRidWZmZXIucHV0KHRoaXMuZGF0YS5jaGFyQ29kZUF0KGkpLCA4KTtcblx0XHR9XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUVI4Yml0Qnl0ZTtcblxuIiwiLy8gRXJyb3JDb3JyZWN0TGV2ZWxcbnZhciBFQ0wgPSByZXF1aXJlKCcuL0Vycm9yQ29ycmVjdExldmVsJyk7XG5cbmZ1bmN0aW9uIFFSUlNCbG9jayh0b3RhbENvdW50LCBkYXRhQ291bnQpIHtcblx0dGhpcy50b3RhbENvdW50ID0gdG90YWxDb3VudDtcblx0dGhpcy5kYXRhQ291bnQgID0gZGF0YUNvdW50O1xufVxuXG5RUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEUgPSBbXG5cblx0Ly8gTFxuXHQvLyBNXG5cdC8vIFFcblx0Ly8gSFxuXG5cdC8vIDFcblx0WzEsIDI2LCAxOV0sXG5cdFsxLCAyNiwgMTZdLFxuXHRbMSwgMjYsIDEzXSxcblx0WzEsIDI2LCA5XSxcblx0XG5cdC8vIDJcblx0WzEsIDQ0LCAzNF0sXG5cdFsxLCA0NCwgMjhdLFxuXHRbMSwgNDQsIDIyXSxcblx0WzEsIDQ0LCAxNl0sXG5cblx0Ly8gM1xuXHRbMSwgNzAsIDU1XSxcblx0WzEsIDcwLCA0NF0sXG5cdFsyLCAzNSwgMTddLFxuXHRbMiwgMzUsIDEzXSxcblxuXHQvLyA0XHRcdFxuXHRbMSwgMTAwLCA4MF0sXG5cdFsyLCA1MCwgMzJdLFxuXHRbMiwgNTAsIDI0XSxcblx0WzQsIDI1LCA5XSxcblx0XG5cdC8vIDVcblx0WzEsIDEzNCwgMTA4XSxcblx0WzIsIDY3LCA0M10sXG5cdFsyLCAzMywgMTUsIDIsIDM0LCAxNl0sXG5cdFsyLCAzMywgMTEsIDIsIDM0LCAxMl0sXG5cdFxuXHQvLyA2XG5cdFsyLCA4NiwgNjhdLFxuXHRbNCwgNDMsIDI3XSxcblx0WzQsIDQzLCAxOV0sXG5cdFs0LCA0MywgMTVdLFxuXHRcblx0Ly8gN1x0XHRcblx0WzIsIDk4LCA3OF0sXG5cdFs0LCA0OSwgMzFdLFxuXHRbMiwgMzIsIDE0LCA0LCAzMywgMTVdLFxuXHRbNCwgMzksIDEzLCAxLCA0MCwgMTRdLFxuXHRcblx0Ly8gOFxuXHRbMiwgMTIxLCA5N10sXG5cdFsyLCA2MCwgMzgsIDIsIDYxLCAzOV0sXG5cdFs0LCA0MCwgMTgsIDIsIDQxLCAxOV0sXG5cdFs0LCA0MCwgMTQsIDIsIDQxLCAxNV0sXG5cdFxuXHQvLyA5XG5cdFsyLCAxNDYsIDExNl0sXG5cdFszLCA1OCwgMzYsIDIsIDU5LCAzN10sXG5cdFs0LCAzNiwgMTYsIDQsIDM3LCAxN10sXG5cdFs0LCAzNiwgMTIsIDQsIDM3LCAxM10sXG5cdFxuXHQvLyAxMFx0XHRcblx0WzIsIDg2LCA2OCwgMiwgODcsIDY5XSxcblx0WzQsIDY5LCA0MywgMSwgNzAsIDQ0XSxcblx0WzYsIDQzLCAxOSwgMiwgNDQsIDIwXSxcblx0WzYsIDQzLCAxNSwgMiwgNDQsIDE2XSxcblxuXHQvLyAxMVxuXHRbNCwgMTAxLCA4MV0sXG5cdFsxLCA4MCwgNTAsIDQsIDgxLCA1MV0sXG5cdFs0LCA1MCwgMjIsIDQsIDUxLCAyM10sXG5cdFszLCAzNiwgMTIsIDgsIDM3LCAxM10sXG5cblx0Ly8gMTJcblx0WzIsIDExNiwgOTIsIDIsIDExNywgOTNdLFxuXHRbNiwgNTgsIDM2LCAyLCA1OSwgMzddLFxuXHRbNCwgNDYsIDIwLCA2LCA0NywgMjFdLFxuXHRbNywgNDIsIDE0LCA0LCA0MywgMTVdLFxuXG5cdC8vIDEzXG5cdFs0LCAxMzMsIDEwN10sXG5cdFs4LCA1OSwgMzcsIDEsIDYwLCAzOF0sXG5cdFs4LCA0NCwgMjAsIDQsIDQ1LCAyMV0sXG5cdFsxMiwgMzMsIDExLCA0LCAzNCwgMTJdLFxuXG5cdC8vIDE0XG5cdFszLCAxNDUsIDExNSwgMSwgMTQ2LCAxMTZdLFxuXHRbNCwgNjQsIDQwLCA1LCA2NSwgNDFdLFxuXHRbMTEsIDM2LCAxNiwgNSwgMzcsIDE3XSxcblx0WzExLCAzNiwgMTIsIDUsIDM3LCAxM10sXG5cblx0Ly8gMTVcblx0WzUsIDEwOSwgODcsIDEsIDExMCwgODhdLFxuXHRbNSwgNjUsIDQxLCA1LCA2NiwgNDJdLFxuXHRbNSwgNTQsIDI0LCA3LCA1NSwgMjVdLFxuXHRbMTEsIDM2LCAxMl0sXG5cblx0Ly8gMTZcblx0WzUsIDEyMiwgOTgsIDEsIDEyMywgOTldLFxuXHRbNywgNzMsIDQ1LCAzLCA3NCwgNDZdLFxuXHRbMTUsIDQzLCAxOSwgMiwgNDQsIDIwXSxcblx0WzMsIDQ1LCAxNSwgMTMsIDQ2LCAxNl0sXG5cblx0Ly8gMTdcblx0WzEsIDEzNSwgMTA3LCA1LCAxMzYsIDEwOF0sXG5cdFsxMCwgNzQsIDQ2LCAxLCA3NSwgNDddLFxuXHRbMSwgNTAsIDIyLCAxNSwgNTEsIDIzXSxcblx0WzIsIDQyLCAxNCwgMTcsIDQzLCAxNV0sXG5cblx0Ly8gMThcblx0WzUsIDE1MCwgMTIwLCAxLCAxNTEsIDEyMV0sXG5cdFs5LCA2OSwgNDMsIDQsIDcwLCA0NF0sXG5cdFsxNywgNTAsIDIyLCAxLCA1MSwgMjNdLFxuXHRbMiwgNDIsIDE0LCAxOSwgNDMsIDE1XSxcblxuXHQvLyAxOVxuXHRbMywgMTQxLCAxMTMsIDQsIDE0MiwgMTE0XSxcblx0WzMsIDcwLCA0NCwgMTEsIDcxLCA0NV0sXG5cdFsxNywgNDcsIDIxLCA0LCA0OCwgMjJdLFxuXHRbOSwgMzksIDEzLCAxNiwgNDAsIDE0XSxcblxuXHQvLyAyMFxuXHRbMywgMTM1LCAxMDcsIDUsIDEzNiwgMTA4XSxcblx0WzMsIDY3LCA0MSwgMTMsIDY4LCA0Ml0sXG5cdFsxNSwgNTQsIDI0LCA1LCA1NSwgMjVdLFxuXHRbMTUsIDQzLCAxNSwgMTAsIDQ0LCAxNl0sXG5cblx0Ly8gMjFcblx0WzQsIDE0NCwgMTE2LCA0LCAxNDUsIDExN10sXG5cdFsxNywgNjgsIDQyXSxcblx0WzE3LCA1MCwgMjIsIDYsIDUxLCAyM10sXG5cdFsxOSwgNDYsIDE2LCA2LCA0NywgMTddLFxuXG5cdC8vIDIyXG5cdFsyLCAxMzksIDExMSwgNywgMTQwLCAxMTJdLFxuXHRbMTcsIDc0LCA0Nl0sXG5cdFs3LCA1NCwgMjQsIDE2LCA1NSwgMjVdLFxuXHRbMzQsIDM3LCAxM10sXG5cblx0Ly8gMjNcblx0WzQsIDE1MSwgMTIxLCA1LCAxNTIsIDEyMl0sXG5cdFs0LCA3NSwgNDcsIDE0LCA3NiwgNDhdLFxuXHRbMTEsIDU0LCAyNCwgMTQsIDU1LCAyNV0sXG5cdFsxNiwgNDUsIDE1LCAxNCwgNDYsIDE2XSxcblxuXHQvLyAyNFxuXHRbNiwgMTQ3LCAxMTcsIDQsIDE0OCwgMTE4XSxcblx0WzYsIDczLCA0NSwgMTQsIDc0LCA0Nl0sXG5cdFsxMSwgNTQsIDI0LCAxNiwgNTUsIDI1XSxcblx0WzMwLCA0NiwgMTYsIDIsIDQ3LCAxN10sXG5cblx0Ly8gMjVcblx0WzgsIDEzMiwgMTA2LCA0LCAxMzMsIDEwN10sXG5cdFs4LCA3NSwgNDcsIDEzLCA3NiwgNDhdLFxuXHRbNywgNTQsIDI0LCAyMiwgNTUsIDI1XSxcblx0WzIyLCA0NSwgMTUsIDEzLCA0NiwgMTZdLFxuXG5cdC8vIDI2XG5cdFsxMCwgMTQyLCAxMTQsIDIsIDE0MywgMTE1XSxcblx0WzE5LCA3NCwgNDYsIDQsIDc1LCA0N10sXG5cdFsyOCwgNTAsIDIyLCA2LCA1MSwgMjNdLFxuXHRbMzMsIDQ2LCAxNiwgNCwgNDcsIDE3XSxcblxuXHQvLyAyN1xuXHRbOCwgMTUyLCAxMjIsIDQsIDE1MywgMTIzXSxcblx0WzIyLCA3MywgNDUsIDMsIDc0LCA0Nl0sXG5cdFs4LCA1MywgMjMsIDI2LCA1NCwgMjRdLFxuXHRbMTIsIDQ1LCAxNSwgMjgsIDQ2LCAxNl0sXG5cblx0Ly8gMjhcblx0WzMsIDE0NywgMTE3LCAxMCwgMTQ4LCAxMThdLFxuXHRbMywgNzMsIDQ1LCAyMywgNzQsIDQ2XSxcblx0WzQsIDU0LCAyNCwgMzEsIDU1LCAyNV0sXG5cdFsxMSwgNDUsIDE1LCAzMSwgNDYsIDE2XSxcblxuXHQvLyAyOVxuXHRbNywgMTQ2LCAxMTYsIDcsIDE0NywgMTE3XSxcblx0WzIxLCA3MywgNDUsIDcsIDc0LCA0Nl0sXG5cdFsxLCA1MywgMjMsIDM3LCA1NCwgMjRdLFxuXHRbMTksIDQ1LCAxNSwgMjYsIDQ2LCAxNl0sXG5cblx0Ly8gMzBcblx0WzUsIDE0NSwgMTE1LCAxMCwgMTQ2LCAxMTZdLFxuXHRbMTksIDc1LCA0NywgMTAsIDc2LCA0OF0sXG5cdFsxNSwgNTQsIDI0LCAyNSwgNTUsIDI1XSxcblx0WzIzLCA0NSwgMTUsIDI1LCA0NiwgMTZdLFxuXG5cdC8vIDMxXG5cdFsxMywgMTQ1LCAxMTUsIDMsIDE0NiwgMTE2XSxcblx0WzIsIDc0LCA0NiwgMjksIDc1LCA0N10sXG5cdFs0MiwgNTQsIDI0LCAxLCA1NSwgMjVdLFxuXHRbMjMsIDQ1LCAxNSwgMjgsIDQ2LCAxNl0sXG5cblx0Ly8gMzJcblx0WzE3LCAxNDUsIDExNV0sXG5cdFsxMCwgNzQsIDQ2LCAyMywgNzUsIDQ3XSxcblx0WzEwLCA1NCwgMjQsIDM1LCA1NSwgMjVdLFxuXHRbMTksIDQ1LCAxNSwgMzUsIDQ2LCAxNl0sXG5cblx0Ly8gMzNcblx0WzE3LCAxNDUsIDExNSwgMSwgMTQ2LCAxMTZdLFxuXHRbMTQsIDc0LCA0NiwgMjEsIDc1LCA0N10sXG5cdFsyOSwgNTQsIDI0LCAxOSwgNTUsIDI1XSxcblx0WzExLCA0NSwgMTUsIDQ2LCA0NiwgMTZdLFxuXG5cdC8vIDM0XG5cdFsxMywgMTQ1LCAxMTUsIDYsIDE0NiwgMTE2XSxcblx0WzE0LCA3NCwgNDYsIDIzLCA3NSwgNDddLFxuXHRbNDQsIDU0LCAyNCwgNywgNTUsIDI1XSxcblx0WzU5LCA0NiwgMTYsIDEsIDQ3LCAxN10sXG5cblx0Ly8gMzVcblx0WzEyLCAxNTEsIDEyMSwgNywgMTUyLCAxMjJdLFxuXHRbMTIsIDc1LCA0NywgMjYsIDc2LCA0OF0sXG5cdFszOSwgNTQsIDI0LCAxNCwgNTUsIDI1XSxcblx0WzIyLCA0NSwgMTUsIDQxLCA0NiwgMTZdLFxuXG5cdC8vIDM2XG5cdFs2LCAxNTEsIDEyMSwgMTQsIDE1MiwgMTIyXSxcblx0WzYsIDc1LCA0NywgMzQsIDc2LCA0OF0sXG5cdFs0NiwgNTQsIDI0LCAxMCwgNTUsIDI1XSxcblx0WzIsIDQ1LCAxNSwgNjQsIDQ2LCAxNl0sXG5cblx0Ly8gMzdcblx0WzE3LCAxNTIsIDEyMiwgNCwgMTUzLCAxMjNdLFxuXHRbMjksIDc0LCA0NiwgMTQsIDc1LCA0N10sXG5cdFs0OSwgNTQsIDI0LCAxMCwgNTUsIDI1XSxcblx0WzI0LCA0NSwgMTUsIDQ2LCA0NiwgMTZdLFxuXG5cdC8vIDM4XG5cdFs0LCAxNTIsIDEyMiwgMTgsIDE1MywgMTIzXSxcblx0WzEzLCA3NCwgNDYsIDMyLCA3NSwgNDddLFxuXHRbNDgsIDU0LCAyNCwgMTQsIDU1LCAyNV0sXG5cdFs0MiwgNDUsIDE1LCAzMiwgNDYsIDE2XSxcblxuXHQvLyAzOVxuXHRbMjAsIDE0NywgMTE3LCA0LCAxNDgsIDExOF0sXG5cdFs0MCwgNzUsIDQ3LCA3LCA3NiwgNDhdLFxuXHRbNDMsIDU0LCAyNCwgMjIsIDU1LCAyNV0sXG5cdFsxMCwgNDUsIDE1LCA2NywgNDYsIDE2XSxcblxuXHQvLyA0MFxuXHRbMTksIDE0OCwgMTE4LCA2LCAxNDksIDExOV0sXG5cdFsxOCwgNzUsIDQ3LCAzMSwgNzYsIDQ4XSxcblx0WzM0LCA1NCwgMjQsIDM0LCA1NSwgMjVdLFxuXHRbMjAsIDQ1LCAxNSwgNjEsIDQ2LCAxNl1cbl07XG5cblFSUlNCbG9jay5nZXRSU0Jsb2NrcyA9IGZ1bmN0aW9uKHR5cGVOdW1iZXIsIGVycm9yQ29ycmVjdExldmVsKSB7XG5cdFxuXHR2YXIgcnNCbG9jayA9IFFSUlNCbG9jay5nZXRSc0Jsb2NrVGFibGUodHlwZU51bWJlciwgZXJyb3JDb3JyZWN0TGV2ZWwpO1xuXHRcblx0aWYgKHJzQmxvY2sgPT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiYmFkIHJzIGJsb2NrIEAgdHlwZU51bWJlcjpcIiArIHR5cGVOdW1iZXIgKyBcIi9lcnJvckNvcnJlY3RMZXZlbDpcIiArIGVycm9yQ29ycmVjdExldmVsKTtcblx0fVxuXG5cdHZhciBsZW5ndGggPSByc0Jsb2NrLmxlbmd0aCAvIDM7XG5cdFxuXHR2YXIgbGlzdCA9IG5ldyBBcnJheSgpO1xuXHRcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXG5cdFx0dmFyIGNvdW50ID0gcnNCbG9ja1tpICogMyArIDBdO1xuXHRcdHZhciB0b3RhbENvdW50ID0gcnNCbG9ja1tpICogMyArIDFdO1xuXHRcdHZhciBkYXRhQ291bnQgID0gcnNCbG9ja1tpICogMyArIDJdO1xuXG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG5cdFx0XHRsaXN0LnB1c2gobmV3IFFSUlNCbG9jayh0b3RhbENvdW50LCBkYXRhQ291bnQpICk7XHRcblx0XHR9XG5cdH1cblx0XG5cdHJldHVybiBsaXN0O1xufVxuXG5RUlJTQmxvY2suZ2V0UnNCbG9ja1RhYmxlID0gZnVuY3Rpb24odHlwZU51bWJlciwgZXJyb3JDb3JyZWN0TGV2ZWwpIHtcblxuXHRzd2l0Y2goZXJyb3JDb3JyZWN0TGV2ZWwpIHtcblx0Y2FzZSBFQ0wuTCA6XG5cdFx0cmV0dXJuIFFSUlNCbG9jay5SU19CTE9DS19UQUJMRVsodHlwZU51bWJlciAtIDEpICogNCArIDBdO1xuXHRjYXNlIEVDTC5NIDpcblx0XHRyZXR1cm4gUVJSU0Jsb2NrLlJTX0JMT0NLX1RBQkxFWyh0eXBlTnVtYmVyIC0gMSkgKiA0ICsgMV07XG5cdGNhc2UgRUNMLlEgOlxuXHRcdHJldHVybiBRUlJTQmxvY2suUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXIgLSAxKSAqIDQgKyAyXTtcblx0Y2FzZSBFQ0wuSCA6XG5cdFx0cmV0dXJuIFFSUlNCbG9jay5SU19CTE9DS19UQUJMRVsodHlwZU51bWJlciAtIDEpICogNCArIDNdO1xuXHRkZWZhdWx0IDpcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUVJSU0Jsb2NrO1xuIiwiZnVuY3Rpb24gUVJCaXRCdWZmZXIoKSB7XG5cdHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KCk7XG5cdHRoaXMubGVuZ3RoID0gMDtcbn1cblxuUVJCaXRCdWZmZXIucHJvdG90eXBlID0ge1xuXG5cdGdldCA6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIDgpO1xuXHRcdHJldHVybiAoICh0aGlzLmJ1ZmZlcltidWZJbmRleF0gPj4+ICg3IC0gaW5kZXggJSA4KSApICYgMSkgPT0gMTtcblx0fSxcblx0XG5cdHB1dCA6IGZ1bmN0aW9uKG51bSwgbGVuZ3RoKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5wdXRCaXQoICggKG51bSA+Pj4gKGxlbmd0aCAtIGkgLSAxKSApICYgMSkgPT0gMSk7XG5cdFx0fVxuXHR9LFxuXHRcblx0Z2V0TGVuZ3RoSW5CaXRzIDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xuXHR9LFxuXHRcblx0cHV0Qml0IDogZnVuY3Rpb24oYml0KSB7XG5cdFxuXHRcdHZhciBidWZJbmRleCA9IE1hdGguZmxvb3IodGhpcy5sZW5ndGggLyA4KTtcblx0XHRpZiAodGhpcy5idWZmZXIubGVuZ3RoIDw9IGJ1ZkluZGV4KSB7XG5cdFx0XHR0aGlzLmJ1ZmZlci5wdXNoKDApO1xuXHRcdH1cblx0XG5cdFx0aWYgKGJpdCkge1xuXHRcdFx0dGhpcy5idWZmZXJbYnVmSW5kZXhdIHw9ICgweDgwID4+PiAodGhpcy5sZW5ndGggJSA4KSApO1xuXHRcdH1cblx0XG5cdFx0dGhpcy5sZW5ndGgrKztcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRUkJpdEJ1ZmZlcjtcbiIsInZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJyk7XG52YXIgUG9seW5vbWlhbCA9IHJlcXVpcmUoJy4vUG9seW5vbWlhbCcpO1xudmFyIG1hdGggPSByZXF1aXJlKCcuL21hdGgnKTtcblxudmFyIFFSTWFza1BhdHRlcm4gPSB7XG5cdFBBVFRFUk4wMDAgOiAwLFxuXHRQQVRURVJOMDAxIDogMSxcblx0UEFUVEVSTjAxMCA6IDIsXG5cdFBBVFRFUk4wMTEgOiAzLFxuXHRQQVRURVJOMTAwIDogNCxcblx0UEFUVEVSTjEwMSA6IDUsXG5cdFBBVFRFUk4xMTAgOiA2LFxuXHRQQVRURVJOMTExIDogN1xufTtcblxudmFyIFFSVXRpbCA9IHtcblxuICAgIFBBVFRFUk5fUE9TSVRJT05fVEFCTEUgOiBbXG5cdCAgICBbXSxcblx0ICAgIFs2LCAxOF0sXG5cdCAgICBbNiwgMjJdLFxuXHQgICAgWzYsIDI2XSxcblx0ICAgIFs2LCAzMF0sXG5cdCAgICBbNiwgMzRdLFxuXHQgICAgWzYsIDIyLCAzOF0sXG5cdCAgICBbNiwgMjQsIDQyXSxcblx0ICAgIFs2LCAyNiwgNDZdLFxuXHQgICAgWzYsIDI4LCA1MF0sXG5cdCAgICBbNiwgMzAsIDU0XSxcdFx0XG5cdCAgICBbNiwgMzIsIDU4XSxcblx0ICAgIFs2LCAzNCwgNjJdLFxuXHQgICAgWzYsIDI2LCA0NiwgNjZdLFxuXHQgICAgWzYsIDI2LCA0OCwgNzBdLFxuXHQgICAgWzYsIDI2LCA1MCwgNzRdLFxuXHQgICAgWzYsIDMwLCA1NCwgNzhdLFxuXHQgICAgWzYsIDMwLCA1NiwgODJdLFxuXHQgICAgWzYsIDMwLCA1OCwgODZdLFxuXHQgICAgWzYsIDM0LCA2MiwgOTBdLFxuXHQgICAgWzYsIDI4LCA1MCwgNzIsIDk0XSxcblx0ICAgIFs2LCAyNiwgNTAsIDc0LCA5OF0sXG5cdCAgICBbNiwgMzAsIDU0LCA3OCwgMTAyXSxcblx0ICAgIFs2LCAyOCwgNTQsIDgwLCAxMDZdLFxuXHQgICAgWzYsIDMyLCA1OCwgODQsIDExMF0sXG5cdCAgICBbNiwgMzAsIDU4LCA4NiwgMTE0XSxcblx0ICAgIFs2LCAzNCwgNjIsIDkwLCAxMThdLFxuXHQgICAgWzYsIDI2LCA1MCwgNzQsIDk4LCAxMjJdLFxuXHQgICAgWzYsIDMwLCA1NCwgNzgsIDEwMiwgMTI2XSxcblx0ICAgIFs2LCAyNiwgNTIsIDc4LCAxMDQsIDEzMF0sXG5cdCAgICBbNiwgMzAsIDU2LCA4MiwgMTA4LCAxMzRdLFxuXHQgICAgWzYsIDM0LCA2MCwgODYsIDExMiwgMTM4XSxcblx0ICAgIFs2LCAzMCwgNTgsIDg2LCAxMTQsIDE0Ml0sXG5cdCAgICBbNiwgMzQsIDYyLCA5MCwgMTE4LCAxNDZdLFxuXHQgICAgWzYsIDMwLCA1NCwgNzgsIDEwMiwgMTI2LCAxNTBdLFxuXHQgICAgWzYsIDI0LCA1MCwgNzYsIDEwMiwgMTI4LCAxNTRdLFxuXHQgICAgWzYsIDI4LCA1NCwgODAsIDEwNiwgMTMyLCAxNThdLFxuXHQgICAgWzYsIDMyLCA1OCwgODQsIDExMCwgMTM2LCAxNjJdLFxuXHQgICAgWzYsIDI2LCA1NCwgODIsIDExMCwgMTM4LCAxNjZdLFxuXHQgICAgWzYsIDMwLCA1OCwgODYsIDExNCwgMTQyLCAxNzBdXG4gICAgXSxcblxuICAgIEcxNSA6ICgxIDw8IDEwKSB8ICgxIDw8IDgpIHwgKDEgPDwgNSkgfCAoMSA8PCA0KSB8ICgxIDw8IDIpIHwgKDEgPDwgMSkgfCAoMSA8PCAwKSxcbiAgICBHMTggOiAoMSA8PCAxMikgfCAoMSA8PCAxMSkgfCAoMSA8PCAxMCkgfCAoMSA8PCA5KSB8ICgxIDw8IDgpIHwgKDEgPDwgNSkgfCAoMSA8PCAyKSB8ICgxIDw8IDApLFxuICAgIEcxNV9NQVNLIDogKDEgPDwgMTQpIHwgKDEgPDwgMTIpIHwgKDEgPDwgMTApXHR8ICgxIDw8IDQpIHwgKDEgPDwgMSksXG5cbiAgICBnZXRCQ0hUeXBlSW5mbyA6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgIHZhciBkID0gZGF0YSA8PCAxMDtcblx0ICAgIHdoaWxlIChRUlV0aWwuZ2V0QkNIRGlnaXQoZCkgLSBRUlV0aWwuZ2V0QkNIRGlnaXQoUVJVdGlsLkcxNSkgPj0gMCkge1xuXHRcdCAgICBkIF49IChRUlV0aWwuRzE1IDw8IChRUlV0aWwuZ2V0QkNIRGlnaXQoZCkgLSBRUlV0aWwuZ2V0QkNIRGlnaXQoUVJVdGlsLkcxNSkgKSApOyBcdFxuXHQgICAgfVxuXHQgICAgcmV0dXJuICggKGRhdGEgPDwgMTApIHwgZCkgXiBRUlV0aWwuRzE1X01BU0s7XG4gICAgfSxcblxuICAgIGdldEJDSFR5cGVOdW1iZXIgOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICB2YXIgZCA9IGRhdGEgPDwgMTI7XG5cdCAgICB3aGlsZSAoUVJVdGlsLmdldEJDSERpZ2l0KGQpIC0gUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTgpID49IDApIHtcblx0XHQgICAgZCBePSAoUVJVdGlsLkcxOCA8PCAoUVJVdGlsLmdldEJDSERpZ2l0KGQpIC0gUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTgpICkgKTsgXHRcblx0ICAgIH1cblx0ICAgIHJldHVybiAoZGF0YSA8PCAxMikgfCBkO1xuICAgIH0sXG5cbiAgICBnZXRCQ0hEaWdpdCA6IGZ1bmN0aW9uKGRhdGEpIHtcblxuXHQgICAgdmFyIGRpZ2l0ID0gMDtcblxuXHQgICAgd2hpbGUgKGRhdGEgIT0gMCkge1xuXHRcdCAgICBkaWdpdCsrO1xuXHRcdCAgICBkYXRhID4+Pj0gMTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGRpZ2l0O1xuICAgIH0sXG5cbiAgICBnZXRQYXR0ZXJuUG9zaXRpb24gOiBmdW5jdGlvbih0eXBlTnVtYmVyKSB7XG5cdCAgICByZXR1cm4gUVJVdGlsLlBBVFRFUk5fUE9TSVRJT05fVEFCTEVbdHlwZU51bWJlciAtIDFdO1xuICAgIH0sXG5cbiAgICBnZXRNYXNrIDogZnVuY3Rpb24obWFza1BhdHRlcm4sIGksIGopIHtcblx0ICAgIFxuXHQgICAgc3dpdGNoIChtYXNrUGF0dGVybikge1xuXHRcdCAgICBcblx0ICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMDAwIDogcmV0dXJuIChpICsgaikgJSAyID09IDA7XG5cdCAgICBjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjAwMSA6IHJldHVybiBpICUgMiA9PSAwO1xuXHQgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4wMTAgOiByZXR1cm4gaiAlIDMgPT0gMDtcblx0ICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMDExIDogcmV0dXJuIChpICsgaikgJSAzID09IDA7XG5cdCAgICBjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjEwMCA6IHJldHVybiAoTWF0aC5mbG9vcihpIC8gMikgKyBNYXRoLmZsb29yKGogLyAzKSApICUgMiA9PSAwO1xuXHQgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4xMDEgOiByZXR1cm4gKGkgKiBqKSAlIDIgKyAoaSAqIGopICUgMyA9PSAwO1xuXHQgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4xMTAgOiByZXR1cm4gKCAoaSAqIGopICUgMiArIChpICogaikgJSAzKSAlIDIgPT0gMDtcblx0ICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTExIDogcmV0dXJuICggKGkgKiBqKSAlIDMgKyAoaSArIGopICUgMikgJSAyID09IDA7XG5cblx0ICAgIGRlZmF1bHQgOlxuXHRcdCAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgbWFza1BhdHRlcm46XCIgKyBtYXNrUGF0dGVybik7XG5cdCAgICB9XG4gICAgfSxcblxuICAgIGdldEVycm9yQ29ycmVjdFBvbHlub21pYWwgOiBmdW5jdGlvbihlcnJvckNvcnJlY3RMZW5ndGgpIHtcblxuXHQgICAgdmFyIGEgPSBuZXcgUG9seW5vbWlhbChbMV0sIDApO1xuXG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVycm9yQ29ycmVjdExlbmd0aDsgaSsrKSB7XG5cdFx0ICAgIGEgPSBhLm11bHRpcGx5KG5ldyBQb2x5bm9taWFsKFsxLCBtYXRoLmdleHAoaSldLCAwKSApO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gYTtcbiAgICB9LFxuXG4gICAgZ2V0TGVuZ3RoSW5CaXRzIDogZnVuY3Rpb24obW9kZSwgdHlwZSkge1xuXG5cdCAgICBpZiAoMSA8PSB0eXBlICYmIHR5cGUgPCAxMCkge1xuXG5cdFx0ICAgIC8vIDEgLSA5XG5cblx0XHQgICAgc3dpdGNoKG1vZGUpIHtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfTlVNQkVSIFx0OiByZXR1cm4gMTA7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFX0FMUEhBX05VTSBcdDogcmV0dXJuIDk7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFXzhCSVRfQllURVx0OiByZXR1cm4gODtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfS0FOSkkgIFx0OiByZXR1cm4gODtcblx0XHQgICAgZGVmYXVsdCA6XG5cdFx0XHQgICAgdGhyb3cgbmV3IEVycm9yKFwibW9kZTpcIiArIG1vZGUpO1xuXHRcdCAgICB9XG5cblx0ICAgIH0gZWxzZSBpZiAodHlwZSA8IDI3KSB7XG5cblx0XHQgICAgLy8gMTAgLSAyNlxuXG5cdFx0ICAgIHN3aXRjaChtb2RlKSB7XG5cdFx0ICAgIGNhc2UgTW9kZS5NT0RFX05VTUJFUiBcdDogcmV0dXJuIDEyO1xuXHRcdCAgICBjYXNlIE1vZGUuTU9ERV9BTFBIQV9OVU0gXHQ6IHJldHVybiAxMTtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfOEJJVF9CWVRFXHQ6IHJldHVybiAxNjtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfS0FOSkkgIFx0OiByZXR1cm4gMTA7XG5cdFx0ICAgIGRlZmF1bHQgOlxuXHRcdFx0ICAgIHRocm93IG5ldyBFcnJvcihcIm1vZGU6XCIgKyBtb2RlKTtcblx0XHQgICAgfVxuXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPCA0MSkge1xuXG5cdFx0ICAgIC8vIDI3IC0gNDBcblxuXHRcdCAgICBzd2l0Y2gobW9kZSkge1xuXHRcdCAgICBjYXNlIE1vZGUuTU9ERV9OVU1CRVIgXHQ6IHJldHVybiAxNDtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfQUxQSEFfTlVNXHQ6IHJldHVybiAxMztcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfOEJJVF9CWVRFXHQ6IHJldHVybiAxNjtcblx0XHQgICAgY2FzZSBNb2RlLk1PREVfS0FOSkkgIFx0OiByZXR1cm4gMTI7XG5cdFx0ICAgIGRlZmF1bHQgOlxuXHRcdFx0ICAgIHRocm93IG5ldyBFcnJvcihcIm1vZGU6XCIgKyBtb2RlKTtcblx0XHQgICAgfVxuXG5cdCAgICB9IGVsc2Uge1xuXHRcdCAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0eXBlOlwiICsgdHlwZSk7XG5cdCAgICB9XG4gICAgfSxcblxuICAgIGdldExvc3RQb2ludCA6IGZ1bmN0aW9uKHFyQ29kZSkge1xuXHQgICAgXG5cdCAgICB2YXIgbW9kdWxlQ291bnQgPSBxckNvZGUuZ2V0TW9kdWxlQ291bnQoKTtcblx0ICAgIFxuXHQgICAgdmFyIGxvc3RQb2ludCA9IDA7XG5cdCAgICBcblx0ICAgIC8vIExFVkVMMVxuXHQgICAgXG5cdCAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBtb2R1bGVDb3VudDsgcm93KyspIHtcblxuXHRcdCAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtb2R1bGVDb3VudDsgY29sKyspIHtcblxuXHRcdFx0ICAgIHZhciBzYW1lQ291bnQgPSAwO1xuXHRcdFx0ICAgIHZhciBkYXJrID0gcXJDb2RlLmlzRGFyayhyb3csIGNvbCk7XG5cblx0XHRcdFx0Zm9yICh2YXIgciA9IC0xOyByIDw9IDE7IHIrKykge1xuXG5cdFx0XHRcdCAgICBpZiAocm93ICsgciA8IDAgfHwgbW9kdWxlQ291bnQgPD0gcm93ICsgcikge1xuXHRcdFx0XHRcdCAgICBjb250aW51ZTtcblx0XHRcdFx0ICAgIH1cblxuXHRcdFx0XHQgICAgZm9yICh2YXIgYyA9IC0xOyBjIDw9IDE7IGMrKykge1xuXG5cdFx0XHRcdFx0ICAgIGlmIChjb2wgKyBjIDwgMCB8fCBtb2R1bGVDb3VudCA8PSBjb2wgKyBjKSB7XG5cdFx0XHRcdFx0XHQgICAgY29udGludWU7XG5cdFx0XHRcdFx0ICAgIH1cblxuXHRcdFx0XHRcdCAgICBpZiAociA9PSAwICYmIGMgPT0gMCkge1xuXHRcdFx0XHRcdFx0ICAgIGNvbnRpbnVlO1xuXHRcdFx0XHRcdCAgICB9XG5cblx0XHRcdFx0XHQgICAgaWYgKGRhcmsgPT0gcXJDb2RlLmlzRGFyayhyb3cgKyByLCBjb2wgKyBjKSApIHtcblx0XHRcdFx0XHRcdCAgICBzYW1lQ291bnQrKztcblx0XHRcdFx0XHQgICAgfVxuXHRcdFx0XHQgICAgfVxuXHRcdFx0ICAgIH1cblxuXHRcdFx0ICAgIGlmIChzYW1lQ291bnQgPiA1KSB7XG5cdFx0XHRcdCAgICBsb3N0UG9pbnQgKz0gKDMgKyBzYW1lQ291bnQgLSA1KTtcblx0XHRcdCAgICB9XG5cdFx0ICAgIH1cblx0ICAgIH1cblxuXHQgICAgLy8gTEVWRUwyXG5cblx0ICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IG1vZHVsZUNvdW50IC0gMTsgcm93KyspIHtcblx0XHQgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgbW9kdWxlQ291bnQgLSAxOyBjb2wrKykge1xuXHRcdFx0ICAgIHZhciBjb3VudCA9IDA7XG5cdFx0XHQgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93LCAgICAgY29sICAgICkgKSBjb3VudCsrO1xuXHRcdFx0ICAgIGlmIChxckNvZGUuaXNEYXJrKHJvdyArIDEsIGNvbCAgICApICkgY291bnQrKztcblx0XHRcdCAgICBpZiAocXJDb2RlLmlzRGFyayhyb3csICAgICBjb2wgKyAxKSApIGNvdW50Kys7XG5cdFx0XHQgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93ICsgMSwgY29sICsgMSkgKSBjb3VudCsrO1xuXHRcdFx0ICAgIGlmIChjb3VudCA9PSAwIHx8IGNvdW50ID09IDQpIHtcblx0XHRcdFx0ICAgIGxvc3RQb2ludCArPSAzO1xuXHRcdFx0ICAgIH1cblx0XHQgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyBMRVZFTDNcblxuXHQgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgbW9kdWxlQ291bnQ7IHJvdysrKSB7XG5cdFx0ICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG1vZHVsZUNvdW50IC0gNjsgY29sKyspIHtcblx0XHRcdCAgICBpZiAocXJDb2RlLmlzRGFyayhyb3csIGNvbClcblx0XHRcdFx0XHQgICAgJiYgIXFyQ29kZS5pc0Rhcmsocm93LCBjb2wgKyAxKVxuXHRcdFx0XHRcdCAgICAmJiAgcXJDb2RlLmlzRGFyayhyb3csIGNvbCArIDIpXG5cdFx0XHRcdFx0ICAgICYmICBxckNvZGUuaXNEYXJrKHJvdywgY29sICsgMylcblx0XHRcdFx0XHQgICAgJiYgIHFyQ29kZS5pc0Rhcmsocm93LCBjb2wgKyA0KVxuXHRcdFx0XHRcdCAgICAmJiAhcXJDb2RlLmlzRGFyayhyb3csIGNvbCArIDUpXG5cdFx0XHRcdFx0ICAgICYmICBxckNvZGUuaXNEYXJrKHJvdywgY29sICsgNikgKSB7XG5cdFx0XHRcdCAgICBsb3N0UG9pbnQgKz0gNDA7XG5cdFx0XHQgICAgfVxuXHRcdCAgICB9XG5cdCAgICB9XG5cblx0ICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG1vZHVsZUNvdW50OyBjb2wrKykge1xuXHRcdCAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBtb2R1bGVDb3VudCAtIDY7IHJvdysrKSB7XG5cdFx0XHQgICAgaWYgKHFyQ29kZS5pc0Rhcmsocm93LCBjb2wpXG5cdFx0XHRcdFx0ICAgICYmICFxckNvZGUuaXNEYXJrKHJvdyArIDEsIGNvbClcblx0XHRcdFx0XHQgICAgJiYgIHFyQ29kZS5pc0Rhcmsocm93ICsgMiwgY29sKVxuXHRcdFx0XHRcdCAgICAmJiAgcXJDb2RlLmlzRGFyayhyb3cgKyAzLCBjb2wpXG5cdFx0XHRcdFx0ICAgICYmICBxckNvZGUuaXNEYXJrKHJvdyArIDQsIGNvbClcblx0XHRcdFx0XHQgICAgJiYgIXFyQ29kZS5pc0Rhcmsocm93ICsgNSwgY29sKVxuXHRcdFx0XHRcdCAgICAmJiAgcXJDb2RlLmlzRGFyayhyb3cgKyA2LCBjb2wpICkge1xuXHRcdFx0XHQgICAgbG9zdFBvaW50ICs9IDQwO1xuXHRcdFx0ICAgIH1cblx0XHQgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyBMRVZFTDRcblx0ICAgIFxuXHQgICAgdmFyIGRhcmtDb3VudCA9IDA7XG5cblx0ICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG1vZHVsZUNvdW50OyBjb2wrKykge1xuXHRcdCAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBtb2R1bGVDb3VudDsgcm93KyspIHtcblx0XHRcdCAgICBpZiAocXJDb2RlLmlzRGFyayhyb3csIGNvbCkgKSB7XG5cdFx0XHRcdCAgICBkYXJrQ291bnQrKztcblx0XHRcdCAgICB9XG5cdFx0ICAgIH1cblx0ICAgIH1cblx0ICAgIFxuXHQgICAgdmFyIHJhdGlvID0gTWF0aC5hYnMoMTAwICogZGFya0NvdW50IC8gbW9kdWxlQ291bnQgLyBtb2R1bGVDb3VudCAtIDUwKSAvIDU7XG5cdCAgICBsb3N0UG9pbnQgKz0gcmF0aW8gKiAxMDtcblxuXHQgICAgcmV0dXJuIGxvc3RQb2ludDtcdFx0XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRUlV0aWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZCA/IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKSA6ICdnZXQnO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxubGV0IGxvZ0Rpc2FibGVkXyA9IHRydWU7XG5sZXQgZGVwcmVjYXRpb25XYXJuaW5nc18gPSB0cnVlO1xuXG4vKipcbiAqIEV4dHJhY3QgYnJvd3NlciB2ZXJzaW9uIG91dCBvZiB0aGUgcHJvdmlkZWQgdXNlciBhZ2VudCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHshc3RyaW5nfSB1YXN0cmluZyB1c2VyQWdlbnQgc3RyaW5nLlxuICogQHBhcmFtIHshc3RyaW5nfSBleHByIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIGFzIG1hdGNoIGNyaXRlcmlhLlxuICogQHBhcmFtIHshbnVtYmVyfSBwb3MgcG9zaXRpb24gaW4gdGhlIHZlcnNpb24gc3RyaW5nIHRvIGJlIHJldHVybmVkLlxuICogQHJldHVybiB7IW51bWJlcn0gYnJvd3NlciB2ZXJzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFZlcnNpb24odWFzdHJpbmcsIGV4cHIsIHBvcykge1xuICBjb25zdCBtYXRjaCA9IHVhc3RyaW5nLm1hdGNoKGV4cHIpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID49IHBvcyAmJiBwYXJzZUludChtYXRjaFtwb3NdLCAxMCk7XG59XG5cbi8vIFdyYXBzIHRoZSBwZWVyY29ubmVjdGlvbiBldmVudCBldmVudE5hbWVUb1dyYXAgaW4gYSBmdW5jdGlvblxuLy8gd2hpY2ggcmV0dXJucyB0aGUgbW9kaWZpZWQgZXZlbnQgb2JqZWN0IChvciBmYWxzZSB0byBwcmV2ZW50XG4vLyB0aGUgZXZlbnQpLlxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgZXZlbnROYW1lVG9XcmFwLCB3cmFwcGVyKSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHByb3RvID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtcbiAgY29uc3QgbmF0aXZlQWRkRXZlbnRMaXN0ZW5lciA9IHByb3RvLmFkZEV2ZW50TGlzdGVuZXI7XG4gIHByb3RvLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihuYXRpdmVFdmVudE5hbWUsIGNiKSB7XG4gICAgaWYgKG5hdGl2ZUV2ZW50TmFtZSAhPT0gZXZlbnROYW1lVG9XcmFwKSB7XG4gICAgICByZXR1cm4gbmF0aXZlQWRkRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBjb25zdCB3cmFwcGVkQ2FsbGJhY2sgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgbW9kaWZpZWRFdmVudCA9IHdyYXBwZXIoZSk7XG4gICAgICBpZiAobW9kaWZpZWRFdmVudCkge1xuICAgICAgICBjYihtb2RpZmllZEV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX2V2ZW50TWFwID0gdGhpcy5fZXZlbnRNYXAgfHwge307XG4gICAgdGhpcy5fZXZlbnRNYXBbY2JdID0gd3JhcHBlZENhbGxiYWNrO1xuICAgIHJldHVybiBuYXRpdmVBZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIFtuYXRpdmVFdmVudE5hbWUsXG4gICAgICB3cmFwcGVkQ2FsbGJhY2tdKTtcbiAgfTtcblxuICBjb25zdCBuYXRpdmVSZW1vdmVFdmVudExpc3RlbmVyID0gcHJvdG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbiAgcHJvdG8ucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKG5hdGl2ZUV2ZW50TmFtZSwgY2IpIHtcbiAgICBpZiAobmF0aXZlRXZlbnROYW1lICE9PSBldmVudE5hbWVUb1dyYXAgfHwgIXRoaXMuX2V2ZW50TWFwXG4gICAgICAgIHx8ICF0aGlzLl9ldmVudE1hcFtjYl0pIHtcbiAgICAgIHJldHVybiBuYXRpdmVSZW1vdmVFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGNvbnN0IHVud3JhcHBlZENiID0gdGhpcy5fZXZlbnRNYXBbY2JdO1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudE1hcFtjYl07XG4gICAgcmV0dXJuIG5hdGl2ZVJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGhpcywgW25hdGl2ZUV2ZW50TmFtZSxcbiAgICAgIHVud3JhcHBlZENiXSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnb24nICsgZXZlbnROYW1lVG9XcmFwLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXNbJ19vbicgKyBldmVudE5hbWVUb1dyYXBdO1xuICAgIH0sXG4gICAgc2V0KGNiKSB7XG4gICAgICBpZiAodGhpc1snX29uJyArIGV2ZW50TmFtZVRvV3JhcF0pIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZVRvV3JhcCxcbiAgICAgICAgICAgIHRoaXNbJ19vbicgKyBldmVudE5hbWVUb1dyYXBdKTtcbiAgICAgICAgZGVsZXRlIHRoaXNbJ19vbicgKyBldmVudE5hbWVUb1dyYXBdO1xuICAgICAgfVxuICAgICAgaWYgKGNiKSB7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWVUb1dyYXAsXG4gICAgICAgICAgICB0aGlzWydfb24nICsgZXZlbnROYW1lVG9XcmFwXSA9IGNiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUxvZyhib29sKSB7XG4gIGlmICh0eXBlb2YgYm9vbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignQXJndW1lbnQgdHlwZTogJyArIHR5cGVvZiBib29sICtcbiAgICAgICAgJy4gUGxlYXNlIHVzZSBhIGJvb2xlYW4uJyk7XG4gIH1cbiAgbG9nRGlzYWJsZWRfID0gYm9vbDtcbiAgcmV0dXJuIChib29sKSA/ICdhZGFwdGVyLmpzIGxvZ2dpbmcgZGlzYWJsZWQnIDpcbiAgICAgICdhZGFwdGVyLmpzIGxvZ2dpbmcgZW5hYmxlZCc7XG59XG5cbi8qKlxuICogRGlzYWJsZSBvciBlbmFibGUgZGVwcmVjYXRpb24gd2FybmluZ3NcbiAqIEBwYXJhbSB7IWJvb2xlYW59IGJvb2wgc2V0IHRvIHRydWUgdG8gZGlzYWJsZSB3YXJuaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc2FibGVXYXJuaW5ncyhib29sKSB7XG4gIGlmICh0eXBlb2YgYm9vbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignQXJndW1lbnQgdHlwZTogJyArIHR5cGVvZiBib29sICtcbiAgICAgICAgJy4gUGxlYXNlIHVzZSBhIGJvb2xlYW4uJyk7XG4gIH1cbiAgZGVwcmVjYXRpb25XYXJuaW5nc18gPSAhYm9vbDtcbiAgcmV0dXJuICdhZGFwdGVyLmpzIGRlcHJlY2F0aW9uIHdhcm5pbmdzICcgKyAoYm9vbCA/ICdkaXNhYmxlZCcgOiAnZW5hYmxlZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAobG9nRGlzYWJsZWRfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUubG9nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFNob3dzIGEgZGVwcmVjYXRpb24gd2FybmluZyBzdWdnZXN0aW5nIHRoZSBtb2Rlcm4gYW5kIHNwZWMtY29tcGF0aWJsZSBBUEkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGVkKG9sZE1ldGhvZCwgbmV3TWV0aG9kKSB7XG4gIGlmICghZGVwcmVjYXRpb25XYXJuaW5nc18pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc29sZS53YXJuKG9sZE1ldGhvZCArICcgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSAnICsgbmV3TWV0aG9kICtcbiAgICAgICcgaW5zdGVhZC4nKTtcbn1cblxuLyoqXG4gKiBCcm93c2VyIGRldGVjdG9yLlxuICpcbiAqIEByZXR1cm4ge29iamVjdH0gcmVzdWx0IGNvbnRhaW5pbmcgYnJvd3NlciBhbmQgdmVyc2lvblxuICogICAgIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RCcm93c2VyKHdpbmRvdykge1xuICBjb25zdCB7bmF2aWdhdG9yfSA9IHdpbmRvdztcblxuICAvLyBSZXR1cm5lZCByZXN1bHQgb2JqZWN0LlxuICBjb25zdCByZXN1bHQgPSB7YnJvd3NlcjogbnVsbCwgdmVyc2lvbjogbnVsbH07XG5cbiAgLy8gRmFpbCBlYXJseSBpZiBpdCdzIG5vdCBhIGJyb3dzZXJcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cubmF2aWdhdG9yKSB7XG4gICAgcmVzdWx0LmJyb3dzZXIgPSAnTm90IGEgYnJvd3Nlci4nO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAobmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYSkgeyAvLyBGaXJlZm94LlxuICAgIHJlc3VsdC5icm93c2VyID0gJ2ZpcmVmb3gnO1xuICAgIHJlc3VsdC52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgL0ZpcmVmb3hcXC8oXFxkKylcXC4vLCAxKTtcbiAgfSBlbHNlIGlmIChuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhIHx8XG4gICAgICAod2luZG93LmlzU2VjdXJlQ29udGV4dCA9PT0gZmFsc2UgJiYgd2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICAgIXdpbmRvdy5SVENJY2VHYXRoZXJlcikpIHtcbiAgICAvLyBDaHJvbWUsIENocm9taXVtLCBXZWJ2aWV3LCBPcGVyYS5cbiAgICAvLyBWZXJzaW9uIG1hdGNoZXMgQ2hyb21lL1dlYlJUQyB2ZXJzaW9uLlxuICAgIC8vIENocm9tZSA3NCByZW1vdmVkIHdlYmtpdEdldFVzZXJNZWRpYSBvbiBodHRwIGFzIHdlbGwgc28gd2UgbmVlZCB0aGVcbiAgICAvLyBtb3JlIGNvbXBsaWNhdGVkIGZhbGxiYWNrIHRvIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLlxuICAgIHJlc3VsdC5icm93c2VyID0gJ2Nocm9tZSc7XG4gICAgcmVzdWx0LnZlcnNpb24gPSBleHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAvQ2hyb20oZXxpdW0pXFwvKFxcZCspXFwuLywgMik7XG4gIH0gZWxzZSBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJlxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS4oXFxkKykkLykpIHsgLy8gRWRnZS5cbiAgICByZXN1bHQuYnJvd3NlciA9ICdlZGdlJztcbiAgICByZXN1bHQudmVyc2lvbiA9IGV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIC9FZGdlXFwvKFxcZCspLihcXGQrKSQvLCAyKTtcbiAgfSBlbHNlIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLykpIHsgLy8gU2FmYXJpLlxuICAgIHJlc3VsdC5icm93c2VyID0gJ3NhZmFyaSc7XG4gICAgcmVzdWx0LnZlcnNpb24gPSBleHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAvQXBwbGVXZWJLaXRcXC8oXFxkKylcXC4vLCAxKTtcbiAgICByZXN1bHQuc3VwcG9ydHNVbmlmaWVkUGxhbiA9IHdpbmRvdy5SVENSdHBUcmFuc2NlaXZlciAmJlxuICAgICAgICAnY3VycmVudERpcmVjdGlvbicgaW4gd2luZG93LlJUQ1J0cFRyYW5zY2VpdmVyLnByb3RvdHlwZTtcbiAgfSBlbHNlIHsgLy8gRGVmYXVsdCBmYWxsdGhyb3VnaDogbm90IHN1cHBvcnRlZC5cbiAgICByZXN1bHQuYnJvd3NlciA9ICdOb3QgYSBzdXBwb3J0ZWQgYnJvd3Nlci4nO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBzb21ldGhpbmcgaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSBzb21ldGhpbmcgeW91IHdhbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHRydWUgaWYgdmFsIGlzIGFuIG9iamVjdCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuLyoqXG4gKiBSZW1vdmUgYWxsIGVtcHR5IG9iamVjdHMgYW5kIHVuZGVmaW5lZCB2YWx1ZXNcbiAqIGZyb20gYSBuZXN0ZWQgb2JqZWN0IC0tIGFuIGVuaGFuY2VkIGFuZCB2YW5pbGxhIHZlcnNpb25cbiAqIG9mIExvZGFzaCdzIGBjb21wYWN0YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhY3RPYmplY3QoZGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmtleXMoZGF0YSkucmVkdWNlKGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCBrZXkpIHtcbiAgICBjb25zdCBpc09iaiA9IGlzT2JqZWN0KGRhdGFba2V5XSk7XG4gICAgY29uc3QgdmFsdWUgPSBpc09iaiA/IGNvbXBhY3RPYmplY3QoZGF0YVtrZXldKSA6IGRhdGFba2V5XTtcbiAgICBjb25zdCBpc0VtcHR5T2JqZWN0ID0gaXNPYmogJiYgIU9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgaXNFbXB0eU9iamVjdCkge1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2N1bXVsYXRvciwge1trZXldOiB2YWx1ZX0pO1xuICB9LCB7fSk7XG59XG5cbi8qIGl0ZXJhdGVzIHRoZSBzdGF0cyBncmFwaCByZWN1cnNpdmVseS4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWxrU3RhdHMoc3RhdHMsIGJhc2UsIHJlc3VsdFNldCkge1xuICBpZiAoIWJhc2UgfHwgcmVzdWx0U2V0LmhhcyhiYXNlLmlkKSkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXN1bHRTZXQuc2V0KGJhc2UuaWQsIGJhc2UpO1xuICBPYmplY3Qua2V5cyhiYXNlKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgIGlmIChuYW1lLmVuZHNXaXRoKCdJZCcpKSB7XG4gICAgICB3YWxrU3RhdHMoc3RhdHMsIHN0YXRzLmdldChiYXNlW25hbWVdKSwgcmVzdWx0U2V0KTtcbiAgICB9IGVsc2UgaWYgKG5hbWUuZW5kc1dpdGgoJ0lkcycpKSB7XG4gICAgICBiYXNlW25hbWVdLmZvckVhY2goaWQgPT4ge1xuICAgICAgICB3YWxrU3RhdHMoc3RhdHMsIHN0YXRzLmdldChpZCksIHJlc3VsdFNldCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKiBmaWx0ZXIgZ2V0U3RhdHMgZm9yIGEgc2VuZGVyL3JlY2VpdmVyIHRyYWNrLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclN0YXRzKHJlc3VsdCwgdHJhY2ssIG91dGJvdW5kKSB7XG4gIGNvbnN0IHN0cmVhbVN0YXRzVHlwZSA9IG91dGJvdW5kID8gJ291dGJvdW5kLXJ0cCcgOiAnaW5ib3VuZC1ydHAnO1xuICBjb25zdCBmaWx0ZXJlZFJlc3VsdCA9IG5ldyBNYXAoKTtcbiAgaWYgKHRyYWNrID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZpbHRlcmVkUmVzdWx0O1xuICB9XG4gIGNvbnN0IHRyYWNrU3RhdHMgPSBbXTtcbiAgcmVzdWx0LmZvckVhY2godmFsdWUgPT4ge1xuICAgIGlmICh2YWx1ZS50eXBlID09PSAndHJhY2snICYmXG4gICAgICAgIHZhbHVlLnRyYWNrSWRlbnRpZmllciA9PT0gdHJhY2suaWQpIHtcbiAgICAgIHRyYWNrU3RhdHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgdHJhY2tTdGF0cy5mb3JFYWNoKHRyYWNrU3RhdCA9PiB7XG4gICAgcmVzdWx0LmZvckVhY2goc3RhdHMgPT4ge1xuICAgICAgaWYgKHN0YXRzLnR5cGUgPT09IHN0cmVhbVN0YXRzVHlwZSAmJiBzdGF0cy50cmFja0lkID09PSB0cmFja1N0YXQuaWQpIHtcbiAgICAgICAgd2Fsa1N0YXRzKHJlc3VsdCwgc3RhdHMsIGZpbHRlcmVkUmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBmaWx0ZXJlZFJlc3VsdDtcbn1cblxuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmNvbnN0IGxvZ2dpbmcgPSB1dGlscy5sb2c7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0VXNlck1lZGlhKHdpbmRvdykge1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcblxuICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBjb25zdCBjb25zdHJhaW50c1RvQ2hyb21lXyA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAodHlwZW9mIGMgIT09ICdvYmplY3QnIHx8IGMubWFuZGF0b3J5IHx8IGMub3B0aW9uYWwpIHtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICBjb25zdCBjYyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICdyZXF1aXJlJyB8fCBrZXkgPT09ICdhZHZhbmNlZCcgfHwga2V5ID09PSAnbWVkaWFTb3VyY2UnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHIgPSAodHlwZW9mIGNba2V5XSA9PT0gJ29iamVjdCcpID8gY1trZXldIDoge2lkZWFsOiBjW2tleV19O1xuICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgci5taW4gPSByLm1heCA9IHIuZXhhY3Q7XG4gICAgICB9XG4gICAgICBjb25zdCBvbGRuYW1lXyA9IGZ1bmN0aW9uKHByZWZpeCwgbmFtZSkge1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgcmV0dXJuIHByZWZpeCArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmFtZSA9PT0gJ2RldmljZUlkJykgPyAnc291cmNlSWQnIDogbmFtZTtcbiAgICAgIH07XG4gICAgICBpZiAoci5pZGVhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNjLm9wdGlvbmFsID0gY2Mub3B0aW9uYWwgfHwgW107XG4gICAgICAgIGxldCBvYyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHIuaWRlYWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJ21pbicsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgICBvYyA9IHt9O1xuICAgICAgICAgIG9jW29sZG5hbWVfKCdtYXgnLCBrZXkpXSA9IHIuaWRlYWw7XG4gICAgICAgICAgY2Mub3B0aW9uYWwucHVzaChvYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJycsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY2MubWFuZGF0b3J5ID0gY2MubWFuZGF0b3J5IHx8IHt9O1xuICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8oJycsIGtleSldID0gci5leGFjdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFsnbWluJywgJ21heCddLmZvckVhY2gobWl4ID0+IHtcbiAgICAgICAgICBpZiAoclttaXhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNjLm1hbmRhdG9yeSA9IGNjLm1hbmRhdG9yeSB8fCB7fTtcbiAgICAgICAgICAgIGNjLm1hbmRhdG9yeVtvbGRuYW1lXyhtaXgsIGtleSldID0gclttaXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGMuYWR2YW5jZWQpIHtcbiAgICAgIGNjLm9wdGlvbmFsID0gKGNjLm9wdGlvbmFsIHx8IFtdKS5jb25jYXQoYy5hZHZhbmNlZCk7XG4gICAgfVxuICAgIHJldHVybiBjYztcbiAgfTtcblxuICBjb25zdCBzaGltQ29uc3RyYWludHNfID0gZnVuY3Rpb24oY29uc3RyYWludHMsIGZ1bmMpIHtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2MSkge1xuICAgICAgcmV0dXJuIGZ1bmMoY29uc3RyYWludHMpO1xuICAgIH1cbiAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICBpZiAoY29uc3RyYWludHMgJiYgdHlwZW9mIGNvbnN0cmFpbnRzLmF1ZGlvID09PSAnb2JqZWN0Jykge1xuICAgICAgY29uc3QgcmVtYXAgPSBmdW5jdGlvbihvYmosIGEsIGIpIHtcbiAgICAgICAgaWYgKGEgaW4gb2JqICYmICEoYiBpbiBvYmopKSB7XG4gICAgICAgICAgb2JqW2JdID0gb2JqW2FdO1xuICAgICAgICAgIGRlbGV0ZSBvYmpbYV07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICAgIHJlbWFwKGNvbnN0cmFpbnRzLmF1ZGlvLCAnYXV0b0dhaW5Db250cm9sJywgJ2dvb2dBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgIHJlbWFwKGNvbnN0cmFpbnRzLmF1ZGlvLCAnbm9pc2VTdXBwcmVzc2lvbicsICdnb29nTm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgY29uc3RyYWludHMuYXVkaW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy5hdWRpbyk7XG4gICAgfVxuICAgIGlmIChjb25zdHJhaW50cyAmJiB0eXBlb2YgY29uc3RyYWludHMudmlkZW8gPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBTaGltIGZhY2luZ01vZGUgZm9yIG1vYmlsZSAmIHN1cmZhY2UgcHJvLlxuICAgICAgbGV0IGZhY2UgPSBjb25zdHJhaW50cy52aWRlby5mYWNpbmdNb2RlO1xuICAgICAgZmFjZSA9IGZhY2UgJiYgKCh0eXBlb2YgZmFjZSA9PT0gJ29iamVjdCcpID8gZmFjZSA6IHtpZGVhbDogZmFjZX0pO1xuICAgICAgY29uc3QgZ2V0U3VwcG9ydGVkRmFjaW5nTW9kZUxpZXMgPSBicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNjY7XG5cbiAgICAgIGlmICgoZmFjZSAmJiAoZmFjZS5leGFjdCA9PT0gJ3VzZXInIHx8IGZhY2UuZXhhY3QgPT09ICdlbnZpcm9ubWVudCcgfHxcbiAgICAgICAgICAgICAgICAgICAgZmFjZS5pZGVhbCA9PT0gJ3VzZXInIHx8IGZhY2UuaWRlYWwgPT09ICdlbnZpcm9ubWVudCcpKSAmJlxuICAgICAgICAgICEobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cyAmJlxuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cygpLmZhY2luZ01vZGUgJiZcbiAgICAgICAgICAgICFnZXRTdXBwb3J0ZWRGYWNpbmdNb2RlTGllcykpIHtcbiAgICAgICAgZGVsZXRlIGNvbnN0cmFpbnRzLnZpZGVvLmZhY2luZ01vZGU7XG4gICAgICAgIGxldCBtYXRjaGVzO1xuICAgICAgICBpZiAoZmFjZS5leGFjdCA9PT0gJ2Vudmlyb25tZW50JyB8fCBmYWNlLmlkZWFsID09PSAnZW52aXJvbm1lbnQnKSB7XG4gICAgICAgICAgbWF0Y2hlcyA9IFsnYmFjaycsICdyZWFyJ107XG4gICAgICAgIH0gZWxzZSBpZiAoZmFjZS5leGFjdCA9PT0gJ3VzZXInIHx8IGZhY2UuaWRlYWwgPT09ICd1c2VyJykge1xuICAgICAgICAgIG1hdGNoZXMgPSBbJ2Zyb250J107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAvLyBMb29rIGZvciBtYXRjaGVzIGluIGxhYmVsLCBvciB1c2UgbGFzdCBjYW0gZm9yIGJhY2sgKHR5cGljYWwpLlxuICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKVxuICAgICAgICAgIC50aGVuKGRldmljZXMgPT4ge1xuICAgICAgICAgICAgZGV2aWNlcyA9IGRldmljZXMuZmlsdGVyKGQgPT4gZC5raW5kID09PSAndmlkZW9pbnB1dCcpO1xuICAgICAgICAgICAgbGV0IGRldiA9IGRldmljZXMuZmluZChkID0+IG1hdGNoZXMuc29tZShtYXRjaCA9PlxuICAgICAgICAgICAgICBkLmxhYmVsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobWF0Y2gpKSk7XG4gICAgICAgICAgICBpZiAoIWRldiAmJiBkZXZpY2VzLmxlbmd0aCAmJiBtYXRjaGVzLmluY2x1ZGVzKCdiYWNrJykpIHtcbiAgICAgICAgICAgICAgZGV2ID0gZGV2aWNlc1tkZXZpY2VzLmxlbmd0aCAtIDFdOyAvLyBtb3JlIGxpa2VseSB0aGUgYmFjayBjYW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZXYpIHtcbiAgICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8uZGV2aWNlSWQgPSBmYWNlLmV4YWN0ID8ge2V4YWN0OiBkZXYuZGV2aWNlSWR9IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkZWFsOiBkZXYuZGV2aWNlSWR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy52aWRlbyk7XG4gICAgICAgICAgICBsb2dnaW5nKCdjaHJvbWU6ICcgKyBKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoY29uc3RyYWludHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGNvbnN0cmFpbnRzLnZpZGVvKTtcbiAgICB9XG4gICAgbG9nZ2luZygnY2hyb21lOiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICByZXR1cm4gZnVuYyhjb25zdHJhaW50cyk7XG4gIH07XG5cbiAgY29uc3Qgc2hpbUVycm9yXyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2NCkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgIFBlcm1pc3Npb25EZW5pZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIFBlcm1pc3Npb25EaXNtaXNzZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIEludmFsaWRTdGF0ZUVycm9yOiAnTm90QWxsb3dlZEVycm9yJyxcbiAgICAgICAgRGV2aWNlc05vdEZvdW5kRXJyb3I6ICdOb3RGb3VuZEVycm9yJyxcbiAgICAgICAgQ29uc3RyYWludE5vdFNhdGlzZmllZEVycm9yOiAnT3ZlcmNvbnN0cmFpbmVkRXJyb3InLFxuICAgICAgICBUcmFja1N0YXJ0RXJyb3I6ICdOb3RSZWFkYWJsZUVycm9yJyxcbiAgICAgICAgTWVkaWFEZXZpY2VGYWlsZWREdWVUb1NodXRkb3duOiAnTm90QWxsb3dlZEVycm9yJyxcbiAgICAgICAgTWVkaWFEZXZpY2VLaWxsU3dpdGNoT246ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgICAgICBUYWJDYXB0dXJlRXJyb3I6ICdBYm9ydEVycm9yJyxcbiAgICAgICAgU2NyZWVuQ2FwdHVyZUVycm9yOiAnQWJvcnRFcnJvcicsXG4gICAgICAgIERldmljZUNhcHR1cmVFcnJvcjogJ0Fib3J0RXJyb3InXG4gICAgICB9W2UubmFtZV0gfHwgZS5uYW1lLFxuICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgY29uc3RyYWludDogZS5jb25zdHJhaW50IHx8IGUuY29uc3RyYWludE5hbWUsXG4gICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArICh0aGlzLm1lc3NhZ2UgJiYgJzogJykgKyB0aGlzLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBnZXRVc2VyTWVkaWFfID0gZnVuY3Rpb24oY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICAgIHNoaW1Db25zdHJhaW50c18oY29uc3RyYWludHMsIGMgPT4ge1xuICAgICAgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYShjLCBvblN1Y2Nlc3MsIGUgPT4ge1xuICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgIG9uRXJyb3Ioc2hpbUVycm9yXyhlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gZ2V0VXNlck1lZGlhXy5iaW5kKG5hdmlnYXRvcik7XG5cbiAgLy8gRXZlbiB0aG91Z2ggQ2hyb21lIDQ1IGhhcyBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzIGFuZCBhIGdldFVzZXJNZWRpYVxuICAvLyBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgUHJvbWlzZSwgaXQgZG9lcyBub3QgYWNjZXB0IHNwZWMtc3R5bGVcbiAgLy8gY29uc3RyYWludHMuXG4gIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIGNvbnN0IG9yaWdHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5cbiAgICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGNzKSB7XG4gICAgICByZXR1cm4gc2hpbUNvbnN0cmFpbnRzXyhjcywgYyA9PiBvcmlnR2V0VXNlck1lZGlhKGMpLnRoZW4oc3RyZWFtID0+IHtcbiAgICAgICAgaWYgKGMuYXVkaW8gJiYgIXN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCB8fFxuICAgICAgICAgICAgYy52aWRlbyAmJiAhc3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoKSB7XG4gICAgICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJycsICdOb3RGb3VuZEVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sIGUgPT4gUHJvbWlzZS5yZWplY3Qoc2hpbUVycm9yXyhlKSkpKTtcbiAgICB9O1xuICB9XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxOCBUaGUgYWRhcHRlci5qcyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0RGlzcGxheU1lZGlhKHdpbmRvdywgZ2V0U291cmNlSWQpIHtcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmXG4gICAgJ2dldERpc3BsYXlNZWRpYScgaW4gd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGdldFNvdXJjZUlkIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgd2l0aFxuICAvLyB0aGUgc291cmNlSWQgb2YgdGhlIHNjcmVlbi93aW5kb3cvdGFiIHRvIGJlIHNoYXJlZC5cbiAgaWYgKHR5cGVvZiBnZXRTb3VyY2VJZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ3NoaW1HZXREaXNwbGF5TWVkaWE6IGdldFNvdXJjZUlkIGFyZ3VtZW50IGlzIG5vdCAnICtcbiAgICAgICAgJ2EgZnVuY3Rpb24nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhID1cbiAgICBmdW5jdGlvbiBnZXREaXNwbGF5TWVkaWEoY29uc3RyYWludHMpIHtcbiAgICAgIHJldHVybiBnZXRTb3VyY2VJZChjb25zdHJhaW50cylcbiAgICAgICAgLnRoZW4oc291cmNlSWQgPT4ge1xuICAgICAgICAgIGNvbnN0IHdpZHRoU3BlY2lmaWVkID0gY29uc3RyYWludHMudmlkZW8gJiYgY29uc3RyYWludHMudmlkZW8ud2lkdGg7XG4gICAgICAgICAgY29uc3QgaGVpZ2h0U3BlY2lmaWVkID0gY29uc3RyYWludHMudmlkZW8gJiZcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLmhlaWdodDtcbiAgICAgICAgICBjb25zdCBmcmFtZVJhdGVTcGVjaWZpZWQgPSBjb25zdHJhaW50cy52aWRlbyAmJlxuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8uZnJhbWVSYXRlO1xuICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvID0ge1xuICAgICAgICAgICAgbWFuZGF0b3J5OiB7XG4gICAgICAgICAgICAgIGNocm9tZU1lZGlhU291cmNlOiAnZGVza3RvcCcsXG4gICAgICAgICAgICAgIGNocm9tZU1lZGlhU291cmNlSWQ6IHNvdXJjZUlkLFxuICAgICAgICAgICAgICBtYXhGcmFtZVJhdGU6IGZyYW1lUmF0ZVNwZWNpZmllZCB8fCAzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAod2lkdGhTcGVjaWZpZWQpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLm1hbmRhdG9yeS5tYXhXaWR0aCA9IHdpZHRoU3BlY2lmaWVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGVpZ2h0U3BlY2lmaWVkKSB7XG4gICAgICAgICAgICBjb25zdHJhaW50cy52aWRlby5tYW5kYXRvcnkubWF4SGVpZ2h0ID0gaGVpZ2h0U3BlY2lmaWVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbiIsIlxuLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbmV4cG9ydCB7c2hpbUdldFVzZXJNZWRpYX0gZnJvbSAnLi9nZXR1c2VybWVkaWEnO1xuZXhwb3J0IHtzaGltR2V0RGlzcGxheU1lZGlhfSBmcm9tICcuL2dldGRpc3BsYXltZWRpYSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltTWVkaWFTdHJlYW0od2luZG93KSB7XG4gIHdpbmRvdy5NZWRpYVN0cmVhbSA9IHdpbmRvdy5NZWRpYVN0cmVhbSB8fCB3aW5kb3cud2Via2l0TWVkaWFTdHJlYW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltT25UcmFjayh3aW5kb3cpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiAhKCdvbnRyYWNrJyBpblxuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ29udHJhY2snLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbnRyYWNrO1xuICAgICAgfSxcbiAgICAgIHNldChmKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbnRyYWNrKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbnRyYWNrID0gZik7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIGNvbnN0IG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb247XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICBmdW5jdGlvbiBzZXRSZW1vdGVEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9vbnRyYWNrcG9seSkge1xuICAgICAgICAgIHRoaXMuX29udHJhY2twb2x5ID0gKGUpID0+IHtcbiAgICAgICAgICAgIC8vIG9uYWRkc3RyZWFtIGRvZXMgbm90IGZpcmUgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIHRvIGFuIGV4aXN0aW5nXG4gICAgICAgICAgICAvLyBzdHJlYW0uIEJ1dCBzdHJlYW0ub25hZGR0cmFjayBpcyBpbXBsZW1lbnRlZCBzbyB3ZSB1c2UgdGhhdC5cbiAgICAgICAgICAgIGUuc3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdGUgPT4ge1xuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycykge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0gdGhpcy5nZXRSZWNlaXZlcnMoKVxuICAgICAgICAgICAgICAgICAgLmZpbmQociA9PiByLnRyYWNrICYmIHIudHJhY2suaWQgPT09IHRlLnRyYWNrLmlkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlciA9IHt0cmFjazogdGUudHJhY2t9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdGUudHJhY2s7XG4gICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYW5zY2VpdmVyID0ge3JlY2VpdmVyfTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07XG4gICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGUuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycykge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0gdGhpcy5nZXRSZWNlaXZlcnMoKVxuICAgICAgICAgICAgICAgICAgLmZpbmQociA9PiByLnRyYWNrICYmIHIudHJhY2suaWQgPT09IHRyYWNrLmlkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlciA9IHt0cmFja307XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdHJhY2s7XG4gICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYW5zY2VpdmVyID0ge3JlY2VpdmVyfTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07XG4gICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignYWRkc3RyZWFtJywgdGhpcy5fb250cmFja3BvbHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gZXZlbiBpZiBSVENSdHBUcmFuc2NlaXZlciBpcyBpbiB3aW5kb3csIGl0IGlzIG9ubHkgdXNlZCBhbmRcbiAgICAvLyBlbWl0dGVkIGluIHVuaWZpZWQtcGxhbi4gVW5mb3J0dW5hdGVseSB0aGlzIG1lYW5zIHdlIG5lZWRcbiAgICAvLyB0byB1bmNvbmRpdGlvbmFsbHkgd3JhcCB0aGUgZXZlbnQuXG4gICAgdXRpbHMud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQod2luZG93LCAndHJhY2snLCBlID0+IHtcbiAgICAgIGlmICghZS50cmFuc2NlaXZlcikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgJ3RyYW5zY2VpdmVyJyxcbiAgICAgICAgICB7dmFsdWU6IHtyZWNlaXZlcjogZS5yZWNlaXZlcn19KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0U2VuZGVyc1dpdGhEdG1mKHdpbmRvdykge1xuICAvLyBPdmVycmlkZXMgYWRkVHJhY2svcmVtb3ZlVHJhY2ssIGRlcGVuZHMgb24gc2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2suXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgICEoJ2dldFNlbmRlcnMnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpICYmXG4gICAgICAnY3JlYXRlRFRNRlNlbmRlcicgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkge1xuICAgIGNvbnN0IHNoaW1TZW5kZXJXaXRoRHRtZiA9IGZ1bmN0aW9uKHBjLCB0cmFjaykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHJhY2ssXG4gICAgICAgIGdldCBkdG1mKCkge1xuICAgICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0cmFjay5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2R0bWYgPSBwYy5jcmVhdGVEVE1GU2VuZGVyKHRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX2R0bWYgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5fZHRtZjtcbiAgICAgICAgfSxcbiAgICAgICAgX3BjOiBwY1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gYXVnbWVudCBhZGRUcmFjayB3aGVuIGdldFNlbmRlcnMgaXMgbm90IGF2YWlsYWJsZS5cbiAgICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycykge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzID0gZnVuY3Rpb24gZ2V0U2VuZGVycygpIHtcbiAgICAgICAgdGhpcy5fc2VuZGVycyA9IHRoaXMuX3NlbmRlcnMgfHwgW107XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kZXJzLnNsaWNlKCk7IC8vIHJldHVybiBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLlxuICAgICAgfTtcbiAgICAgIGNvbnN0IG9yaWdBZGRUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID1cbiAgICAgICAgZnVuY3Rpb24gYWRkVHJhY2sodHJhY2ssIHN0cmVhbSkge1xuICAgICAgICAgIGxldCBzZW5kZXIgPSBvcmlnQWRkVHJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICBpZiAoIXNlbmRlcikge1xuICAgICAgICAgICAgc2VuZGVyID0gc2hpbVNlbmRlcldpdGhEdG1mKHRoaXMsIHRyYWNrKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRlcnMucHVzaChzZW5kZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2VuZGVyO1xuICAgICAgICB9O1xuXG4gICAgICBjb25zdCBvcmlnUmVtb3ZlVHJhY2sgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrO1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjayA9XG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHNlbmRlcikge1xuICAgICAgICAgIG9yaWdSZW1vdmVUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX3NlbmRlcnMuaW5kZXhPZihzZW5kZXIpO1xuICAgICAgICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qgb3JpZ0FkZFN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24gYWRkU3RyZWFtKHN0cmVhbSkge1xuICAgICAgdGhpcy5fc2VuZGVycyA9IHRoaXMuX3NlbmRlcnMgfHwgW107XG4gICAgICBvcmlnQWRkU3RyZWFtLmFwcGx5KHRoaXMsIFtzdHJlYW1dKTtcbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgdGhpcy5fc2VuZGVycy5wdXNoKHNoaW1TZW5kZXJXaXRoRHRtZih0aGlzLCB0cmFjaykpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9yaWdSZW1vdmVTdHJlYW0gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbTtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIHRoaXMuX3NlbmRlcnMgPSB0aGlzLl9zZW5kZXJzIHx8IFtdO1xuICAgICAgICBvcmlnUmVtb3ZlU3RyZWFtLmFwcGx5KHRoaXMsIFtzdHJlYW1dKTtcblxuICAgICAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICAgICAgY29uc3Qgc2VuZGVyID0gdGhpcy5fc2VuZGVycy5maW5kKHMgPT4gcy50cmFjayA9PT0gdHJhY2spO1xuICAgICAgICAgIGlmIChzZW5kZXIpIHsgLy8gcmVtb3ZlIHNlbmRlclxuICAgICAgICAgICAgdGhpcy5fc2VuZGVycy5zcGxpY2UodGhpcy5fc2VuZGVycy5pbmRleE9mKHNlbmRlciksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgICdnZXRTZW5kZXJzJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlICYmXG4gICAgICAgICAgICAgJ2NyZWF0ZURUTUZTZW5kZXInIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgJiZcbiAgICAgICAgICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyICYmXG4gICAgICAgICAgICAgISgnZHRtZicgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKSB7XG4gICAgY29uc3Qgb3JpZ0dldFNlbmRlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzID0gZnVuY3Rpb24gZ2V0U2VuZGVycygpIHtcbiAgICAgIGNvbnN0IHNlbmRlcnMgPSBvcmlnR2V0U2VuZGVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICBzZW5kZXJzLmZvckVhY2goc2VuZGVyID0+IHNlbmRlci5fcGMgPSB0aGlzKTtcbiAgICAgIHJldHVybiBzZW5kZXJzO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUsICdkdG1mJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fZHRtZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudHJhY2sua2luZCA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgdGhpcy5fZHRtZiA9IHRoaXMuX3BjLmNyZWF0ZURUTUZTZW5kZXIodGhpcy50cmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2R0bWYgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZHRtZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUdldFN0YXRzKHdpbmRvdykge1xuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9yaWdHZXRTdGF0cyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICBjb25zdCBbc2VsZWN0b3IsIG9uU3VjYywgb25FcnJdID0gYXJndW1lbnRzO1xuXG4gICAgLy8gSWYgc2VsZWN0b3IgaXMgYSBmdW5jdGlvbiB0aGVuIHdlIGFyZSBpbiB0aGUgb2xkIHN0eWxlIHN0YXRzIHNvIGp1c3RcbiAgICAvLyBwYXNzIGJhY2sgdGhlIG9yaWdpbmFsIGdldFN0YXRzIGZvcm1hdCB0byBhdm9pZCBicmVha2luZyBvbGQgdXNlcnMuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG9yaWdHZXRTdGF0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gc3BlYy1zdHlsZSBnZXRTdGF0cyBpcyBzdXBwb3J0ZWQsIHJldHVybiB0aG9zZSB3aGVuIGNhbGxlZCB3aXRoXG4gICAgLy8gZWl0aGVyIG5vIGFyZ3VtZW50cyBvciB0aGUgc2VsZWN0b3IgYXJndW1lbnQgaXMgbnVsbC5cbiAgICBpZiAob3JpZ0dldFN0YXRzLmxlbmd0aCA9PT0gMCAmJiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICB0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpKSB7XG4gICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtdKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaXhDaHJvbWVTdGF0c18gPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgY29uc3Qgc3RhbmRhcmRSZXBvcnQgPSB7fTtcbiAgICAgIGNvbnN0IHJlcG9ydHMgPSByZXNwb25zZS5yZXN1bHQoKTtcbiAgICAgIHJlcG9ydHMuZm9yRWFjaChyZXBvcnQgPT4ge1xuICAgICAgICBjb25zdCBzdGFuZGFyZFN0YXRzID0ge1xuICAgICAgICAgIGlkOiByZXBvcnQuaWQsXG4gICAgICAgICAgdGltZXN0YW1wOiByZXBvcnQudGltZXN0YW1wLFxuICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgIGxvY2FsY2FuZGlkYXRlOiAnbG9jYWwtY2FuZGlkYXRlJyxcbiAgICAgICAgICAgIHJlbW90ZWNhbmRpZGF0ZTogJ3JlbW90ZS1jYW5kaWRhdGUnXG4gICAgICAgICAgfVtyZXBvcnQudHlwZV0gfHwgcmVwb3J0LnR5cGVcbiAgICAgICAgfTtcbiAgICAgICAgcmVwb3J0Lm5hbWVzKCkuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgICBzdGFuZGFyZFN0YXRzW25hbWVdID0gcmVwb3J0LnN0YXQobmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdGFuZGFyZFJlcG9ydFtzdGFuZGFyZFN0YXRzLmlkXSA9IHN0YW5kYXJkU3RhdHM7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHN0YW5kYXJkUmVwb3J0O1xuICAgIH07XG5cbiAgICAvLyBzaGltIGdldFN0YXRzIHdpdGggbWFwbGlrZSBzdXBwb3J0XG4gICAgY29uc3QgbWFrZU1hcFN0YXRzID0gZnVuY3Rpb24oc3RhdHMpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwKE9iamVjdC5rZXlzKHN0YXRzKS5tYXAoa2V5ID0+IFtrZXksIHN0YXRzW2tleV1dKSk7XG4gICAgfTtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NDYWxsYmFja1dyYXBwZXJfID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgb25TdWNjKG1ha2VNYXBTdGF0cyhmaXhDaHJvbWVTdGF0c18ocmVzcG9uc2UpKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtzdWNjZXNzQ2FsbGJhY2tXcmFwcGVyXyxcbiAgICAgICAgc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICAvLyBwcm9taXNlLXN1cHBvcnRcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICByZXNvbHZlKG1ha2VNYXBTdGF0cyhmaXhDaHJvbWVTdGF0c18ocmVzcG9uc2UpKSk7XG4gICAgICAgIH0sIHJlamVjdF0pO1xuICAgIH0pLnRoZW4ob25TdWNjLCBvbkVycik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltU2VuZGVyUmVjZWl2ZXJHZXRTdGF0cyh3aW5kb3cpIHtcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyICYmIHdpbmRvdy5SVENSdHBSZWNlaXZlcikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBzaGltIHNlbmRlciBzdGF0cy5cbiAgaWYgKCEoJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSkpIHtcbiAgICBjb25zdCBvcmlnR2V0U2VuZGVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycztcbiAgICBpZiAob3JpZ0dldFNlbmRlcnMpIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uIGdldFNlbmRlcnMoKSB7XG4gICAgICAgIGNvbnN0IHNlbmRlcnMgPSBvcmlnR2V0U2VuZGVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICAgIHNlbmRlcnMuZm9yRWFjaChzZW5kZXIgPT4gc2VuZGVyLl9wYyA9IHRoaXMpO1xuICAgICAgICByZXR1cm4gc2VuZGVycztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICBpZiAob3JpZ0FkZFRyYWNrKSB7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID0gZnVuY3Rpb24gYWRkVHJhY2soKSB7XG4gICAgICAgIGNvbnN0IHNlbmRlciA9IG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBzZW5kZXIuX3BjID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHNlbmRlcjtcbiAgICAgIH07XG4gICAgfVxuICAgIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgICBjb25zdCBzZW5kZXIgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCkudGhlbihyZXN1bHQgPT5cbiAgICAgICAgLyogTm90ZTogdGhpcyB3aWxsIGluY2x1ZGUgc3RhdHMgb2YgYWxsIHNlbmRlcnMgdGhhdFxuICAgICAgICAgKiAgIHNlbmQgYSB0cmFjayB3aXRoIHRoZSBzYW1lIGlkIGFzIHNlbmRlci50cmFjayBhc1xuICAgICAgICAgKiAgIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBpZGVudGlmeSB0aGUgUlRDUnRwU2VuZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdXRpbHMuZmlsdGVyU3RhdHMocmVzdWx0LCBzZW5kZXIudHJhY2ssIHRydWUpKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gc2hpbSByZWNlaXZlciBzdGF0cy5cbiAgaWYgKCEoJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKSkge1xuICAgIGNvbnN0IG9yaWdHZXRSZWNlaXZlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycztcbiAgICBpZiAob3JpZ0dldFJlY2VpdmVycykge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnMgPVxuICAgICAgICBmdW5jdGlvbiBnZXRSZWNlaXZlcnMoKSB7XG4gICAgICAgICAgY29uc3QgcmVjZWl2ZXJzID0gb3JpZ0dldFJlY2VpdmVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICAgICAgcmVjZWl2ZXJzLmZvckVhY2gocmVjZWl2ZXIgPT4gcmVjZWl2ZXIuX3BjID0gdGhpcyk7XG4gICAgICAgICAgcmV0dXJuIHJlY2VpdmVycztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXRpbHMud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQod2luZG93LCAndHJhY2snLCBlID0+IHtcbiAgICAgIGUucmVjZWl2ZXIuX3BjID0gZS5zcmNFbGVtZW50O1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gICAgd2luZG93LlJUQ1J0cFJlY2VpdmVyLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uIGdldFN0YXRzKCkge1xuICAgICAgY29uc3QgcmVjZWl2ZXIgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCkudGhlbihyZXN1bHQgPT5cbiAgICAgICAgdXRpbHMuZmlsdGVyU3RhdHMocmVzdWx0LCByZWNlaXZlci50cmFjaywgZmFsc2UpKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCEoJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSAmJlxuICAgICAgJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNoaW0gUlRDUGVlckNvbm5lY3Rpb24uZ2V0U3RhdHModHJhY2spLlxuICBjb25zdCBvcmlnR2V0U3RhdHMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmXG4gICAgICAgIGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrKSB7XG4gICAgICBjb25zdCB0cmFjayA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGxldCBzZW5kZXI7XG4gICAgICBsZXQgcmVjZWl2ZXI7XG4gICAgICBsZXQgZXJyO1xuICAgICAgdGhpcy5nZXRTZW5kZXJzKCkuZm9yRWFjaChzID0+IHtcbiAgICAgICAgaWYgKHMudHJhY2sgPT09IHRyYWNrKSB7XG4gICAgICAgICAgaWYgKHNlbmRlcikge1xuICAgICAgICAgICAgZXJyID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZGVyID0gcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXRSZWNlaXZlcnMoKS5mb3JFYWNoKHIgPT4ge1xuICAgICAgICBpZiAoci50cmFjayA9PT0gdHJhY2spIHtcbiAgICAgICAgICBpZiAocmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGVyciA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlY2VpdmVyID0gcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIudHJhY2sgPT09IHRyYWNrO1xuICAgICAgfSk7XG4gICAgICBpZiAoZXJyIHx8IChzZW5kZXIgJiYgcmVjZWl2ZXIpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRE9NRXhjZXB0aW9uKFxuICAgICAgICAgICdUaGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBzZW5kZXIgb3IgcmVjZWl2ZXIgZm9yIHRoZSB0cmFjay4nLFxuICAgICAgICAgICdJbnZhbGlkQWNjZXNzRXJyb3InKSk7XG4gICAgICB9IGVsc2UgaWYgKHNlbmRlcikge1xuICAgICAgICByZXR1cm4gc2VuZGVyLmdldFN0YXRzKCk7XG4gICAgICB9IGVsc2UgaWYgKHJlY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiByZWNlaXZlci5nZXRTdGF0cygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICdUaGVyZSBpcyBubyBzZW5kZXIgb3IgcmVjZWl2ZXIgZm9yIHRoZSB0cmFjay4nLFxuICAgICAgICAnSW52YWxpZEFjY2Vzc0Vycm9yJykpO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQWRkVHJhY2tSZW1vdmVUcmFja1dpdGhOYXRpdmUod2luZG93KSB7XG4gIC8vIHNoaW0gYWRkVHJhY2svcmVtb3ZlVHJhY2sgd2l0aCBuYXRpdmUgdmFyaWFudHMgaW4gb3JkZXIgdG8gbWFrZVxuICAvLyB0aGUgaW50ZXJhY3Rpb25zIHdpdGggbGVnYWN5IGdldExvY2FsU3RyZWFtcyBiZWhhdmUgYXMgaW4gb3RoZXIgYnJvd3NlcnMuXG4gIC8vIEtlZXBzIGEgbWFwcGluZyBzdHJlYW0uaWQgPT4gW3N0cmVhbSwgcnRwc2VuZGVycy4uLl1cbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbXMgPVxuICAgIGZ1bmN0aW9uIGdldExvY2FsU3RyZWFtcygpIHtcbiAgICAgIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgPSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zIHx8IHt9O1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMpXG4gICAgICAgIC5tYXAoc3RyZWFtSWQgPT4gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW1JZF1bMF0pO1xuICAgIH07XG5cbiAgY29uc3Qgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9XG4gICAgZnVuY3Rpb24gYWRkVHJhY2sodHJhY2ssIHN0cmVhbSkge1xuICAgICAgaWYgKCFzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG5cbiAgICAgIGNvbnN0IHNlbmRlciA9IG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKCF0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF0pIHtcbiAgICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdID0gW3N0cmVhbSwgc2VuZGVyXTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdLmluZGV4T2Yoc2VuZGVyKSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdLnB1c2goc2VuZGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZW5kZXI7XG4gICAgfTtcblxuICBjb25zdCBvcmlnQWRkU3RyZWFtID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24gYWRkU3RyZWFtKHN0cmVhbSkge1xuICAgIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgPSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zIHx8IHt9O1xuXG4gICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgY29uc3QgYWxyZWFkeUV4aXN0cyA9IHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUcmFjayBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGV4aXN0aW5nU2VuZGVycyA9IHRoaXMuZ2V0U2VuZGVycygpO1xuICAgIG9yaWdBZGRTdHJlYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBjb25zdCBuZXdTZW5kZXJzID0gdGhpcy5nZXRTZW5kZXJzKClcbiAgICAgIC5maWx0ZXIobmV3U2VuZGVyID0+IGV4aXN0aW5nU2VuZGVycy5pbmRleE9mKG5ld1NlbmRlcikgPT09IC0xKTtcbiAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF0gPSBbc3RyZWFtXS5jb25jYXQobmV3U2VuZGVycyk7XG4gIH07XG5cbiAgY29uc3Qgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG4gICAgICBkZWxldGUgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdO1xuICAgICAgcmV0dXJuIG9yaWdSZW1vdmVTdHJlYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gIGNvbnN0IG9yaWdSZW1vdmVUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2s7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2sgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHNlbmRlcikge1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG4gICAgICBpZiAoc2VuZGVyKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMpLmZvckVhY2goc3RyZWFtSWQgPT4ge1xuICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtSWRdLmluZGV4T2Yoc2VuZGVyKTtcbiAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW1JZF0uc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdSZW1vdmVUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQWRkVHJhY2tSZW1vdmVUcmFjayh3aW5kb3cpIHtcbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG4gIC8vIHNoaW0gYWRkVHJhY2sgYW5kIHJlbW92ZVRyYWNrLlxuICBpZiAod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayAmJlxuICAgICAgYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA2NSkge1xuICAgIHJldHVybiBzaGltQWRkVHJhY2tSZW1vdmVUcmFja1dpdGhOYXRpdmUod2luZG93KTtcbiAgfVxuXG4gIC8vIGFsc28gc2hpbSBwYy5nZXRMb2NhbFN0cmVhbXMgd2hlbiBhZGRUcmFjayBpcyBzaGltbWVkXG4gIC8vIHRvIHJldHVybiB0aGUgb3JpZ2luYWwgc3RyZWFtcy5cbiAgY29uc3Qgb3JpZ0dldExvY2FsU3RyZWFtcyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVcbiAgICAgIC5nZXRMb2NhbFN0cmVhbXM7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zID1cbiAgICBmdW5jdGlvbiBnZXRMb2NhbFN0cmVhbXMoKSB7XG4gICAgICBjb25zdCBuYXRpdmVTdHJlYW1zID0gb3JpZ0dldExvY2FsU3RyZWFtcy5hcHBseSh0aGlzKTtcbiAgICAgIHRoaXMuX3JldmVyc2VTdHJlYW1zID0gdGhpcy5fcmV2ZXJzZVN0cmVhbXMgfHwge307XG4gICAgICByZXR1cm4gbmF0aXZlU3RyZWFtcy5tYXAoc3RyZWFtID0+IHRoaXMuX3JldmVyc2VTdHJlYW1zW3N0cmVhbS5pZF0pO1xuICAgIH07XG5cbiAgY29uc3Qgb3JpZ0FkZFN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbSA9IGZ1bmN0aW9uIGFkZFN0cmVhbShzdHJlYW0pIHtcbiAgICB0aGlzLl9zdHJlYW1zID0gdGhpcy5fc3RyZWFtcyB8fCB7fTtcbiAgICB0aGlzLl9yZXZlcnNlU3RyZWFtcyA9IHRoaXMuX3JldmVyc2VTdHJlYW1zIHx8IHt9O1xuXG4gICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgY29uc3QgYWxyZWFkeUV4aXN0cyA9IHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUcmFjayBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFkZCBpZGVudGl0eSBtYXBwaW5nIGZvciBjb25zaXN0ZW5jeSB3aXRoIGFkZFRyYWNrLlxuICAgIC8vIFVubGVzcyB0aGlzIGlzIGJlaW5nIHVzZWQgd2l0aCBhIHN0cmVhbSBmcm9tIGFkZFRyYWNrLlxuICAgIGlmICghdGhpcy5fcmV2ZXJzZVN0cmVhbXNbc3RyZWFtLmlkXSkge1xuICAgICAgY29uc3QgbmV3U3RyZWFtID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbShzdHJlYW0uZ2V0VHJhY2tzKCkpO1xuICAgICAgdGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdID0gbmV3U3RyZWFtO1xuICAgICAgdGhpcy5fcmV2ZXJzZVN0cmVhbXNbbmV3U3RyZWFtLmlkXSA9IHN0cmVhbTtcbiAgICAgIHN0cmVhbSA9IG5ld1N0cmVhbTtcbiAgICB9XG4gICAgb3JpZ0FkZFN0cmVhbS5hcHBseSh0aGlzLCBbc3RyZWFtXSk7XG4gIH07XG5cbiAgY29uc3Qgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgdGhpcy5fc3RyZWFtcyA9IHRoaXMuX3N0cmVhbXMgfHwge307XG4gICAgICB0aGlzLl9yZXZlcnNlU3RyZWFtcyA9IHRoaXMuX3JldmVyc2VTdHJlYW1zIHx8IHt9O1xuXG4gICAgICBvcmlnUmVtb3ZlU3RyZWFtLmFwcGx5KHRoaXMsIFsodGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdIHx8IHN0cmVhbSldKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9yZXZlcnNlU3RyZWFtc1sodGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdID9cbiAgICAgICAgICB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF0uaWQgOiBzdHJlYW0uaWQpXTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF07XG4gICAgfTtcblxuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID1cbiAgICBmdW5jdGlvbiBhZGRUcmFjayh0cmFjaywgc3RyZWFtKSB7XG4gICAgICBpZiAodGhpcy5zaWduYWxpbmdTdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAnVGhlIFJUQ1BlZXJDb25uZWN0aW9uXFwncyBzaWduYWxpbmdTdGF0ZSBpcyBcXCdjbG9zZWRcXCcuJyxcbiAgICAgICAgICAnSW52YWxpZFN0YXRlRXJyb3InKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0cmVhbXMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICBpZiAoc3RyZWFtcy5sZW5ndGggIT09IDEgfHxcbiAgICAgICAgICAhc3RyZWFtc1swXS5nZXRUcmFja3MoKS5maW5kKHQgPT4gdCA9PT0gdHJhY2spKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IGZ1bGx5IGNvcnJlY3QgYnV0IGFsbCB3ZSBjYW4gbWFuYWdlIHdpdGhvdXRcbiAgICAgICAgLy8gW1thc3NvY2lhdGVkIE1lZGlhU3RyZWFtc11dIGludGVybmFsIHNsb3QuXG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgJ1RoZSBhZGFwdGVyLmpzIGFkZFRyYWNrIHBvbHlmaWxsIG9ubHkgc3VwcG9ydHMgYSBzaW5nbGUgJyArXG4gICAgICAgICAgJyBzdHJlYW0gd2hpY2ggaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgdHJhY2suJyxcbiAgICAgICAgICAnTm90U3VwcG9ydGVkRXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWxyZWFkeUV4aXN0cyA9IHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUcmFjayBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdHJlYW1zID0gdGhpcy5fc3RyZWFtcyB8fCB7fTtcbiAgICAgIHRoaXMuX3JldmVyc2VTdHJlYW1zID0gdGhpcy5fcmV2ZXJzZVN0cmVhbXMgfHwge307XG4gICAgICBjb25zdCBvbGRTdHJlYW0gPSB0aGlzLl9zdHJlYW1zW3N0cmVhbS5pZF07XG4gICAgICBpZiAob2xkU3RyZWFtKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdXNpbmcgb2RkIENocm9tZSBiZWhhdmlvdXIsIHVzZSB3aXRoIGNhdXRpb246XG4gICAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD03ODE1XG4gICAgICAgIC8vIE5vdGU6IHdlIHJlbHkgb24gdGhlIGhpZ2gtbGV2ZWwgYWRkVHJhY2svZHRtZiBzaGltIHRvXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgc2VuZGVyIHdpdGggYSBkdG1mIHNlbmRlci5cbiAgICAgICAgb2xkU3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIE9OTiBhc3luYy5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnbmVnb3RpYXRpb25uZWVkZWQnKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbmV3U3RyZWFtID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbShbdHJhY2tdKTtcbiAgICAgICAgdGhpcy5fc3RyZWFtc1tzdHJlYW0uaWRdID0gbmV3U3RyZWFtO1xuICAgICAgICB0aGlzLl9yZXZlcnNlU3RyZWFtc1tuZXdTdHJlYW0uaWRdID0gc3RyZWFtO1xuICAgICAgICB0aGlzLmFkZFN0cmVhbShuZXdTdHJlYW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VuZGVycygpLmZpbmQocyA9PiBzLnRyYWNrID09PSB0cmFjayk7XG4gICAgfTtcblxuICAvLyByZXBsYWNlIHRoZSBpbnRlcm5hbCBzdHJlYW0gaWQgd2l0aCB0aGUgZXh0ZXJuYWwgb25lIGFuZFxuICAvLyB2aWNlIHZlcnNhLlxuICBmdW5jdGlvbiByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZChwYywgZGVzY3JpcHRpb24pIHtcbiAgICBsZXQgc2RwID0gZGVzY3JpcHRpb24uc2RwO1xuICAgIE9iamVjdC5rZXlzKHBjLl9yZXZlcnNlU3RyZWFtcyB8fCBbXSkuZm9yRWFjaChpbnRlcm5hbElkID0+IHtcbiAgICAgIGNvbnN0IGV4dGVybmFsU3RyZWFtID0gcGMuX3JldmVyc2VTdHJlYW1zW2ludGVybmFsSWRdO1xuICAgICAgY29uc3QgaW50ZXJuYWxTdHJlYW0gPSBwYy5fc3RyZWFtc1tleHRlcm5hbFN0cmVhbS5pZF07XG4gICAgICBzZHAgPSBzZHAucmVwbGFjZShuZXcgUmVnRXhwKGludGVybmFsU3RyZWFtLmlkLCAnZycpLFxuICAgICAgICAgIGV4dGVybmFsU3RyZWFtLmlkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7XG4gICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgc2RwXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZUV4dGVybmFsU3RyZWFtSWQocGMsIGRlc2NyaXB0aW9uKSB7XG4gICAgbGV0IHNkcCA9IGRlc2NyaXB0aW9uLnNkcDtcbiAgICBPYmplY3Qua2V5cyhwYy5fcmV2ZXJzZVN0cmVhbXMgfHwgW10pLmZvckVhY2goaW50ZXJuYWxJZCA9PiB7XG4gICAgICBjb25zdCBleHRlcm5hbFN0cmVhbSA9IHBjLl9yZXZlcnNlU3RyZWFtc1tpbnRlcm5hbElkXTtcbiAgICAgIGNvbnN0IGludGVybmFsU3RyZWFtID0gcGMuX3N0cmVhbXNbZXh0ZXJuYWxTdHJlYW0uaWRdO1xuICAgICAgc2RwID0gc2RwLnJlcGxhY2UobmV3IFJlZ0V4cChleHRlcm5hbFN0cmVhbS5pZCwgJ2cnKSxcbiAgICAgICAgICBpbnRlcm5hbFN0cmVhbS5pZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSxcbiAgICAgIHNkcFxuICAgIH0pO1xuICB9XG4gIFsnY3JlYXRlT2ZmZXInLCAnY3JlYXRlQW5zd2VyJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICBjb25zdCBuYXRpdmVNZXRob2QgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgY29uc3QgbWV0aG9kT2JqID0ge1ttZXRob2RdKCkge1xuICAgICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGNvbnN0IGlzTGVnYWN5Q2FsbCA9IGFyZ3VtZW50cy5sZW5ndGggJiZcbiAgICAgICAgICB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKGlzTGVnYWN5Q2FsbCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgICAoZGVzY3JpcHRpb24pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZCh0aGlzLCBkZXNjcmlwdGlvbik7XG4gICAgICAgICAgICBhcmdzWzBdLmFwcGx5KG51bGwsIFtkZXNjXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXJnc1sxXSkge1xuICAgICAgICAgICAgICBhcmdzWzFdLmFwcGx5KG51bGwsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgYXJndW1lbnRzWzJdXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAudGhlbihkZXNjcmlwdGlvbiA9PiByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZCh0aGlzLCBkZXNjcmlwdGlvbikpO1xuICAgIH19O1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IG1ldGhvZE9ialttZXRob2RdO1xuICB9KTtcblxuICBjb25zdCBvcmlnU2V0TG9jYWxEZXNjcmlwdGlvbiA9XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb247XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbiA9XG4gICAgZnVuY3Rpb24gc2V0TG9jYWxEZXNjcmlwdGlvbigpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCB8fCAhYXJndW1lbnRzWzBdLnR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdTZXRMb2NhbERlc2NyaXB0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBhcmd1bWVudHNbMF0gPSByZXBsYWNlRXh0ZXJuYWxTdHJlYW1JZCh0aGlzLCBhcmd1bWVudHNbMF0pO1xuICAgICAgcmV0dXJuIG9yaWdTZXRMb2NhbERlc2NyaXB0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAvLyBUT0RPOiBtYW5nbGUgZ2V0U3RhdHM6IGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtc3RhdHMvI2RvbS1ydGNtZWRpYXN0cmVhbXN0YXRzLXN0cmVhbWlkZW50aWZpZXJcblxuICBjb25zdCBvcmlnTG9jYWxEZXNjcmlwdGlvbiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnbG9jYWxEZXNjcmlwdGlvbicpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSxcbiAgICAgICdsb2NhbERlc2NyaXB0aW9uJywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBvcmlnTG9jYWxEZXNjcmlwdGlvbi5nZXQuYXBwbHkodGhpcyk7XG4gICAgICAgICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZCh0aGlzLCBkZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2sgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHNlbmRlcikge1xuICAgICAgaWYgKHRoaXMuc2lnbmFsaW5nU3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgJ1RoZSBSVENQZWVyQ29ubmVjdGlvblxcJ3Mgc2lnbmFsaW5nU3RhdGUgaXMgXFwnY2xvc2VkXFwnLicsXG4gICAgICAgICAgJ0ludmFsaWRTdGF0ZUVycm9yJyk7XG4gICAgICB9XG4gICAgICAvLyBXZSBjYW4gbm90IHlldCBjaGVjayBmb3Igc2VuZGVyIGluc3RhbmNlb2YgUlRDUnRwU2VuZGVyXG4gICAgICAvLyBzaW5jZSB3ZSBzaGltIFJUUFNlbmRlci4gU28gd2UgY2hlY2sgaWYgc2VuZGVyLl9wYyBpcyBzZXQuXG4gICAgICBpZiAoIXNlbmRlci5fcGMpIHtcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignQXJndW1lbnQgMSBvZiBSVENQZWVyQ29ubmVjdGlvbi5yZW1vdmVUcmFjayAnICtcbiAgICAgICAgICAgICdkb2VzIG5vdCBpbXBsZW1lbnQgaW50ZXJmYWNlIFJUQ1J0cFNlbmRlci4nLCAnVHlwZUVycm9yJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc0xvY2FsID0gc2VuZGVyLl9wYyA9PT0gdGhpcztcbiAgICAgIGlmICghaXNMb2NhbCkge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdTZW5kZXIgd2FzIG5vdCBjcmVhdGVkIGJ5IHRoaXMgY29ubmVjdGlvbi4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWFyY2ggZm9yIHRoZSBuYXRpdmUgc3RyZWFtIHRoZSBzZW5kZXJzIHRyYWNrIGJlbG9uZ3MgdG8uXG4gICAgICB0aGlzLl9zdHJlYW1zID0gdGhpcy5fc3RyZWFtcyB8fCB7fTtcbiAgICAgIGxldCBzdHJlYW07XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLl9zdHJlYW1zKS5mb3JFYWNoKHN0cmVhbWlkID0+IHtcbiAgICAgICAgY29uc3QgaGFzVHJhY2sgPSB0aGlzLl9zdHJlYW1zW3N0cmVhbWlkXS5nZXRUcmFja3MoKVxuICAgICAgICAgIC5maW5kKHRyYWNrID0+IHNlbmRlci50cmFjayA9PT0gdHJhY2spO1xuICAgICAgICBpZiAoaGFzVHJhY2spIHtcbiAgICAgICAgICBzdHJlYW0gPSB0aGlzLl9zdHJlYW1zW3N0cmVhbWlkXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgaWYgKHN0cmVhbS5nZXRUcmFja3MoKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIHRoZSBsYXN0IHRyYWNrIG9mIHRoZSBzdHJlYW0sIHJlbW92ZSB0aGUgc3RyZWFtLiBUaGlzXG4gICAgICAgICAgLy8gdGFrZXMgY2FyZSBvZiBhbnkgc2hpbW1lZCBfc2VuZGVycy5cbiAgICAgICAgICB0aGlzLnJlbW92ZVN0cmVhbSh0aGlzLl9yZXZlcnNlU3RyZWFtc1tzdHJlYW0uaWRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZWx5aW5nIG9uIHRoZSBzYW1lIG9kZCBjaHJvbWUgYmVoYXZpb3VyIGFzIGFib3ZlLlxuICAgICAgICAgIHN0cmVhbS5yZW1vdmVUcmFjayhzZW5kZXIudHJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ25lZ290aWF0aW9ubmVlZGVkJykpO1xuICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUGVlckNvbm5lY3Rpb24od2luZG93KSB7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmIHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbikge1xuICAgIC8vIHZlcnkgYmFzaWMgc3VwcG9ydCBmb3Igb2xkIHZlcnNpb25zLlxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbjtcbiAgfVxuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNoaW0gaW1wbGljaXQgY3JlYXRpb24gb2YgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uL1JUQ0ljZUNhbmRpZGF0ZVxuICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDUzKSB7XG4gICAgWydzZXRMb2NhbERlc2NyaXB0aW9uJywgJ3NldFJlbW90ZURlc2NyaXB0aW9uJywgJ2FkZEljZUNhbmRpZGF0ZSddXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgIGNvbnN0IG5hdGl2ZU1ldGhvZCA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgICBjb25zdCBtZXRob2RPYmogPSB7W21ldGhvZF0oKSB7XG4gICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBuZXcgKChtZXRob2QgPT09ICdhZGRJY2VDYW5kaWRhdGUnKSA/XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA6XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbikoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9fTtcbiAgICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBtZXRob2RPYmpbbWV0aG9kXTtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvLyBzdXBwb3J0IGZvciBhZGRJY2VDYW5kaWRhdGUobnVsbCBvciB1bmRlZmluZWQpXG4gIGNvbnN0IG5hdGl2ZUFkZEljZUNhbmRpZGF0ZSA9XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPVxuICAgIGZ1bmN0aW9uIGFkZEljZUNhbmRpZGF0ZSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMV0pIHtcbiAgICAgICAgICBhcmd1bWVudHNbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgLy8gRmlyZWZveCA2OCsgZW1pdHMgYW5kIHByb2Nlc3NlcyB7Y2FuZGlkYXRlOiBcIlwiLCAuLi59LCBpZ25vcmVcbiAgICAgIC8vIGluIG9sZGVyIHZlcnNpb25zLiBOYXRpdmUgc3VwcG9ydCBwbGFubmVkIGZvciBDaHJvbWUgTTc3LlxuICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA3OCAmJlxuICAgICAgICBhcmd1bWVudHNbMF0gJiYgYXJndW1lbnRzWzBdLmNhbmRpZGF0ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUFkZEljZUNhbmRpZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXhOZWdvdGlhdGlvbk5lZWRlZCh3aW5kb3cpIHtcbiAgdXRpbHMud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQod2luZG93LCAnbmVnb3RpYXRpb25uZWVkZWQnLCBlID0+IHtcbiAgICBjb25zdCBwYyA9IGUudGFyZ2V0O1xuICAgIGlmIChwYy5zaWduYWxpbmdTdGF0ZSAhPT0gJ3N0YWJsZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH0pO1xufVxuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0VXNlck1lZGlhKHdpbmRvdykge1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcblxuICBjb25zdCBzaGltRXJyb3JfID0gZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB7UGVybWlzc2lvbkRlbmllZEVycm9yOiAnTm90QWxsb3dlZEVycm9yJ31bZS5uYW1lXSB8fCBlLm5hbWUsXG4gICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgICBjb25zdHJhaW50OiBlLmNvbnN0cmFpbnQsXG4gICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIGdldFVzZXJNZWRpYSBlcnJvciBzaGltLlxuICBjb25zdCBvcmlnR2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuXG4gICAgICBiaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO1xuICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gb3JpZ0dldFVzZXJNZWRpYShjKS5jYXRjaChlID0+IFByb21pc2UucmVqZWN0KHNoaW1FcnJvcl8oZSkpKTtcbiAgfTtcbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBhZGFwdGVyLmpzIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXREaXNwbGF5TWVkaWEod2luZG93KSB7XG4gIGlmICghKCdnZXREaXNwbGF5TWVkaWEnIGluIHdpbmRvdy5uYXZpZ2F0b3IpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICAnZ2V0RGlzcGxheU1lZGlhJyBpbiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEgPVxuICAgIHdpbmRvdy5uYXZpZ2F0b3IuZ2V0RGlzcGxheU1lZGlhLmJpbmQod2luZG93Lm5hdmlnYXRvcik7XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQge2ZpbHRlckljZVNlcnZlcnN9IGZyb20gJy4vZmlsdGVyaWNlc2VydmVycyc7XG5pbXBvcnQgc2hpbVJUQ1BlZXJDb25uZWN0aW9uIGZyb20gJ3J0Y3BlZXJjb25uZWN0aW9uLXNoaW0nO1xuXG5leHBvcnQge3NoaW1HZXRVc2VyTWVkaWF9IGZyb20gJy4vZ2V0dXNlcm1lZGlhJztcbmV4cG9ydCB7c2hpbUdldERpc3BsYXlNZWRpYX0gZnJvbSAnLi9nZXRkaXNwbGF5bWVkaWEnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdykge1xuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBpZiAod2luZG93LlJUQ0ljZUdhdGhlcmVyKSB7XG4gICAgaWYgKCF3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlKSB7XG4gICAgICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24gUlRDSWNlQ2FuZGlkYXRlKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIXdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pIHtcbiAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBSVENTZXNzaW9uRGVzY3JpcHRpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIHRoaXMgYWRkcyBhbiBhZGRpdGlvbmFsIGV2ZW50IGxpc3RlbmVyIHRvIE1lZGlhU3RyYWNrVHJhY2sgdGhhdCBzaWduYWxzXG4gICAgLy8gd2hlbiBhIHRyYWNrcyBlbmFibGVkIHByb3BlcnR5IHdhcyBjaGFuZ2VkLiBXb3JrYXJvdW5kIGZvciBhIGJ1ZyBpblxuICAgIC8vIGFkZFN0cmVhbSwgc2VlIGJlbG93LiBObyBsb25nZXIgcmVxdWlyZWQgaW4gMTUwMjUrXG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCAxNTAyNSkge1xuICAgICAgY29uc3Qgb3JpZ01TVEVuYWJsZWQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgICAgIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZSwgJ2VuYWJsZWQnKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUsICdlbmFibGVkJywge1xuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICBvcmlnTVNURW5hYmxlZC5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgY29uc3QgZXYgPSBuZXcgRXZlbnQoJ2VuYWJsZWQnKTtcbiAgICAgICAgICBldi5lbmFibGVkID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gT1JUQyBkZWZpbmVzIHRoZSBEVE1GIHNlbmRlciBhIGJpdCBkaWZmZXJlbnQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93M2Mvb3J0Yy9pc3N1ZXMvNzE0XG4gIGlmICh3aW5kb3cuUlRDUnRwU2VuZGVyICYmICEoJ2R0bWYnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSwgJ2R0bWYnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy50cmFjay5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICB0aGlzLl9kdG1mID0gbmV3IHdpbmRvdy5SVENEdG1mU2VuZGVyKHRoaXMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFjay5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICB0aGlzLl9kdG1mID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2R0bWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLy8gRWRnZSBjdXJyZW50bHkgb25seSBpbXBsZW1lbnRzIHRoZSBSVENEdG1mU2VuZGVyLCBub3QgdGhlXG4gIC8vIFJUQ0RUTUZTZW5kZXIgYWxpYXMuIFNlZSBodHRwOi8vZHJhZnQub3J0Yy5vcmcvI3J0Y2R0bWZzZW5kZXIyKlxuICBpZiAod2luZG93LlJUQ0R0bWZTZW5kZXIgJiYgIXdpbmRvdy5SVENEVE1GU2VuZGVyKSB7XG4gICAgd2luZG93LlJUQ0RUTUZTZW5kZXIgPSB3aW5kb3cuUlRDRHRtZlNlbmRlcjtcbiAgfVxuXG4gIGNvbnN0IFJUQ1BlZXJDb25uZWN0aW9uU2hpbSA9IHNoaW1SVENQZWVyQ29ubmVjdGlvbih3aW5kb3csXG4gICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uKTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24gUlRDUGVlckNvbm5lY3Rpb24oY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaWNlU2VydmVycykge1xuICAgICAgY29uZmlnLmljZVNlcnZlcnMgPSBmaWx0ZXJJY2VTZXJ2ZXJzKGNvbmZpZy5pY2VTZXJ2ZXJzLFxuICAgICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uKTtcbiAgICAgIHV0aWxzLmxvZygnSUNFIHNlcnZlcnMgYWZ0ZXIgZmlsdGVyaW5nOicsIGNvbmZpZy5pY2VTZXJ2ZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSVENQZWVyQ29ubmVjdGlvblNoaW0oY29uZmlnKTtcbiAgfTtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSA9IFJUQ1BlZXJDb25uZWN0aW9uU2hpbS5wcm90b3R5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUmVwbGFjZVRyYWNrKHdpbmRvdykge1xuICAvLyBPUlRDIGhhcyByZXBsYWNlVHJhY2sgLS0gaHR0cHM6Ly9naXRodWIuY29tL3czYy9vcnRjL2lzc3Vlcy82MTRcbiAgaWYgKHdpbmRvdy5SVENSdHBTZW5kZXIgJiZcbiAgICAgICEoJ3JlcGxhY2VUcmFjaycgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKSB7XG4gICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUucmVwbGFjZVRyYWNrID1cbiAgICAgICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuc2V0VHJhY2s7XG4gIH1cbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcbi8vIEVkZ2UgZG9lcyBub3QgbGlrZVxuLy8gMSkgc3R1bjogZmlsdGVyZWQgYWZ0ZXIgMTQzOTMgdW5sZXNzID90cmFuc3BvcnQ9dWRwIGlzIHByZXNlbnRcbi8vIDIpIHR1cm46IHRoYXQgZG9lcyBub3QgaGF2ZSBhbGwgb2YgdHVybjpob3N0OnBvcnQ/dHJhbnNwb3J0PXVkcFxuLy8gMykgdHVybjogd2l0aCBpcHY2IGFkZHJlc3Nlc1xuLy8gNCkgdHVybjogb2NjdXJyaW5nIG11bGlwbGUgdGltZXNcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJJY2VTZXJ2ZXJzKGljZVNlcnZlcnMsIGVkZ2VWZXJzaW9uKSB7XG4gIGxldCBoYXNUdXJuID0gZmFsc2U7XG4gIGljZVNlcnZlcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGljZVNlcnZlcnMpKTtcbiAgcmV0dXJuIGljZVNlcnZlcnMuZmlsdGVyKHNlcnZlciA9PiB7XG4gICAgaWYgKHNlcnZlciAmJiAoc2VydmVyLnVybHMgfHwgc2VydmVyLnVybCkpIHtcbiAgICAgIHZhciB1cmxzID0gc2VydmVyLnVybHMgfHwgc2VydmVyLnVybDtcbiAgICAgIGlmIChzZXJ2ZXIudXJsICYmICFzZXJ2ZXIudXJscykge1xuICAgICAgICB1dGlscy5kZXByZWNhdGVkKCdSVENJY2VTZXJ2ZXIudXJsJywgJ1JUQ0ljZVNlcnZlci51cmxzJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc1N0cmluZyA9IHR5cGVvZiB1cmxzID09PSAnc3RyaW5nJztcbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICB1cmxzID0gW3VybHNdO1xuICAgICAgfVxuICAgICAgdXJscyA9IHVybHMuZmlsdGVyKHVybCA9PiB7XG4gICAgICAgIC8vIGZpbHRlciBTVFVOIHVuY29uZGl0aW9uYWxseS5cbiAgICAgICAgaWYgKHVybC5pbmRleE9mKCdzdHVuOicpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsaWRUdXJuID0gdXJsLnN0YXJ0c1dpdGgoJ3R1cm4nKSAmJlxuICAgICAgICAgICAgIXVybC5zdGFydHNXaXRoKCd0dXJuOlsnKSAmJlxuICAgICAgICAgICAgdXJsLmluY2x1ZGVzKCd0cmFuc3BvcnQ9dWRwJyk7XG4gICAgICAgIGlmICh2YWxpZFR1cm4gJiYgIWhhc1R1cm4pIHtcbiAgICAgICAgICBoYXNUdXJuID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsaWRUdXJuICYmICFoYXNUdXJuO1xuICAgICAgfSk7XG5cbiAgICAgIGRlbGV0ZSBzZXJ2ZXIudXJsO1xuICAgICAgc2VydmVyLnVybHMgPSBpc1N0cmluZyA/IHVybHNbMF0gOiB1cmxzO1xuICAgICAgcmV0dXJuICEhdXJscy5sZW5ndGg7XG4gICAgfVxuICB9KTtcbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXRVc2VyTWVkaWEod2luZG93KSB7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcbiAgY29uc3QgTWVkaWFTdHJlYW1UcmFjayA9IHdpbmRvdyAmJiB3aW5kb3cuTWVkaWFTdHJlYW1UcmFjaztcblxuICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICAgIC8vIFJlcGxhY2UgRmlyZWZveCA0NCsncyBkZXByZWNhdGlvbiB3YXJuaW5nIHdpdGggdW5wcmVmaXhlZCB2ZXJzaW9uLlxuICAgIHV0aWxzLmRlcHJlY2F0ZWQoJ25hdmlnYXRvci5nZXRVc2VyTWVkaWEnLFxuICAgICAgICAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEnKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICB9O1xuXG4gIGlmICghKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPiA1NSAmJlxuICAgICAgJ2F1dG9HYWluQ29udHJvbCcgaW4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cygpKSkge1xuICAgIGNvbnN0IHJlbWFwID0gZnVuY3Rpb24ob2JqLCBhLCBiKSB7XG4gICAgICBpZiAoYSBpbiBvYmogJiYgIShiIGluIG9iaikpIHtcbiAgICAgICAgb2JqW2JdID0gb2JqW2FdO1xuICAgICAgICBkZWxldGUgb2JqW2FdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBuYXRpdmVHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5cbiAgICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGMuYXVkaW8gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtcbiAgICAgICAgcmVtYXAoYy5hdWRpbywgJ2F1dG9HYWluQ29udHJvbCcsICdtb3pBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgICAgcmVtYXAoYy5hdWRpbywgJ25vaXNlU3VwcHJlc3Npb24nLCAnbW96Tm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUdldFVzZXJNZWRpYShjKTtcbiAgICB9O1xuXG4gICAgaWYgKE1lZGlhU3RyZWFtVHJhY2sgJiYgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0U2V0dGluZ3MpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZUdldFNldHRpbmdzID0gTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0U2V0dGluZ3M7XG4gICAgICBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5nZXRTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBvYmogPSBuYXRpdmVHZXRTZXR0aW5ncy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICByZW1hcChvYmosICdtb3pBdXRvR2FpbkNvbnRyb2wnLCAnYXV0b0dhaW5Db250cm9sJyk7XG4gICAgICAgIHJlbWFwKG9iaiwgJ21vek5vaXNlU3VwcHJlc3Npb24nLCAnbm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoTWVkaWFTdHJlYW1UcmFjayAmJiBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5hcHBseUNvbnN0cmFpbnRzKSB7XG4gICAgICBjb25zdCBuYXRpdmVBcHBseUNvbnN0cmFpbnRzID1cbiAgICAgICAgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuYXBwbHlDb25zdHJhaW50cztcbiAgICAgIE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmFwcGx5Q29uc3RyYWludHMgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmICh0aGlzLmtpbmQgPT09ICdhdWRpbycgJiYgdHlwZW9mIGMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYykpO1xuICAgICAgICAgIHJlbWFwKGMsICdhdXRvR2FpbkNvbnRyb2wnLCAnbW96QXV0b0dhaW5Db250cm9sJyk7XG4gICAgICAgICAgcmVtYXAoYywgJ25vaXNlU3VwcHJlc3Npb24nLCAnbW96Tm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYXRpdmVBcHBseUNvbnN0cmFpbnRzLmFwcGx5KHRoaXMsIFtjXSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIGFkYXB0ZXIuanMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0RGlzcGxheU1lZGlhKHdpbmRvdywgcHJlZmVycmVkTWVkaWFTb3VyY2UpIHtcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmXG4gICAgJ2dldERpc3BsYXlNZWRpYScgaW4gd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldERpc3BsYXlNZWRpYSA9XG4gICAgZnVuY3Rpb24gZ2V0RGlzcGxheU1lZGlhKGNvbnN0cmFpbnRzKSB7XG4gICAgICBpZiAoIShjb25zdHJhaW50cyAmJiBjb25zdHJhaW50cy52aWRlbykpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IERPTUV4Y2VwdGlvbignZ2V0RGlzcGxheU1lZGlhIHdpdGhvdXQgdmlkZW8gJyArXG4gICAgICAgICAgICAnY29uc3RyYWludHMgaXMgdW5kZWZpbmVkJyk7XG4gICAgICAgIGVyci5uYW1lID0gJ05vdEZvdW5kRXJyb3InO1xuICAgICAgICAvLyBmcm9tIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2lkbC1ET01FeGNlcHRpb24tZXJyb3ItbmFtZXNcbiAgICAgICAgZXJyLmNvZGUgPSA4O1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb25zdHJhaW50cy52aWRlbyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IHttZWRpYVNvdXJjZTogcHJlZmVycmVkTWVkaWFTb3VyY2V9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3RyYWludHMudmlkZW8ubWVkaWFTb3VyY2UgPSBwcmVmZXJyZWRNZWRpYVNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpO1xuICAgIH07XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5leHBvcnQge3NoaW1HZXRVc2VyTWVkaWF9IGZyb20gJy4vZ2V0dXNlcm1lZGlhJztcbmV4cG9ydCB7c2hpbUdldERpc3BsYXlNZWRpYX0gZnJvbSAnLi9nZXRkaXNwbGF5bWVkaWEnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpbU9uVHJhY2sod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDVHJhY2tFdmVudCAmJlxuICAgICAgKCdyZWNlaXZlcicgaW4gd2luZG93LlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlKSAmJlxuICAgICAgISgndHJhbnNjZWl2ZXInIGluIHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlLCAndHJhbnNjZWl2ZXInLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB7cmVjZWl2ZXI6IHRoaXMucmVjZWl2ZXJ9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUGVlckNvbm5lY3Rpb24od2luZG93KSB7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fFxuICAgICAgISh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gfHwgd2luZG93Lm1velJUQ1BlZXJDb25uZWN0aW9uKSkge1xuICAgIHJldHVybjsgLy8gcHJvYmFibHkgbWVkaWEucGVlcmNvbm5lY3Rpb24uZW5hYmxlZD1mYWxzZSBpbiBhYm91dDpjb25maWdcbiAgfVxuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiB3aW5kb3cubW96UlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAvLyB2ZXJ5IGJhc2ljIHN1cHBvcnQgZm9yIG9sZCB2ZXJzaW9ucy5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPSB3aW5kb3cubW96UlRDUGVlckNvbm5lY3Rpb247XG4gIH1cblxuICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDUzKSB7XG4gICAgLy8gc2hpbSBhd2F5IG5lZWQgZm9yIG9ic29sZXRlIFJUQ0ljZUNhbmRpZGF0ZS9SVENTZXNzaW9uRGVzY3JpcHRpb24uXG4gICAgWydzZXRMb2NhbERlc2NyaXB0aW9uJywgJ3NldFJlbW90ZURlc2NyaXB0aW9uJywgJ2FkZEljZUNhbmRpZGF0ZSddXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgIGNvbnN0IG5hdGl2ZU1ldGhvZCA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgICBjb25zdCBtZXRob2RPYmogPSB7W21ldGhvZF0oKSB7XG4gICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBuZXcgKChtZXRob2QgPT09ICdhZGRJY2VDYW5kaWRhdGUnKSA/XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA6XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbikoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9fTtcbiAgICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBtZXRob2RPYmpbbWV0aG9kXTtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvLyBzdXBwb3J0IGZvciBhZGRJY2VDYW5kaWRhdGUobnVsbCBvciB1bmRlZmluZWQpXG4gIC8vIGFzIHdlbGwgYXMgaWdub3Jpbmcge3NkcE1pZCwgY2FuZGlkYXRlOiBcIlwifVxuICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDY4KSB7XG4gICAgY29uc3QgbmF0aXZlQWRkSWNlQ2FuZGlkYXRlID1cbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPVxuICAgIGZ1bmN0aW9uIGFkZEljZUNhbmRpZGF0ZSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMV0pIHtcbiAgICAgICAgICBhcmd1bWVudHNbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgLy8gRmlyZWZveCA2OCsgZW1pdHMgYW5kIHByb2Nlc3NlcyB7Y2FuZGlkYXRlOiBcIlwiLCAuLi59LCBpZ25vcmVcbiAgICAgIC8vIGluIG9sZGVyIHZlcnNpb25zLlxuICAgICAgaWYgKGFyZ3VtZW50c1swXSAmJiBhcmd1bWVudHNbMF0uY2FuZGlkYXRlID09PSAnJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlQWRkSWNlQ2FuZGlkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IG1vZGVyblN0YXRzVHlwZXMgPSB7XG4gICAgaW5ib3VuZHJ0cDogJ2luYm91bmQtcnRwJyxcbiAgICBvdXRib3VuZHJ0cDogJ291dGJvdW5kLXJ0cCcsXG4gICAgY2FuZGlkYXRlcGFpcjogJ2NhbmRpZGF0ZS1wYWlyJyxcbiAgICBsb2NhbGNhbmRpZGF0ZTogJ2xvY2FsLWNhbmRpZGF0ZScsXG4gICAgcmVtb3RlY2FuZGlkYXRlOiAncmVtb3RlLWNhbmRpZGF0ZSdcbiAgfTtcblxuICBjb25zdCBuYXRpdmVHZXRTdGF0cyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICBjb25zdCBbc2VsZWN0b3IsIG9uU3VjYywgb25FcnJdID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuYXRpdmVHZXRTdGF0cy5hcHBseSh0aGlzLCBbc2VsZWN0b3IgfHwgbnVsbF0pXG4gICAgICAudGhlbihzdGF0cyA9PiB7XG4gICAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNTMgJiYgIW9uU3VjYykge1xuICAgICAgICAgIC8vIFNoaW0gb25seSBwcm9taXNlIGdldFN0YXRzIHdpdGggc3BlYy1oeXBoZW5zIGluIHR5cGUgbmFtZXNcbiAgICAgICAgICAvLyBMZWF2ZSBjYWxsYmFjayB2ZXJzaW9uIGFsb25lOyBtaXNjIG9sZCB1c2VzIG9mIGZvckVhY2ggYmVmb3JlIE1hcFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGF0cy5mb3JFYWNoKHN0YXQgPT4ge1xuICAgICAgICAgICAgICBzdGF0LnR5cGUgPSBtb2Rlcm5TdGF0c1R5cGVzW3N0YXQudHlwZV0gfHwgc3RhdC50eXBlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUubmFtZSAhPT0gJ1R5cGVFcnJvcicpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF2b2lkIFR5cGVFcnJvcjogXCJ0eXBlXCIgaXMgcmVhZC1vbmx5LCBpbiBvbGQgdmVyc2lvbnMuIDM0LTQzaXNoXG4gICAgICAgICAgICBzdGF0cy5mb3JFYWNoKChzdGF0LCBpKSA9PiB7XG4gICAgICAgICAgICAgIHN0YXRzLnNldChpLCBPYmplY3QuYXNzaWduKHt9LCBzdGF0LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogbW9kZXJuU3RhdHNUeXBlc1tzdGF0LnR5cGVdIHx8IHN0YXQudHlwZVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRzO1xuICAgICAgfSlcbiAgICAgIC50aGVuKG9uU3VjYywgb25FcnIpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVNlbmRlckdldFN0YXRzKHdpbmRvdykge1xuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgIHdpbmRvdy5SVENSdHBTZW5kZXIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh3aW5kb3cuUlRDUnRwU2VuZGVyICYmICdnZXRTdGF0cycgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3JpZ0dldFNlbmRlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7XG4gIGlmIChvcmlnR2V0U2VuZGVycykge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uIGdldFNlbmRlcnMoKSB7XG4gICAgICBjb25zdCBzZW5kZXJzID0gb3JpZ0dldFNlbmRlcnMuYXBwbHkodGhpcywgW10pO1xuICAgICAgc2VuZGVycy5mb3JFYWNoKHNlbmRlciA9PiBzZW5kZXIuX3BjID0gdGhpcyk7XG4gICAgICByZXR1cm4gc2VuZGVycztcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgaWYgKG9yaWdBZGRUcmFjaykge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2sgPSBmdW5jdGlvbiBhZGRUcmFjaygpIHtcbiAgICAgIGNvbnN0IHNlbmRlciA9IG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgc2VuZGVyLl9wYyA9IHRoaXM7XG4gICAgICByZXR1cm4gc2VuZGVyO1xuICAgIH07XG4gIH1cbiAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbiBnZXRTdGF0cygpIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayA/IHRoaXMuX3BjLmdldFN0YXRzKHRoaXMudHJhY2spIDpcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG5ldyBNYXAoKSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUmVjZWl2ZXJHZXRTdGF0cyh3aW5kb3cpIHtcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAod2luZG93LlJUQ1J0cFNlbmRlciAmJiAnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3JpZ0dldFJlY2VpdmVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzO1xuICBpZiAob3JpZ0dldFJlY2VpdmVycykge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzID0gZnVuY3Rpb24gZ2V0UmVjZWl2ZXJzKCkge1xuICAgICAgY29uc3QgcmVjZWl2ZXJzID0gb3JpZ0dldFJlY2VpdmVycy5hcHBseSh0aGlzLCBbXSk7XG4gICAgICByZWNlaXZlcnMuZm9yRWFjaChyZWNlaXZlciA9PiByZWNlaXZlci5fcGMgPSB0aGlzKTtcbiAgICAgIHJldHVybiByZWNlaXZlcnM7XG4gICAgfTtcbiAgfVxuICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICd0cmFjaycsIGUgPT4ge1xuICAgIGUucmVjZWl2ZXIuX3BjID0gZS5zcmNFbGVtZW50O1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgd2luZG93LlJUQ1J0cFJlY2VpdmVyLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uIGdldFN0YXRzKCkge1xuICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cyh0aGlzLnRyYWNrKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1SZW1vdmVTdHJlYW0od2luZG93KSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uIHx8XG4gICAgICAncmVtb3ZlU3RyZWFtJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID1cbiAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICB1dGlscy5kZXByZWNhdGVkKCdyZW1vdmVTdHJlYW0nLCAncmVtb3ZlVHJhY2snKTtcbiAgICAgIHRoaXMuZ2V0U2VuZGVycygpLmZvckVhY2goc2VuZGVyID0+IHtcbiAgICAgICAgaWYgKHNlbmRlci50cmFjayAmJiBzdHJlYW0uZ2V0VHJhY2tzKCkuaW5jbHVkZXMoc2VuZGVyLnRyYWNrKSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlVHJhY2soc2VuZGVyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1SVENEYXRhQ2hhbm5lbCh3aW5kb3cpIHtcbiAgLy8gcmVuYW1lIERhdGFDaGFubmVsIHRvIFJUQ0RhdGFDaGFubmVsIChuYXRpdmUgZml4IGluIEZGNjApOlxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTczODUxXG4gIGlmICh3aW5kb3cuRGF0YUNoYW5uZWwgJiYgIXdpbmRvdy5SVENEYXRhQ2hhbm5lbCkge1xuICAgIHdpbmRvdy5SVENEYXRhQ2hhbm5lbCA9IHdpbmRvdy5EYXRhQ2hhbm5lbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUFkZFRyYW5zY2VpdmVyKHdpbmRvdykge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2VicnRjSGFja3MvYWRhcHRlci9pc3N1ZXMvOTk4I2lzc3VlY29tbWVudC01MTY5MjE2NDdcbiAgLy8gRmlyZWZveCBpZ25vcmVzIHRoZSBpbml0IHNlbmRFbmNvZGluZ3Mgb3B0aW9ucyBwYXNzZWQgdG8gYWRkVHJhbnNjZWl2ZXJcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM5NjkxOFxuICBpZiAoISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9yaWdBZGRUcmFuc2NlaXZlciA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhbnNjZWl2ZXI7XG4gIGlmIChvcmlnQWRkVHJhbnNjZWl2ZXIpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYW5zY2VpdmVyID1cbiAgICAgIGZ1bmN0aW9uIGFkZFRyYW5zY2VpdmVyKCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyA9IFtdO1xuICAgICAgICBjb25zdCBpbml0UGFyYW1ldGVycyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgY29uc3Qgc2hvdWxkUGVyZm9ybUNoZWNrID0gaW5pdFBhcmFtZXRlcnMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VuZEVuY29kaW5ncycgaW4gaW5pdFBhcmFtZXRlcnM7XG4gICAgICAgIGlmIChzaG91bGRQZXJmb3JtQ2hlY2spIHtcbiAgICAgICAgICAvLyBJZiBzZW5kRW5jb2RpbmdzIHBhcmFtcyBhcmUgcHJvdmlkZWQsIHZhbGlkYXRlIGdyYW1tYXJcbiAgICAgICAgICBpbml0UGFyYW1ldGVycy5zZW5kRW5jb2RpbmdzLmZvckVhY2goKGVuY29kaW5nUGFyYW0pID0+IHtcbiAgICAgICAgICAgIGlmICgncmlkJyBpbiBlbmNvZGluZ1BhcmFtKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJpZFJlZ2V4ID0gL15bYS16MC05XXswLDE2fSQvaTtcbiAgICAgICAgICAgICAgaWYgKCFyaWRSZWdleC50ZXN0KGVuY29kaW5nUGFyYW0ucmlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgUklEIHZhbHVlIHByb3ZpZGVkLicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ3NjYWxlUmVzb2x1dGlvbkRvd25CeScgaW4gZW5jb2RpbmdQYXJhbSkge1xuICAgICAgICAgICAgICBpZiAoIShwYXJzZUZsb2F0KGVuY29kaW5nUGFyYW0uc2NhbGVSZXNvbHV0aW9uRG93bkJ5KSA+PSAxLjApKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NjYWxlX3Jlc29sdXRpb25fZG93bl9ieSBtdXN0IGJlID49IDEuMCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ21heEZyYW1lcmF0ZScgaW4gZW5jb2RpbmdQYXJhbSkge1xuICAgICAgICAgICAgICBpZiAoIShwYXJzZUZsb2F0KGVuY29kaW5nUGFyYW0ubWF4RnJhbWVyYXRlKSA+PSAwKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdtYXhfZnJhbWVyYXRlIG11c3QgYmUgPj0gMC4wJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IG9yaWdBZGRUcmFuc2NlaXZlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoc2hvdWxkUGVyZm9ybUNoZWNrKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGluaXQgb3B0aW9ucyB3ZXJlIGFwcGxpZWQuIElmIG5vdCB3ZSBkbyB0aGlzIGluIGFuXG4gICAgICAgICAgLy8gYXN5bmNocm9ub3VzIHdheSBhbmQgc2F2ZSB0aGUgcHJvbWlzZSByZWZlcmVuY2UgaW4gYSBnbG9iYWwgb2JqZWN0LlxuICAgICAgICAgIC8vIFRoaXMgaXMgYW4gdWdseSBoYWNrLCBidXQgYXQgdGhlIHNhbWUgdGltZSBpcyB3YXkgbW9yZSByb2J1c3QgdGhhblxuICAgICAgICAgIC8vIGNoZWNraW5nIHRoZSBzZW5kZXIgcGFyYW1ldGVycyBiZWZvcmUgYW5kIGFmdGVyIHRoZSBjcmVhdGVPZmZlclxuICAgICAgICAgIC8vIEFsc28gbm90ZSB0aGF0IGFmdGVyIHRoZSBjcmVhdGVvZmZlciB3ZSBhcmUgbm90IDEwMCUgc3VyZSB0aGF0XG4gICAgICAgICAgLy8gdGhlIHBhcmFtcyB3ZXJlIGFzeW5jaHJvbm91c2x5IGFwcGxpZWQgc28gd2UgbWlnaHQgbWlzcyB0aGVcbiAgICAgICAgICAvLyBvcHBvcnR1bml0eSB0byByZWNyZWF0ZSBvZmZlci5cbiAgICAgICAgICBjb25zdCB7c2VuZGVyfSA9IHRyYW5zY2VpdmVyO1xuICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHNlbmRlci5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgaWYgKCEoJ2VuY29kaW5ncycgaW4gcGFyYW1zKSkge1xuICAgICAgICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IGluaXRQYXJhbWV0ZXJzLnNlbmRFbmNvZGluZ3M7XG4gICAgICAgICAgICB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcy5wdXNoKFxuICAgICAgICAgICAgICBzZW5kZXIuc2V0UGFyYW1ldGVycyhwYXJhbXMpXG4gICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7fSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2NlaXZlcjtcbiAgICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1DcmVhdGVPZmZlcih3aW5kb3cpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnJ0Y0hhY2tzL2FkYXB0ZXIvaXNzdWVzLzk5OCNpc3N1ZWNvbW1lbnQtNTE2OTIxNjQ3XG4gIC8vIEZpcmVmb3ggaWdub3JlcyB0aGUgaW5pdCBzZW5kRW5jb2RpbmdzIG9wdGlvbnMgcGFzc2VkIHRvIGFkZFRyYW5zY2VpdmVyXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzOTY5MThcbiAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvcmlnQ3JlYXRlT2ZmZXIgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyID0gZnVuY3Rpb24gY3JlYXRlT2ZmZXIoKSB7XG4gICAgaWYgKHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzICYmIHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gb3JpZ0NyZWF0ZU9mZmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyA9IFtdO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcmlnQ3JlYXRlT2ZmZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1DcmVhdGVBbnN3ZXIod2luZG93KSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJydGNIYWNrcy9hZGFwdGVyL2lzc3Vlcy85OTgjaXNzdWVjb21tZW50LTUxNjkyMTY0N1xuICAvLyBGaXJlZm94IGlnbm9yZXMgdGhlIGluaXQgc2VuZEVuY29kaW5ncyBvcHRpb25zIHBhc3NlZCB0byBhZGRUcmFuc2NlaXZlclxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzk2OTE4XG4gIGlmICghKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb3JpZ0NyZWF0ZUFuc3dlciA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQW5zd2VyO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUFuc3dlciA9IGZ1bmN0aW9uIGNyZWF0ZUFuc3dlcigpIHtcbiAgICBpZiAodGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMgJiYgdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBvcmlnQ3JlYXRlQW5zd2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyA9IFtdO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcmlnQ3JlYXRlQW5zd2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59IiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltTG9jYWxTdHJlYW1zQVBJKHdpbmRvdykge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ29iamVjdCcgfHwgIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoISgnZ2V0TG9jYWxTdHJlYW1zJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zID1cbiAgICAgIGZ1bmN0aW9uIGdldExvY2FsU3RyZWFtcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9sb2NhbFN0cmVhbXMpIHtcbiAgICAgICAgICB0aGlzLl9sb2NhbFN0cmVhbXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxTdHJlYW1zO1xuICAgICAgfTtcbiAgfVxuICBpZiAoISgnYWRkU3RyZWFtJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgIGNvbnN0IF9hZGRUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0gPSBmdW5jdGlvbiBhZGRTdHJlYW0oc3RyZWFtKSB7XG4gICAgICBpZiAoIXRoaXMuX2xvY2FsU3RyZWFtcykge1xuICAgICAgICB0aGlzLl9sb2NhbFN0cmVhbXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zLmluY2x1ZGVzKHN0cmVhbSkpIHtcbiAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgIH1cbiAgICAgIC8vIFRyeSB0byBlbXVsYXRlIENocm9tZSdzIGJlaGF2aW91ciBvZiBhZGRpbmcgaW4gYXVkaW8tdmlkZW8gb3JkZXIuXG4gICAgICAvLyBTYWZhcmkgb3JkZXJzIGJ5IHRyYWNrIGlkLlxuICAgICAgc3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiBfYWRkVHJhY2suY2FsbCh0aGlzLCB0cmFjayxcbiAgICAgICAgc3RyZWFtKSk7XG4gICAgICBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IF9hZGRUcmFjay5jYWxsKHRoaXMsIHRyYWNrLFxuICAgICAgICBzdHJlYW0pKTtcbiAgICB9O1xuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9XG4gICAgICBmdW5jdGlvbiBhZGRUcmFjayh0cmFjaykge1xuICAgICAgICBjb25zdCBzdHJlYW0gPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2xvY2FsU3RyZWFtcykge1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zID0gW3N0cmVhbV07XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zLmluY2x1ZGVzKHN0cmVhbSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfYWRkVHJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gIH1cbiAgaWYgKCEoJ3JlbW92ZVN0cmVhbScgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9XG4gICAgICBmdW5jdGlvbiByZW1vdmVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zKSB7XG4gICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBjb25zdCB0cmFja3MgPSBzdHJlYW0uZ2V0VHJhY2tzKCk7XG4gICAgICAgIHRoaXMuZ2V0U2VuZGVycygpLmZvckVhY2goc2VuZGVyID0+IHtcbiAgICAgICAgICBpZiAodHJhY2tzLmluY2x1ZGVzKHNlbmRlci50cmFjaykpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVHJhY2soc2VuZGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVJlbW90ZVN0cmVhbXNBUEkod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKCdnZXRSZW1vdGVTdHJlYW1zJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVtb3RlU3RyZWFtcyA9XG4gICAgICBmdW5jdGlvbiBnZXRSZW1vdGVTdHJlYW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3RlU3RyZWFtcyA/IHRoaXMuX3JlbW90ZVN0cmVhbXMgOiBbXTtcbiAgICAgIH07XG4gIH1cbiAgaWYgKCEoJ29uYWRkc3RyZWFtJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnb25hZGRzdHJlYW0nLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbmFkZHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICBzZXQoZikge1xuICAgICAgICBpZiAodGhpcy5fb25hZGRzdHJlYW0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FkZHN0cmVhbScsIHRoaXMuX29uYWRkc3RyZWFtKTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb25hZGRzdHJlYW1wb2x5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHN0cmVhbScsIHRoaXMuX29uYWRkc3RyZWFtID0gZik7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbmFkZHN0cmVhbXBvbHkgPSAoZSkgPT4ge1xuICAgICAgICAgIGUuc3RyZWFtcy5mb3JFYWNoKHN0cmVhbSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3JlbW90ZVN0cmVhbXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcmVtb3RlU3RyZWFtcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbW90ZVN0cmVhbXMuaW5jbHVkZXMoc3RyZWFtKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KCdhZGRzdHJlYW0nKTtcbiAgICAgICAgICAgIGV2ZW50LnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb24gPVxuICAgICAgZnVuY3Rpb24gc2V0UmVtb3RlRGVzY3JpcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IHBjID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9vbmFkZHN0cmVhbXBvbHkpIHtcbiAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb25hZGRzdHJlYW1wb2x5ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5zdHJlYW1zLmZvckVhY2goc3RyZWFtID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFwYy5fcmVtb3RlU3RyZWFtcykge1xuICAgICAgICAgICAgICAgIHBjLl9yZW1vdGVTdHJlYW1zID0gW107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHBjLl9yZW1vdGVTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBjLl9yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ2FkZHN0cmVhbScpO1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgICAgICAgIHBjLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbi5hcHBseShwYywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1DYWxsYmFja3NBUEkod2luZG93KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHByb3RvdHlwZSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU7XG4gIGNvbnN0IG9yaWdDcmVhdGVPZmZlciA9IHByb3RvdHlwZS5jcmVhdGVPZmZlcjtcbiAgY29uc3Qgb3JpZ0NyZWF0ZUFuc3dlciA9IHByb3RvdHlwZS5jcmVhdGVBbnN3ZXI7XG4gIGNvbnN0IHNldExvY2FsRGVzY3JpcHRpb24gPSBwcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbjtcbiAgY29uc3Qgc2V0UmVtb3RlRGVzY3JpcHRpb24gPSBwcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb247XG4gIGNvbnN0IGFkZEljZUNhbmRpZGF0ZSA9IHByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7XG5cbiAgcHJvdG90eXBlLmNyZWF0ZU9mZmVyID1cbiAgICBmdW5jdGlvbiBjcmVhdGVPZmZlcihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IChhcmd1bWVudHMubGVuZ3RoID49IDIpID8gYXJndW1lbnRzWzJdIDogYXJndW1lbnRzWzBdO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG9yaWdDcmVhdGVPZmZlci5hcHBseSh0aGlzLCBbb3B0aW9uc10pO1xuICAgICAgaWYgKCFmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBwcm9taXNlLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG5cbiAgcHJvdG90eXBlLmNyZWF0ZUFuc3dlciA9XG4gICAgZnVuY3Rpb24gY3JlYXRlQW5zd2VyKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gKGFyZ3VtZW50cy5sZW5ndGggPj0gMikgPyBhcmd1bWVudHNbMl0gOiBhcmd1bWVudHNbMF07XG4gICAgICBjb25zdCBwcm9taXNlID0gb3JpZ0NyZWF0ZUFuc3dlci5hcHBseSh0aGlzLCBbb3B0aW9uc10pO1xuICAgICAgaWYgKCFmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBwcm9taXNlLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG5cbiAgbGV0IHdpdGhDYWxsYmFjayA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgIGNvbnN0IHByb21pc2UgPSBzZXRMb2NhbERlc2NyaXB0aW9uLmFwcGx5KHRoaXMsIFtkZXNjcmlwdGlvbl0pO1xuICAgIGlmICghZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgcHJvbWlzZS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG4gIHByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uID0gd2l0aENhbGxiYWNrO1xuXG4gIHdpdGhDYWxsYmFjayA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgIGNvbnN0IHByb21pc2UgPSBzZXRSZW1vdGVEZXNjcmlwdGlvbi5hcHBseSh0aGlzLCBbZGVzY3JpcHRpb25dKTtcbiAgICBpZiAoIWZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjayk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuICBwcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb24gPSB3aXRoQ2FsbGJhY2s7XG5cbiAgd2l0aENhbGxiYWNrID0gZnVuY3Rpb24oY2FuZGlkYXRlLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgIGNvbnN0IHByb21pc2UgPSBhZGRJY2VDYW5kaWRhdGUuYXBwbHkodGhpcywgW2NhbmRpZGF0ZV0pO1xuICAgIGlmICghZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgcHJvbWlzZS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG4gIHByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPSB3aXRoQ2FsbGJhY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0VXNlck1lZGlhKHdpbmRvdykge1xuICBjb25zdCBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcblxuICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIC8vIHNoaW0gbm90IG5lZWRlZCBpbiBTYWZhcmkgMTIuMVxuICAgIGNvbnN0IG1lZGlhRGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXM7XG4gICAgY29uc3QgX2dldFVzZXJNZWRpYSA9IG1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuYmluZChtZWRpYURldmljZXMpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gKGNvbnN0cmFpbnRzKSA9PiB7XG4gICAgICByZXR1cm4gX2dldFVzZXJNZWRpYShzaGltQ29uc3RyYWludHMoY29uc3RyYWludHMpKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbiBnZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIGNiLCBlcnJjYikge1xuICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpXG4gICAgICAudGhlbihjYiwgZXJyY2IpO1xuICAgIH0uYmluZChuYXZpZ2F0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltQ29uc3RyYWludHMoY29uc3RyYWludHMpIHtcbiAgaWYgKGNvbnN0cmFpbnRzICYmIGNvbnN0cmFpbnRzLnZpZGVvICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxcbiAgICAgIGNvbnN0cmFpbnRzLFxuICAgICAge3ZpZGVvOiB1dGlscy5jb21wYWN0T2JqZWN0KGNvbnN0cmFpbnRzLnZpZGVvKX1cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNvbnN0cmFpbnRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbVJUQ0ljZVNlcnZlclVybHMod2luZG93KSB7XG4gIC8vIG1pZ3JhdGUgZnJvbSBub24tc3BlYyBSVENJY2VTZXJ2ZXIudXJsIHRvIFJUQ0ljZVNlcnZlci51cmxzXG4gIGNvbnN0IE9yaWdQZWVyQ29ubmVjdGlvbiA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID1cbiAgICBmdW5jdGlvbiBSVENQZWVyQ29ubmVjdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cykge1xuICAgICAgaWYgKHBjQ29uZmlnICYmIHBjQ29uZmlnLmljZVNlcnZlcnMpIHtcbiAgICAgICAgY29uc3QgbmV3SWNlU2VydmVycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBjQ29uZmlnLmljZVNlcnZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgc2VydmVyID0gcGNDb25maWcuaWNlU2VydmVyc1tpXTtcbiAgICAgICAgICBpZiAoIXNlcnZlci5oYXNPd25Qcm9wZXJ0eSgndXJscycpICYmXG4gICAgICAgICAgICAgIHNlcnZlci5oYXNPd25Qcm9wZXJ0eSgndXJsJykpIHtcbiAgICAgICAgICAgIHV0aWxzLmRlcHJlY2F0ZWQoJ1JUQ0ljZVNlcnZlci51cmwnLCAnUlRDSWNlU2VydmVyLnVybHMnKTtcbiAgICAgICAgICAgIHNlcnZlciA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VydmVyKSk7XG4gICAgICAgICAgICBzZXJ2ZXIudXJscyA9IHNlcnZlci51cmw7XG4gICAgICAgICAgICBkZWxldGUgc2VydmVyLnVybDtcbiAgICAgICAgICAgIG5ld0ljZVNlcnZlcnMucHVzaChzZXJ2ZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2gocGNDb25maWcuaWNlU2VydmVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBjQ29uZmlnLmljZVNlcnZlcnMgPSBuZXdJY2VTZXJ2ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBPcmlnUGVlckNvbm5lY3Rpb24ocGNDb25maWcsIHBjQ29uc3RyYWludHMpO1xuICAgIH07XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgPSBPcmlnUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuICAvLyB3cmFwIHN0YXRpYyBtZXRob2RzLiBDdXJyZW50bHkganVzdCBnZW5lcmF0ZUNlcnRpZmljYXRlLlxuICBpZiAoJ2dlbmVyYXRlQ2VydGlmaWNhdGUnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24sICdnZW5lcmF0ZUNlcnRpZmljYXRlJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gT3JpZ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoaW1UcmFja0V2ZW50VHJhbnNjZWl2ZXIod2luZG93KSB7XG4gIC8vIEFkZCBldmVudC50cmFuc2NlaXZlciBtZW1iZXIgb3ZlciBkZXByZWNhdGVkIGV2ZW50LnJlY2VpdmVyXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDVHJhY2tFdmVudCAmJlxuICAgICAgJ3JlY2VpdmVyJyBpbiB3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUgJiZcbiAgICAgICEoJ3RyYW5zY2VpdmVyJyBpbiB3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSwgJ3RyYW5zY2VpdmVyJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4ge3JlY2VpdmVyOiB0aGlzLnJlY2VpdmVyfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbUNyZWF0ZU9mZmVyTGVnYWN5KHdpbmRvdykge1xuICBjb25zdCBvcmlnQ3JlYXRlT2ZmZXIgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyID1cbiAgICBmdW5jdGlvbiBjcmVhdGVPZmZlcihvZmZlck9wdGlvbnMpIHtcbiAgICAgIGlmIChvZmZlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBzdXBwb3J0IGJpdCB2YWx1ZXNcbiAgICAgICAgICBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9XG4gICAgICAgICAgICAhIW9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF1ZGlvVHJhbnNjZWl2ZXIgPSB0aGlzLmdldFRyYW5zY2VpdmVycygpLmZpbmQodHJhbnNjZWl2ZXIgPT5cbiAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjay5raW5kID09PSAnYXVkaW8nKTtcbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvID09PSBmYWxzZSAmJiBhdWRpb1RyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgaWYgKGF1ZGlvVHJhbnNjZWl2ZXIuZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnKSB7XG4gICAgICAgICAgICBpZiAoYXVkaW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgYXVkaW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24oJ3NlbmRvbmx5Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhdWRpb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9ICdzZW5kb25seSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhdWRpb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3JlY3Zvbmx5Jykge1xuICAgICAgICAgICAgaWYgKGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdpbmFjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXVkaW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnaW5hY3RpdmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgIWF1ZGlvVHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgICB0aGlzLmFkZFRyYW5zY2VpdmVyKCdhdWRpbycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBzdXBwb3J0IGJpdCB2YWx1ZXNcbiAgICAgICAgICBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9XG4gICAgICAgICAgICAhIW9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZGVvVHJhbnNjZWl2ZXIgPSB0aGlzLmdldFRyYW5zY2VpdmVycygpLmZpbmQodHJhbnNjZWl2ZXIgPT5cbiAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjay5raW5kID09PSAndmlkZW8nKTtcbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvID09PSBmYWxzZSAmJiB2aWRlb1RyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgaWYgKHZpZGVvVHJhbnNjZWl2ZXIuZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnKSB7XG4gICAgICAgICAgICBpZiAodmlkZW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgdmlkZW9UcmFuc2NlaXZlci5zZXREaXJlY3Rpb24oJ3NlbmRvbmx5Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2aWRlb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9ICdzZW5kb25seSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh2aWRlb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3JlY3Zvbmx5Jykge1xuICAgICAgICAgICAgaWYgKHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdpbmFjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmlkZW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnaW5hY3RpdmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgIXZpZGVvVHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgICB0aGlzLmFkZFRyYW5zY2VpdmVyKCd2aWRlbycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ0NyZWF0ZU9mZmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBTRFBVdGlscyBmcm9tICdzZHAnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltUlRDSWNlQ2FuZGlkYXRlKHdpbmRvdykge1xuICAvLyBmb3VuZGF0aW9uIGlzIGFyYml0cmFyaWx5IGNob3NlbiBhcyBhbiBpbmRpY2F0b3IgZm9yIGZ1bGwgc3VwcG9ydCBmb3JcbiAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1wYy8jcnRjaWNlY2FuZGlkYXRlLWludGVyZmFjZVxuICBpZiAoIXdpbmRvdy5SVENJY2VDYW5kaWRhdGUgfHwgKHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgJiYgJ2ZvdW5kYXRpb24nIGluXG4gICAgICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlLnByb3RvdHlwZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBOYXRpdmVSVENJY2VDYW5kaWRhdGUgPSB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlO1xuICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24gUlRDSWNlQ2FuZGlkYXRlKGFyZ3MpIHtcbiAgICAvLyBSZW1vdmUgdGhlIGE9IHdoaWNoIHNob3VsZG4ndCBiZSBwYXJ0IG9mIHRoZSBjYW5kaWRhdGUgc3RyaW5nLlxuICAgIGlmICh0eXBlb2YgYXJncyA9PT0gJ29iamVjdCcgJiYgYXJncy5jYW5kaWRhdGUgJiZcbiAgICAgICAgYXJncy5jYW5kaWRhdGUuaW5kZXhPZignYT0nKSA9PT0gMCkge1xuICAgICAgYXJncyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYXJncykpO1xuICAgICAgYXJncy5jYW5kaWRhdGUgPSBhcmdzLmNhbmRpZGF0ZS5zdWJzdHIoMik7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MuY2FuZGlkYXRlICYmIGFyZ3MuY2FuZGlkYXRlLmxlbmd0aCkge1xuICAgICAgLy8gQXVnbWVudCB0aGUgbmF0aXZlIGNhbmRpZGF0ZSB3aXRoIHRoZSBwYXJzZWQgZmllbGRzLlxuICAgICAgY29uc3QgbmF0aXZlQ2FuZGlkYXRlID0gbmV3IE5hdGl2ZVJUQ0ljZUNhbmRpZGF0ZShhcmdzKTtcbiAgICAgIGNvbnN0IHBhcnNlZENhbmRpZGF0ZSA9IFNEUFV0aWxzLnBhcnNlQ2FuZGlkYXRlKGFyZ3MuY2FuZGlkYXRlKTtcbiAgICAgIGNvbnN0IGF1Z21lbnRlZENhbmRpZGF0ZSA9IE9iamVjdC5hc3NpZ24obmF0aXZlQ2FuZGlkYXRlLFxuICAgICAgICAgIHBhcnNlZENhbmRpZGF0ZSk7XG5cbiAgICAgIC8vIEFkZCBhIHNlcmlhbGl6ZXIgdGhhdCBkb2VzIG5vdCBzZXJpYWxpemUgdGhlIGV4dHJhIGF0dHJpYnV0ZXMuXG4gICAgICBhdWdtZW50ZWRDYW5kaWRhdGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNhbmRpZGF0ZTogYXVnbWVudGVkQ2FuZGlkYXRlLmNhbmRpZGF0ZSxcbiAgICAgICAgICBzZHBNaWQ6IGF1Z21lbnRlZENhbmRpZGF0ZS5zZHBNaWQsXG4gICAgICAgICAgc2RwTUxpbmVJbmRleDogYXVnbWVudGVkQ2FuZGlkYXRlLnNkcE1MaW5lSW5kZXgsXG4gICAgICAgICAgdXNlcm5hbWVGcmFnbWVudDogYXVnbWVudGVkQ2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQsXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGF1Z21lbnRlZENhbmRpZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBOYXRpdmVSVENJY2VDYW5kaWRhdGUoYXJncyk7XG4gIH07XG4gIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUucHJvdG90eXBlID0gTmF0aXZlUlRDSWNlQ2FuZGlkYXRlLnByb3RvdHlwZTtcblxuICAvLyBIb29rIHVwIHRoZSBhdWdtZW50ZWQgY2FuZGlkYXRlIGluIG9uaWNlY2FuZGlkYXRlIGFuZFxuICAvLyBhZGRFdmVudExpc3RlbmVyKCdpY2VjYW5kaWRhdGUnLCAuLi4pXG4gIHV0aWxzLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgJ2ljZWNhbmRpZGF0ZScsIGUgPT4ge1xuICAgIGlmIChlLmNhbmRpZGF0ZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdjYW5kaWRhdGUnLCB7XG4gICAgICAgIHZhbHVlOiBuZXcgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZShlLmNhbmRpZGF0ZSksXG4gICAgICAgIHdyaXRhYmxlOiAnZmFsc2UnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hpbU1heE1lc3NhZ2VTaXplKHdpbmRvdykge1xuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICBpZiAoISgnc2N0cCcgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ3NjdHAnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fc2N0cCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdGhpcy5fc2N0cDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHNjdHBJbkRlc2NyaXB0aW9uID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICBpZiAoIWRlc2NyaXB0aW9uIHx8ICFkZXNjcmlwdGlvbi5zZHApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGRlc2NyaXB0aW9uLnNkcCk7XG4gICAgc2VjdGlvbnMuc2hpZnQoKTtcbiAgICByZXR1cm4gc2VjdGlvbnMuc29tZShtZWRpYVNlY3Rpb24gPT4ge1xuICAgICAgY29uc3QgbUxpbmUgPSBTRFBVdGlscy5wYXJzZU1MaW5lKG1lZGlhU2VjdGlvbik7XG4gICAgICByZXR1cm4gbUxpbmUgJiYgbUxpbmUua2luZCA9PT0gJ2FwcGxpY2F0aW9uJ1xuICAgICAgICAgICYmIG1MaW5lLnByb3RvY29sLmluZGV4T2YoJ1NDVFAnKSAhPT0gLTE7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgZ2V0UmVtb3RlRmlyZWZveFZlcnNpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgIC8vIFRPRE86IElzIHRoZXJlIGEgYmV0dGVyIHNvbHV0aW9uIGZvciBkZXRlY3RpbmcgRmlyZWZveD9cbiAgICBjb25zdCBtYXRjaCA9IGRlc2NyaXB0aW9uLnNkcC5tYXRjaCgvbW96aWxsYS4uLlRISVNfSVNfU0RQQVJUQS0oXFxkKykvKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwgfHwgbWF0Y2gubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBjb25zdCB2ZXJzaW9uID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICAvLyBUZXN0IGZvciBOYU4gKHllcywgdGhpcyBpcyB1Z2x5KVxuICAgIHJldHVybiB2ZXJzaW9uICE9PSB2ZXJzaW9uID8gLTEgOiB2ZXJzaW9uO1xuICB9O1xuXG4gIGNvbnN0IGdldENhblNlbmRNYXhNZXNzYWdlU2l6ZSA9IGZ1bmN0aW9uKHJlbW90ZUlzRmlyZWZveCkge1xuICAgIC8vIEV2ZXJ5IGltcGxlbWVudGF0aW9uIHdlIGtub3cgY2FuIHNlbmQgYXQgbGVhc3QgNjQgS2lCLlxuICAgIC8vIE5vdGU6IEFsdGhvdWdoIENocm9tZSBpcyB0ZWNobmljYWxseSBhYmxlIHRvIHNlbmQgdXAgdG8gMjU2IEtpQiwgdGhlXG4gICAgLy8gICAgICAgZGF0YSBkb2VzIG5vdCByZWFjaCB0aGUgb3RoZXIgcGVlciByZWxpYWJseS5cbiAgICAvLyAgICAgICBTZWU6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD04NDE5XG4gICAgbGV0IGNhblNlbmRNYXhNZXNzYWdlU2l6ZSA9IDY1NTM2O1xuICAgIGlmIChicm93c2VyRGV0YWlscy5icm93c2VyID09PSAnZmlyZWZveCcpIHtcbiAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNTcpIHtcbiAgICAgICAgaWYgKHJlbW90ZUlzRmlyZWZveCA9PT0gLTEpIHtcbiAgICAgICAgICAvLyBGRiA8IDU3IHdpbGwgc2VuZCBpbiAxNiBLaUIgY2h1bmtzIHVzaW5nIHRoZSBkZXByZWNhdGVkIFBQSURcbiAgICAgICAgICAvLyBmcmFnbWVudGF0aW9uLlxuICAgICAgICAgIGNhblNlbmRNYXhNZXNzYWdlU2l6ZSA9IDE2Mzg0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEhvd2V2ZXIsIG90aGVyIEZGIChhbmQgUkFXUlRDKSBjYW4gcmVhc3NlbWJsZSBQUElELWZyYWdtZW50ZWRcbiAgICAgICAgICAvLyBtZXNzYWdlcy4gVGh1cywgc3VwcG9ydGluZyB+MiBHaUIgd2hlbiBzZW5kaW5nLlxuICAgICAgICAgIGNhblNlbmRNYXhNZXNzYWdlU2l6ZSA9IDIxNDc0ODM2Mzc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDYwKSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSwgYWxsIEZGID49IDU3IHdpbGwgcmVzZXQgdGhlIHJlbW90ZSBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZVxuICAgICAgICAvLyB0byB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIGEgZGF0YSBjaGFubmVsIGlzIGNyZWF0ZWQgYXQgYSBsYXRlclxuICAgICAgICAvLyBzdGFnZS4gOihcbiAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI2ODMxXG4gICAgICAgIGNhblNlbmRNYXhNZXNzYWdlU2l6ZSA9XG4gICAgICAgICAgYnJvd3NlckRldGFpbHMudmVyc2lvbiA9PT0gNTcgPyA2NTUzNSA6IDY1NTM2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRkYgPj0gNjAgc3VwcG9ydHMgc2VuZGluZyB+MiBHaUJcbiAgICAgICAgY2FuU2VuZE1heE1lc3NhZ2VTaXplID0gMjE0NzQ4MzYzNztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhblNlbmRNYXhNZXNzYWdlU2l6ZTtcbiAgfTtcblxuICBjb25zdCBnZXRNYXhNZXNzYWdlU2l6ZSA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uLCByZW1vdGVJc0ZpcmVmb3gpIHtcbiAgICAvLyBOb3RlOiA2NTUzNiBieXRlcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZSBmcm9tIHRoZSBTRFAgc3BlYy4gQWxzbyxcbiAgICAvLyAgICAgICBldmVyeSBpbXBsZW1lbnRhdGlvbiB3ZSBrbm93IHN1cHBvcnRzIHJlY2VpdmluZyA2NTUzNiBieXRlcy5cbiAgICBsZXQgbWF4TWVzc2FnZVNpemUgPSA2NTUzNjtcblxuICAgIC8vIEZGIDU3IGhhcyBhIHNsaWdodGx5IGluY29ycmVjdCBkZWZhdWx0IHJlbW90ZSBtYXggbWVzc2FnZSBzaXplLCBzb1xuICAgIC8vIHdlIG5lZWQgdG8gYWRqdXN0IGl0IGhlcmUgdG8gYXZvaWQgYSBmYWlsdXJlIHdoZW4gc2VuZGluZy5cbiAgICAvLyBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MjU2OTdcbiAgICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnXG4gICAgICAgICAmJiBicm93c2VyRGV0YWlscy52ZXJzaW9uID09PSA1Nykge1xuICAgICAgbWF4TWVzc2FnZVNpemUgPSA2NTUzNTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXRjaCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KGRlc2NyaXB0aW9uLnNkcCxcbiAgICAgICdhPW1heC1tZXNzYWdlLXNpemU6Jyk7XG4gICAgaWYgKG1hdGNoLmxlbmd0aCA+IDApIHtcbiAgICAgIG1heE1lc3NhZ2VTaXplID0gcGFyc2VJbnQobWF0Y2hbMF0uc3Vic3RyKDE5KSwgMTApO1xuICAgIH0gZWxzZSBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnICYmXG4gICAgICAgICAgICAgICAgcmVtb3RlSXNGaXJlZm94ICE9PSAtMSkge1xuICAgICAgLy8gSWYgdGhlIG1heGltdW0gbWVzc2FnZSBzaXplIGlzIG5vdCBwcmVzZW50IGluIHRoZSByZW1vdGUgU0RQIGFuZFxuICAgICAgLy8gYm90aCBsb2NhbCBhbmQgcmVtb3RlIGFyZSBGaXJlZm94LCB0aGUgcmVtb3RlIHBlZXIgY2FuIHJlY2VpdmVcbiAgICAgIC8vIH4yIEdpQi5cbiAgICAgIG1heE1lc3NhZ2VTaXplID0gMjE0NzQ4MzYzNztcbiAgICB9XG4gICAgcmV0dXJuIG1heE1lc3NhZ2VTaXplO1xuICB9O1xuXG4gIGNvbnN0IG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO1xuICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uID1cbiAgICBmdW5jdGlvbiBzZXRSZW1vdGVEZXNjcmlwdGlvbigpIHtcbiAgICAgIHRoaXMuX3NjdHAgPSBudWxsO1xuICAgICAgLy8gQ2hyb21lIGRlY2lkZWQgdG8gbm90IGV4cG9zZSAuc2N0cCBpbiBwbGFuLWIgbW9kZS5cbiAgICAgIC8vIEFzIHVzdWFsLCBhZGFwdGVyLmpzIGhhcyB0byBkbyBhbiAndWdseSB3b3Jha2Fyb3VuZCdcbiAgICAgIC8vIHRvIGNvdmVyIHVwIHRoZSBtZXNzLlxuICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLmJyb3dzZXIgPT09ICdjaHJvbWUnICYmIGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPj0gNzYpIHtcbiAgICAgICAgY29uc3Qge3NkcFNlbWFudGljc30gPSB0aGlzLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgaWYgKHNkcFNlbWFudGljcyA9PT0gJ3BsYW4tYicpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3NjdHAnLCB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fc2N0cCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdGhpcy5fc2N0cDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzY3RwSW5EZXNjcmlwdGlvbihhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSByZW1vdGUgaXMgRkYuXG4gICAgICAgIGNvbnN0IGlzRmlyZWZveCA9IGdldFJlbW90ZUZpcmVmb3hWZXJzaW9uKGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZSB0aGUgbG9jYWwgcGVlciBpcyBjYXBhYmxlIG9mIHNlbmRpbmdcbiAgICAgICAgY29uc3QgY2FuU2VuZE1NUyA9IGdldENhblNlbmRNYXhNZXNzYWdlU2l6ZShpc0ZpcmVmb3gpO1xuXG4gICAgICAgIC8vIEdldCB0aGUgbWF4aW11bSBtZXNzYWdlIHNpemUgb2YgdGhlIHJlbW90ZSBwZWVyLlxuICAgICAgICBjb25zdCByZW1vdGVNTVMgPSBnZXRNYXhNZXNzYWdlU2l6ZShhcmd1bWVudHNbMF0sIGlzRmlyZWZveCk7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGZpbmFsIG1heGltdW0gbWVzc2FnZSBzaXplXG4gICAgICAgIGxldCBtYXhNZXNzYWdlU2l6ZTtcbiAgICAgICAgaWYgKGNhblNlbmRNTVMgPT09IDAgJiYgcmVtb3RlTU1TID09PSAwKSB7XG4gICAgICAgICAgbWF4TWVzc2FnZVNpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2FuU2VuZE1NUyA9PT0gMCB8fCByZW1vdGVNTVMgPT09IDApIHtcbiAgICAgICAgICBtYXhNZXNzYWdlU2l6ZSA9IE1hdGgubWF4KGNhblNlbmRNTVMsIHJlbW90ZU1NUyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF4TWVzc2FnZVNpemUgPSBNYXRoLm1pbihjYW5TZW5kTU1TLCByZW1vdGVNTVMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgZHVtbXkgUlRDU2N0cFRyYW5zcG9ydCBvYmplY3QgYW5kIHRoZSAnbWF4TWVzc2FnZVNpemUnXG4gICAgICAgIC8vIGF0dHJpYnV0ZS5cbiAgICAgICAgY29uc3Qgc2N0cCA9IHt9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2N0cCwgJ21heE1lc3NhZ2VTaXplJywge1xuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXhNZXNzYWdlU2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zY3RwID0gc2N0cDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltU2VuZFRocm93VHlwZUVycm9yKHdpbmRvdykge1xuICBpZiAoISh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgICdjcmVhdGVEYXRhQ2hhbm5lbCcgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBOb3RlOiBBbHRob3VnaCBGaXJlZm94ID49IDU3IGhhcyBhIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgdGhlIG1heGltdW1cbiAgLy8gICAgICAgbWVzc2FnZSBzaXplIGNhbiBiZSByZXNldCBmb3IgYWxsIGRhdGEgY2hhbm5lbHMgYXQgYSBsYXRlciBzdGFnZS5cbiAgLy8gICAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI2ODMxXG5cbiAgZnVuY3Rpb24gd3JhcERjU2VuZChkYywgcGMpIHtcbiAgICBjb25zdCBvcmlnRGF0YUNoYW5uZWxTZW5kID0gZGMuc2VuZDtcbiAgICBkYy5zZW5kID0gZnVuY3Rpb24gc2VuZCgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhcmd1bWVudHNbMF07XG4gICAgICBjb25zdCBsZW5ndGggPSBkYXRhLmxlbmd0aCB8fCBkYXRhLnNpemUgfHwgZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgaWYgKGRjLnJlYWR5U3RhdGUgPT09ICdvcGVuJyAmJlxuICAgICAgICAgIHBjLnNjdHAgJiYgbGVuZ3RoID4gcGMuc2N0cC5tYXhNZXNzYWdlU2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXNzYWdlIHRvbyBsYXJnZSAoY2FuIHNlbmQgYSBtYXhpbXVtIG9mICcgK1xuICAgICAgICAgIHBjLnNjdHAubWF4TWVzc2FnZVNpemUgKyAnIGJ5dGVzKScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdEYXRhQ2hhbm5lbFNlbmQuYXBwbHkoZGMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuICBjb25zdCBvcmlnQ3JlYXRlRGF0YUNoYW5uZWwgPVxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlRGF0YUNoYW5uZWw7XG4gIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlRGF0YUNoYW5uZWwgPVxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGFDaGFubmVsKCkge1xuICAgICAgY29uc3QgZGF0YUNoYW5uZWwgPSBvcmlnQ3JlYXRlRGF0YUNoYW5uZWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdyYXBEY1NlbmQoZGF0YUNoYW5uZWwsIHRoaXMpO1xuICAgICAgcmV0dXJuIGRhdGFDaGFubmVsO1xuICAgIH07XG4gIHV0aWxzLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgJ2RhdGFjaGFubmVsJywgZSA9PiB7XG4gICAgd3JhcERjU2VuZChlLmNoYW5uZWwsIGUudGFyZ2V0KTtcbiAgICByZXR1cm4gZTtcbiAgfSk7XG59XG5cblxuLyogc2hpbXMgUlRDQ29ubmVjdGlvblN0YXRlIGJ5IHByZXRlbmRpbmcgaXQgaXMgdGhlIHNhbWUgYXMgaWNlQ29ubmVjdGlvblN0YXRlLlxuICogU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD02MTQ1I2MxMlxuICogZm9yIHdoeSB0aGlzIGlzIGEgdmFsaWQgaGFjayBpbiBDaHJvbWUuIEluIEZpcmVmb3ggaXQgaXMgc2xpZ2h0bHkgaW5jb3JyZWN0XG4gKiBzaW5jZSBEVExTIGZhaWx1cmVzIHdvdWxkIGJlIGhpZGRlbi4gU2VlXG4gKiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjY1ODI3XG4gKiBmb3IgdGhlIEZpcmVmb3ggdHJhY2tpbmcgYnVnLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hpbUNvbm5lY3Rpb25TdGF0ZSh3aW5kb3cpIHtcbiAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gfHxcbiAgICAgICdjb25uZWN0aW9uU3RhdGUnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcHJvdG8gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdjb25uZWN0aW9uU3RhdGUnLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGxldGVkOiAnY29ubmVjdGVkJyxcbiAgICAgICAgY2hlY2tpbmc6ICdjb25uZWN0aW5nJ1xuICAgICAgfVt0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZV0gfHwgdGhpcy5pY2VDb25uZWN0aW9uU3RhdGU7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29uY29ubmVjdGlvbnN0YXRlY2hhbmdlIHx8IG51bGw7XG4gICAgfSxcbiAgICBzZXQoY2IpIHtcbiAgICAgIGlmICh0aGlzLl9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsXG4gICAgICAgICAgICB0aGlzLl9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZTtcbiAgICAgIH1cbiAgICAgIGlmIChjYikge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsXG4gICAgICAgICAgICB0aGlzLl9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IGNiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuXG4gIFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbiddLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICAgIGNvbnN0IG9yaWdNZXRob2QgPSBwcm90b1ttZXRob2RdO1xuICAgIHByb3RvW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fY29ubmVjdGlvbnN0YXRlY2hhbmdlcG9seSkge1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uc3RhdGVjaGFuZ2Vwb2x5ID0gZSA9PiB7XG4gICAgICAgICAgY29uc3QgcGMgPSBlLnRhcmdldDtcbiAgICAgICAgICBpZiAocGMuX2xhc3RDb25uZWN0aW9uU3RhdGUgIT09IHBjLmNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgICAgICAgcGMuX2xhc3RDb25uZWN0aW9uU3RhdGUgPSBwYy5jb25uZWN0aW9uU3RhdGU7XG4gICAgICAgICAgICBjb25zdCBuZXdFdmVudCA9IG5ldyBFdmVudCgnY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgZSk7XG4gICAgICAgICAgICBwYy5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJyxcbiAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uc3RhdGVjaGFuZ2Vwb2x5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBbGxvd0V4dG1hcE1peGVkKHdpbmRvdykge1xuICAvKiByZW1vdmUgYT1leHRtYXAtYWxsb3ctbWl4ZWQgZm9yIENocm9tZSA8IE03MSAqL1xuICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcbiAgaWYgKGJyb3dzZXJEZXRhaWxzLmJyb3dzZXIgPT09ICdjaHJvbWUnICYmIGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPj0gNzEpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbmF0aXZlU1JEID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gIGZ1bmN0aW9uIHNldFJlbW90ZURlc2NyaXB0aW9uKGRlc2MpIHtcbiAgICBpZiAoZGVzYyAmJiBkZXNjLnNkcCAmJiBkZXNjLnNkcC5pbmRleE9mKCdcXG5hPWV4dG1hcC1hbGxvdy1taXhlZCcpICE9PSAtMSkge1xuICAgICAgZGVzYy5zZHAgPSBkZXNjLnNkcC5zcGxpdCgnXFxuJykuZmlsdGVyKChsaW5lKSA9PiB7XG4gICAgICAgIHJldHVybiBsaW5lLnRyaW0oKSAhPT0gJ2E9ZXh0bWFwLWFsbG93LW1peGVkJztcbiAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICByZXR1cm4gbmF0aXZlU1JELmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG4gIC8vIEJyb3dzZXIgc2hpbXMuXG5pbXBvcnQgKiBhcyBjaHJvbWVTaGltIGZyb20gJy4vY2hyb21lL2Nocm9tZV9zaGltJztcbmltcG9ydCAqIGFzIGVkZ2VTaGltIGZyb20gJy4vZWRnZS9lZGdlX3NoaW0nO1xuaW1wb3J0ICogYXMgZmlyZWZveFNoaW0gZnJvbSAnLi9maXJlZm94L2ZpcmVmb3hfc2hpbSc7XG5pbXBvcnQgKiBhcyBzYWZhcmlTaGltIGZyb20gJy4vc2FmYXJpL3NhZmFyaV9zaGltJztcbmltcG9ydCAqIGFzIGNvbW1vblNoaW0gZnJvbSAnLi9jb21tb25fc2hpbSc7XG5cbi8vIFNoaW1taW5nIHN0YXJ0cyBoZXJlLlxuZXhwb3J0IGZ1bmN0aW9uIGFkYXB0ZXJGYWN0b3J5KHt3aW5kb3d9ID0ge30sIG9wdGlvbnMgPSB7XG4gIHNoaW1DaHJvbWU6IHRydWUsXG4gIHNoaW1GaXJlZm94OiB0cnVlLFxuICBzaGltRWRnZTogdHJ1ZSxcbiAgc2hpbVNhZmFyaTogdHJ1ZSxcbn0pIHtcbiAgLy8gVXRpbHMuXG4gIGNvbnN0IGxvZ2dpbmcgPSB1dGlscy5sb2c7XG4gIGNvbnN0IGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gIGNvbnN0IGFkYXB0ZXIgPSB7XG4gICAgYnJvd3NlckRldGFpbHMsXG4gICAgY29tbW9uU2hpbSxcbiAgICBleHRyYWN0VmVyc2lvbjogdXRpbHMuZXh0cmFjdFZlcnNpb24sXG4gICAgZGlzYWJsZUxvZzogdXRpbHMuZGlzYWJsZUxvZyxcbiAgICBkaXNhYmxlV2FybmluZ3M6IHV0aWxzLmRpc2FibGVXYXJuaW5nc1xuICB9O1xuXG4gIC8vIFNoaW0gYnJvd3NlciBpZiBmb3VuZC5cbiAgc3dpdGNoIChicm93c2VyRGV0YWlscy5icm93c2VyKSB7XG4gICAgY2FzZSAnY2hyb21lJzpcbiAgICAgIGlmICghY2hyb21lU2hpbSB8fCAhY2hyb21lU2hpbS5zaGltUGVlckNvbm5lY3Rpb24gfHxcbiAgICAgICAgICAhb3B0aW9ucy5zaGltQ2hyb21lKSB7XG4gICAgICAgIGxvZ2dpbmcoJ0Nocm9tZSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4nKTtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXI7XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIGNocm9tZS4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gY2hyb21lU2hpbTtcblxuICAgICAgY2hyb21lU2hpbS5zaGltR2V0VXNlck1lZGlhKHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLnNoaW1NZWRpYVN0cmVhbSh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltUGVlckNvbm5lY3Rpb24od2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbU9uVHJhY2sod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2sod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbUdldFNlbmRlcnNXaXRoRHRtZih3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltR2V0U3RhdHMod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbVNlbmRlclJlY2VpdmVyR2V0U3RhdHMod2luZG93KTtcbiAgICAgIGNocm9tZVNoaW0uZml4TmVnb3RpYXRpb25OZWVkZWQod2luZG93KTtcblxuICAgICAgY29tbW9uU2hpbS5zaGltUlRDSWNlQ2FuZGlkYXRlKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1Db25uZWN0aW9uU3RhdGUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbU1heE1lc3NhZ2VTaXplKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1TZW5kVGhyb3dUeXBlRXJyb3Iod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0ucmVtb3ZlQWxsb3dFeHRtYXBNaXhlZCh3aW5kb3cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmlyZWZveCc6XG4gICAgICBpZiAoIWZpcmVmb3hTaGltIHx8ICFmaXJlZm94U2hpbS5zaGltUGVlckNvbm5lY3Rpb24gfHxcbiAgICAgICAgICAhb3B0aW9ucy5zaGltRmlyZWZveCkge1xuICAgICAgICBsb2dnaW5nKCdGaXJlZm94IHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgZmlyZWZveC4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gZmlyZWZveFNoaW07XG5cbiAgICAgIGZpcmVmb3hTaGltLnNoaW1HZXRVc2VyTWVkaWEod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1QZWVyQ29ubmVjdGlvbih3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbU9uVHJhY2sod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1SZW1vdmVTdHJlYW0od2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1TZW5kZXJHZXRTdGF0cyh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVJlY2VpdmVyR2V0U3RhdHMod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1SVENEYXRhQ2hhbm5lbCh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbUFkZFRyYW5zY2VpdmVyKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltQ3JlYXRlT2ZmZXIod2luZG93KTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1DcmVhdGVBbnN3ZXIod2luZG93KTtcblxuICAgICAgY29tbW9uU2hpbS5zaGltUlRDSWNlQ2FuZGlkYXRlKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1Db25uZWN0aW9uU3RhdGUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbU1heE1lc3NhZ2VTaXplKHdpbmRvdyk7XG4gICAgICBjb21tb25TaGltLnNoaW1TZW5kVGhyb3dUeXBlRXJyb3Iod2luZG93KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2VkZ2UnOlxuICAgICAgaWYgKCFlZGdlU2hpbSB8fCAhZWRnZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uIHx8ICFvcHRpb25zLnNoaW1FZGdlKSB7XG4gICAgICAgIGxvZ2dpbmcoJ01TIGVkZ2Ugc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuJyk7XG4gICAgICAgIHJldHVybiBhZGFwdGVyO1xuICAgICAgfVxuICAgICAgbG9nZ2luZygnYWRhcHRlci5qcyBzaGltbWluZyBlZGdlLicpO1xuICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgIGFkYXB0ZXIuYnJvd3NlclNoaW0gPSBlZGdlU2hpbTtcblxuICAgICAgZWRnZVNoaW0uc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpO1xuICAgICAgZWRnZVNoaW0uc2hpbUdldERpc3BsYXlNZWRpYSh3aW5kb3cpO1xuICAgICAgZWRnZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdyk7XG4gICAgICBlZGdlU2hpbS5zaGltUmVwbGFjZVRyYWNrKHdpbmRvdyk7XG5cbiAgICAgIC8vIHRoZSBlZGdlIHNoaW0gaW1wbGVtZW50cyB0aGUgZnVsbCBSVENJY2VDYW5kaWRhdGUgb2JqZWN0LlxuXG4gICAgICBjb21tb25TaGltLnNoaW1NYXhNZXNzYWdlU2l6ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltU2VuZFRocm93VHlwZUVycm9yKHdpbmRvdyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzYWZhcmknOlxuICAgICAgaWYgKCFzYWZhcmlTaGltIHx8ICFvcHRpb25zLnNoaW1TYWZhcmkpIHtcbiAgICAgICAgbG9nZ2luZygnU2FmYXJpIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgc2FmYXJpLicpO1xuICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgIGFkYXB0ZXIuYnJvd3NlclNoaW0gPSBzYWZhcmlTaGltO1xuXG4gICAgICBzYWZhcmlTaGltLnNoaW1SVENJY2VTZXJ2ZXJVcmxzKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1DcmVhdGVPZmZlckxlZ2FjeSh3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltQ2FsbGJhY2tzQVBJKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1Mb2NhbFN0cmVhbXNBUEkod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbVJlbW90ZVN0cmVhbXNBUEkod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbVRyYWNrRXZlbnRUcmFuc2NlaXZlcih3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltR2V0VXNlck1lZGlhKHdpbmRvdyk7XG5cbiAgICAgIGNvbW1vblNoaW0uc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5yZW1vdmVBbGxvd0V4dG1hcE1peGVkKHdpbmRvdyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nZ2luZygnVW5zdXBwb3J0ZWQgYnJvd3NlciEnKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7YWRhcHRlckZhY3Rvcnl9IGZyb20gJy4vYWRhcHRlcl9mYWN0b3J5LmpzJztcblxuY29uc3QgYWRhcHRlciA9IGFkYXB0ZXJGYWN0b3J5KHt3aW5kb3d9KTtcbmV4cG9ydCBkZWZhdWx0IGFkYXB0ZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7IC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cblxuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cblByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxufTtcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbnZhciBpc0hvcGVmdWxseURvbUVudmlyb25tZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzSG9wZWZ1bGx5RG9tRW52aXJvbm1lbnQgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcclxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xyXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxyXG4gICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xyXG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxyXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXHJcbiAgICB9KSkoWW91ckNvbXBvbmVudClcclxuICAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xyXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xyXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXHJcbiAgICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxyXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cclxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaW52YXJpYW50KHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkLCBcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICBpbnZhcmlhbnQoIXdpdGhSZWYsICd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcbiAgaW52YXJpYW50KHN0b3JlS2V5ID09PSAnc3RvcmUnLCAnc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW52YXJpYW50KGlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSwgXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciBmb3J3YXJkZWRSZWYgPSBwcm9wcy5mb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiZm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIGZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIGZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaW52YXJpYW50KGRpZFN0b3JlQ29tZUZyb21Qcm9wcyB8fCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCwgXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG4gICAgICB2YXIgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICAgICAgICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICAgICAgICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgICAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgICAgICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAgICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAgICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICAgICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAgICAgICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gICAgICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gICAgICAgIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgICAgICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAgICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgICAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgICAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbiAgICAgIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3JdKTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIHZhciByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbZm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIGZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCB7fSwgc3RhdGVQcm9wcywge30sIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxyXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXHJcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcclxuXHJcbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcclxuICBcclxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xyXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxyXG5cclxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcclxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxyXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXHJcblxyXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cclxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuICBpbnZhcmlhbnQoY29udGV4dFZhbHVlLCAnY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVN0b3JlID0gY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlU3RvcmUgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICAgIHZhciBzdG9yZSA9IHVzZVN0b3JlKCk7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXHJcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxyXG4gKiAgIHJldHVybiAoXHJcbiAqICAgICA8ZGl2PlxyXG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxyXG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgKVxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZURpc3BhdGNoID0gY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBzZWxlY3RpbmcgdGhlIHN0b3JlIHN0YXRlOiBcIiArIGVyci5tZXNzYWdlICsgXCIuXCI7XG5cbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5PcmlnaW5hbCBzdGFjayB0cmFjZTpcIjtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcih7fSk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KHNlbGVjdG9yLCBcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcnNcIik7XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHJldHVybiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwidmFyIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZztcbi8qKiBQYXRjaCB0b1N0cmluZyBjYWxscyB0byByZXR1cm4gcHJvcGVyIG5hbWUgZm9yIHdyYXBwZWQgZnVuY3Rpb25zICovXG52YXIgRnVuY3Rpb25Ub1N0cmluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGdW5jdGlvblRvU3RyaW5nKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IEZ1bmN0aW9uVG9TdHJpbmcuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRnVuY3Rpb25Ub1N0cmluZy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fX3NlbnRyeV9vcmlnaW5hbF9fIHx8IHRoaXM7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRnVuY3Rpb25Ub1N0cmluZy5pZCA9ICdGdW5jdGlvblRvU3RyaW5nJztcbiAgICByZXR1cm4gRnVuY3Rpb25Ub1N0cmluZztcbn0oKSk7XG5leHBvcnQgeyBGdW5jdGlvblRvU3RyaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbnRvc3RyaW5nLmpzLm1hcCIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vayB9IGZyb20gJy4vaG9va3MvdXNlRGlzcGF0Y2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vayB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rLCB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rLCB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rLCBzaGFsbG93RXF1YWwgfTsiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQgeyBnZXRFdmVudERlc2NyaXB0aW9uLCBpc01hdGNoaW5nUGF0dGVybiwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vLyBcIlNjcmlwdCBlcnJvci5cIiBpcyBoYXJkIGNvZGVkIGludG8gYnJvd3NlcnMgZm9yIGVycm9ycyB0aGF0IGl0IGNhbid0IHJlYWQuXG4vLyB0aGlzIGlzIHRoZSByZXN1bHQgb2YgYSBzY3JpcHQgYmVpbmcgcHVsbGVkIGluIGZyb20gYW4gZXh0ZXJuYWwgZG9tYWluIGFuZCBDT1JTLlxudmFyIERFRkFVTFRfSUdOT1JFX0VSUk9SUyA9IFsvXlNjcmlwdCBlcnJvclxcLj8kLywgL15KYXZhc2NyaXB0IGVycm9yOiBTY3JpcHQgZXJyb3JcXC4/IG9uIGxpbmUgMCQvXTtcbi8qKiBJbmJvdW5kIGZpbHRlcnMgY29uZmlndXJhYmxlIGJ5IHRoZSB1c2VyICovXG52YXIgSW5ib3VuZEZpbHRlcnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW5ib3VuZEZpbHRlcnMoX29wdGlvbnMpIHtcbiAgICAgICAgaWYgKF9vcHRpb25zID09PSB2b2lkIDApIHsgX29wdGlvbnMgPSB7fTsgfVxuICAgICAgICB0aGlzLl9vcHRpb25zID0gX29wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gSW5ib3VuZEZpbHRlcnMuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgICAgICAgICAgaWYgKCFodWIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2VsZiA9IGh1Yi5nZXRJbnRlZ3JhdGlvbihJbmJvdW5kRmlsdGVycyk7XG4gICAgICAgICAgICBpZiAoc2VsZikge1xuICAgICAgICAgICAgICAgIHZhciBjbGllbnQgPSBodWIuZ2V0Q2xpZW50KCk7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudE9wdGlvbnMgPSBjbGllbnQgPyBjbGllbnQuZ2V0T3B0aW9ucygpIDoge307XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBzZWxmLl9tZXJnZU9wdGlvbnMoY2xpZW50T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuX3Nob3VsZERyb3BFdmVudChldmVudCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5fc2hvdWxkRHJvcEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1NlbnRyeUVycm9yKGV2ZW50LCBvcHRpb25zKSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJFdmVudCBkcm9wcGVkIGR1ZSB0byBiZWluZyBpbnRlcm5hbCBTZW50cnkgRXJyb3IuXFxuRXZlbnQ6IFwiICsgZ2V0RXZlbnREZXNjcmlwdGlvbihldmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzSWdub3JlZEVycm9yKGV2ZW50LCBvcHRpb25zKSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJFdmVudCBkcm9wcGVkIGR1ZSB0byBiZWluZyBtYXRjaGVkIGJ5IGBpZ25vcmVFcnJvcnNgIG9wdGlvbi5cXG5FdmVudDogXCIgKyBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNCbGFja2xpc3RlZFVybChldmVudCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgbWF0Y2hlZCBieSBgYmxhY2tsaXN0VXJsc2Agb3B0aW9uLlxcbkV2ZW50OiBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpICsgXCIuXFxuVXJsOiBcIiArIHRoaXMuX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzV2hpdGVsaXN0ZWRVcmwoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIG5vdCBiZWluZyBtYXRjaGVkIGJ5IGB3aGl0ZWxpc3RVcmxzYCBvcHRpb24uXFxuRXZlbnQ6IFwiICsgZ2V0RXZlbnREZXNjcmlwdGlvbihldmVudCkgKyBcIi5cXG5Vcmw6IFwiICsgdGhpcy5fZ2V0RXZlbnRGaWx0ZXJVcmwoZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5faXNTZW50cnlFcnJvciA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuaWdub3JlSW50ZXJuYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICgoZXZlbnQgJiZcbiAgICAgICAgICAgICAgICBldmVudC5leGNlcHRpb24gJiZcbiAgICAgICAgICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXSAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSA9PT0gJ1NlbnRyeUVycm9yJykgfHxcbiAgICAgICAgICAgICAgICBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2lzSWdub3JlZEVycm9yID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgIW9wdGlvbnMuaWdub3JlRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXMoZXZlbnQpLnNvbWUoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIC8vIE5vdCBzdXJlIHdoeSBUeXBlU2NyaXB0IGNvbXBsYWlucyBoZXJlLi4uXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5pZ25vcmVFcnJvcnMuc29tZShmdW5jdGlvbiAocGF0dGVybikgeyByZXR1cm4gaXNNYXRjaGluZ1BhdHRlcm4obWVzc2FnZSwgcGF0dGVybik7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5faXNCbGFja2xpc3RlZFVybCA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAvLyBUT0RPOiBVc2UgR2xvYiBpbnN0ZWFkP1xuICAgICAgICBpZiAoIW9wdGlvbnMuYmxhY2tsaXN0VXJscyB8fCAhb3B0aW9ucy5ibGFja2xpc3RVcmxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCk7XG4gICAgICAgIHJldHVybiAhdXJsID8gZmFsc2UgOiBvcHRpb25zLmJsYWNrbGlzdFVybHMuc29tZShmdW5jdGlvbiAocGF0dGVybikgeyByZXR1cm4gaXNNYXRjaGluZ1BhdHRlcm4odXJsLCBwYXR0ZXJuKTsgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2lzV2hpdGVsaXN0ZWRVcmwgPSBmdW5jdGlvbiAoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgLy8gVE9ETzogVXNlIEdsb2IgaW5zdGVhZD9cbiAgICAgICAgaWYgKCFvcHRpb25zLndoaXRlbGlzdFVybHMgfHwgIW9wdGlvbnMud2hpdGVsaXN0VXJscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCk7XG4gICAgICAgIHJldHVybiAhdXJsID8gdHJ1ZSA6IG9wdGlvbnMud2hpdGVsaXN0VXJscy5zb21lKGZ1bmN0aW9uIChwYXR0ZXJuKSB7IHJldHVybiBpc01hdGNoaW5nUGF0dGVybih1cmwsIHBhdHRlcm4pOyB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5fbWVyZ2VPcHRpb25zID0gZnVuY3Rpb24gKGNsaWVudE9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNsaWVudE9wdGlvbnMgPT09IHZvaWQgMCkgeyBjbGllbnRPcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJsYWNrbGlzdFVybHM6IHRzbGliXzEuX19zcHJlYWQoKHRoaXMuX29wdGlvbnMuYmxhY2tsaXN0VXJscyB8fCBbXSksIChjbGllbnRPcHRpb25zLmJsYWNrbGlzdFVybHMgfHwgW10pKSxcbiAgICAgICAgICAgIGlnbm9yZUVycm9yczogdHNsaWJfMS5fX3NwcmVhZCgodGhpcy5fb3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgW10pLCAoY2xpZW50T3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgW10pLCBERUZBVUxUX0lHTk9SRV9FUlJPUlMpLFxuICAgICAgICAgICAgaWdub3JlSW50ZXJuYWw6IHR5cGVvZiB0aGlzLl9vcHRpb25zLmlnbm9yZUludGVybmFsICE9PSAndW5kZWZpbmVkJyA/IHRoaXMuX29wdGlvbnMuaWdub3JlSW50ZXJuYWwgOiB0cnVlLFxuICAgICAgICAgICAgd2hpdGVsaXN0VXJsczogdHNsaWJfMS5fX3NwcmVhZCgodGhpcy5fb3B0aW9ucy53aGl0ZWxpc3RVcmxzIHx8IFtdKSwgKGNsaWVudE9wdGlvbnMud2hpdGVsaXN0VXJscyB8fCBbXSkpLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9nZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBbZXZlbnQubWVzc2FnZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmV4Y2VwdGlvbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSAoZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdKSB8fCB7fSwgX2IgPSBfYS50eXBlLCB0eXBlID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2IsIF9jID0gX2EudmFsdWUsIHZhbHVlID0gX2MgPT09IHZvaWQgMCA/ICcnIDogX2M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcIlwiICsgdmFsdWUsIHR5cGUgKyBcIjogXCIgKyB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAob08pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJDYW5ub3QgZXh0cmFjdCBtZXNzYWdlIGZvciBldmVudCBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9nZXRFdmVudEZpbHRlclVybCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnN0YWNrdHJhY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVzXzEgPSBldmVudC5zdGFja3RyYWNlLmZyYW1lcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZyYW1lc18xICYmIGZyYW1lc18xW2ZyYW1lc18xLmxlbmd0aCAtIDFdLmZpbGVuYW1lKSB8fCBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50LmV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZXNfMiA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChmcmFtZXNfMiAmJiBmcmFtZXNfMltmcmFtZXNfMi5sZW5ndGggLSAxXS5maWxlbmFtZSkgfHwgbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChvTykge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiQ2Fubm90IGV4dHJhY3QgdXJsIGZvciBldmVudCBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEluYm91bmRGaWx0ZXJzLmlkID0gJ0luYm91bmRGaWx0ZXJzJztcbiAgICByZXR1cm4gSW5ib3VuZEZpbHRlcnM7XG59KCkpO1xuZXhwb3J0IHsgSW5ib3VuZEZpbHRlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluYm91bmRmaWx0ZXJzLmpzLm1hcCIsImV4cG9ydCB2YXIgc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgPyBzZXRQcm90b09mIDogbWl4aW5Qcm9wZXJ0aWVzKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby11bmJvdW5kLW1ldGhvZFxuLyoqXG4gKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gc2V0UHJvdG9PZihvYmosIHByb3RvKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG9iai5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gb2JqO1xufVxuLyoqXG4gKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBtaXhpblxuICovXG5mdW5jdGlvbiBtaXhpblByb3BlcnRpZXMob2JqLCBwcm90bykge1xuICAgIGZvciAodmFyIHByb3AgaW4gcHJvdG8pIHtcbiAgICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIG9ialtwcm9wXSA9IHByb3RvW3Byb3BdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2x5ZmlsbC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgc2V0UHJvdG90eXBlT2YgfSBmcm9tICcuL3BvbHlmaWxsJztcbi8qKiBBbiBlcnJvciBlbWl0dGVkIGJ5IFNlbnRyeSBTREtzIGFuZCByZWxhdGVkIHV0aWxpdGllcy4gKi9cbnZhciBTZW50cnlFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTZW50cnlFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZW50cnlFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLXVuc2FmZS1hbnlcbiAgICAgICAgX3RoaXMubmFtZSA9IF9uZXdUYXJnZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHNldFByb3RvdHlwZU9mKF90aGlzLCBfbmV3VGFyZ2V0LnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNlbnRyeUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgU2VudHJ5RXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTZW50cnlFcnJvciB9IGZyb20gJy4vZXJyb3InO1xuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHBhcnNlIGEgRHNuLiAqL1xudmFyIERTTl9SRUdFWCA9IC9eKD86KFxcdyspOilcXC9cXC8oPzooXFx3KykoPzo6KFxcdyspKT9AKShbXFx3XFwuLV0rKSg/OjooXFxkKykpP1xcLyguKykvO1xuLyoqIEVycm9yIG1lc3NhZ2UgKi9cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0ludmFsaWQgRHNuJztcbi8qKiBUaGUgU2VudHJ5IERzbiwgaWRlbnRpZnlpbmcgYSBTZW50cnkgaW5zdGFuY2UgYW5kIHByb2plY3QuICovXG52YXIgRHNuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IERzbiBjb21wb25lbnQgKi9cbiAgICBmdW5jdGlvbiBEc24oZnJvbSkge1xuICAgICAgICBpZiAodHlwZW9mIGZyb20gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9mcm9tU3RyaW5nKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZnJvbUNvbXBvbmVudHMoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsaWRhdGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHNuLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyB3aWxsIHJlbmRlciB0aGUgcHVibGljIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgdGhlIHBhc3N3b3JkXG4gICAgICogY29tcG9uZW50LiBUbyBnZXQgdGhlIGRlcHJlY2F0ZWQgcHJpdmF0ZSBfcmVwcmVzZW50YXRpb24sIHNldCBgd2l0aFBhc3N3b3JkYFxuICAgICAqIHRvIHRydWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l0aFBhc3N3b3JkIFdoZW4gc2V0IHRvIHRydWUsIHRoZSBwYXNzd29yZCB3aWxsIGJlIGluY2x1ZGVkLlxuICAgICAqL1xuICAgIERzbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAod2l0aFBhc3N3b3JkKSB7XG4gICAgICAgIGlmICh3aXRoUGFzc3dvcmQgPT09IHZvaWQgMCkgeyB3aXRoUGFzc3dvcmQgPSBmYWxzZTsgfVxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdGhpcy1hc3NpZ25tZW50XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhvc3QgPSBfYS5ob3N0LCBwYXRoID0gX2EucGF0aCwgcGFzcyA9IF9hLnBhc3MsIHBvcnQgPSBfYS5wb3J0LCBwcm9qZWN0SWQgPSBfYS5wcm9qZWN0SWQsIHByb3RvY29sID0gX2EucHJvdG9jb2wsIHVzZXIgPSBfYS51c2VyO1xuICAgICAgICByZXR1cm4gKHByb3RvY29sICsgXCI6Ly9cIiArIHVzZXIgKyAod2l0aFBhc3N3b3JkICYmIHBhc3MgPyBcIjpcIiArIHBhc3MgOiAnJykgK1xuICAgICAgICAgICAgKFwiQFwiICsgaG9zdCArIChwb3J0ID8gXCI6XCIgKyBwb3J0IDogJycpICsgXCIvXCIgKyAocGF0aCA/IHBhdGggKyBcIi9cIiA6IHBhdGgpICsgcHJvamVjdElkKSk7XG4gICAgfTtcbiAgICAvKiogUGFyc2VzIGEgc3RyaW5nIGludG8gdGhpcyBEc24uICovXG4gICAgRHNuLnByb3RvdHlwZS5fZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gRFNOX1JFR0VYLmV4ZWMoc3RyKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IHRzbGliXzEuX19yZWFkKG1hdGNoLnNsaWNlKDEpLCA2KSwgcHJvdG9jb2wgPSBfYVswXSwgdXNlciA9IF9hWzFdLCBfYiA9IF9hWzJdLCBwYXNzID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2IsIGhvc3QgPSBfYVszXSwgX2MgPSBfYVs0XSwgcG9ydCA9IF9jID09PSB2b2lkIDAgPyAnJyA6IF9jLCBsYXN0UGF0aCA9IF9hWzVdO1xuICAgICAgICB2YXIgcGF0aCA9ICcnO1xuICAgICAgICB2YXIgcHJvamVjdElkID0gbGFzdFBhdGg7XG4gICAgICAgIHZhciBzcGxpdCA9IHByb2plY3RJZC5zcGxpdCgnLycpO1xuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcGF0aCA9IHNwbGl0LnNsaWNlKDAsIC0xKS5qb2luKCcvJyk7XG4gICAgICAgICAgICBwcm9qZWN0SWQgPSBzcGxpdC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mcm9tQ29tcG9uZW50cyh7IGhvc3Q6IGhvc3QsIHBhc3M6IHBhc3MsIHBhdGg6IHBhdGgsIHByb2plY3RJZDogcHJvamVjdElkLCBwb3J0OiBwb3J0LCBwcm90b2NvbDogcHJvdG9jb2wsIHVzZXI6IHVzZXIgfSk7XG4gICAgfTtcbiAgICAvKiogTWFwcyBEc24gY29tcG9uZW50cyBpbnRvIHRoaXMgaW5zdGFuY2UuICovXG4gICAgRHNuLnByb3RvdHlwZS5fZnJvbUNvbXBvbmVudHMgPSBmdW5jdGlvbiAoY29tcG9uZW50cykge1xuICAgICAgICB0aGlzLnByb3RvY29sID0gY29tcG9uZW50cy5wcm90b2NvbDtcbiAgICAgICAgdGhpcy51c2VyID0gY29tcG9uZW50cy51c2VyO1xuICAgICAgICB0aGlzLnBhc3MgPSBjb21wb25lbnRzLnBhc3MgfHwgJyc7XG4gICAgICAgIHRoaXMuaG9zdCA9IGNvbXBvbmVudHMuaG9zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gY29tcG9uZW50cy5wb3J0IHx8ICcnO1xuICAgICAgICB0aGlzLnBhdGggPSBjb21wb25lbnRzLnBhdGggfHwgJyc7XG4gICAgICAgIHRoaXMucHJvamVjdElkID0gY29tcG9uZW50cy5wcm9qZWN0SWQ7XG4gICAgfTtcbiAgICAvKiogVmFsaWRhdGVzIHRoaXMgRHNuIGFuZCB0aHJvd3Mgb24gZXJyb3IuICovXG4gICAgRHNuLnByb3RvdHlwZS5fdmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIFsncHJvdG9jb2wnLCAndXNlcicsICdob3N0JywgJ3Byb2plY3RJZCddLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpc1tjb21wb25lbnRdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMucHJvdG9jb2wgIT09ICdodHRwJyAmJiB0aGlzLnByb3RvY29sICE9PSAnaHR0cHMnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoRVJST1JfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9ydCAmJiBpc05hTihwYXJzZUludCh0aGlzLnBvcnQsIDEwKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERzbjtcbn0oKSk7XG5leHBvcnQgeyBEc24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRzbi5qcy5tYXAiLCJpbXBvcnQgeyBEc24sIHRpbWVzdGFtcFdpdGhNcywgdXJsRW5jb2RlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG52YXIgU0VOVFJZX0FQSV9WRVJTSU9OID0gJzcnO1xuLyoqIEhlbHBlciBjbGFzcyB0byBwcm92aWRlIHVybHMgdG8gZGlmZmVyZW50IFNlbnRyeSBlbmRwb2ludHMuICovXG52YXIgQVBJID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQVBJICovXG4gICAgZnVuY3Rpb24gQVBJKGRzbikge1xuICAgICAgICB0aGlzLmRzbiA9IGRzbjtcbiAgICAgICAgdGhpcy5fZHNuT2JqZWN0ID0gbmV3IERzbihkc24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgRHNuIG9iamVjdC4gKi9cbiAgICBBUEkucHJvdG90eXBlLmdldERzbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rzbk9iamVjdDtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggYXV0aCBoZWFkZXJzIGluIHRoZSB1cmwgdG8gdGhlIHN0b3JlIGVuZHBvaW50LiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIgKyB0aGlzLl9nZXRCYXNlVXJsKCkgKyB0aGlzLmdldFN0b3JlRW5kcG9pbnRQYXRoKCk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgc3RvcmUgZW5kcG9pbnQgd2l0aCBhdXRoIGFkZGVkIGluIHVybCBlbmNvZGVkLiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIGF1dGggPSB7XG4gICAgICAgICAgICBzZW50cnlfa2V5OiBkc24udXNlcixcbiAgICAgICAgICAgIHNlbnRyeV92ZXJzaW9uOiBTRU5UUllfQVBJX1ZFUlNJT04sXG4gICAgICAgIH07XG4gICAgICAgIC8vIEF1dGggaXMgaW50ZW50aW9uYWxseSBzZW50IGFzIHBhcnQgb2YgcXVlcnkgc3RyaW5nIChOT1QgYXMgY3VzdG9tIEhUVFAgaGVhZGVyKVxuICAgICAgICAvLyB0byBhdm9pZCBwcmVmbGlnaHQgQ09SUyByZXF1ZXN0c1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdG9yZUVuZHBvaW50KCkgKyBcIj9cIiArIHVybEVuY29kZShhdXRoKTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBiYXNlIHBhdGggb2YgdGhlIHVybCBpbmNsdWRpbmcgdGhlIHBvcnQuICovXG4gICAgQVBJLnByb3RvdHlwZS5fZ2V0QmFzZVVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIHByb3RvY29sID0gZHNuLnByb3RvY29sID8gZHNuLnByb3RvY29sICsgXCI6XCIgOiAnJztcbiAgICAgICAgdmFyIHBvcnQgPSBkc24ucG9ydCA/IFwiOlwiICsgZHNuLnBvcnQgOiAnJztcbiAgICAgICAgcmV0dXJuIHByb3RvY29sICsgXCIvL1wiICsgZHNuLmhvc3QgKyBwb3J0O1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgb25seSB0aGUgcGF0aCBjb21wb25lbnQgZm9yIHRoZSBzdG9yZSBlbmRwb2ludC4gKi9cbiAgICBBUEkucHJvdG90eXBlLmdldFN0b3JlRW5kcG9pbnRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZHNuID0gdGhpcy5fZHNuT2JqZWN0O1xuICAgICAgICByZXR1cm4gKGRzbi5wYXRoID8gXCIvXCIgKyBkc24ucGF0aCA6ICcnKSArIFwiL2FwaS9cIiArIGRzbi5wcm9qZWN0SWQgKyBcIi9zdG9yZS9cIjtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGluIHJlcXVlc3QgaGVhZGVycy4gKi9cbiAgICBBUEkucHJvdG90eXBlLmdldFJlcXVlc3RIZWFkZXJzID0gZnVuY3Rpb24gKGNsaWVudE5hbWUsIGNsaWVudFZlcnNpb24pIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIGhlYWRlciA9IFtcIlNlbnRyeSBzZW50cnlfdmVyc2lvbj1cIiArIFNFTlRSWV9BUElfVkVSU0lPTl07XG4gICAgICAgIGhlYWRlci5wdXNoKFwic2VudHJ5X3RpbWVzdGFtcD1cIiArIHRpbWVzdGFtcFdpdGhNcygpKTsgLy8gVE9ETzogVGhpcyBjYW4gYmUgcmVtb3ZlZFxuICAgICAgICBoZWFkZXIucHVzaChcInNlbnRyeV9jbGllbnQ9XCIgKyBjbGllbnROYW1lICsgXCIvXCIgKyBjbGllbnRWZXJzaW9uKTtcbiAgICAgICAgaGVhZGVyLnB1c2goXCJzZW50cnlfa2V5PVwiICsgZHNuLnVzZXIpO1xuICAgICAgICBpZiAoZHNuLnBhc3MpIHtcbiAgICAgICAgICAgIGhlYWRlci5wdXNoKFwic2VudHJ5X3NlY3JldD1cIiArIGRzbi5wYXNzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdYLVNlbnRyeS1BdXRoJzogaGVhZGVyLmpvaW4oJywgJyksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgdXJsIHRvIHRoZSByZXBvcnQgZGlhbG9nIGVuZHBvaW50LiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQgPSBmdW5jdGlvbiAoZGlhbG9nT3B0aW9ucykge1xuICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGRpYWxvZ09wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZHNuID0gdGhpcy5fZHNuT2JqZWN0O1xuICAgICAgICB2YXIgZW5kcG9pbnQgPSBcIlwiICsgdGhpcy5fZ2V0QmFzZVVybCgpICsgKGRzbi5wYXRoID8gXCIvXCIgKyBkc24ucGF0aCA6ICcnKSArIFwiL2FwaS9lbWJlZC9lcnJvci1wYWdlL1wiO1xuICAgICAgICB2YXIgZW5jb2RlZE9wdGlvbnMgPSBbXTtcbiAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChcImRzbj1cIiArIGRzbi50b1N0cmluZygpKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRpYWxvZ09wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgICAgIGlmICghZGlhbG9nT3B0aW9ucy51c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucy51c2VyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChcIm5hbWU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9ucy51c2VyLm5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpYWxvZ09wdGlvbnMudXNlci5lbWFpbCkge1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVkT3B0aW9ucy5wdXNoKFwiZW1haWw9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9ucy51c2VyLmVtYWlsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRpYWxvZ09wdGlvbnNba2V5XSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmNvZGVkT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmRwb2ludCArIFwiP1wiICsgZW5jb2RlZE9wdGlvbnMuam9pbignJicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmRwb2ludDtcbiAgICB9O1xuICAgIHJldHVybiBBUEk7XG59KCkpO1xuZXhwb3J0IHsgQVBJIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5leHBvcnQgdmFyIGluc3RhbGxlZEludGVncmF0aW9ucyA9IFtdO1xuLyoqIEdldHMgaW50ZWdyYXRpb24gdG8gaW5zdGFsbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucykge1xuICAgIHZhciBkZWZhdWx0SW50ZWdyYXRpb25zID0gKG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyAmJiB0c2xpYl8xLl9fc3ByZWFkKG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucykpIHx8IFtdO1xuICAgIHZhciB1c2VySW50ZWdyYXRpb25zID0gb3B0aW9ucy5pbnRlZ3JhdGlvbnM7XG4gICAgdmFyIGludGVncmF0aW9ucyA9IFtdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnRlZ3JhdGlvbnMpKSB7XG4gICAgICAgIHZhciB1c2VySW50ZWdyYXRpb25zTmFtZXNfMSA9IHVzZXJJbnRlZ3JhdGlvbnMubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLm5hbWU7IH0pO1xuICAgICAgICB2YXIgcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMSA9IFtdO1xuICAgICAgICAvLyBMZWF2ZSBvbmx5IHVuaXF1ZSBkZWZhdWx0IGludGVncmF0aW9ucywgdGhhdCB3ZXJlIG5vdCBvdmVycmlkZGVuIHdpdGggcHJvdmlkZWQgdXNlciBpbnRlZ3JhdGlvbnNcbiAgICAgICAgZGVmYXVsdEludGVncmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkZWZhdWx0SW50ZWdyYXRpb24pIHtcbiAgICAgICAgICAgIGlmICh1c2VySW50ZWdyYXRpb25zTmFtZXNfMS5pbmRleE9mKGRlZmF1bHRJbnRlZ3JhdGlvbi5uYW1lKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLmluZGV4T2YoZGVmYXVsdEludGVncmF0aW9uLm5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGludGVncmF0aW9ucy5wdXNoKGRlZmF1bHRJbnRlZ3JhdGlvbik7XG4gICAgICAgICAgICAgICAgcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMS5wdXNoKGRlZmF1bHRJbnRlZ3JhdGlvbi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIERvbid0IGFkZCBzYW1lIHVzZXIgaW50ZWdyYXRpb24gdHdpY2VcbiAgICAgICAgdXNlckludGVncmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh1c2VySW50ZWdyYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLmluZGV4T2YodXNlckludGVncmF0aW9uLm5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGludGVncmF0aW9ucy5wdXNoKHVzZXJJbnRlZ3JhdGlvbik7XG4gICAgICAgICAgICAgICAgcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMS5wdXNoKHVzZXJJbnRlZ3JhdGlvbi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VySW50ZWdyYXRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGludGVncmF0aW9ucyA9IHVzZXJJbnRlZ3JhdGlvbnMoZGVmYXVsdEludGVncmF0aW9ucyk7XG4gICAgICAgIGludGVncmF0aW9ucyA9IEFycmF5LmlzQXJyYXkoaW50ZWdyYXRpb25zKSA/IGludGVncmF0aW9ucyA6IFtpbnRlZ3JhdGlvbnNdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW50ZWdyYXRpb25zID0gdHNsaWJfMS5fX3NwcmVhZChkZWZhdWx0SW50ZWdyYXRpb25zKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgaWYgcHJlc2VudCwgYERlYnVnYCBpbnRlZ3JhdGlvbiB3aWxsIGFsd2F5cyBydW4gbGFzdFxuICAgIHZhciBpbnRlZ3JhdGlvbnNOYW1lcyA9IGludGVncmF0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkubmFtZTsgfSk7XG4gICAgdmFyIGFsd2F5c0xhc3RUb1J1biA9ICdEZWJ1Zyc7XG4gICAgaWYgKGludGVncmF0aW9uc05hbWVzLmluZGV4T2YoYWx3YXlzTGFzdFRvUnVuKSAhPT0gLTEpIHtcbiAgICAgICAgaW50ZWdyYXRpb25zLnB1c2guYXBwbHkoaW50ZWdyYXRpb25zLCB0c2xpYl8xLl9fc3ByZWFkKGludGVncmF0aW9ucy5zcGxpY2UoaW50ZWdyYXRpb25zTmFtZXMuaW5kZXhPZihhbHdheXNMYXN0VG9SdW4pLCAxKSkpO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZWdyYXRpb25zO1xufVxuLyoqIFNldHVwIGdpdmVuIGludGVncmF0aW9uICovXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbikge1xuICAgIGlmIChpbnN0YWxsZWRJbnRlZ3JhdGlvbnMuaW5kZXhPZihpbnRlZ3JhdGlvbi5uYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnRlZ3JhdGlvbi5zZXR1cE9uY2UoYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIpO1xuICAgIGluc3RhbGxlZEludGVncmF0aW9ucy5wdXNoKGludGVncmF0aW9uLm5hbWUpO1xuICAgIGxvZ2dlci5sb2coXCJJbnRlZ3JhdGlvbiBpbnN0YWxsZWQ6IFwiICsgaW50ZWdyYXRpb24ubmFtZSk7XG59XG4vKipcbiAqIEdpdmVuIGEgbGlzdCBvZiBpbnRlZ3JhdGlvbiBpbnN0YW5jZXMgdGhpcyBpbnN0YWxscyB0aGVtIGFsbC4gV2hlbiBgd2l0aERlZmF1bHRzYCBpcyBzZXQgdG8gYHRydWVgIHRoZW4gYWxsIGRlZmF1bHRcbiAqIGludGVncmF0aW9ucyBhcmUgYWRkZWQgdW5sZXNzIHRoZXkgd2VyZSBhbHJlYWR5IHByb3ZpZGVkIGJlZm9yZS5cbiAqIEBwYXJhbSBpbnRlZ3JhdGlvbnMgYXJyYXkgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzXG4gKiBAcGFyYW0gd2l0aERlZmF1bHQgc2hvdWxkIGVuYWJsZSBkZWZhdWx0IGludGVncmF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBJbnRlZ3JhdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBpbnRlZ3JhdGlvbnMgPSB7fTtcbiAgICBnZXRJbnRlZ3JhdGlvbnNUb1NldHVwKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGludGVncmF0aW9uKSB7XG4gICAgICAgIGludGVncmF0aW9uc1tpbnRlZ3JhdGlvbi5uYW1lXSA9IGludGVncmF0aW9uO1xuICAgICAgICBzZXR1cEludGVncmF0aW9uKGludGVncmF0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW50ZWdyYXRpb25zO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZWdyYXRpb24uanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IERzbiwgaXNQcmltaXRpdmUsIGlzVGhlbmFibGUsIGxvZ2dlciwgU3luY1Byb21pc2UsIHRydW5jYXRlLCB1dWlkNCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgc2V0dXBJbnRlZ3JhdGlvbnMgfSBmcm9tICcuL2ludGVncmF0aW9uJztcbi8qKlxuICogQmFzZSBpbXBsZW1lbnRhdGlvbiBmb3IgYWxsIEphdmFTY3JpcHQgU0RLIGNsaWVudHMuXG4gKlxuICogQ2FsbCB0aGUgY29uc3RydWN0b3Igd2l0aCB0aGUgY29ycmVzcG9uZGluZyBiYWNrZW5kIGNvbnN0cnVjdG9yIGFuZCBvcHRpb25zXG4gKiBzcGVjaWZpYyB0byB0aGUgY2xpZW50IHN1YmNsYXNzLiBUbyBhY2Nlc3MgdGhlc2Ugb3B0aW9ucyBsYXRlciwgdXNlXG4gKiB7QGxpbmsgQ2xpZW50LmdldE9wdGlvbnN9LiBBbHNvLCB0aGUgQmFja2VuZCBpbnN0YW5jZSBpcyBhdmFpbGFibGUgdmlhXG4gKiB7QGxpbmsgQ2xpZW50LmdldEJhY2tlbmR9LlxuICpcbiAqIElmIGEgRHNuIGlzIHNwZWNpZmllZCBpbiB0aGUgb3B0aW9ucywgaXQgd2lsbCBiZSBwYXJzZWQgYW5kIHN0b3JlZC4gVXNlXG4gKiB7QGxpbmsgQ2xpZW50LmdldERzbn0gdG8gcmV0cmlldmUgdGhlIERzbiBhdCBhbnkgbW9tZW50LiBJbiBjYXNlIHRoZSBEc24gaXNcbiAqIGludmFsaWQsIHRoZSBjb25zdHJ1Y3RvciB3aWxsIHRocm93IGEge0BsaW5rIFNlbnRyeUV4Y2VwdGlvbn0uIE5vdGUgdGhhdFxuICogd2l0aG91dCBhIHZhbGlkIERzbiwgdGhlIFNESyB3aWxsIG5vdCBzZW5kIGFueSBldmVudHMgdG8gU2VudHJ5LlxuICpcbiAqIEJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50IHZpYSB0aGUgYmFja2VuZCwgaXQgaXMgcGFzc2VkIHRocm91Z2hcbiAqIHtAbGluayBCYXNlQ2xpZW50LnByZXBhcmVFdmVudH0gdG8gYWRkIFNESyBpbmZvcm1hdGlvbiBhbmQgc2NvcGUgZGF0YVxuICogKGJyZWFkY3J1bWJzIGFuZCBjb250ZXh0KS4gVG8gYWRkIG1vcmUgY3VzdG9tIGluZm9ybWF0aW9uLCBvdmVycmlkZSB0aGlzXG4gKiBtZXRob2QgYW5kIGV4dGVuZCB0aGUgcmVzdWx0aW5nIHByZXBhcmVkIGV2ZW50LlxuICpcbiAqIFRvIGlzc3VlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBldmVudHMgKGUuZy4gdmlhIGluc3RydW1lbnRhdGlvbiksIHVzZVxuICoge0BsaW5rIENsaWVudC5jYXB0dXJlRXZlbnR9LiBJdCB3aWxsIHByZXBhcmUgdGhlIGV2ZW50IGFuZCBwYXNzIGl0IHRocm91Z2hcbiAqIHRoZSBjYWxsYmFjayBsaWZlY3ljbGUuIFRvIGlzc3VlIGF1dG8tYnJlYWRjcnVtYnMsIHVzZVxuICoge0BsaW5rIENsaWVudC5hZGRCcmVhZGNydW1ifS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgTm9kZUNsaWVudCBleHRlbmRzIEJhc2VDbGllbnQ8Tm9kZUJhY2tlbmQsIE5vZGVPcHRpb25zPiB7XG4gKiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBOb2RlT3B0aW9ucykge1xuICogICAgIHN1cGVyKE5vZGVCYWNrZW5kLCBvcHRpb25zKTtcbiAqICAgfVxuICpcbiAqICAgLy8gLi4uXG4gKiB9XG4gKi9cbnZhciBCYXNlQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoaXMgY2xpZW50IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhY2tlbmRDbGFzcyBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYmFja2VuZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgY2xpZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJhc2VDbGllbnQoYmFja2VuZENsYXNzLCBvcHRpb25zKSB7XG4gICAgICAgIC8qKiBBcnJheSBvZiB1c2VkIGludGVncmF0aW9ucy4gKi9cbiAgICAgICAgdGhpcy5faW50ZWdyYXRpb25zID0ge307XG4gICAgICAgIC8qKiBJcyB0aGUgY2xpZW50IHN0aWxsIHByb2Nlc3NpbmcgYSBjYWxsPyAqL1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2JhY2tlbmQgPSBuZXcgYmFja2VuZENsYXNzKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMuZHNuKSB7XG4gICAgICAgICAgICB0aGlzLl9kc24gPSBuZXcgRHNuKG9wdGlvbnMuZHNuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVncmF0aW9ucyA9IHNldHVwSW50ZWdyYXRpb25zKHRoaXMuX29wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChleGNlcHRpb24sIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkO1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZ2V0QmFja2VuZCgpXG4gICAgICAgICAgICAuZXZlbnRGcm9tRXhjZXB0aW9uKGV4Y2VwdGlvbiwgaGludClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuX3Byb2Nlc3NFdmVudChldmVudCwgaGludCwgc2NvcGUpOyB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGZpbmFsRXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGZpbmFsRXZlbnQgaW4gY2FzZSBiZWZvcmVTZW5kIHJldHVybmVkIG51bGxcbiAgICAgICAgICAgIGV2ZW50SWQgPSBmaW5hbEV2ZW50ICYmIGZpbmFsRXZlbnQuZXZlbnRfaWQ7XG4gICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHJlYXNvbik7XG4gICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmNhcHR1cmVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGxldmVsLCBoaW50LCBzY29wZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZXZlbnRJZCA9IGhpbnQgJiYgaGludC5ldmVudF9pZDtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgIHZhciBwcm9taXNlZEV2ZW50ID0gaXNQcmltaXRpdmUobWVzc2FnZSlcbiAgICAgICAgICAgID8gdGhpcy5fZ2V0QmFja2VuZCgpLmV2ZW50RnJvbU1lc3NhZ2UoXCJcIiArIG1lc3NhZ2UsIGxldmVsLCBoaW50KVxuICAgICAgICAgICAgOiB0aGlzLl9nZXRCYWNrZW5kKCkuZXZlbnRGcm9tRXhjZXB0aW9uKG1lc3NhZ2UsIGhpbnQpO1xuICAgICAgICBwcm9taXNlZEV2ZW50XG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLl9wcm9jZXNzRXZlbnQoZXZlbnQsIGhpbnQsIHNjb3BlKTsgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChmaW5hbEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGZvciBmaW5hbEV2ZW50IGluIGNhc2UgYmVmb3JlU2VuZCByZXR1cm5lZCBudWxsXG4gICAgICAgICAgICBldmVudElkID0gZmluYWxFdmVudCAmJiBmaW5hbEV2ZW50LmV2ZW50X2lkO1xuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihyZWFzb24pO1xuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jYXB0dXJlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkO1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc0V2ZW50KGV2ZW50LCBoaW50LCBzY29wZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChmaW5hbEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGZvciBmaW5hbEV2ZW50IGluIGNhc2UgYmVmb3JlU2VuZCByZXR1cm5lZCBudWxsXG4gICAgICAgICAgICBldmVudElkID0gZmluYWxFdmVudCAmJiBmaW5hbEV2ZW50LmV2ZW50X2lkO1xuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihyZWFzb24pO1xuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5nZXREc24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kc247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NsaWVudFByb2Nlc3NpbmcodGltZW91dCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHN0YXR1cy5pbnRlcnZhbCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2dldEJhY2tlbmQoKVxuICAgICAgICAgICAgICAgIC5nZXRUcmFuc3BvcnQoKVxuICAgICAgICAgICAgICAgIC5jbG9zZSh0aW1lb3V0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFuc3BvcnRGbHVzaGVkKSB7IHJldHVybiBzdGF0dXMucmVhZHkgJiYgdHJhbnNwb3J0Rmx1c2hlZDsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmZsdXNoKHRpbWVvdXQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgX3RoaXMuZ2V0T3B0aW9ucygpLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5nZXRJbnRlZ3JhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlZ3JhdGlvbnMgfHwge307XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmdldEludGVncmF0aW9uID0gZnVuY3Rpb24gKGludGVncmF0aW9uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW50ZWdyYXRpb25zW2ludGVncmF0aW9uLmlkXSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiQ2Fubm90IHJldHJpZXZlIGludGVncmF0aW9uIFwiICsgaW50ZWdyYXRpb24uaWQgKyBcIiBmcm9tIHRoZSBjdXJyZW50IENsaWVudFwiKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogV2FpdHMgZm9yIHRoZSBjbGllbnQgdG8gYmUgZG9uZSB3aXRoIHByb2Nlc3NpbmcuICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2lzQ2xpZW50UHJvY2Vzc2luZyA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHZhciB0aWNrZWQgPSAwO1xuICAgICAgICAgICAgdmFyIHRpY2sgPSAxO1xuICAgICAgICAgICAgdmFyIGludGVydmFsID0gMDtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fcHJvY2Vzc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsOiBpbnRlcnZhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2tlZCArPSB0aWNrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCAmJiB0aWNrZWQgPj0gdGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IGludGVydmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGljayk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIGN1cnJlbnQgYmFja2VuZC4gKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fZ2V0QmFja2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tlbmQ7XG4gICAgfTtcbiAgICAvKiogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoaXMgU0RLIGlzIGVuYWJsZWQgYW5kIGEgdmFsaWQgRHNuIGlzIHByZXNlbnQuICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2lzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9ucygpLmVuYWJsZWQgIT09IGZhbHNlICYmIHRoaXMuX2RzbiAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBjb21tb24gaW5mb3JtYXRpb24gdG8gZXZlbnRzLlxuICAgICAqXG4gICAgICogVGhlIGluZm9ybWF0aW9uIGluY2x1ZGVzIHJlbGVhc2UgYW5kIGVudmlyb25tZW50IGZyb20gYG9wdGlvbnNgLFxuICAgICAqIGJyZWFkY3J1bWJzIGFuZCBjb250ZXh0IChleHRyYSwgdGFncyBhbmQgdXNlcikgZnJvbSB0aGUgc2NvcGUuXG4gICAgICpcbiAgICAgKiBJbmZvcm1hdGlvbiB0aGF0IGlzIGFscmVhZHkgcHJlc2VudCBpbiB0aGUgZXZlbnQgaXMgbmV2ZXIgb3ZlcndyaXR0ZW4uIEZvclxuICAgICAqIG5lc3RlZCBvYmplY3RzLCBzdWNoIGFzIHRoZSBjb250ZXh0LCBrZXlzIGFyZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqIEBwYXJhbSBoaW50IE1heSBjb250YWluIGFkZGl0aW9uYWwgaW5mb3JtYXJ0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBleGNlcHRpb24uXG4gICAgICogQHBhcmFtIHNjb3BlIEEgc2NvcGUgY29udGFpbmluZyBldmVudCBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBldmVudCB3aXRoIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3ByZXBhcmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgc2NvcGUsIGhpbnQpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5nZXRPcHRpb25zKCksIGVudmlyb25tZW50ID0gX2EuZW52aXJvbm1lbnQsIHJlbGVhc2UgPSBfYS5yZWxlYXNlLCBkaXN0ID0gX2EuZGlzdCwgX2IgPSBfYS5tYXhWYWx1ZUxlbmd0aCwgbWF4VmFsdWVMZW5ndGggPSBfYiA9PT0gdm9pZCAwID8gMjUwIDogX2I7XG4gICAgICAgIHZhciBwcmVwYXJlZCA9IHRzbGliXzEuX19hc3NpZ24oe30sIGV2ZW50KTtcbiAgICAgICAgaWYgKHByZXBhcmVkLmVudmlyb25tZW50ID09PSB1bmRlZmluZWQgJiYgZW52aXJvbm1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJlcGFyZWQuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlcGFyZWQucmVsZWFzZSA9PT0gdW5kZWZpbmVkICYmIHJlbGVhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJlcGFyZWQucmVsZWFzZSA9IHJlbGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXBhcmVkLmRpc3QgPT09IHVuZGVmaW5lZCAmJiBkaXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByZXBhcmVkLmRpc3QgPSBkaXN0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVwYXJlZC5tZXNzYWdlKSB7XG4gICAgICAgICAgICBwcmVwYXJlZC5tZXNzYWdlID0gdHJ1bmNhdGUocHJlcGFyZWQubWVzc2FnZSwgbWF4VmFsdWVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBleGNlcHRpb24gPSBwcmVwYXJlZC5leGNlcHRpb24gJiYgcHJlcGFyZWQuZXhjZXB0aW9uLnZhbHVlcyAmJiBwcmVwYXJlZC5leGNlcHRpb24udmFsdWVzWzBdO1xuICAgICAgICBpZiAoZXhjZXB0aW9uICYmIGV4Y2VwdGlvbi52YWx1ZSkge1xuICAgICAgICAgICAgZXhjZXB0aW9uLnZhbHVlID0gdHJ1bmNhdGUoZXhjZXB0aW9uLnZhbHVlLCBtYXhWYWx1ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcXVlc3QgPSBwcmVwYXJlZC5yZXF1ZXN0O1xuICAgICAgICBpZiAocmVxdWVzdCAmJiByZXF1ZXN0LnVybCkge1xuICAgICAgICAgICAgcmVxdWVzdC51cmwgPSB0cnVuY2F0ZShyZXF1ZXN0LnVybCwgbWF4VmFsdWVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVwYXJlZC5ldmVudF9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcmVwYXJlZC5ldmVudF9pZCA9IHV1aWQ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWRkSW50ZWdyYXRpb25zKHByZXBhcmVkLnNkayk7XG4gICAgICAgIC8vIFdlIHByZXBhcmUgdGhlIHJlc3VsdCBoZXJlIHdpdGggYSByZXNvbHZlZCBFdmVudC5cbiAgICAgICAgdmFyIHJlc3VsdCA9IFN5bmNQcm9taXNlLnJlc29sdmUocHJlcGFyZWQpO1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgbGFzdCB0aGluZyBjYWxsZWQsIHNpbmNlIHdlIHdhbnQgdGhhdFxuICAgICAgICAvLyB7QGxpbmsgSHViLmFkZEV2ZW50UHJvY2Vzc29yfSBnZXRzIHRoZSBmaW5pc2hlZCBwcmVwYXJlZCBldmVudC5cbiAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICAvLyBJbiBjYXNlIHdlIGhhdmUgYSBodWIgd2UgcmVhc3NpZ24gaXQuXG4gICAgICAgICAgICByZXN1bHQgPSBzY29wZS5hcHBseVRvRXZlbnQocHJlcGFyZWQsIGhpbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgYWxsIHVzZWQgaW50ZWdyYXRpb25zIHRvIHRoZSBTREsgaW5mbyBpbiB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIHNka0luZm8gVGhlIHNka0luZm8gb2YgdGhlIGV2ZW50IHRoYXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBhbGwgaW50ZWdyYXRpb25zLlxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9hZGRJbnRlZ3JhdGlvbnMgPSBmdW5jdGlvbiAoc2RrSW5mbykge1xuICAgICAgICB2YXIgaW50ZWdyYXRpb25zQXJyYXkgPSBPYmplY3Qua2V5cyh0aGlzLl9pbnRlZ3JhdGlvbnMpO1xuICAgICAgICBpZiAoc2RrSW5mbyAmJiBpbnRlZ3JhdGlvbnNBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzZGtJbmZvLmludGVncmF0aW9ucyA9IGludGVncmF0aW9uc0FycmF5O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgYW4gZXZlbnQgKGVpdGhlciBlcnJvciBvciBtZXNzYWdlKSBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICAgICAqXG4gICAgICogVGhpcyBhbHNvIGFkZHMgYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQgaW5mb3JtYXRpb24gdG8gdGhlIGV2ZW50LiBIb3dldmVyLFxuICAgICAqIHBsYXRmb3JtIHNwZWNpZmljIG1ldGEgZGF0YSAoc3VjaCBhcyB0aGUgVXNlcidzIElQIGFkZHJlc3MpIG11c3QgYmUgYWRkZWRcbiAgICAgKiBieSB0aGUgU0RLIGltcGxlbWVudG9yLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHNlbmQgdG8gU2VudHJ5LlxuICAgICAqIEBwYXJhbSBoaW50IE1heSBjb250YWluIGFkZGl0aW9uYWwgaW5mb3JtYXJ0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBleGNlcHRpb24uXG4gICAgICogQHBhcmFtIHNjb3BlIEEgc2NvcGUgY29udGFpbmluZyBldmVudCBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyBBIFN5bmNQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZXZlbnQgb3IgcmVqZWN0cyBpbiBjYXNlIGV2ZW50IHdhcy93aWxsIG5vdCBiZSBzZW5kLlxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9wcm9jZXNzRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0T3B0aW9ucygpLCBiZWZvcmVTZW5kID0gX2EuYmVmb3JlU2VuZCwgc2FtcGxlUmF0ZSA9IF9hLnNhbXBsZVJhdGU7XG4gICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZWplY3QoJ1NESyBub3QgZW5hYmxlZCwgd2lsbCBub3Qgc2VuZCBldmVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAxLjAgPT09IDEwMCUgZXZlbnRzIGFyZSBzZW50XG4gICAgICAgIC8vIDAuMCA9PT0gMCUgZXZlbnRzIGFyZSBzZW50XG4gICAgICAgIGlmICh0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ251bWJlcicgJiYgTWF0aC5yYW5kb20oKSA+IHNhbXBsZVJhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZWplY3QoJ1RoaXMgZXZlbnQgaGFzIGJlZW4gc2FtcGxlZCwgd2lsbCBub3Qgc2VuZCBldmVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLl9wcmVwYXJlRXZlbnQoZXZlbnQsIHNjb3BlLCBoaW50KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwcmVwYXJlZCkge1xuICAgICAgICAgICAgICAgIGlmIChwcmVwYXJlZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoJ0FuIGV2ZW50IHByb2Nlc3NvciByZXR1cm5lZCBudWxsLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBmaW5hbEV2ZW50ID0gcHJlcGFyZWQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzSW50ZXJuYWxFeGNlcHRpb24gPSBoaW50ICYmIGhpbnQuZGF0YSAmJiBoaW50LmRhdGEuX19zZW50cnlfXyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW50ZXJuYWxFeGNlcHRpb24gfHwgIWJlZm9yZVNlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9nZXRCYWNrZW5kKCkuc2VuZEV2ZW50KGZpbmFsRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmaW5hbEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYmVmb3JlU2VuZFJlc3VsdCA9IGJlZm9yZVNlbmQocHJlcGFyZWQsIGhpbnQpO1xuICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJlZm9yZVNlbmRSZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ2BiZWZvcmVTZW5kYCBtZXRob2QgaGFzIHRvIHJldHVybiBgbnVsbGAgb3IgYSB2YWxpZCBldmVudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1RoZW5hYmxlKGJlZm9yZVNlbmRSZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlQXN5bmNCZWZvcmVTZW5kKGJlZm9yZVNlbmRSZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEV2ZW50ID0gYmVmb3JlU2VuZFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaW5hbEV2ZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZygnYGJlZm9yZVNlbmRgIHJldHVybmVkIGBudWxsYCwgd2lsbCBub3Qgc2VuZCBldmVudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZyb20gaGVyZSBvbiB3ZSBhcmUgcmVhbGx5IGFzeW5jXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZ2V0QmFja2VuZCgpLnNlbmRFdmVudChmaW5hbEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmluYWxFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYXB0dXJlRXhjZXB0aW9uKGV4Y2VwdGlvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fc2VudHJ5X186IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgnYGJlZm9yZVNlbmRgIHRocmV3IGFuIGVycm9yLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlamVjdCgnYGJlZm9yZVNlbmRgIHRocmV3IGFuIGVycm9yLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgYmVmb3JlIHNlbmQgUHJvbWlzZSBhbmQgY2FsbHMgcmVzb2x2ZS9yZWplY3Qgb24gcGFyZW50IFN5bmNQcm9taXNlLlxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9oYW5kbGVBc3luY0JlZm9yZVNlbmQgPSBmdW5jdGlvbiAoYmVmb3JlU2VuZCwgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGJlZm9yZVNlbmRcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwcm9jZXNzZWRFdmVudCkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3NlZEV2ZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdgYmVmb3JlU2VuZGAgcmV0dXJuZWQgYG51bGxgLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZyb20gaGVyZSBvbiB3ZSBhcmUgcmVhbGx5IGFzeW5jXG4gICAgICAgICAgICBfdGhpcy5fZ2V0QmFja2VuZCgpLnNlbmRFdmVudChwcm9jZXNzZWRFdmVudCk7XG4gICAgICAgICAgICByZXNvbHZlKHByb2Nlc3NlZEV2ZW50KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZWplY3QoXCJiZWZvcmVTZW5kIHJlamVjdGVkIHdpdGggXCIgKyBlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZUNsaWVudDtcbn0oKSk7XG5leHBvcnQgeyBCYXNlQ2xpZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlY2xpZW50LmpzLm1hcCIsIi8qKiBUaGUgc3RhdHVzIG9mIGFuIGV2ZW50LiAqL1xuZXhwb3J0IHZhciBTdGF0dXM7XG4oZnVuY3Rpb24gKFN0YXR1cykge1xuICAgIC8qKiBUaGUgc3RhdHVzIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkLiAqL1xuICAgIFN0YXR1c1tcIlVua25vd25cIl0gPSBcInVua25vd25cIjtcbiAgICAvKiogVGhlIGV2ZW50IHdhcyBza2lwcGVkIGR1ZSB0byBjb25maWd1cmF0aW9uIG9yIGNhbGxiYWNrcy4gKi9cbiAgICBTdGF0dXNbXCJTa2lwcGVkXCJdID0gXCJza2lwcGVkXCI7XG4gICAgLyoqIFRoZSBldmVudCB3YXMgc2VudCB0byBTZW50cnkgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIFN0YXR1c1tcIlN1Y2Nlc3NcIl0gPSBcInN1Y2Nlc3NcIjtcbiAgICAvKiogVGhlIGNsaWVudCBpcyBjdXJyZW50bHkgcmF0ZSBsaW1pdGVkIGFuZCB3aWxsIHRyeSBhZ2FpbiBsYXRlci4gKi9cbiAgICBTdGF0dXNbXCJSYXRlTGltaXRcIl0gPSBcInJhdGVfbGltaXRcIjtcbiAgICAvKiogVGhlIGV2ZW50IGNvdWxkIG5vdCBiZSBwcm9jZXNzZWQuICovXG4gICAgU3RhdHVzW1wiSW52YWxpZFwiXSA9IFwiaW52YWxpZFwiO1xuICAgIC8qKiBBIHNlcnZlci1zaWRlIGVycm9yIG9jdXJyZWQgZHVyaW5nIHN1Ym1pc3Npb24uICovXG4gICAgU3RhdHVzW1wiRmFpbGVkXCJdID0gXCJmYWlsZWRcIjtcbn0pKFN0YXR1cyB8fCAoU3RhdHVzID0ge30pKTtcbi8vIHRzbGludDpkaXNhYmxlOmNvbXBsZXRlZC1kb2NzXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby11bm5lY2Vzc2FyeS1xdWFsaWZpZXIgbm8tbmFtZXNwYWNlXG4oZnVuY3Rpb24gKFN0YXR1cykge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEge0BsaW5rIFN0YXR1c30uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZSBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2VuZCBzdGF0dXMgb3Ige0BsaW5rIFN0YXR1cy5Vbmtub3dufS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tSHR0cENvZGUoY29kZSkge1xuICAgICAgICBpZiAoY29kZSA+PSAyMDAgJiYgY29kZSA8IDMwMCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5TdWNjZXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID09PSA0MjkpIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuUmF0ZUxpbWl0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID49IDQwMCAmJiBjb2RlIDwgNTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLkludmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUgPj0gNTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLkZhaWxlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RhdHVzLlVua25vd247XG4gICAgfVxuICAgIFN0YXR1cy5mcm9tSHR0cENvZGUgPSBmcm9tSHR0cENvZGU7XG59KShTdGF0dXMgfHwgKFN0YXR1cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIiwiaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqIE5vb3AgdHJhbnNwb3J0ICovXG52YXIgTm9vcFRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wVHJhbnNwb3J0KCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIE5vb3BUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIHJlYXNvbjogXCJOb29wVHJhbnNwb3J0OiBFdmVudCBoYXMgYmVlbiBza2lwcGVkIGJlY2F1c2Ugbm8gRHNuIGlzIGNvbmZpZ3VyZWQuXCIsXG4gICAgICAgICAgICBzdGF0dXM6IFN0YXR1cy5Ta2lwcGVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTm9vcFRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9O1xuICAgIHJldHVybiBOb29wVHJhbnNwb3J0O1xufSgpKTtcbmV4cG9ydCB7IE5vb3BUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiLyoqIEpTRG9jICovXG5leHBvcnQgdmFyIFNldmVyaXR5O1xuKGZ1bmN0aW9uIChTZXZlcml0eSkge1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiRmF0YWxcIl0gPSBcImZhdGFsXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJFcnJvclwiXSA9IFwiZXJyb3JcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIldhcm5pbmdcIl0gPSBcIndhcm5pbmdcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIkxvZ1wiXSA9IFwibG9nXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJJbmZvXCJdID0gXCJpbmZvXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJEZWJ1Z1wiXSA9IFwiZGVidWdcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIkNyaXRpY2FsXCJdID0gXCJjcml0aWNhbFwiO1xufSkoU2V2ZXJpdHkgfHwgKFNldmVyaXR5ID0ge30pKTtcbi8vIHRzbGludDpkaXNhYmxlOmNvbXBsZXRlZC1kb2NzXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby11bm5lY2Vzc2FyeS1xdWFsaWZpZXIgbm8tbmFtZXNwYWNlXG4oZnVuY3Rpb24gKFNldmVyaXR5KSB7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmctYmFzZWQgbGV2ZWwgaW50byBhIHtAbGluayBTZXZlcml0eX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGV2ZWwgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIFNldmVyaXR5XG4gICAgICogQHJldHVybnMgU2V2ZXJpdHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tU3RyaW5nKGxldmVsKSB7XG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RlYnVnJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuRGVidWc7XG4gICAgICAgICAgICBjYXNlICdpbmZvJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuSW5mbztcbiAgICAgICAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5Lldhcm5pbmc7XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkVycm9yO1xuICAgICAgICAgICAgY2FzZSAnZmF0YWwnOlxuICAgICAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5GYXRhbDtcbiAgICAgICAgICAgIGNhc2UgJ2NyaXRpY2FsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuQ3JpdGljYWw7XG4gICAgICAgICAgICBjYXNlICdsb2cnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuTG9nO1xuICAgICAgICB9XG4gICAgfVxuICAgIFNldmVyaXR5LmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xufSkoU2V2ZXJpdHkgfHwgKFNldmVyaXR5ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldmVyaXR5LmpzLm1hcCIsImltcG9ydCB7IGxvZ2dlciwgU2VudHJ5RXJyb3IgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IE5vb3BUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydHMvbm9vcCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGJhc2UgaW1wbGVtZW50aW9uIG9mIGEgQmFja2VuZC5cbiAqIEBoaWRkZW5cbiAqL1xudmFyIEJhc2VCYWNrZW5kID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgaW5zdGFuY2UuICovXG4gICAgZnVuY3Rpb24gQmFzZUJhY2tlbmQob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKCF0aGlzLl9vcHRpb25zLmRzbikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ05vIERTTiBwcm92aWRlZCwgYmFja2VuZCB3aWxsIG5vdCBkbyBhbnl0aGluZy4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmFuc3BvcnQgPSB0aGlzLl9zZXR1cFRyYW5zcG9ydCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIHRoZSB0cmFuc3BvcnQgc28gaXQgY2FuIGJlIHVzZWQgbGF0ZXIgdG8gc2VuZCByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuX3NldHVwVHJhbnNwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IE5vb3BUcmFuc3BvcnQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLmV2ZW50RnJvbUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChfZXhjZXB0aW9uLCBfaGludCkge1xuICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ0JhY2tlbmQgaGFzIHRvIGltcGxlbWVudCBgZXZlbnRGcm9tRXhjZXB0aW9uYCBtZXRob2QnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLmV2ZW50RnJvbU1lc3NhZ2UgPSBmdW5jdGlvbiAoX21lc3NhZ2UsIF9sZXZlbCwgX2hpbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdCYWNrZW5kIGhhcyB0byBpbXBsZW1lbnQgYGV2ZW50RnJvbU1lc3NhZ2VgIG1ldGhvZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuc2VuZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5zZW5kRXZlbnQoZXZlbnQpLnRoZW4obnVsbCwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3Igd2hpbGUgc2VuZGluZyBldmVudDogXCIgKyByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLmdldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydDtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlQmFja2VuZDtcbn0oKSk7XG5leHBvcnQgeyBCYXNlQmFja2VuZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZWJhY2tlbmQuanMubWFwIiwiaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0IH0gZnJvbSAnLi9taXNjJztcbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEVycm9yRXZlbnQgb2JqZWN0c1xuICoge0BsaW5rIHN1cHBvcnRzRXJyb3JFdmVudH0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzRXJyb3JFdmVudCgpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtZXhwcmVzc2lvblxuICAgICAgICBuZXcgRXJyb3JFdmVudCgnJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgRE9NRXJyb3Igb2JqZWN0c1xuICoge0BsaW5rIHN1cHBvcnRzRE9NRXJyb3J9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0RPTUVycm9yKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEl0IHJlYWxseSBuZWVkcyAxIGFyZ3VtZW50LCBub3QgMC5cbiAgICAgICAgLy8gQ2hyb21lOiBWTTg5OjEgVW5jYXVnaHQgVHlwZUVycm9yOiBGYWlsZWQgdG8gY29uc3RydWN0ICdET01FcnJvcic6XG4gICAgICAgIC8vIDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtZXhwcmVzc2lvblxuICAgICAgICBuZXcgRE9NRXJyb3IoJycpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIERPTUV4Y2VwdGlvbiBvYmplY3RzXG4gKiB7QGxpbmsgc3VwcG9ydHNET01FeGNlcHRpb259LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0RPTUV4Y2VwdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtZXhwcmVzc2lvblxuICAgICAgICBuZXcgRE9NRXhjZXB0aW9uKCcnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBGZXRjaCBBUElcbiAqIHtAbGluayBzdXBwb3J0c0ZldGNofS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNGZXRjaCgpIHtcbiAgICBpZiAoISgnZmV0Y2gnIGluIGdldEdsb2JhbE9iamVjdCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxuICAgICAgICBuZXcgSGVhZGVycygpO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICAgICAgbmV3IFJlcXVlc3QoJycpO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICAgICAgbmV3IFJlc3BvbnNlKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBpc05hdGl2ZUZldGNoIGNoZWNrcyBpZiB0aGUgZ2l2ZW4gZnVuY3Rpb24gaXMgYSBuYXRpdmUgaW1wbGVtZW50YXRpb24gb2YgZmV0Y2goKVxuICovXG5mdW5jdGlvbiBpc05hdGl2ZUZldGNoKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuYyAmJiAvXmZ1bmN0aW9uIGZldGNoXFwoXFwpXFxzK1xce1xccytcXFtuYXRpdmUgY29kZVxcXVxccytcXH0kLy50ZXN0KGZ1bmMudG9TdHJpbmcoKSk7XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBGZXRjaCBBUEkgbmF0aXZlbHlcbiAqIHtAbGluayBzdXBwb3J0c05hdGl2ZUZldGNofS5cbiAqXG4gKiBAcmV0dXJucyB0cnVlIGlmIGB3aW5kb3cuZmV0Y2hgIGlzIG5hdGl2ZWx5IGltcGxlbWVudGVkLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzTmF0aXZlRmV0Y2goKSB7XG4gICAgaWYgKCFzdXBwb3J0c0ZldGNoKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgLy8gRmFzdCBwYXRoIHRvIGF2b2lkIERPTSBJL09cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5ib3VuZC1tZXRob2RcbiAgICBpZiAoaXNOYXRpdmVGZXRjaChnbG9iYWwuZmV0Y2gpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyB3aW5kb3cuZmV0Y2ggaXMgaW1wbGVtZW50ZWQsIGJ1dCBpcyBwb2x5ZmlsbGVkIG9yIGFscmVhZHkgd3JhcHBlZCAoZS5nOiBieSBhIGNocm9tZSBleHRlbnNpb24pXG4gICAgLy8gc28gY3JlYXRlIGEgXCJwdXJlXCIgaWZyYW1lIHRvIHNlZSBpZiB0aGF0IGhhcyBuYXRpdmUgZmV0Y2hcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICBpZiAoZG9jKSB7XG4gICAgICAgIHZhciBzYW5kYm94ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICBzYW5kYm94LmhpZGRlbiA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZChzYW5kYm94KTtcbiAgICAgICAgICAgIGlmIChzYW5kYm94LmNvbnRlbnRXaW5kb3cgJiYgc2FuZGJveC5jb250ZW50V2luZG93LmZldGNoKSB7XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuYm91bmQtbWV0aG9kXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNOYXRpdmVGZXRjaChzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jLmhlYWQucmVtb3ZlQ2hpbGQoc2FuZGJveCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0NvdWxkIG5vdCBjcmVhdGUgc2FuZGJveCBpZnJhbWUgZm9yIHB1cmUgZmV0Y2ggY2hlY2ssIGJhaWxpbmcgdG8gd2luZG93LmZldGNoOiAnLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBSZXBvcnRpbmdPYnNlcnZlciBBUElcbiAqIHtAbGluayBzdXBwb3J0c1JlcG9ydGluZ09ic2VydmVyfS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZXBvcnRpbmdPYnNlcnZlcigpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXVuc2FmZS1hbnlcbiAgICByZXR1cm4gJ1JlcG9ydGluZ09ic2VydmVyJyBpbiBnZXRHbG9iYWxPYmplY3QoKTtcbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIFJlZmVycmVyIFBvbGljeSBBUElcbiAqIHtAbGluayBzdXBwb3J0c1JlZmVycmVyUG9saWN5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZWZlcnJlclBvbGljeSgpIHtcbiAgICAvLyBEZXNwaXRlIGFsbCBzdGFycyBpbiB0aGUgc2t5IHNheWluZyB0aGF0IEVkZ2Ugc3VwcG9ydHMgb2xkIGRyYWZ0IHN5bnRheCwgYWthICduZXZlcicsICdhbHdheXMnLCAnb3JpZ2luJyBhbmQgJ2RlZmF1bHRcbiAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXJlZmVycmVyLXBvbGljeVxuICAgIC8vIEl0IGRvZXNuJ3QuIEFuZCBpdCB0aHJvdyBleGNlcHRpb24gaW5zdGVhZCBvZiBpZ25vcmluZyB0aGlzIHBhcmFtZXRlci4uLlxuICAgIC8vIFJFRjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1qcy9pc3N1ZXMvMTIzM1xuICAgIGlmICghc3VwcG9ydHNGZXRjaCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICAgICAgbmV3IFJlcXVlc3QoJ18nLCB7XG4gICAgICAgICAgICByZWZlcnJlclBvbGljeTogJ29yaWdpbicsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEhpc3RvcnkgQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNIaXN0b3J5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICAgIC8vIE5PVEU6IGluIENocm9tZSBBcHAgZW52aXJvbm1lbnQsIHRvdWNoaW5nIGhpc3RvcnkucHVzaFN0YXRlLCAqZXZlbiBpbnNpZGVcbiAgICAvLyAgICAgICBhIHRyeS9jYXRjaCBibG9jayosIHdpbGwgY2F1c2UgQ2hyb21lIHRvIG91dHB1dCBhbiBlcnJvciB0byBjb25zb2xlLmVycm9yXG4gICAgLy8gYm9ycm93ZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzOTQ1L2ZpbGVzXG4gICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIHZhciBjaHJvbWUgPSBnbG9iYWwuY2hyb21lO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgdmFyIGlzQ2hyb21lUGFja2FnZWRBcHAgPSBjaHJvbWUgJiYgY2hyb21lLmFwcCAmJiBjaHJvbWUuYXBwLnJ1bnRpbWU7XG4gICAgdmFyIGhhc0hpc3RvcnlBcGkgPSAnaGlzdG9yeScgaW4gZ2xvYmFsICYmICEhZ2xvYmFsLmhpc3RvcnkucHVzaFN0YXRlICYmICEhZ2xvYmFsLmhpc3RvcnkucmVwbGFjZVN0YXRlO1xuICAgIHJldHVybiAhaXNDaHJvbWVQYWNrYWdlZEFwcCAmJiBoYXNIaXN0b3J5QXBpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3VwcG9ydHMuanMubWFwIiwiLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuLy8gZ2xvYmFsIHJlZmVyZW5jZSB0byBzbGljZVxudmFyIFVOS05PV05fRlVOQ1RJT04gPSAnPyc7XG4vLyBDaHJvbWl1bSBiYXNlZCBicm93c2VyczogQ2hyb21lLCBCcmF2ZSwgbmV3IE9wZXJhLCBuZXcgRWRnZVxudmFyIGNocm9tZSA9IC9eXFxzKmF0ICg/OiguKj8pID9cXCgpPygoPzpmaWxlfGh0dHBzP3xibG9ifGNocm9tZS1leHRlbnNpb258bmF0aXZlfGV2YWx8d2VicGFja3w8YW5vbnltb3VzPnxbLWEtel0rOnxcXC8pLio/KSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xcKT9cXHMqJC9pO1xuLy8gZ2Vja28gcmVnZXg6IGAoPzpidW5kbGV8XFxkK1xcLmpzKWA6IGBidW5kbGVgIGlzIGZvciByZWFjdCBuYXRpdmUsIGBcXGQrXFwuanNgIGFsc28gYnV0IHNwZWNpZmljYWxseSBmb3IgcmFtIGJ1bmRsZXMgYmVjYXVzZSBpdFxuLy8gZ2VuZXJhdGVzIGZpbGVuYW1lcyB3aXRob3V0IGEgcHJlZml4IGxpa2UgYGZpbGU6Ly9gIHRoZSBmaWxlbmFtZXMgaW4gdGhlIHN0YWNrdHJhY2UgYXJlIGp1c3QgNDIuanNcbi8vIFdlIG5lZWQgdGhpcyBzcGVjaWZpYyBjYXNlIGZvciBub3cgYmVjYXVzZSB3ZSB3YW50IG5vIG90aGVyIHJlZ2V4IHRvIG1hdGNoLlxudmFyIGdlY2tvID0gL15cXHMqKC4qPykoPzpcXCgoLio/KVxcKSk/KD86XnxAKT8oKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWV8d2VicGFja3xyZXNvdXJjZXxtb3otZXh0ZW5zaW9uKS4qPzpcXC8uKj98XFxbbmF0aXZlIGNvZGVcXF18W15AXSooPzpidW5kbGV8XFxkK1xcLmpzKSkoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXHMqJC9pO1xudmFyIHdpbmpzID0gL15cXHMqYXQgKD86KCg/OlxcW29iamVjdCBvYmplY3RcXF0pPy4rKSApP1xcKD8oKD86ZmlsZXxtcy1hcHB4fGh0dHBzP3x3ZWJwYWNrfGJsb2IpOi4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7XG52YXIgZ2Vja29FdmFsID0gLyhcXFMrKSBsaW5lIChcXGQrKSg/OiA+IGV2YWwgbGluZSBcXGQrKSogPiBldmFsL2k7XG52YXIgY2hyb21lRXZhbCA9IC9cXCgoXFxTKikoPzo6KFxcZCspKSg/OjooXFxkKykpXFwpLztcbi8qKiBKU0RvYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlKGV4KSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGU6bm8tdW5zYWZlLWFueVxuICAgIHZhciBzdGFjayA9IG51bGw7XG4gICAgdmFyIHBvcFNpemUgPSBleCAmJiBleC5mcmFtZXNUb1BvcDtcbiAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIG11c3QgYmUgdHJpZWQgZmlyc3QgYmVjYXVzZSBPcGVyYSAxMCAqZGVzdHJveXMqXG4gICAgICAgIC8vIGl0cyBzdGFja3RyYWNlIHByb3BlcnR5IGlmIHlvdSB0cnkgdG8gYWNjZXNzIHRoZSBzdGFja1xuICAgICAgICAvLyBwcm9wZXJ0eSBmaXJzdCEhXG4gICAgICAgIHN0YWNrID0gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2t0cmFjZVByb3AoZXgpO1xuICAgICAgICBpZiAoc3RhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBwb3BGcmFtZXMoc3RhY2ssIHBvcFNpemUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHN0YWNrID0gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wKGV4KTtcbiAgICAgICAgaWYgKHN0YWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9wRnJhbWVzKHN0YWNrLCBwb3BTaXplKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiBleHRyYWN0TWVzc2FnZShleCksXG4gICAgICAgIG5hbWU6IGV4ICYmIGV4Lm5hbWUsXG4gICAgICAgIHN0YWNrOiBbXSxcbiAgICAgICAgZmFpbGVkOiB0cnVlLFxuICAgIH07XG59XG4vKiogSlNEb2MgKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjeWNsb21hdGljLWNvbXBsZXhpdHlcbmZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcChleCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLWNvbmRpdGlvbmFsLWFzc2lnbm1lbnRcbiAgICBpZiAoIWV4IHx8ICFleC5zdGFjaykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHN0YWNrID0gW107XG4gICAgdmFyIGxpbmVzID0gZXguc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgIHZhciBpc0V2YWw7XG4gICAgdmFyIHN1Ym1hdGNoO1xuICAgIHZhciBwYXJ0cztcbiAgICB2YXIgZWxlbWVudDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICgocGFydHMgPSBjaHJvbWUuZXhlYyhsaW5lc1tpXSkpKSB7XG4gICAgICAgICAgICB2YXIgaXNOYXRpdmUgPSBwYXJ0c1syXSAmJiBwYXJ0c1syXS5pbmRleE9mKCduYXRpdmUnKSA9PT0gMDsgLy8gc3RhcnQgb2YgbGluZVxuICAgICAgICAgICAgaXNFdmFsID0gcGFydHNbMl0gJiYgcGFydHNbMl0uaW5kZXhPZignZXZhbCcpID09PSAwOyAvLyBzdGFydCBvZiBsaW5lXG4gICAgICAgICAgICBpZiAoaXNFdmFsICYmIChzdWJtYXRjaCA9IGNocm9tZUV2YWwuZXhlYyhwYXJ0c1syXSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhyb3cgb3V0IGV2YWwgbGluZS9jb2x1bW4gYW5kIHVzZSB0b3AtbW9zdCBsaW5lL2NvbHVtbiBudW1iZXJcbiAgICAgICAgICAgICAgICBwYXJ0c1syXSA9IHN1Ym1hdGNoWzFdOyAvLyB1cmxcbiAgICAgICAgICAgICAgICBwYXJ0c1szXSA9IHN1Ym1hdGNoWzJdOyAvLyBsaW5lXG4gICAgICAgICAgICAgICAgcGFydHNbNF0gPSBzdWJtYXRjaFszXTsgLy8gY29sdW1uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHVybDogcGFydHNbMl0sXG4gICAgICAgICAgICAgICAgZnVuYzogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICAgICAgICAgICAgICBhcmdzOiBpc05hdGl2ZSA/IFtwYXJ0c1syXV0gOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lOiBwYXJ0c1szXSA/ICtwYXJ0c1szXSA6IG51bGwsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwYXJ0cyA9IHdpbmpzLmV4ZWMobGluZXNbaV0pKSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzJdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgYXJnczogW10sXG4gICAgICAgICAgICAgICAgbGluZTogK3BhcnRzWzNdLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocGFydHMgPSBnZWNrby5leGVjKGxpbmVzW2ldKSkpIHtcbiAgICAgICAgICAgIGlzRXZhbCA9IHBhcnRzWzNdICYmIHBhcnRzWzNdLmluZGV4T2YoJyA+IGV2YWwnKSA+IC0xO1xuICAgICAgICAgICAgaWYgKGlzRXZhbCAmJiAoc3VibWF0Y2ggPSBnZWNrb0V2YWwuZXhlYyhwYXJ0c1szXSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhyb3cgb3V0IGV2YWwgbGluZS9jb2x1bW4gYW5kIHVzZSB0b3AtbW9zdCBsaW5lIG51bWJlclxuICAgICAgICAgICAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0gfHwgXCJldmFsXCI7XG4gICAgICAgICAgICAgICAgcGFydHNbM10gPSBzdWJtYXRjaFsxXTtcbiAgICAgICAgICAgICAgICBwYXJ0c1s0XSA9IHN1Ym1hdGNoWzJdO1xuICAgICAgICAgICAgICAgIHBhcnRzWzVdID0gJyc7IC8vIG5vIGNvbHVtbiB3aGVuIGV2YWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDAgJiYgIXBhcnRzWzVdICYmIGV4LmNvbHVtbk51bWJlciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlyZUZveCB1c2VzIHRoaXMgYXdlc29tZSBjb2x1bW5OdW1iZXIgcHJvcGVydHkgZm9yIGl0cyB0b3AgZnJhbWVcbiAgICAgICAgICAgICAgICAvLyBBbHNvIG5vdGUsIEZpcmVmb3gncyBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQgYW5kIGV2ZXJ5dGhpbmcgZWxzZSBleHBlY3RzIDEtYmFzZWQsXG4gICAgICAgICAgICAgICAgLy8gc28gYWRkaW5nIDFcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiB0aGlzIGhhY2sgZG9lc24ndCB3b3JrIGlmIHRvcC1tb3N0IGZyYW1lIGlzIGV2YWxcbiAgICAgICAgICAgICAgICBzdGFja1swXS5jb2x1bW4gPSBleC5jb2x1bW5OdW1iZXIgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzNdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgYXJnczogcGFydHNbMl0gPyBwYXJ0c1syXS5zcGxpdCgnLCcpIDogW10sXG4gICAgICAgICAgICAgICAgbGluZTogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogcGFydHNbNV0gPyArcGFydHNbNV0gOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZWxlbWVudC5mdW5jICYmIGVsZW1lbnQubGluZSkge1xuICAgICAgICAgICAgZWxlbWVudC5mdW5jID0gVU5LTk9XTl9GVU5DVElPTjtcbiAgICAgICAgfVxuICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXh0cmFjdE1lc3NhZ2UoZXgpLFxuICAgICAgICBuYW1lOiBleC5uYW1lLFxuICAgICAgICBzdGFjazogc3RhY2ssXG4gICAgfTtcbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2t0cmFjZVByb3AoZXgpIHtcbiAgICBpZiAoIWV4IHx8ICFleC5zdGFja3RyYWNlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBBY2Nlc3MgYW5kIHN0b3JlIHRoZSBzdGFja3RyYWNlIHByb3BlcnR5IGJlZm9yZSBkb2luZyBBTllUSElOR1xuICAgIC8vIGVsc2UgdG8gaXQgYmVjYXVzZSBPcGVyYSBpcyBub3QgdmVyeSBnb29kIGF0IHByb3ZpZGluZyBpdFxuICAgIC8vIHJlbGlhYmx5IGluIG90aGVyIGNpcmN1bXN0YW5jZXMuXG4gICAgdmFyIHN0YWNrdHJhY2UgPSBleC5zdGFja3RyYWNlO1xuICAgIHZhciBvcGVyYTEwUmVnZXggPSAvIGxpbmUgKFxcZCspLipzY3JpcHQgKD86aW4gKT8oXFxTKykoPzo6IGluIGZ1bmN0aW9uIChcXFMrKSk/JC9pO1xuICAgIHZhciBvcGVyYTExUmVnZXggPSAvIGxpbmUgKFxcZCspLCBjb2x1bW4gKFxcZCspXFxzKig/OmluICg/Ojxhbm9ueW1vdXMgZnVuY3Rpb246IChbXj5dKyk+fChbXlxcKV0rKSlcXCgoLiopXFwpKT8gaW4gKC4qKTpcXHMqJC9pO1xuICAgIHZhciBsaW5lcyA9IHN0YWNrdHJhY2Uuc3BsaXQoJ1xcbicpO1xuICAgIHZhciBzdGFjayA9IFtdO1xuICAgIHZhciBwYXJ0cztcbiAgICBmb3IgKHZhciBsaW5lID0gMDsgbGluZSA8IGxpbmVzLmxlbmd0aDsgbGluZSArPSAyKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLWNvbmRpdGlvbmFsLWFzc2lnbm1lbnRcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBudWxsO1xuICAgICAgICBpZiAoKHBhcnRzID0gb3BlcmExMFJlZ2V4LmV4ZWMobGluZXNbbGluZV0pKSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzJdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzNdLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFtdLFxuICAgICAgICAgICAgICAgIGxpbmU6ICtwYXJ0c1sxXSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwYXJ0cyA9IG9wZXJhMTFSZWdleC5leGVjKGxpbmVzW2xpbmVdKSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiBwYXJ0c1s2XSxcbiAgICAgICAgICAgICAgICBmdW5jOiBwYXJ0c1szXSB8fCBwYXJ0c1s0XSxcbiAgICAgICAgICAgICAgICBhcmdzOiBwYXJ0c1s1XSA/IHBhcnRzWzVdLnNwbGl0KCcsJykgOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lOiArcGFydHNbMV0sXG4gICAgICAgICAgICAgICAgY29sdW1uOiArcGFydHNbMl0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuZnVuYyAmJiBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZ1bmMgPSBVTktOT1dOX0ZVTkNUSU9OO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXh0cmFjdE1lc3NhZ2UoZXgpLFxuICAgICAgICBuYW1lOiBleC5uYW1lLFxuICAgICAgICBzdGFjazogc3RhY2ssXG4gICAgfTtcbn1cbi8qKiBSZW1vdmUgTiBudW1iZXIgb2YgZnJhbWVzIGZyb20gdGhlIHN0YWNrICovXG5mdW5jdGlvbiBwb3BGcmFtZXMoc3RhY2t0cmFjZSwgcG9wU2l6ZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXNzaWduKHt9LCBzdGFja3RyYWNlLCB7IHN0YWNrOiBzdGFja3RyYWNlLnN0YWNrLnNsaWNlKHBvcFNpemUpIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gc3RhY2t0cmFjZTtcbiAgICB9XG59XG4vKipcbiAqIFRoZXJlIGFyZSBjYXNlcyB3aGVyZSBzdGFja3RyYWNlLm1lc3NhZ2UgaXMgYW4gRXZlbnQgb2JqZWN0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8xOTQ5XG4gKiBJbiB0aGlzIHNwZWNpZmljIGNhc2Ugd2UgdHJ5IHRvIGV4dHJhY3Qgc3RhY2t0cmFjZS5tZXNzYWdlLmVycm9yLm1lc3NhZ2VcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdE1lc3NhZ2UoZXgpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGV4ICYmIGV4Lm1lc3NhZ2U7XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiAnTm8gZXJyb3IgbWVzc2FnZSc7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmVycm9yICYmIHR5cGVvZiBtZXNzYWdlLmVycm9yLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLmVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VraXQuanMubWFwIiwiaW1wb3J0IHsgZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlLCBpc0V2ZW50LCBub3JtYWxpemVUb1NpemUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGNvbXB1dGVTdGFja1RyYWNlIH0gZnJvbSAnLi90cmFjZWtpdCc7XG52YXIgU1RBQ0tUUkFDRV9MSU1JVCA9IDUwO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gZXhjZXB0aW9uIGZyb20gYW4gVHJhY2VLaXRTdGFja1RyYWNlXG4gKiBAcGFyYW0gc3RhY2t0cmFjZSBUcmFjZUtpdFN0YWNrVHJhY2UgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhbiBleGNlcHRpb25cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpIHtcbiAgICB2YXIgZnJhbWVzID0gcHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrdHJhY2Uuc3RhY2spO1xuICAgIHZhciBleGNlcHRpb24gPSB7XG4gICAgICAgIHR5cGU6IHN0YWNrdHJhY2UubmFtZSxcbiAgICAgICAgdmFsdWU6IHN0YWNrdHJhY2UubWVzc2FnZSxcbiAgICB9O1xuICAgIGlmIChmcmFtZXMgJiYgZnJhbWVzLmxlbmd0aCkge1xuICAgICAgICBleGNlcHRpb24uc3RhY2t0cmFjZSA9IHsgZnJhbWVzOiBmcmFtZXMgfTtcbiAgICB9XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC10eXBlLXByZWRpY2F0ZXNcbiAgICBpZiAoZXhjZXB0aW9uLnR5cGUgPT09IHVuZGVmaW5lZCAmJiBleGNlcHRpb24udmFsdWUgPT09ICcnKSB7XG4gICAgICAgIGV4Y2VwdGlvbi52YWx1ZSA9ICdVbnJlY292ZXJhYmxlIGVycm9yIGNhdWdodCc7XG4gICAgfVxuICAgIHJldHVybiBleGNlcHRpb247XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbVBsYWluT2JqZWN0KGV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCByZWplY3Rpb24pIHtcbiAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgIGV4Y2VwdGlvbjoge1xuICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBpc0V2ZW50KGV4Y2VwdGlvbikgPyBleGNlcHRpb24uY29uc3RydWN0b3IubmFtZSA6IHJlamVjdGlvbiA/ICdVbmhhbmRsZWRSZWplY3Rpb24nIDogJ0Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiTm9uLUVycm9yIFwiICsgKHJlamVjdGlvbiA/ICdwcm9taXNlIHJlamVjdGlvbicgOiAnZXhjZXB0aW9uJykgKyBcIiBjYXB0dXJlZCB3aXRoIGtleXM6IFwiICsgZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlKGV4Y2VwdGlvbiksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICBfX3NlcmlhbGl6ZWRfXzogbm9ybWFsaXplVG9TaXplKGV4Y2VwdGlvbiksXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAoc3ludGhldGljRXhjZXB0aW9uKSB7XG4gICAgICAgIHZhciBzdGFja3RyYWNlID0gY29tcHV0ZVN0YWNrVHJhY2Uoc3ludGhldGljRXhjZXB0aW9uKTtcbiAgICAgICAgdmFyIGZyYW1lc18xID0gcHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrdHJhY2Uuc3RhY2spO1xuICAgICAgICBldmVudC5zdGFja3RyYWNlID0ge1xuICAgICAgICAgICAgZnJhbWVzOiBmcmFtZXNfMSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpIHtcbiAgICB2YXIgZXhjZXB0aW9uID0gZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgICB2YWx1ZXM6IFtleGNlcHRpb25dLFxuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFjaykge1xuICAgIGlmICghc3RhY2sgfHwgIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciBsb2NhbFN0YWNrID0gc3RhY2s7XG4gICAgdmFyIGZpcnN0RnJhbWVGdW5jdGlvbiA9IGxvY2FsU3RhY2tbMF0uZnVuYyB8fCAnJztcbiAgICB2YXIgbGFzdEZyYW1lRnVuY3Rpb24gPSBsb2NhbFN0YWNrW2xvY2FsU3RhY2subGVuZ3RoIC0gMV0uZnVuYyB8fCAnJztcbiAgICAvLyBJZiBzdGFjayBzdGFydHMgd2l0aCBvbmUgb2Ygb3VyIEFQSSBjYWxscywgcmVtb3ZlIGl0IChzdGFydHMsIG1lYW5pbmcgaXQncyB0aGUgdG9wIG9mIHRoZSBzdGFjayAtIGFrYSBsYXN0IGNhbGwpXG4gICAgaWYgKGZpcnN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdjYXB0dXJlTWVzc2FnZScpICE9PSAtMSB8fCBmaXJzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignY2FwdHVyZUV4Y2VwdGlvbicpICE9PSAtMSkge1xuICAgICAgICBsb2NhbFN0YWNrID0gbG9jYWxTdGFjay5zbGljZSgxKTtcbiAgICB9XG4gICAgLy8gSWYgc3RhY2sgZW5kcyB3aXRoIG9uZSBvZiBvdXIgaW50ZXJuYWwgQVBJIGNhbGxzLCByZW1vdmUgaXQgKGVuZHMsIG1lYW5pbmcgaXQncyB0aGUgYm90dG9tIG9mIHRoZSBzdGFjayAtIGFrYSB0b3AtbW9zdCBjYWxsKVxuICAgIGlmIChsYXN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdzZW50cnlXcmFwcGVkJykgIT09IC0xKSB7XG4gICAgICAgIGxvY2FsU3RhY2sgPSBsb2NhbFN0YWNrLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgLy8gVGhlIGZyYW1lIHdoZXJlIHRoZSBjcmFzaCBoYXBwZW5lZCwgc2hvdWxkIGJlIHRoZSBsYXN0IGVudHJ5IGluIHRoZSBhcnJheVxuICAgIHJldHVybiBsb2NhbFN0YWNrXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGZyYW1lKSB7IHJldHVybiAoe1xuICAgICAgICBjb2xubzogZnJhbWUuY29sdW1uID09PSBudWxsID8gdW5kZWZpbmVkIDogZnJhbWUuY29sdW1uLFxuICAgICAgICBmaWxlbmFtZTogZnJhbWUudXJsIHx8IGxvY2FsU3RhY2tbMF0udXJsLFxuICAgICAgICBmdW5jdGlvbjogZnJhbWUuZnVuYyB8fCAnPycsXG4gICAgICAgIGluX2FwcDogdHJ1ZSxcbiAgICAgICAgbGluZW5vOiBmcmFtZS5saW5lID09PSBudWxsID8gdW5kZWZpbmVkIDogZnJhbWUubGluZSxcbiAgICB9KTsgfSlcbiAgICAgICAgLnNsaWNlKDAsIFNUQUNLVFJBQ0VfTElNSVQpXG4gICAgICAgIC5yZXZlcnNlKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXJzLmpzLm1hcCIsImltcG9ydCB7IGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSwgYWRkRXhjZXB0aW9uVHlwZVZhbHVlLCBpc0RPTUVycm9yLCBpc0RPTUV4Y2VwdGlvbiwgaXNFcnJvciwgaXNFcnJvckV2ZW50LCBpc0V2ZW50LCBpc1BsYWluT2JqZWN0LCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRGcm9tUGxhaW5PYmplY3QsIGV2ZW50RnJvbVN0YWNrdHJhY2UsIHByZXBhcmVGcmFtZXNGb3JFdmVudCB9IGZyb20gJy4vcGFyc2Vycyc7XG5pbXBvcnQgeyBjb21wdXRlU3RhY2tUcmFjZSB9IGZyb20gJy4vdHJhY2VraXQnO1xuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tVW5rbm93bklucHV0KGV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgZXZlbnQ7XG4gICAgaWYgKGlzRXJyb3JFdmVudChleGNlcHRpb24pICYmIGV4Y2VwdGlvbi5lcnJvcikge1xuICAgICAgICAvLyBJZiBpdCBpcyBhbiBFcnJvckV2ZW50IHdpdGggYGVycm9yYCBwcm9wZXJ0eSwgZXh0cmFjdCBpdCB0byBnZXQgYWN0dWFsIEVycm9yXG4gICAgICAgIHZhciBlcnJvckV2ZW50ID0gZXhjZXB0aW9uO1xuICAgICAgICBleGNlcHRpb24gPSBlcnJvckV2ZW50LmVycm9yOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLXBhcmFtZXRlci1yZWFzc2lnbm1lbnRcbiAgICAgICAgZXZlbnQgPSBldmVudEZyb21TdGFja3RyYWNlKGNvbXB1dGVTdGFja1RyYWNlKGV4Y2VwdGlvbikpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGlmIChpc0RPTUVycm9yKGV4Y2VwdGlvbikgfHwgaXNET01FeGNlcHRpb24oZXhjZXB0aW9uKSkge1xuICAgICAgICAvLyBJZiBpdCBpcyBhIERPTUVycm9yIG9yIERPTUV4Y2VwdGlvbiAod2hpY2ggYXJlIGxlZ2FjeSBBUElzLCBidXQgc3RpbGwgc3VwcG9ydGVkIGluIHNvbWUgYnJvd3NlcnMpXG4gICAgICAgIC8vIHRoZW4gd2UganVzdCBleHRyYWN0IHRoZSBuYW1lIGFuZCBtZXNzYWdlLCBhcyB0aGV5IGRvbid0IHByb3ZpZGUgYW55dGhpbmcgZWxzZVxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NRXJyb3JcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUV4Y2VwdGlvblxuICAgICAgICB2YXIgZG9tRXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgICAgICB2YXIgbmFtZV8xID0gZG9tRXhjZXB0aW9uLm5hbWUgfHwgKGlzRE9NRXJyb3IoZG9tRXhjZXB0aW9uKSA/ICdET01FcnJvcicgOiAnRE9NRXhjZXB0aW9uJyk7XG4gICAgICAgIHZhciBtZXNzYWdlID0gZG9tRXhjZXB0aW9uLm1lc3NhZ2UgPyBuYW1lXzEgKyBcIjogXCIgKyBkb21FeGNlcHRpb24ubWVzc2FnZSA6IG5hbWVfMTtcbiAgICAgICAgZXZlbnQgPSBldmVudEZyb21TdHJpbmcobWVzc2FnZSwgc3ludGhldGljRXhjZXB0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgYWRkRXhjZXB0aW9uVHlwZVZhbHVlKGV2ZW50LCBtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcihleGNlcHRpb24pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWFsIEVycm9yIG9iamVjdCwgZG8gbm90aGluZ1xuICAgICAgICBldmVudCA9IGV2ZW50RnJvbVN0YWNrdHJhY2UoY29tcHV0ZVN0YWNrVHJhY2UoZXhjZXB0aW9uKSk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoZXhjZXB0aW9uKSB8fCBpc0V2ZW50KGV4Y2VwdGlvbikpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgcGxhaW4gT2JqZWN0IG9yIEV2ZW50LCBzZXJpYWxpemUgaXQgbWFudWFsbHkgYW5kIGV4dHJhY3Qgb3B0aW9uc1xuICAgICAgICAvLyBUaGlzIHdpbGwgYWxsb3cgdXMgdG8gZ3JvdXAgZXZlbnRzIGJhc2VkIG9uIHRvcC1sZXZlbCBrZXlzXG4gICAgICAgIC8vIHdoaWNoIGlzIG11Y2ggYmV0dGVyIHRoYW4gY3JlYXRpbmcgbmV3IGdyb3VwIHdoZW4gYW55IGtleS92YWx1ZSBjaGFuZ2VcbiAgICAgICAgdmFyIG9iamVjdEV4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICAgICAgZXZlbnQgPSBldmVudEZyb21QbGFpbk9iamVjdChvYmplY3RFeGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucy5yZWplY3Rpb24pO1xuICAgICAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgICAgIHN5bnRoZXRpYzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgLy8gSWYgbm9uZSBvZiBwcmV2aW91cyBjaGVja3Mgd2VyZSB2YWxpZCwgdGhlbiBpdCBtZWFucyB0aGF0IGl0J3Mgbm90OlxuICAgIC8vIC0gYW4gaW5zdGFuY2Ugb2YgRE9NRXJyb3JcbiAgICAvLyAtIGFuIGluc3RhbmNlIG9mIERPTUV4Y2VwdGlvblxuICAgIC8vIC0gYW4gaW5zdGFuY2Ugb2YgRXZlbnRcbiAgICAvLyAtIGFuIGluc3RhbmNlIG9mIEVycm9yXG4gICAgLy8gLSBhIHZhbGlkIEVycm9yRXZlbnQgKG9uZSB3aXRoIGFuIGVycm9yIHByb3BlcnR5KVxuICAgIC8vIC0gYSBwbGFpbiBPYmplY3RcbiAgICAvL1xuICAgIC8vIFNvIGJhaWwgb3V0IGFuZCBjYXB0dXJlIGl0IGFzIGEgc2ltcGxlIG1lc3NhZ2U6XG4gICAgZXZlbnQgPSBldmVudEZyb21TdHJpbmcoZXhjZXB0aW9uLCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMpO1xuICAgIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgXCJcIiArIGV4Y2VwdGlvbiwgdW5kZWZpbmVkKTtcbiAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgc3ludGhldGljOiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiBldmVudDtcbn1cbi8vIHRoaXMuX29wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tU3RyaW5nKGlucHV0LCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgbWVzc2FnZTogaW5wdXQsXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlICYmIHN5bnRoZXRpY0V4Y2VwdGlvbikge1xuICAgICAgICB2YXIgc3RhY2t0cmFjZSA9IGNvbXB1dGVTdGFja1RyYWNlKHN5bnRoZXRpY0V4Y2VwdGlvbik7XG4gICAgICAgIHZhciBmcmFtZXNfMSA9IHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFja3RyYWNlLnN0YWNrKTtcbiAgICAgICAgZXZlbnQuc3RhY2t0cmFjZSA9IHtcbiAgICAgICAgICAgIGZyYW1lczogZnJhbWVzXzEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBldmVudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50YnVpbGRlci5qcy5tYXAiLCJpbXBvcnQgeyBTZW50cnlFcnJvciB9IGZyb20gJy4vZXJyb3InO1xuaW1wb3J0IHsgU3luY1Byb21pc2UgfSBmcm9tICcuL3N5bmNwcm9taXNlJztcbi8qKiBBIHNpbXBsZSBxdWV1ZSB0aGF0IGhvbGRzIHByb21pc2VzLiAqL1xudmFyIFByb21pc2VCdWZmZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvbWlzZUJ1ZmZlcihfbGltaXQpIHtcbiAgICAgICAgdGhpcy5fbGltaXQgPSBfbGltaXQ7XG4gICAgICAgIC8qKiBJbnRlcm5hbCBzZXQgb2YgcXVldWVkIFByb21pc2VzICovXG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYXlzIGlmIHRoZSBidWZmZXIgaXMgcmVhZHkgdG8gdGFrZSBtb3JlIHJlcXVlc3RzXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbWl0ID09PSB1bmRlZmluZWQgfHwgdGhpcy5sZW5ndGgoKSA8IHRoaXMuX2xpbWl0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGEgcHJvbWlzZSB0byB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFzayBDYW4gYmUgYW55IFByb21pc2VMaWtlPFQ+XG4gICAgICogQHJldHVybnMgVGhlIG9yaWdpbmFsIHByb21pc2UuXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChuZXcgU2VudHJ5RXJyb3IoJ05vdCBhZGRpbmcgUHJvbWlzZSBkdWUgdG8gYnVmZmVyIGxpbWl0IHJlYWNoZWQuJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9idWZmZXIuaW5kZXhPZih0YXNrKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlci5wdXNoKHRhc2spO1xuICAgICAgICB9XG4gICAgICAgIHRhc2tcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbW92ZSh0YXNrKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmUodGFzaykudGhlbihudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBhZGQgdGhpcyBjYXRjaCBoZXJlIG90aGVyd2lzZSB3ZSBoYXZlIGFuIHVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25cbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGl0J3MgYSBuZXcgUHJvbWlzZSBjaGFpbi5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwcm9taXNlIHRvIHRoZSBxdWV1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXNrIENhbiBiZSBhbnkgUHJvbWlzZUxpa2U8VD5cbiAgICAgKiBAcmV0dXJucyBSZW1vdmVkIHByb21pc2UuXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgdmFyIHJlbW92ZWRUYXNrID0gdGhpcy5fYnVmZmVyLnNwbGljZSh0aGlzLl9idWZmZXIuaW5kZXhPZih0YXNrKSwgMSlbMF07XG4gICAgICAgIHJldHVybiByZW1vdmVkVGFzaztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgbnVtYmVyIG9mIHVucmVzb2x2ZWQgcHJvbWlzZXMgaW4gdGhlIHF1ZXVlLlxuICAgICAqL1xuICAgIFByb21pc2VCdWZmZXIucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5sZW5ndGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgZHJhaW4gdGhlIHdob2xlIHF1ZXVlLCByZXR1cm5zIHRydWUgaWYgcXVldWUgaXMgZW1wdHkgb3IgZHJhaW5lZC5cbiAgICAgKiBJZiB0aW1lb3V0IGlzIHByb3ZpZGVkIGFuZCB0aGUgcXVldWUgdGFrZXMgbG9uZ2VyIHRvIGRyYWluLCB0aGUgcHJvbWlzZSBzdGlsbCByZXNvbHZlcyBidXQgd2l0aCBmYWxzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aW1lb3V0IE51bWJlciBpbiBtcyB0byB3YWl0IHVudGlsIGl0IHJlc29sdmVzIHdpdGggZmFsc2UuXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUuZHJhaW4gPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICB2YXIgY2FwdHVyZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgJiYgdGltZW91dCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICBTeW5jUHJvbWlzZS5hbGwoX3RoaXMuX2J1ZmZlcilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNhcHR1cmVkU2V0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJvbWlzZUJ1ZmZlcjtcbn0oKSk7XG5leHBvcnQgeyBQcm9taXNlQnVmZmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlYnVmZmVyLmpzLm1hcCIsImltcG9ydCB7IEFQSSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBQcm9taXNlQnVmZmVyLCBTZW50cnlFcnJvciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqIEJhc2UgVHJhbnNwb3J0IGNsYXNzIGltcGxlbWVudGF0aW9uICovXG52YXIgQmFzZVRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlVHJhbnNwb3J0KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgLyoqIEEgc2ltcGxlIGJ1ZmZlciBob2xkaW5nIGFsbCByZXF1ZXN0cy4gKi9cbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IFByb21pc2VCdWZmZXIoMzApO1xuICAgICAgICB0aGlzLnVybCA9IG5ldyBBUEkodGhpcy5vcHRpb25zLmRzbikuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignVHJhbnNwb3J0IENsYXNzIGhhcyB0byBpbXBsZW1lbnQgYHNlbmRFdmVudGAgbWV0aG9kJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5kcmFpbih0aW1lb3V0KTtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlVHJhbnNwb3J0O1xufSgpKTtcbmV4cG9ydCB7IEJhc2VUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN0YXR1cyB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0LCBsb2dnZXIsIHBhcnNlUmV0cnlBZnRlckhlYWRlciwgc3VwcG9ydHNSZWZlcnJlclBvbGljeSwgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IEJhc2VUcmFuc3BvcnQgfSBmcm9tICcuL2Jhc2UnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIGBmZXRjaGAgYmFzZWQgdHJhbnNwb3J0ICovXG52YXIgRmV0Y2hUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRmV0Y2hUcmFuc3BvcnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmV0Y2hUcmFuc3BvcnQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAvKiogTG9ja3MgdHJhbnNwb3J0IGFmdGVyIHJlY2VpdmluZyA0MjkgcmVzcG9uc2UgKi9cbiAgICAgICAgX3RoaXMuX2Rpc2FibGVkVW50aWwgPSBuZXcgRGF0ZShEYXRlLm5vdygpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEZldGNoVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG5ldyBEYXRlKERhdGUubm93KCkpIDwgdGhpcy5fZGlzYWJsZWRVbnRpbCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcIlRyYW5zcG9ydCBsb2NrZWQgdGlsbCBcIiArIHRoaXMuX2Rpc2FibGVkVW50aWwgKyBcIiBkdWUgdG8gdG9vIG1hbnkgcmVxdWVzdHMuXCIsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShldmVudCksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIC8vIERlc3BpdGUgYWxsIHN0YXJzIGluIHRoZSBza3kgc2F5aW5nIHRoYXQgRWRnZSBzdXBwb3J0cyBvbGQgZHJhZnQgc3ludGF4LCBha2EgJ25ldmVyJywgJ2Fsd2F5cycsICdvcmlnaW4nIGFuZCAnZGVmYXVsdFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1yZWZlcnJlci1wb2xpY3lcbiAgICAgICAgICAgIC8vIEl0IGRvZXNuJ3QuIEFuZCBpdCB0aHJvdyBleGNlcHRpb24gaW5zdGVhZCBvZiBpZ25vcmluZyB0aGlzIHBhcmFtZXRlci4uLlxuICAgICAgICAgICAgLy8gUkVGOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLWpzL2lzc3Vlcy8xMjMzXG4gICAgICAgICAgICByZWZlcnJlclBvbGljeTogKHN1cHBvcnRzUmVmZXJyZXJQb2xpY3koKSA/ICdvcmlnaW4nIDogJycpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnMuaGVhZGVycyA9IHRoaXMub3B0aW9ucy5oZWFkZXJzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuYWRkKG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBnbG9iYWxcbiAgICAgICAgICAgICAgICAuZmV0Y2goX3RoaXMudXJsLCBkZWZhdWx0T3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gU3RhdHVzLmZyb21IdHRwQ29kZShyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IFN0YXR1cy5TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBzdGF0dXM6IHN0YXR1cyB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBTdGF0dXMuUmF0ZUxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZGlzYWJsZWRVbnRpbCA9IG5ldyBEYXRlKG5vdyArIHBhcnNlUmV0cnlBZnRlckhlYWRlcihub3csIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdSZXRyeS1BZnRlcicpKSk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiVG9vIG1hbnkgcmVxdWVzdHMsIGJhY2tpbmcgb2ZmIHRpbGw6IFwiICsgX3RoaXMuX2Rpc2FibGVkVW50aWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEZldGNoVHJhbnNwb3J0O1xufShCYXNlVHJhbnNwb3J0KSk7XG5leHBvcnQgeyBGZXRjaFRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2guanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN0YXR1cyB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgbG9nZ2VyLCBwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIsIFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCYXNlVHJhbnNwb3J0IH0gZnJvbSAnLi9iYXNlJztcbi8qKiBgWEhSYCBiYXNlZCB0cmFuc3BvcnQgKi9cbnZhciBYSFJUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoWEhSVHJhbnNwb3J0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFhIUlRyYW5zcG9ydCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIC8qKiBMb2NrcyB0cmFuc3BvcnQgYWZ0ZXIgcmVjZWl2aW5nIDQyOSByZXNwb25zZSAqL1xuICAgICAgICBfdGhpcy5fZGlzYWJsZWRVbnRpbCA9IG5ldyBEYXRlKERhdGUubm93KCkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgWEhSVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG5ldyBEYXRlKERhdGUubm93KCkpIDwgdGhpcy5fZGlzYWJsZWRVbnRpbCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcIlRyYW5zcG9ydCBsb2NrZWQgdGlsbCBcIiArIHRoaXMuX2Rpc2FibGVkVW50aWwgKyBcIiBkdWUgdG8gdG9vIG1hbnkgcmVxdWVzdHMuXCIsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmFkZChuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gU3RhdHVzLmZyb21IdHRwQ29kZShyZXF1ZXN0LnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gU3RhdHVzLlN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IHN0YXR1czogc3RhdHVzIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IFN0YXR1cy5SYXRlTGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9kaXNhYmxlZFVudGlsID0gbmV3IERhdGUobm93ICsgcGFyc2VSZXRyeUFmdGVySGVhZGVyKG5vdywgcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignUmV0cnktQWZ0ZXInKSkpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcIlRvbyBtYW55IHJlcXVlc3RzLCBiYWNraW5nIG9mZiB0aWxsOiBcIiArIF90aGlzLl9kaXNhYmxlZFVudGlsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcXVlc3Qub3BlbignUE9TVCcsIF90aGlzLnVybCk7XG4gICAgICAgICAgICBmb3IgKHZhciBoZWFkZXIgaW4gX3RoaXMub3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIF90aGlzLm9wdGlvbnMuaGVhZGVyc1toZWFkZXJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFhIUlRyYW5zcG9ydDtcbn0oQmFzZVRyYW5zcG9ydCkpO1xuZXhwb3J0IHsgWEhSVHJhbnNwb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD14aHIuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEJhc2VCYWNrZW5kIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGRFeGNlcHRpb25NZWNoYW5pc20sIHN1cHBvcnRzRmV0Y2gsIFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBldmVudEZyb21TdHJpbmcsIGV2ZW50RnJvbVVua25vd25JbnB1dCB9IGZyb20gJy4vZXZlbnRidWlsZGVyJztcbmltcG9ydCB7IEZldGNoVHJhbnNwb3J0LCBYSFJUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydHMnO1xuLyoqXG4gKiBUaGUgU2VudHJ5IEJyb3dzZXIgU0RLIEJhY2tlbmQuXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBCcm93c2VyQmFja2VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCcm93c2VyQmFja2VuZCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCcm93c2VyQmFja2VuZCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJyb3dzZXJCYWNrZW5kLnByb3RvdHlwZS5fc2V0dXBUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5kc24pIHtcbiAgICAgICAgICAgIC8vIFdlIHJldHVybiB0aGUgbm9vcCB0cmFuc3BvcnQgaGVyZSBpbiBjYXNlIHRoZXJlIGlzIG5vIERzbi5cbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zZXR1cFRyYW5zcG9ydC5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmFuc3BvcnRPcHRpb25zID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5fb3B0aW9ucy50cmFuc3BvcnRPcHRpb25zLCB7IGRzbjogdGhpcy5fb3B0aW9ucy5kc24gfSk7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLl9vcHRpb25zLnRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VwcG9ydHNGZXRjaCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZldGNoVHJhbnNwb3J0KHRyYW5zcG9ydE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWEhSVHJhbnNwb3J0KHRyYW5zcG9ydE9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcm93c2VyQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tRXhjZXB0aW9uID0gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgaGludCkge1xuICAgICAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gKGhpbnQgJiYgaGludC5zeW50aGV0aWNFeGNlcHRpb24pIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRGcm9tVW5rbm93bklucHV0KGV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCB7XG4gICAgICAgICAgICBhdHRhY2hTdGFja3RyYWNlOiB0aGlzLl9vcHRpb25zLmF0dGFjaFN0YWNrdHJhY2UsXG4gICAgICAgIH0pO1xuICAgICAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiAnZ2VuZXJpYycsXG4gICAgICAgIH0pO1xuICAgICAgICBldmVudC5sZXZlbCA9IFNldmVyaXR5LkVycm9yO1xuICAgICAgICBpZiAoaGludCAmJiBoaW50LmV2ZW50X2lkKSB7XG4gICAgICAgICAgICBldmVudC5ldmVudF9pZCA9IGhpbnQuZXZlbnRfaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoZXZlbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcm93c2VyQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBsZXZlbCwgaGludCkge1xuICAgICAgICBpZiAobGV2ZWwgPT09IHZvaWQgMCkgeyBsZXZlbCA9IFNldmVyaXR5LkluZm87IH1cbiAgICAgICAgdmFyIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IChoaW50ICYmIGhpbnQuc3ludGhldGljRXhjZXB0aW9uKSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBldmVudCA9IGV2ZW50RnJvbVN0cmluZyhtZXNzYWdlLCBzeW50aGV0aWNFeGNlcHRpb24sIHtcbiAgICAgICAgICAgIGF0dGFjaFN0YWNrdHJhY2U6IHRoaXMuX29wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50LmxldmVsID0gbGV2ZWw7XG4gICAgICAgIGlmIChoaW50ICYmIGhpbnQuZXZlbnRfaWQpIHtcbiAgICAgICAgICAgIGV2ZW50LmV2ZW50X2lkID0gaGludC5ldmVudF9pZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZShldmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gQnJvd3NlckJhY2tlbmQ7XG59KEJhc2VCYWNrZW5kKSk7XG5leHBvcnQgeyBCcm93c2VyQmFja2VuZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2VuZC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQVBJLCBCYXNlQ2xpZW50IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCcm93c2VyQmFja2VuZCB9IGZyb20gJy4vYmFja2VuZCc7XG5pbXBvcnQgeyBTREtfTkFNRSwgU0RLX1ZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24nO1xuLyoqXG4gKiBUaGUgU2VudHJ5IEJyb3dzZXIgU0RLIENsaWVudC5cbiAqXG4gKiBAc2VlIEJyb3dzZXJPcHRpb25zIGZvciBkb2N1bWVudGF0aW9uIG9uIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEBzZWUgU2VudHJ5Q2xpZW50IGZvciB1c2FnZSBkb2N1bWVudGF0aW9uLlxuICovXG52YXIgQnJvd3NlckNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCcm93c2VyQ2xpZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQnJvd3NlciBTREsgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoaXMgU0RLLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJDbGllbnQob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgQnJvd3NlckJhY2tlbmQsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJvd3NlckNsaWVudC5wcm90b3R5cGUuX3ByZXBhcmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgc2NvcGUsIGhpbnQpIHtcbiAgICAgICAgZXZlbnQucGxhdGZvcm0gPSBldmVudC5wbGF0Zm9ybSB8fCAnamF2YXNjcmlwdCc7XG4gICAgICAgIGV2ZW50LnNkayA9IHRzbGliXzEuX19hc3NpZ24oe30sIGV2ZW50LnNkaywgeyBuYW1lOiBTREtfTkFNRSwgcGFja2FnZXM6IHRzbGliXzEuX19zcHJlYWQoKChldmVudC5zZGsgJiYgZXZlbnQuc2RrLnBhY2thZ2VzKSB8fCBbXSksIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICducG06QHNlbnRyeS9icm93c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pLCB2ZXJzaW9uOiBTREtfVkVSU0lPTiB9KTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3ByZXBhcmVFdmVudC5jYWxsKHRoaXMsIGV2ZW50LCBzY29wZSwgaGludCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IGEgcmVwb3J0IGRpYWxvZyB0byB0aGUgdXNlciB0byBzZW5kIGZlZWRiYWNrIHRvIGEgc3BlY2lmaWMgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBTZXQgaW5kaXZpZHVhbCBvcHRpb25zIGZvciB0aGUgZGlhbG9nXG4gICAgICovXG4gICAgQnJvd3NlckNsaWVudC5wcm90b3R5cGUuc2hvd1JlcG9ydERpYWxvZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIC8vIGRvZXNuJ3Qgd29yayB3aXRob3V0IGEgZG9jdW1lbnQgKFJlYWN0IE5hdGl2ZSlcbiAgICAgICAgdmFyIGRvY3VtZW50ID0gZ2V0R2xvYmFsT2JqZWN0KCkuZG9jdW1lbnQ7XG4gICAgICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1RyeWluZyB0byBjYWxsIHNob3dSZXBvcnREaWFsb2cgd2l0aCBTZW50cnkgQ2xpZW50IGlzIGRpc2FibGVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRzbiA9IG9wdGlvbnMuZHNuIHx8IHRoaXMuZ2V0RHNuKCk7XG4gICAgICAgIGlmICghb3B0aW9ucy5ldmVudElkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ01pc3NpbmcgYGV2ZW50SWRgIG9wdGlvbiBpbiBzaG93UmVwb3J0RGlhbG9nIGNhbGwnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRzbikge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdNaXNzaW5nIGBEc25gIG9wdGlvbiBpbiBzaG93UmVwb3J0RGlhbG9nIGNhbGwnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5zcmMgPSBuZXcgQVBJKGRzbikuZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQob3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLm9uTG9hZCkge1xuICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IG9wdGlvbnMub25Mb2FkO1xuICAgICAgICB9XG4gICAgICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfTtcbiAgICByZXR1cm4gQnJvd3NlckNsaWVudDtcbn0oQmFzZUNsaWVudCkpO1xuZXhwb3J0IHsgQnJvd3NlckNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcCIsImV4cG9ydCB2YXIgU0RLX05BTUUgPSAnc2VudHJ5LmphdmFzY3JpcHQuYnJvd3Nlcic7XG5leHBvcnQgdmFyIFNES19WRVJTSU9OID0gJzUuMTEuMSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuLyoqXG4gKiBUaGlzIGNhbGxzIGEgZnVuY3Rpb24gb24gdGhlIGN1cnJlbnQgaHViLlxuICogQHBhcmFtIG1ldGhvZCBmdW5jdGlvbiB0byBjYWxsIG9uIGh1Yi5cbiAqIEBwYXJhbSBhcmdzIHRvIHBhc3MgdG8gZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhbGxPbkh1YihtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgaWYgKGh1YiAmJiBodWJbbWV0aG9kXSkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuICAgICAgICByZXR1cm4gaHViW21ldGhvZF0uYXBwbHkoaHViLCB0c2xpYl8xLl9fc3ByZWFkKGFyZ3MpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gaHViIGRlZmluZWQgb3IgXCIgKyBtZXRob2QgKyBcIiB3YXMgbm90IGZvdW5kIG9uIHRoZSBodWIsIHBsZWFzZSBvcGVuIGEgYnVnIHJlcG9ydC5cIik7XG59XG4vKipcbiAqIENhcHR1cmVzIGFuIGV4Y2VwdGlvbiBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBleGNlcHRpb24gQW4gZXhjZXB0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBldmVudElkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uO1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VudHJ5IHN5bnRoZXRpY0V4Y2VwdGlvbicpO1xuICAgIH1cbiAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGxPbkh1YignY2FwdHVyZUV4Y2VwdGlvbicsIGV4Y2VwdGlvbiwge1xuICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogZXhjZXB0aW9uLFxuICAgICAgICBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICB9KTtcbn1cbi8qKlxuICogQ2FwdHVyZXMgYSBtZXNzYWdlIGV2ZW50IGFuZCBzZW5kcyBpdCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc2VuZCB0byBTZW50cnkuXG4gKiBAcGFyYW0gbGV2ZWwgRGVmaW5lIHRoZSBsZXZlbCBvZiB0aGUgbWVzc2FnZS5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZXZlbnRJZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGxldmVsKSB7XG4gICAgdmFyIHN5bnRoZXRpY0V4Y2VwdGlvbjtcbiAgICB0cnkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgc3ludGhldGljRXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlTWVzc2FnZScsIG1lc3NhZ2UsIGxldmVsLCB7XG4gICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBtZXNzYWdlLFxuICAgICAgICBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICB9KTtcbn1cbi8qKlxuICogQ2FwdHVyZXMgYSBtYW51YWxseSBjcmVhdGVkIGV2ZW50IGFuZCBzZW5kcyBpdCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kIHRvIFNlbnRyeS5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZXZlbnRJZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFdmVudChldmVudCkge1xuICAgIHJldHVybiBjYWxsT25IdWIoJ2NhcHR1cmVFdmVudCcsIGV2ZW50KTtcbn1cbi8qKlxuICogQ2FsbGJhY2sgdG8gc2V0IGNvbnRleHQgaW5mb3JtYXRpb24gb250byB0aGUgc2NvcGUuXG4gKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBTY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZVNjb3BlKGNhbGxiYWNrKSB7XG4gICAgY2FsbE9uSHViKCdjb25maWd1cmVTY29wZScsIGNhbGxiYWNrKTtcbn1cbi8qKlxuICogUmVjb3JkcyBhIG5ldyBicmVhZGNydW1iIHdoaWNoIHdpbGwgYmUgYXR0YWNoZWQgdG8gZnV0dXJlIGV2ZW50cy5cbiAqXG4gKiBCcmVhZGNydW1icyB3aWxsIGJlIGFkZGVkIHRvIHN1YnNlcXVlbnQgZXZlbnRzIHRvIHByb3ZpZGUgbW9yZSBjb250ZXh0IG9uXG4gKiB1c2VyJ3MgYWN0aW9ucyBwcmlvciB0byBhbiBlcnJvciBvciBjcmFzaC5cbiAqXG4gKiBAcGFyYW0gYnJlYWRjcnVtYiBUaGUgYnJlYWRjcnVtYiB0byByZWNvcmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIpIHtcbiAgICBjYWxsT25IdWIoJ2FkZEJyZWFkY3J1bWInLCBicmVhZGNydW1iKTtcbn1cbi8qKlxuICogU2V0cyBjb250ZXh0IGRhdGEgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqIEBwYXJhbSBuYW1lIG9mIHRoZSBjb250ZXh0XG4gKiBAcGFyYW0gY29udGV4dCBBbnkga2luZCBvZiBkYXRhLiBUaGlzIGRhdGEgd2lsbCBiZSBub3JtYWlsemVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dChuYW1lLCBjb250ZXh0KSB7XG4gICAgY2FsbE9uSHViKCdzZXRDb250ZXh0JywgbmFtZSwgY29udGV4dCk7XG59XG4vKipcbiAqIFNldCBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIG1lcmdlZCBzZW50IGFzIGV4dHJhIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gZXh0cmFzIEV4dHJhcyBvYmplY3QgdG8gbWVyZ2UgaW50byBjdXJyZW50IGNvbnRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFeHRyYXMoZXh0cmFzKSB7XG4gICAgY2FsbE9uSHViKCdzZXRFeHRyYXMnLCBleHRyYXMpO1xufVxuLyoqXG4gKiBTZXQgYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBtZXJnZWQgc2VudCBhcyB0YWdzIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gdGFncyBUYWdzIGNvbnRleHQgb2JqZWN0IHRvIG1lcmdlIGludG8gY3VycmVudCBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VGFncyh0YWdzKSB7XG4gICAgY2FsbE9uSHViKCdzZXRUYWdzJywgdGFncyk7XG59XG4vKipcbiAqIFNldCBrZXk6dmFsdWUgdGhhdCB3aWxsIGJlIHNlbnQgYXMgZXh0cmEgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAqIEBwYXJhbSBrZXkgU3RyaW5nIG9mIGV4dHJhXG4gKiBAcGFyYW0gZXh0cmEgQW55IGtpbmQgb2YgZGF0YS4gVGhpcyBkYXRhIHdpbGwgYmUgbm9ybWFpbHplZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEV4dHJhKGtleSwgZXh0cmEpIHtcbiAgICBjYWxsT25IdWIoJ3NldEV4dHJhJywga2V5LCBleHRyYSk7XG59XG4vKipcbiAqIFNldCBrZXk6dmFsdWUgdGhhdCB3aWxsIGJlIHNlbnQgYXMgdGFncyBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICogQHBhcmFtIGtleSBTdHJpbmcga2V5IG9mIHRhZ1xuICogQHBhcmFtIHZhbHVlIFN0cmluZyB2YWx1ZSBvZiB0YWdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRhZyhrZXksIHZhbHVlKSB7XG4gICAgY2FsbE9uSHViKCdzZXRUYWcnLCBrZXksIHZhbHVlKTtcbn1cbi8qKlxuICogVXBkYXRlcyB1c2VyIGNvbnRleHQgaW5mb3JtYXRpb24gZm9yIGZ1dHVyZSBldmVudHMuXG4gKlxuICogQHBhcmFtIHVzZXIgVXNlciBjb250ZXh0IG9iamVjdCB0byBiZSBzZXQgaW4gdGhlIGN1cnJlbnQgY29udGV4dC4gUGFzcyBgbnVsbGAgdG8gdW5zZXQgdGhlIHVzZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRVc2VyKHVzZXIpIHtcbiAgICBjYWxsT25IdWIoJ3NldFVzZXInLCB1c2VyKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBzY29wZSB3aXRoIGFuZCBleGVjdXRlcyB0aGUgZ2l2ZW4gb3BlcmF0aW9uIHdpdGhpbi5cbiAqIFRoZSBzY29wZSBpcyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgb25jZSB0aGUgb3BlcmF0aW9uXG4gKiBmaW5pc2hlcyBvciB0aHJvd3MuXG4gKlxuICogVGhpcyBpcyBlc3NlbnRpYWxseSBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvcjpcbiAqXG4gKiAgICAgcHVzaFNjb3BlKCk7XG4gKiAgICAgY2FsbGJhY2soKTtcbiAqICAgICBwb3BTY29wZSgpO1xuICpcbiAqIEBwYXJhbSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZW5jbG9zZWQgaW50byBwdXNoL3BvcFNjb3BlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aFNjb3BlKGNhbGxiYWNrKSB7XG4gICAgY2FsbE9uSHViKCd3aXRoU2NvcGUnLCBjYWxsYmFjayk7XG59XG4vKipcbiAqIENhbGxzIGEgZnVuY3Rpb24gb24gdGhlIGxhdGVzdCBjbGllbnQuIFVzZSB0aGlzIHdpdGggY2F1dGlvbiwgaXQncyBtZWFudCBhc1xuICogaW4gXCJpbnRlcm5hbFwiIGhlbHBlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGV4cG9zZSBldmVyeSBwb3NzaWJsZSBmdW5jdGlvbiBpblxuICogdGhlIHNoaW0uIEl0IGlzIG5vdCBndWFyYW50ZWVkIHRoYXQgdGhlIGNsaWVudCBhY3R1YWxseSBpbXBsZW1lbnRzIHRoZVxuICogZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIG1ldGhvZCBUaGUgbWV0aG9kIHRvIGNhbGwgb24gdGhlIGNsaWVudC9jbGllbnQuXG4gKiBAcGFyYW0gYXJncyBBcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgY2xpZW50L2ZvbnRlbmQuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2FsbE9uQ2xpZW50KG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgY2FsbE9uSHViLmFwcGx5KHZvaWQgMCwgdHNsaWJfMS5fX3NwcmVhZChbJ19pbnZva2VDbGllbnQnLCBtZXRob2RdLCBhcmdzKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgY2FwdHVyZUV4Y2VwdGlvbiwgd2l0aFNjb3BlIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSwgYWRkRXhjZXB0aW9uVHlwZVZhbHVlLCBub3JtYWxpemUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbnZhciBpZ25vcmVPbkVycm9yID0gMDtcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkSWdub3JlT25FcnJvcigpIHtcbiAgICByZXR1cm4gaWdub3JlT25FcnJvciA+IDA7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlnbm9yZU5leHRPbkVycm9yKCkge1xuICAgIC8vIG9uZXJyb3Igc2hvdWxkIHRyaWdnZXIgYmVmb3JlIHNldFRpbWVvdXRcbiAgICBpZ25vcmVPbkVycm9yICs9IDE7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlnbm9yZU9uRXJyb3IgLT0gMTtcbiAgICB9KTtcbn1cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGdpdmVuIGZ1bmN0aW9uIGFuZCBzZW5kcyBhbiBldmVudCB0byBTZW50cnkgZXZlcnkgdGltZSB0aGVcbiAqIGZ1bmN0aW9uIHRocm93cyBhbiBleGNlcHRpb24uXG4gKlxuICogQHBhcmFtIGZuIEEgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEByZXR1cm5zIFRoZSB3cmFwcGVkIGZ1bmN0aW9uLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcChmbiwgb3B0aW9ucywgYmVmb3JlKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyBXZSBkb24ndCB3YW5uYSB3cmFwIGl0IHR3aWNlXG4gICAgICAgIGlmIChmbi5fX3NlbnRyeV9fKSB7XG4gICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhpcyBoYXMgYWxyZWFkeSBiZWVuIHdyYXBwZWQgaW4gdGhlIHBhc3QsIHJldHVybiB0aGF0IHdyYXBwZWQgZnVuY3Rpb25cbiAgICAgICAgaWYgKGZuLl9fc2VudHJ5X3dyYXBwZWRfXykge1xuICAgICAgICAgICAgcmV0dXJuIGZuLl9fc2VudHJ5X3dyYXBwZWRfXztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBKdXN0IGFjY2Vzc2luZyBjdXN0b20gcHJvcHMgaW4gc29tZSBTZWxlbml1bSBlbnZpcm9ubWVudHNcbiAgICAgICAgLy8gY2FuIGNhdXNlIGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGV4Y2VwdGlvbiAoc2VlIHJhdmVuLWpzIzQ5NSkuXG4gICAgICAgIC8vIEJhaWwgb24gd3JhcHBpbmcgYW5kIHJldHVybiB0aGUgZnVuY3Rpb24gYXMtaXMgKGRlZmVycyB0byB3aW5kb3cub25lcnJvcikuXG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgdmFyIHNlbnRyeVdyYXBwZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6bm8tdW5zYWZlLWFueVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC10eXBlLXByZWRpY2F0ZXNcbiAgICAgICAgICAgIGlmIChiZWZvcmUgJiYgdHlwZW9mIGJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGJlZm9yZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdyYXBwZWRBcmd1bWVudHMgPSBhcmdzLm1hcChmdW5jdGlvbiAoYXJnKSB7IHJldHVybiB3cmFwKGFyZywgb3B0aW9ucyk7IH0pO1xuICAgICAgICAgICAgaWYgKGZuLmhhbmRsZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBpbnZva2UgdXNlci1sYW5kIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgLy8gTk9URTogSWYgeW91IGFyZSBhIFNlbnRyeSB1c2VyLCBhbmQgeW91IGFyZSBzZWVpbmcgdGhpcyBzdGFjayBmcmFtZSwgaXRcbiAgICAgICAgICAgICAgICAvLyAgICAgICBtZWFucyB0aGUgc2VudHJ5LmphdmFzY3JpcHQgU0RLIGNhdWdodCBhbiBlcnJvciBpbnZva2luZyB5b3VyIGFwcGxpY2F0aW9uIGNvZGUuIFRoaXNcbiAgICAgICAgICAgICAgICAvLyAgICAgICBpcyBleHBlY3RlZCBiZWhhdmlvciBhbmQgTk9UIGluZGljYXRpdmUgb2YgYSBidWcgd2l0aCBzZW50cnkuamF2YXNjcmlwdC5cbiAgICAgICAgICAgICAgICByZXR1cm4gZm4uaGFuZGxlRXZlbnQuYXBwbHkodGhpcywgd3JhcHBlZEFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGludm9rZSB1c2VyLWxhbmQgZnVuY3Rpb25cbiAgICAgICAgICAgIC8vIE5PVEU6IElmIHlvdSBhcmUgYSBTZW50cnkgdXNlciwgYW5kIHlvdSBhcmUgc2VlaW5nIHRoaXMgc3RhY2sgZnJhbWUsIGl0XG4gICAgICAgICAgICAvLyAgICAgICBtZWFucyB0aGUgc2VudHJ5LmphdmFzY3JpcHQgU0RLIGNhdWdodCBhbiBlcnJvciBpbnZva2luZyB5b3VyIGFwcGxpY2F0aW9uIGNvZGUuIFRoaXNcbiAgICAgICAgICAgIC8vICAgICAgIGlzIGV4cGVjdGVkIGJlaGF2aW9yIGFuZCBOT1QgaW5kaWNhdGl2ZSBvZiBhIGJ1ZyB3aXRoIHNlbnRyeS5qYXZhc2NyaXB0LlxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIHdyYXBwZWRBcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpuby11bnNhZmUtYW55XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBpZ25vcmVOZXh0T25FcnJvcigpO1xuICAgICAgICAgICAgd2l0aFNjb3BlKGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmFkZEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkRXZlbnQgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1lY2hhbmlzbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXhjZXB0aW9uVHlwZVZhbHVlKHByb2Nlc3NlZEV2ZW50LCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20ocHJvY2Vzc2VkRXZlbnQsIG9wdGlvbnMubWVjaGFuaXNtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWRFdmVudC5leHRyYSA9IHRzbGliXzEuX19hc3NpZ24oe30sIHByb2Nlc3NlZEV2ZW50LmV4dHJhLCB7IGFyZ3VtZW50czogbm9ybWFsaXplKGFyZ3MsIDMpIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc2VkRXZlbnQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUV4Y2VwdGlvbihleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBBY2Nlc3Npbmcgc29tZSBvYmplY3RzIG1heSB0aHJvd1xuICAgIC8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMTE2OFxuICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGZuKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZuLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBzZW50cnlXcmFwcGVkW3Byb3BlcnR5XSA9IGZuW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7IH0gLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1lbXB0eVxuICAgIGZuLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZSB8fCB7fTtcbiAgICBzZW50cnlXcmFwcGVkLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdfX3NlbnRyeV93cmFwcGVkX18nLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2VudHJ5V3JhcHBlZCxcbiAgICB9KTtcbiAgICAvLyBTaWduYWwgdGhhdCB0aGlzIGZ1bmN0aW9uIGhhcyBiZWVuIHdyYXBwZWQvZmlsbGVkIGFscmVhZHlcbiAgICAvLyBmb3IgYm90aCBkZWJ1Z2dpbmcgYW5kIHRvIHByZXZlbnQgaXQgdG8gYmVpbmcgd3JhcHBlZC9maWxsZWQgdHdpY2VcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzZW50cnlXcmFwcGVkLCB7XG4gICAgICAgIF9fc2VudHJ5X186IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIF9fc2VudHJ5X29yaWdpbmFsX186IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGZuLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgZnVuY3Rpb24gbmFtZSAobm90IGFsbCBicm93c2VycyBhbGxvdyB0aGF0KVxuICAgIHRyeSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzZW50cnlXcmFwcGVkLCAnbmFtZScpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZW50cnlXcmFwcGVkLCAnbmFtZScsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLm5hbWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgLypuby1lbXB0eSovXG4gICAgfVxuICAgIHJldHVybiBzZW50cnlXcmFwcGVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJpbXBvcnQgeyBmaWxsLCBnZXRGdW5jdGlvbk5hbWUsIGdldEdsb2JhbE9iamVjdCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuLyoqIFdyYXAgdGltZXIgZnVuY3Rpb25zIGFuZCBldmVudCB0YXJnZXRzIHRvIGNhdGNoIGVycm9ycyBhbmQgcHJvdmlkZSBiZXR0ZXIgbWV0YSBkYXRhICovXG52YXIgVHJ5Q2F0Y2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJ5Q2F0Y2goKSB7XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9pZ25vcmVPbkVycm9yID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBUcnlDYXRjaC5pZDtcbiAgICB9XG4gICAgLyoqIEpTRG9jICovXG4gICAgVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwVGltZUZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3JpZ2luYWxDYWxsYmFjayA9IGFyZ3NbMF07XG4gICAgICAgICAgICBhcmdzWzBdID0gd3JhcChvcmlnaW5hbENhbGxiYWNrLCB7XG4gICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZnVuY3Rpb246IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCkgfSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFRyeUNhdGNoLnByb3RvdHlwZS5fd3JhcFJBRiA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwod3JhcChjYWxsYmFjaywge1xuICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbjogJ3JlcXVlc3RBbmltYXRpb25GcmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBnZXRGdW5jdGlvbk5hbWUob3JpZ2luYWwpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFRyeUNhdGNoLnByb3RvdHlwZS5fd3JhcEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgICAgIHZhciBwcm90byA9IGdsb2JhbFt0YXJnZXRdICYmIGdsb2JhbFt0YXJnZXRdLnByb3RvdHlwZTtcbiAgICAgICAgaWYgKCFwcm90byB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkgfHwgIXByb3RvLmhhc093blByb3BlcnR5KCdhZGRFdmVudExpc3RlbmVyJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmaWxsKHByb3RvLCAnYWRkRXZlbnRMaXN0ZW5lcicsIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudE5hbWUsIGZuLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuYm91bmQtbWV0aG9kIHN0cmljdC10eXBlLXByZWRpY2F0ZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbi5oYW5kbGVFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm4uaGFuZGxlRXZlbnQgPSB3cmFwKGZuLmhhbmRsZUV2ZW50LmJpbmQoZm4pLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiAnaGFuZGxlRXZlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZ2V0RnVuY3Rpb25OYW1lKGZuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FuIHNvbWV0aW1lcyBnZXQgJ1Blcm1pc3Npb24gZGVuaWVkIHRvIGFjY2VzcyBwcm9wZXJ0eSBcImhhbmRsZSBFdmVudCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnROYW1lLCB3cmFwKGZuLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiAnYWRkRXZlbnRMaXN0ZW5lcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZ2V0RnVuY3Rpb25OYW1lKGZuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBmaWxsKHByb3RvLCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudE5hbWUsIGZuLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZm47XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayAmJiAoY2FsbGJhY2suX19zZW50cnlfd3JhcHBlZF9fIHx8IGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlLCBhY2Nlc3NpbmcgX19zZW50cnlfd3JhcHBlZF9fIHdpbGwgdGhyb3cgaW4gc29tZSBTZWxlbml1bSBlbnZpcm9ubWVudHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFRyeUNhdGNoLnByb3RvdHlwZS5fd3JhcFhIUiA9IGZ1bmN0aW9uIChvcmlnaW5hbFNlbmQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgeGhyID0gdGhpczsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby10aGlzLWFzc2lnbm1lbnRcbiAgICAgICAgICAgIHZhciB4bWxIdHRwUmVxdWVzdFByb3BzID0gWydvbmxvYWQnLCAnb25lcnJvcicsICdvbnByb2dyZXNzJ107XG4gICAgICAgICAgICB4bWxIdHRwUmVxdWVzdFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCBpbiBfdGhpcyAmJiB0eXBlb2YgX3RoaXNbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbChfdGhpcywgcHJvcCwgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcChvcmlnaW5hbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbjogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCdvbnJlYWR5c3RhdGVjaGFuZ2UnIGluIHhociAmJiB0eXBlb2YgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGZpbGwoeGhyLCAnb25yZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3cmFwT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246ICdvbnJlYWR5c3RhdGVjaGFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBnZXRGdW5jdGlvbk5hbWUob3JpZ2luYWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBJbnN0cnVtZW50IGludGVncmF0aW9uIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUgVHJ5Q2F0Y2gsIGdldCB0aGUgbmFtZSBvZiBvcmlnaW5hbCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWwuX19zZW50cnlfb3JpZ2luYWxfXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcE9wdGlvbnMubWVjaGFuaXNtLmRhdGEuaGFuZGxlciA9IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbC5fX3NlbnRyeV9vcmlnaW5hbF9fKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2Ugd3JhcCBkaXJlY3RseVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcChvcmlnaW5hbCwgd3JhcE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU2VuZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdyYXAgdGltZXIgZnVuY3Rpb25zIGFuZCBldmVudCB0YXJnZXRzIHRvIGNhdGNoIGVycm9yc1xuICAgICAqIGFuZCBwcm92aWRlIGJldHRlciBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICBUcnlDYXRjaC5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pZ25vcmVPbkVycm9yID0gdGhpcy5faWdub3JlT25FcnJvcjtcbiAgICAgICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgICAgICBmaWxsKGdsb2JhbCwgJ3NldFRpbWVvdXQnLCB0aGlzLl93cmFwVGltZUZ1bmN0aW9uLmJpbmQodGhpcykpO1xuICAgICAgICBmaWxsKGdsb2JhbCwgJ3NldEludGVydmFsJywgdGhpcy5fd3JhcFRpbWVGdW5jdGlvbi5iaW5kKHRoaXMpKTtcbiAgICAgICAgZmlsbChnbG9iYWwsICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnLCB0aGlzLl93cmFwUkFGLmJpbmQodGhpcykpO1xuICAgICAgICBpZiAoJ1hNTEh0dHBSZXF1ZXN0JyBpbiBnbG9iYWwpIHtcbiAgICAgICAgICAgIGZpbGwoWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLCAnc2VuZCcsIHRoaXMuX3dyYXBYSFIuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgW1xuICAgICAgICAgICAgJ0V2ZW50VGFyZ2V0JyxcbiAgICAgICAgICAgICdXaW5kb3cnLFxuICAgICAgICAgICAgJ05vZGUnLFxuICAgICAgICAgICAgJ0FwcGxpY2F0aW9uQ2FjaGUnLFxuICAgICAgICAgICAgJ0F1ZGlvVHJhY2tMaXN0JyxcbiAgICAgICAgICAgICdDaGFubmVsTWVyZ2VyTm9kZScsXG4gICAgICAgICAgICAnQ3J5cHRvT3BlcmF0aW9uJyxcbiAgICAgICAgICAgICdFdmVudFNvdXJjZScsXG4gICAgICAgICAgICAnRmlsZVJlYWRlcicsXG4gICAgICAgICAgICAnSFRNTFVua25vd25FbGVtZW50JyxcbiAgICAgICAgICAgICdJREJEYXRhYmFzZScsXG4gICAgICAgICAgICAnSURCUmVxdWVzdCcsXG4gICAgICAgICAgICAnSURCVHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgJ0tleU9wZXJhdGlvbicsXG4gICAgICAgICAgICAnTWVkaWFDb250cm9sbGVyJyxcbiAgICAgICAgICAgICdNZXNzYWdlUG9ydCcsXG4gICAgICAgICAgICAnTW9kYWxXaW5kb3cnLFxuICAgICAgICAgICAgJ05vdGlmaWNhdGlvbicsXG4gICAgICAgICAgICAnU1ZHRWxlbWVudEluc3RhbmNlJyxcbiAgICAgICAgICAgICdTY3JlZW4nLFxuICAgICAgICAgICAgJ1RleHRUcmFjaycsXG4gICAgICAgICAgICAnVGV4dFRyYWNrQ3VlJyxcbiAgICAgICAgICAgICdUZXh0VHJhY2tMaXN0JyxcbiAgICAgICAgICAgICdXZWJTb2NrZXQnLFxuICAgICAgICAgICAgJ1dlYlNvY2tldFdvcmtlcicsXG4gICAgICAgICAgICAnV29ya2VyJyxcbiAgICAgICAgICAgICdYTUxIdHRwUmVxdWVzdCcsXG4gICAgICAgICAgICAnWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldCcsXG4gICAgICAgICAgICAnWE1MSHR0cFJlcXVlc3RVcGxvYWQnLFxuICAgICAgICBdLmZvckVhY2godGhpcy5fd3JhcEV2ZW50VGFyZ2V0LmJpbmQodGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBUcnlDYXRjaC5pZCA9ICdUcnlDYXRjaCc7XG4gICAgcmV0dXJuIFRyeUNhdGNoO1xufSgpKTtcbmV4cG9ydCB7IFRyeUNhdGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cnljYXRjaC5qcy5tYXAiLCIvKiB0c2xpbnQ6ZGlzYWJsZTpvbmx5LWFycm93LWZ1bmN0aW9ucyBuby11bnNhZmUtYW55ICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNJbnN0YW5jZU9mLCBpc1N0cmluZyB9IGZyb20gJy4vaXMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25OYW1lLCBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL21pc2MnO1xuaW1wb3J0IHsgZmlsbCB9IGZyb20gJy4vb2JqZWN0JztcbmltcG9ydCB7IHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNOYXRpdmVGZXRjaCB9IGZyb20gJy4vc3VwcG9ydHMnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqXG4gKiBJbnN0cnVtZW50IG5hdGl2ZSBBUElzIHRvIGNhbGwgaGFuZGxlcnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYnJlYWRjcnVtYnMsIEFQTSBzcGFucyBldGMuXG4gKiAgLSBDb25zb2xlIEFQSVxuICogIC0gRmV0Y2ggQVBJXG4gKiAgLSBYSFIgQVBJXG4gKiAgLSBIaXN0b3J5IEFQSVxuICogIC0gRE9NIEFQSSAoY2xpY2svdHlwaW5nKVxuICovXG52YXIgaGFuZGxlcnMgPSB7fTtcbnZhciBpbnN0cnVtZW50ZWQgPSB7fTtcbi8qKiBJbnN0cnVtZW50cyBnaXZlbiBBUEkgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnQodHlwZSkge1xuICAgIGlmIChpbnN0cnVtZW50ZWRbdHlwZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnN0cnVtZW50ZWRbdHlwZV0gPSB0cnVlO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdjb25zb2xlJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRDb25zb2xlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG9tJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRET00oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd4aHInOlxuICAgICAgICAgICAgaW5zdHJ1bWVudFhIUigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ZldGNoJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRGZXRjaCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgICAgICAgaW5zdHJ1bWVudEhpc3RvcnkoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ3Vua25vd24gaW5zdHJ1bWVudGF0aW9uIHR5cGU6JywgdHlwZSk7XG4gICAgfVxufVxuLyoqXG4gKiBBZGQgaGFuZGxlciB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gZ2l2ZW4gdHlwZSBvZiBpbnN0cnVtZW50YXRpb24gdHJpZ2dlcnMuXG4gKiBVc2UgYXQgeW91ciBvd24gcmlzaywgdGhpcyBtaWdodCBicmVhayB3aXRob3V0IGNoYW5nZWxvZyBub3RpY2UsIG9ubHkgdXNlZCBpbnRlcm5hbGx5LlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC10eXBlLXByZWRpY2F0ZXNcbiAgICBpZiAoIWhhbmRsZXIgfHwgdHlwZW9mIGhhbmRsZXIudHlwZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGhhbmRsZXIuY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoYW5kbGVyc1toYW5kbGVyLnR5cGVdID0gaGFuZGxlcnNbaGFuZGxlci50eXBlXSB8fCBbXTtcbiAgICBoYW5kbGVyc1toYW5kbGVyLnR5cGVdLnB1c2goaGFuZGxlci5jYWxsYmFjayk7XG4gICAgaW5zdHJ1bWVudChoYW5kbGVyLnR5cGUpO1xufVxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiB0cmlnZ2VySGFuZGxlcnModHlwZSwgZGF0YSkge1xuICAgIHZhciBlXzEsIF9hO1xuICAgIGlmICghdHlwZSB8fCAhaGFuZGxlcnNbdHlwZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfYiA9IHRzbGliXzEuX192YWx1ZXMoaGFuZGxlcnNbdHlwZV0gfHwgW10pLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJFcnJvciB3aGlsZSB0cmlnZ2VyaW5nIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyLlxcblR5cGU6IFwiICsgdHlwZSArIFwiXFxuTmFtZTogXCIgKyBnZXRGdW5jdGlvbk5hbWUoaGFuZGxlcikgKyBcIlxcbkVycm9yOiBcIiArIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgIH1cbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudENvbnNvbGUoKSB7XG4gICAgaWYgKCEoJ2NvbnNvbGUnIGluIGdsb2JhbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvcicsICdsb2cnLCAnYXNzZXJ0J10uZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKCEobGV2ZWwgaW4gZ2xvYmFsLmNvbnNvbGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmlsbChnbG9iYWwuY29uc29sZSwgbGV2ZWwsIGZ1bmN0aW9uIChvcmlnaW5hbENvbnNvbGVMZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdjb25zb2xlJywgeyBhcmdzOiBhcmdzLCBsZXZlbDogbGV2ZWwgfSk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmYWlscyBmb3Igc29tZSBicm93c2Vycy4gOihcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxDb25zb2xlTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwob3JpZ2luYWxDb25zb2xlTGV2ZWwsIGdsb2JhbC5jb25zb2xlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudEZldGNoKCkge1xuICAgIGlmICghc3VwcG9ydHNOYXRpdmVGZXRjaCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmlsbChnbG9iYWwsICdmZXRjaCcsIGZ1bmN0aW9uIChvcmlnaW5hbEZldGNoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29tbW9uSGFuZGxlckRhdGEgPSB7XG4gICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgICAgICBmZXRjaERhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBnZXRGZXRjaE1ldGhvZChhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBnZXRGZXRjaFVybChhcmdzKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygnZmV0Y2gnLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBjb21tb25IYW5kbGVyRGF0YSkpO1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmdzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygnZmV0Y2gnLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBjb21tb25IYW5kbGVyRGF0YSwgeyBlbmRUaW1lc3RhbXA6IERhdGUubm93KCksIHJlc3BvbnNlOiByZXNwb25zZSB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdmZXRjaCcsIHRzbGliXzEuX19hc3NpZ24oe30sIGNvbW1vbkhhbmRsZXJEYXRhLCB7IGVuZFRpbWVzdGFtcDogRGF0ZS5ub3coKSwgZXJyb3I6IGVycm9yIH0pKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuLyoqIEV4dHJhY3QgYG1ldGhvZGAgZnJvbSBmZXRjaCBjYWxsIGFyZ3VtZW50cyAqL1xuZnVuY3Rpb24gZ2V0RmV0Y2hNZXRob2QoZmV0Y2hBcmdzKSB7XG4gICAgaWYgKGZldGNoQXJncyA9PT0gdm9pZCAwKSB7IGZldGNoQXJncyA9IFtdOyB9XG4gICAgaWYgKCdSZXF1ZXN0JyBpbiBnbG9iYWwgJiYgaXNJbnN0YW5jZU9mKGZldGNoQXJnc1swXSwgUmVxdWVzdCkgJiYgZmV0Y2hBcmdzWzBdLm1ldGhvZCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGZldGNoQXJnc1swXS5tZXRob2QpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIGlmIChmZXRjaEFyZ3NbMV0gJiYgZmV0Y2hBcmdzWzFdLm1ldGhvZCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGZldGNoQXJnc1sxXS5tZXRob2QpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiAnR0VUJztcbn1cbi8qKiBFeHRyYWN0IGB1cmxgIGZyb20gZmV0Y2ggY2FsbCBhcmd1bWVudHMgKi9cbmZ1bmN0aW9uIGdldEZldGNoVXJsKGZldGNoQXJncykge1xuICAgIGlmIChmZXRjaEFyZ3MgPT09IHZvaWQgMCkgeyBmZXRjaEFyZ3MgPSBbXTsgfVxuICAgIGlmICh0eXBlb2YgZmV0Y2hBcmdzWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZmV0Y2hBcmdzWzBdO1xuICAgIH1cbiAgICBpZiAoJ1JlcXVlc3QnIGluIGdsb2JhbCAmJiBpc0luc3RhbmNlT2YoZmV0Y2hBcmdzWzBdLCBSZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gZmV0Y2hBcmdzWzBdLnVybDtcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhmZXRjaEFyZ3NbMF0pO1xufVxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50WEhSKCkge1xuICAgIGlmICghKCdYTUxIdHRwUmVxdWVzdCcgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB4aHJwcm90byA9IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZTtcbiAgICBmaWxsKHhocnByb3RvLCAnb3BlbicsIGZ1bmN0aW9uIChvcmlnaW5hbE9wZW4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1cmwgPSBhcmdzWzFdO1xuICAgICAgICAgICAgdGhpcy5fX3NlbnRyeV94aHJfXyA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGlzU3RyaW5nKGFyZ3NbMF0pID8gYXJnc1swXS50b1VwcGVyQ2FzZSgpIDogYXJnc1swXSxcbiAgICAgICAgICAgICAgICB1cmw6IGFyZ3NbMV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gaWYgU2VudHJ5IGtleSBhcHBlYXJzIGluIFVSTCwgZG9uJ3QgY2FwdHVyZSBpdCBhcyBhIHJlcXVlc3RcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyh1cmwpICYmIHRoaXMuX19zZW50cnlfeGhyX18ubWV0aG9kID09PSAnUE9TVCcgJiYgdXJsLm1hdGNoKC9zZW50cnlfa2V5LykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fc2VudHJ5X293bl9yZXF1ZXN0X18gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsT3Blbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBmaWxsKHhocnByb3RvLCAnc2VuZCcsIGZ1bmN0aW9uIChvcmlnaW5hbFNlbmQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB4aHIgPSB0aGlzOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLXRoaXMtYXNzaWdubWVudFxuICAgICAgICAgICAgdmFyIGNvbW1vbkhhbmRsZXJEYXRhID0ge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCd4aHInLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBjb21tb25IYW5kbGVyRGF0YSkpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAaGlkZGVuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9ucmVhZHlzdGF0ZWNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0b3VjaGluZyBzdGF0dXNDb2RlIGluIHNvbWUgcGxhdGZvcm1zIHRocm93c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gZXhjZXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLl9fc2VudHJ5X3hocl9fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLl9fc2VudHJ5X3hocl9fLnN0YXR1c19jb2RlID0geGhyLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygneGhyJywgdHNsaWJfMS5fX2Fzc2lnbih7fSwgY29tbW9uSGFuZGxlckRhdGEsIHsgZW5kVGltZXN0YW1wOiBEYXRlLm5vdygpIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ29ucmVhZHlzdGF0ZWNoYW5nZScgaW4geGhyICYmIHR5cGVvZiB4aHIub25yZWFkeXN0YXRlY2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZmlsbCh4aHIsICdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWFkeVN0YXRlQXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeVN0YXRlQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHhociwgcmVhZHlTdGF0ZUFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgb25yZWFkeXN0YXRlY2hhbmdlIHdhc24ndCBhY3R1YWxseSBzZXQgYnkgdGhlIHBhZ2Ugb24gdGhpcyB4aHIsIHdlXG4gICAgICAgICAgICAgICAgLy8gYXJlIGZyZWUgdG8gc2V0IG91ciBvd24gYW5kIGNhcHR1cmUgdGhlIGJyZWFkY3J1bWJcbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gb25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFNlbmQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG52YXIgbGFzdEhyZWY7XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRIaXN0b3J5KCkge1xuICAgIGlmICghc3VwcG9ydHNIaXN0b3J5KCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgb2xkT25Qb3BTdGF0ZSA9IGdsb2JhbC5vbnBvcHN0YXRlO1xuICAgIGdsb2JhbC5vbnBvcHN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0byA9IGdsb2JhbC5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IFVSTCBzdGF0ZSwgYXMgd2UgYWx3YXlzIHJlY2VpdmUgb25seSB0aGUgdXBkYXRlZCBzdGF0ZVxuICAgICAgICB2YXIgZnJvbSA9IGxhc3RIcmVmO1xuICAgICAgICBsYXN0SHJlZiA9IHRvO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2hpc3RvcnknLCB7XG4gICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgdG86IHRvLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9sZE9uUG9wU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvbGRPblBvcFN0YXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGZ1bmN0aW9uIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKG9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdXJsID0gYXJncy5sZW5ndGggPiAyID8gYXJnc1syXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgICAgICAvLyBjb2VyY2UgdG8gc3RyaW5nICh0aGlzIGlzIHdoYXQgcHVzaFN0YXRlIGRvZXMpXG4gICAgICAgICAgICAgICAgdmFyIGZyb20gPSBsYXN0SHJlZjtcbiAgICAgICAgICAgICAgICB2YXIgdG8gPSBTdHJpbmcodXJsKTtcbiAgICAgICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IFVSTCBzdGF0ZSwgYXMgd2UgYWx3YXlzIHJlY2VpdmUgb25seSB0aGUgdXBkYXRlZCBzdGF0ZVxuICAgICAgICAgICAgICAgIGxhc3RIcmVmID0gdG87XG4gICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdoaXN0b3J5Jywge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgICAgICAgICB0bzogdG8sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZpbGwoZ2xvYmFsLmhpc3RvcnksICdwdXNoU3RhdGUnLCBoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbik7XG4gICAgZmlsbChnbG9iYWwuaGlzdG9yeSwgJ3JlcGxhY2VTdGF0ZScsIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKTtcbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudERPTSgpIHtcbiAgICBpZiAoISgnZG9jdW1lbnQnIGluIGdsb2JhbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDYXB0dXJlIGJyZWFkY3J1bWJzIGZyb20gYW55IGNsaWNrIHRoYXQgaXMgdW5oYW5kbGVkIC8gYnViYmxlZCB1cCBhbGwgdGhlIHdheVxuICAgIC8vIHRvIHRoZSBkb2N1bWVudC4gRG8gdGhpcyBiZWZvcmUgd2UgaW5zdHJ1bWVudCBhZGRFdmVudExpc3RlbmVyLlxuICAgIGdsb2JhbC5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRvbUV2ZW50SGFuZGxlcignY2xpY2snLCB0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpLCBmYWxzZSk7XG4gICAgZ2xvYmFsLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywga2V5cHJlc3NFdmVudEhhbmRsZXIodHJpZ2dlckhhbmRsZXJzLmJpbmQobnVsbCwgJ2RvbScpKSwgZmFsc2UpO1xuICAgIC8vIEFmdGVyIGhvb2tpbmcgaW50byBkb2N1bWVudCBidWJibGVkIHVwIGNsaWNrIGFuZCBrZXlwcmVzc2VzIGV2ZW50cywgd2UgYWxzbyBob29rIGludG8gdXNlciBoYW5kbGVkIGNsaWNrICYga2V5cHJlc3Nlcy5cbiAgICBbJ0V2ZW50VGFyZ2V0JywgJ05vZGUnXS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIHByb3RvID0gZ2xvYmFsW3RhcmdldF0gJiYgZ2xvYmFsW3RhcmdldF0ucHJvdG90eXBlO1xuICAgICAgICBpZiAoIXByb3RvIHx8ICFwcm90by5oYXNPd25Qcm9wZXJ0eSB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkoJ2FkZEV2ZW50TGlzdGVuZXInKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZpbGwocHJvdG8sICdhZGRFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm4gJiYgZm4uaGFuZGxlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbChmbiwgJ2hhbmRsZUV2ZW50JywgZnVuY3Rpb24gKGlubmVyT3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbUV2ZW50SGFuZGxlcignY2xpY2snLCB0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyT3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGwoZm4sICdoYW5kbGVFdmVudCcsIGZ1bmN0aW9uIChpbm5lck9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50SGFuZGxlcih0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyT3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb21FdmVudEhhbmRsZXIoJ2NsaWNrJywgdHJpZ2dlckhhbmRsZXJzLmJpbmQobnVsbCwgJ2RvbScpLCB0cnVlKSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAna2V5cHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50SGFuZGxlcih0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbGwocHJvdG8sICdyZW1vdmVFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBmbjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrICYmIChjYWxsYmFjay5fX3NlbnRyeV93cmFwcGVkX18gfHwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUsIGFjY2Vzc2luZyBfX3NlbnRyeV93cmFwcGVkX18gd2lsbCB0aHJvdyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxudmFyIGRlYm91bmNlRHVyYXRpb24gPSAxMDAwO1xudmFyIGRlYm91bmNlVGltZXIgPSAwO1xudmFyIGtleXByZXNzVGltZW91dDtcbnZhciBsYXN0Q2FwdHVyZWRFdmVudDtcbi8qKlxuICogV3JhcHMgYWRkRXZlbnRMaXN0ZW5lciB0byBjYXB0dXJlIFVJIGJyZWFkY3J1bWJzXG4gKiBAcGFyYW0gbmFtZSB0aGUgZXZlbnQgbmFtZSAoZS5nLiBcImNsaWNrXCIpXG4gKiBAcGFyYW0gaGFuZGxlciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkXG4gKiBAcGFyYW0gZGVib3VuY2UgZGVjaWRlcyB3aGV0aGVyIGl0IHNob3VsZCB3YWl0IHRpbGwgYW5vdGhlciBldmVudCBsb29wXG4gKiBAcmV0dXJucyB3cmFwcGVkIGJyZWFkY3J1bWIgZXZlbnRzIGhhbmRsZXJcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gZG9tRXZlbnRIYW5kbGVyKG5hbWUsIGhhbmRsZXIsIGRlYm91bmNlKSB7XG4gICAgaWYgKGRlYm91bmNlID09PSB2b2lkIDApIHsgZGVib3VuY2UgPSBmYWxzZTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gcmVzZXQga2V5cHJlc3MgdGltZW91dDsgZS5nLiB0cmlnZ2VyaW5nIGEgJ2NsaWNrJyBhZnRlclxuICAgICAgICAvLyBhICdrZXlwcmVzcycgd2lsbCByZXNldCB0aGUga2V5cHJlc3MgZGVib3VuY2Ugc28gdGhhdCBhIG5ld1xuICAgICAgICAvLyBzZXQgb2Yga2V5cHJlc3NlcyBjYW4gYmUgcmVjb3JkZWRcbiAgICAgICAga2V5cHJlc3NUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoaXMgaGFuZGxlciBtaWdodCB0cmlnZ2VyIG11bHRpcGxlIHRpbWVzIGZvciB0aGUgc2FtZVxuICAgICAgICAvLyBldmVudCAoZS5nLiBldmVudCBwcm9wYWdhdGlvbiB0aHJvdWdoIG5vZGUgYW5jZXN0b3JzKS4gSWdub3JlIGlmIHdlJ3ZlXG4gICAgICAgIC8vIGFscmVhZHkgY2FwdHVyZWQgdGhlIGV2ZW50LlxuICAgICAgICBpZiAoIWV2ZW50IHx8IGxhc3RDYXB0dXJlZEV2ZW50ID09PSBldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RDYXB0dXJlZEV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIGlmIChkZWJvdW5jZVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZGVib3VuY2VUaW1lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlYm91bmNlKSB7XG4gICAgICAgICAgICBkZWJvdW5jZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcih7IGV2ZW50OiBldmVudCwgbmFtZTogbmFtZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlcih7IGV2ZW50OiBldmVudCwgbmFtZTogbmFtZSB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIFdyYXBzIGFkZEV2ZW50TGlzdGVuZXIgdG8gY2FwdHVyZSBrZXlwcmVzcyBVSSBldmVudHNcbiAqIEBwYXJhbSBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWRcbiAqIEByZXR1cm5zIHdyYXBwZWQga2V5cHJlc3MgZXZlbnRzIGhhbmRsZXJcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24ga2V5cHJlc3NFdmVudEhhbmRsZXIoaGFuZGxlcikge1xuICAgIC8vIFRPRE86IGlmIHNvbWVob3cgdXNlciBzd2l0Y2hlcyBrZXlwcmVzcyB0YXJnZXQgYmVmb3JlXG4gICAgLy8gICAgICAgZGVib3VuY2UgdGltZW91dCBpcyB0cmlnZ2VyZWQsIHdlIHdpbGwgb25seSBjYXB0dXJlXG4gICAgLy8gICAgICAgYSBzaW5nbGUgYnJlYWRjcnVtYiBmcm9tIHRoZSBGSVJTVCB0YXJnZXQgKGFjY2VwdGFibGU/KVxuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8ganVzdCBhY2Nlc3NpbmcgZXZlbnQgcHJvcGVydGllcyBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgcmFyZSBjaXJjdW1zdGFuY2VzXG4gICAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvcmF2ZW4tanMvaXNzdWVzLzgzOFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YWdOYW1lID0gdGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lO1xuICAgICAgICAvLyBvbmx5IGNvbnNpZGVyIGtleXByZXNzIGV2ZW50cyBvbiBhY3R1YWwgaW5wdXQgZWxlbWVudHNcbiAgICAgICAgLy8gdGhpcyB3aWxsIGRpc3JlZ2FyZCBrZXlwcmVzc2VzIHRhcmdldGluZyBib2R5IChlLmcuIHRhYmJpbmdcbiAgICAgICAgLy8gdGhyb3VnaCBlbGVtZW50cywgaG90a2V5cywgZXRjKVxuICAgICAgICBpZiAoIXRhZ05hbWUgfHwgKHRhZ05hbWUgIT09ICdJTlBVVCcgJiYgdGFnTmFtZSAhPT0gJ1RFWFRBUkVBJyAmJiAhdGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlY29yZCBmaXJzdCBrZXlwcmVzcyBpbiBhIHNlcmllcywgYnV0IGlnbm9yZSBzdWJzZXF1ZW50XG4gICAgICAgIC8vIGtleXByZXNzZXMgdW50aWwgZGVib3VuY2UgY2xlYXJzXG4gICAgICAgIGlmICgha2V5cHJlc3NUaW1lb3V0KSB7XG4gICAgICAgICAgICBkb21FdmVudEhhbmRsZXIoJ2lucHV0JywgaGFuZGxlcikoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChrZXlwcmVzc1RpbWVvdXQpO1xuICAgICAgICBrZXlwcmVzc1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGtleXByZXNzVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSwgZGVib3VuY2VEdXJhdGlvbik7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFQSSwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBTZXZlcml0eSB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgZ2V0RXZlbnREZXNjcmlwdGlvbiwgZ2V0R2xvYmFsT2JqZWN0LCBodG1sVHJlZUFzU3RyaW5nLCBsb2dnZXIsIG5vcm1hbGl6ZSwgcGFyc2VVcmwsIHNhZmVKb2luLCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqXG4gKiBEZWZhdWx0IEJyZWFkY3J1bWJzIGluc3RydW1lbnRhdGlvbnNcbiAqIFRPRE86IERlcHJlY2F0ZWQgLSB3aXRoIHY2LCB0aGlzIHdpbGwgYmUgcmVuYW1lZCB0byBgSW5zdHJ1bWVudGBcbiAqL1xudmFyIEJyZWFkY3J1bWJzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgZnVuY3Rpb24gQnJlYWRjcnVtYnMob3B0aW9ucykge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IEJyZWFkY3J1bWJzLmlkO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gdHNsaWJfMS5fX2Fzc2lnbih7IGNvbnNvbGU6IHRydWUsIGRvbTogdHJ1ZSwgZmV0Y2g6IHRydWUsIGhpc3Rvcnk6IHRydWUsIHNlbnRyeTogdHJ1ZSwgeGhyOiB0cnVlIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGJyZWFkY3J1bWJzIGZyb20gY29uc29sZSBBUEkgY2FsbHNcbiAgICAgKi9cbiAgICBCcmVhZGNydW1icy5wcm90b3R5cGUuX2NvbnNvbGVCcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIHZhciBicmVhZGNydW1iID0ge1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdjb25zb2xlJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IG5vcm1hbGl6ZShoYW5kbGVyRGF0YS5hcmdzLCAzKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogJ2NvbnNvbGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxldmVsOiBTZXZlcml0eS5mcm9tU3RyaW5nKGhhbmRsZXJEYXRhLmxldmVsKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHNhZmVKb2luKGhhbmRsZXJEYXRhLmFyZ3MsICcgJyksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5sZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyRGF0YS5hcmdzWzBdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWIubWVzc2FnZSA9IFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIgKyAoc2FmZUpvaW4oaGFuZGxlckRhdGEuYXJncy5zbGljZSgxKSwgJyAnKSB8fCAnY29uc29sZS5hc3NlcnQnKTtcbiAgICAgICAgICAgICAgICBicmVhZGNydW1iLmRhdGEuZXh0cmEuYXJndW1lbnRzID0gbm9ybWFsaXplKGhhbmRsZXJEYXRhLmFyZ3Muc2xpY2UoMSksIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgY2FwdHVyZSBhIGJyZWFkY3J1bWIgZm9yIHBhc3NlZCBhc3NlcnRpb25zXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldEN1cnJlbnRIdWIoKS5hZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIHtcbiAgICAgICAgICAgIGlucHV0OiBoYW5kbGVyRGF0YS5hcmdzLFxuICAgICAgICAgICAgbGV2ZWw6IGhhbmRsZXJEYXRhLmxldmVsLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBET00gQVBJIGNhbGxzXG4gICAgICovXG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9kb21CcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgIC8vIEFjY2Vzc2luZyBldmVudC50YXJnZXQgY2FuIHRocm93IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhcmdldCA9IGhhbmRsZXJEYXRhLmV2ZW50LnRhcmdldFxuICAgICAgICAgICAgICAgID8gaHRtbFRyZWVBc1N0cmluZyhoYW5kbGVyRGF0YS5ldmVudC50YXJnZXQpXG4gICAgICAgICAgICAgICAgOiBodG1sVHJlZUFzU3RyaW5nKGhhbmRsZXJEYXRhLmV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gJzx1bmtub3duPic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ1aS5cIiArIGhhbmRsZXJEYXRhLm5hbWUsXG4gICAgICAgICAgICBtZXNzYWdlOiB0YXJnZXQsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgIG5hbWU6IGhhbmRsZXJEYXRhLm5hbWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBicmVhZGNydW1icyBmcm9tIFhIUiBBUEkgY2FsbHNcbiAgICAgKi9cbiAgICBCcmVhZGNydW1icy5wcm90b3R5cGUuX3hockJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoaGFuZGxlckRhdGEpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJEYXRhLmVuZFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgLy8gV2Ugb25seSBjYXB0dXJlIGNvbXBsZXRlLCBub24tc2VudHJ5IHJlcXVlc3RzXG4gICAgICAgICAgICBpZiAoaGFuZGxlckRhdGEueGhyLl9fc2VudHJ5X293bl9yZXF1ZXN0X18pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICd4aHInLFxuICAgICAgICAgICAgICAgIGRhdGE6IGhhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV94aHJfXyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgeGhyOiBoYW5kbGVyRGF0YS54aHIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBvbmx5IGNhcHR1cmUgaXNzdWVkIHNlbnRyeSByZXF1ZXN0c1xuICAgICAgICBpZiAoaGFuZGxlckRhdGEueGhyLl9fc2VudHJ5X293bl9yZXF1ZXN0X18pIHtcbiAgICAgICAgICAgIGFkZFNlbnRyeUJyZWFkY3J1bWIoaGFuZGxlckRhdGEuYXJnc1swXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBmZXRjaCBBUEkgY2FsbHNcbiAgICAgKi9cbiAgICBCcmVhZGNydW1icy5wcm90b3R5cGUuX2ZldGNoQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICAvLyBXZSBvbmx5IGNhcHR1cmUgY29tcGxldGUgZmV0Y2ggcmVxdWVzdHNcbiAgICAgICAgaWYgKCFoYW5kbGVyRGF0YS5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgICAgICB2YXIgZHNuID0gY2xpZW50ICYmIGNsaWVudC5nZXREc24oKTtcbiAgICAgICAgaWYgKGRzbikge1xuICAgICAgICAgICAgdmFyIGZpbHRlclVybCA9IG5ldyBBUEkoZHNuKS5nZXRTdG9yZUVuZHBvaW50KCk7XG4gICAgICAgICAgICAvLyBpZiBTZW50cnkga2V5IGFwcGVhcnMgaW4gVVJMLCBkb24ndCBjYXB0dXJlIGl0IGFzIGEgcmVxdWVzdFxuICAgICAgICAgICAgLy8gYnV0IHJhdGhlciBhcyBvdXIgb3duICdzZW50cnknIHR5cGUgYnJlYWRjcnVtYlxuICAgICAgICAgICAgaWYgKGZpbHRlclVybCAmJlxuICAgICAgICAgICAgICAgIGhhbmRsZXJEYXRhLmZldGNoRGF0YS51cmwuaW5kZXhPZihmaWx0ZXJVcmwpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgIGhhbmRsZXJEYXRhLmZldGNoRGF0YS5tZXRob2QgPT09ICdQT1NUJyAmJlxuICAgICAgICAgICAgICAgIGhhbmRsZXJEYXRhLmFyZ3NbMV0gJiZcbiAgICAgICAgICAgICAgICBoYW5kbGVyRGF0YS5hcmdzWzFdLmJvZHkpIHtcbiAgICAgICAgICAgICAgICBhZGRTZW50cnlCcmVhZGNydW1iKGhhbmRsZXJEYXRhLmFyZ3NbMV0uYm9keSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5lcnJvcikge1xuICAgICAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnZmV0Y2gnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRzbGliXzEuX19hc3NpZ24oe30sIGhhbmRsZXJEYXRhLmZldGNoRGF0YSwgeyBzdGF0dXNfY29kZTogaGFuZGxlckRhdGEucmVzcG9uc2Uuc3RhdHVzIH0pLFxuICAgICAgICAgICAgICAgIGxldmVsOiBTZXZlcml0eS5FcnJvcixcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGF0YTogaGFuZGxlckRhdGEuZXJyb3IsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGhhbmRsZXJEYXRhLmFyZ3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldEN1cnJlbnRIdWIoKS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogJ2ZldGNoJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0c2xpYl8xLl9fYXNzaWduKHt9LCBoYW5kbGVyRGF0YS5mZXRjaERhdGEsIHsgc3RhdHVzX2NvZGU6IGhhbmRsZXJEYXRhLnJlc3BvbnNlLnN0YXR1cyB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IGhhbmRsZXJEYXRhLmFyZ3MsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IGhhbmRsZXJEYXRhLnJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBoaXN0b3J5IEFQSSBjYWxsc1xuICAgICAqL1xuICAgIEJyZWFkY3J1bWJzLnByb3RvdHlwZS5faGlzdG9yeUJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoaGFuZGxlckRhdGEpIHtcbiAgICAgICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgICAgICB2YXIgZnJvbSA9IGhhbmRsZXJEYXRhLmZyb207XG4gICAgICAgIHZhciB0byA9IGhhbmRsZXJEYXRhLnRvO1xuICAgICAgICB2YXIgcGFyc2VkTG9jID0gcGFyc2VVcmwoZ2xvYmFsLmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICB2YXIgcGFyc2VkRnJvbSA9IHBhcnNlVXJsKGZyb20pO1xuICAgICAgICB2YXIgcGFyc2VkVG8gPSBwYXJzZVVybCh0byk7XG4gICAgICAgIC8vIEluaXRpYWwgcHVzaFN0YXRlIGRvZXNuJ3QgcHJvdmlkZSBgZnJvbWAgaW5mb3JtYXRpb25cbiAgICAgICAgaWYgKCFwYXJzZWRGcm9tLnBhdGgpIHtcbiAgICAgICAgICAgIHBhcnNlZEZyb20gPSBwYXJzZWRMb2M7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNlIG9ubHkgdGhlIHBhdGggY29tcG9uZW50IG9mIHRoZSBVUkwgaWYgdGhlIFVSTCBtYXRjaGVzIHRoZSBjdXJyZW50XG4gICAgICAgIC8vIGRvY3VtZW50IChhbG1vc3QgYWxsIHRoZSB0aW1lIHdoZW4gdXNpbmcgcHVzaFN0YXRlKVxuICAgICAgICBpZiAocGFyc2VkTG9jLnByb3RvY29sID09PSBwYXJzZWRUby5wcm90b2NvbCAmJiBwYXJzZWRMb2MuaG9zdCA9PT0gcGFyc2VkVG8uaG9zdCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXBhcmFtZXRlci1yZWFzc2lnbm1lbnRcbiAgICAgICAgICAgIHRvID0gcGFyc2VkVG8ucmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZExvYy5wcm90b2NvbCA9PT0gcGFyc2VkRnJvbS5wcm90b2NvbCAmJiBwYXJzZWRMb2MuaG9zdCA9PT0gcGFyc2VkRnJvbS5ob3N0KSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tcGFyYW1ldGVyLXJlYXNzaWdubWVudFxuICAgICAgICAgICAgZnJvbSA9IHBhcnNlZEZyb20ucmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICduYXZpZ2F0aW9uJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgICAgIHRvOiB0byxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5zdHJ1bWVudCBicm93c2VyIGJ1aWx0LWlucyB3LyBicmVhZGNydW1iIGNhcHR1cmluZ1xuICAgICAqICAtIENvbnNvbGUgQVBJXG4gICAgICogIC0gRE9NIEFQSSAoY2xpY2svdHlwaW5nKVxuICAgICAqICAtIFhNTEh0dHBSZXF1ZXN0IEFQSVxuICAgICAqICAtIEZldGNoIEFQSVxuICAgICAqICAtIEhpc3RvcnkgQVBJXG4gICAgICovXG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY29uc29sZSkge1xuICAgICAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY29uc29sZUJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIHRzbGliXzEuX19zcHJlYWQoYXJncykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogJ2NvbnNvbGUnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuZG9tKSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9kb21CcmVhZGNydW1iLmFwcGx5KF90aGlzLCB0c2xpYl8xLl9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICdkb20nLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMueGhyKSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl94aHJCcmVhZGNydW1iLmFwcGx5KF90aGlzLCB0c2xpYl8xLl9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICd4aHInLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuZmV0Y2gpIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZldGNoQnJlYWRjcnVtYi5hcHBseShfdGhpcywgdHNsaWJfMS5fX3NwcmVhZChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZmV0Y2gnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGlzdG9yeSkge1xuICAgICAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faGlzdG9yeUJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIHRzbGliXzEuX19zcHJlYWQoYXJncykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogJ2hpc3RvcnknLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJlYWRjcnVtYnMuaWQgPSAnQnJlYWRjcnVtYnMnO1xuICAgIHJldHVybiBCcmVhZGNydW1icztcbn0oKSk7XG5leHBvcnQgeyBCcmVhZGNydW1icyB9O1xuLyoqXG4gKiBDcmVhdGUgYSBicmVhZGNydW1iIG9mIGBzZW50cnlgIGZyb20gdGhlIGV2ZW50cyB0aGVtc2VsdmVzXG4gKi9cbmZ1bmN0aW9uIGFkZFNlbnRyeUJyZWFkY3J1bWIoc2VyaWFsaXplZERhdGEpIHtcbiAgICAvLyBUaGVyZSdzIGFsd2F5cyBzb21ldGhpbmcgdGhhdCBjYW4gZ28gd3Jvbmcgd2l0aCBkZXNlcmlhbGl6YXRpb24uLi5cbiAgICB0cnkge1xuICAgICAgICB2YXIgZXZlbnRfMSA9IEpTT04ucGFyc2Uoc2VyaWFsaXplZERhdGEpO1xuICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ3NlbnRyeScsXG4gICAgICAgICAgICBldmVudF9pZDogZXZlbnRfMS5ldmVudF9pZCxcbiAgICAgICAgICAgIGxldmVsOiBldmVudF8xLmxldmVsIHx8IFNldmVyaXR5LmZyb21TdHJpbmcoJ2Vycm9yJyksXG4gICAgICAgICAgICBtZXNzYWdlOiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50XzEpLFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBldmVudDogZXZlbnRfMSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciB3aGlsZSBhZGRpbmcgc2VudHJ5IHR5cGUgYnJlYWRjcnVtYicpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWJzLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGRFeGNlcHRpb25NZWNoYW5pc20sIGdldEdsb2JhbE9iamVjdCwgZ2V0TG9jYXRpb25IcmVmLCBpc0Vycm9yRXZlbnQsIGlzUHJpbWl0aXZlLCBpc1N0cmluZywgbG9nZ2VyLCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRGcm9tVW5rbm93bklucHV0IH0gZnJvbSAnLi4vZXZlbnRidWlsZGVyJztcbmltcG9ydCB7IHNob3VsZElnbm9yZU9uRXJyb3IgfSBmcm9tICcuLi9oZWxwZXJzJztcbi8qKiBHbG9iYWwgaGFuZGxlcnMgKi9cbnZhciBHbG9iYWxIYW5kbGVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBmdW5jdGlvbiBHbG9iYWxIYW5kbGVycyhvcHRpb25zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gR2xvYmFsSGFuZGxlcnMuaWQ7XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9nbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX29sZE9uRXJyb3JIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IG51bGw7XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCA9IGZhbHNlO1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB0c2xpYl8xLl9fYXNzaWduKHsgb25lcnJvcjogdHJ1ZSwgb251bmhhbmRsZWRyZWplY3Rpb246IHRydWUgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gNTA7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm9uZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ0dsb2JhbCBIYW5kbGVyIGF0dGFjaGVkOiBvbmVycm9yJyk7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YWxsR2xvYmFsT25FcnJvckhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZygnR2xvYmFsIEhhbmRsZXIgYXR0YWNoZWQ6IG9udW5oYW5kbGVkcmVqZWN0aW9uJyk7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YWxsR2xvYmFsT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5faW5zdGFsbEdsb2JhbE9uRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fb25FcnJvckhhbmRsZXJJbnN0YWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tdGhpcy1hc3NpZ25tZW50XG4gICAgICAgIHRoaXMuX29sZE9uRXJyb3JIYW5kbGVyID0gdGhpcy5fZ2xvYmFsLm9uZXJyb3I7XG4gICAgICAgIHRoaXMuX2dsb2JhbC5vbmVycm9yID0gZnVuY3Rpb24gKG1zZywgdXJsLCBsaW5lLCBjb2x1bW4sIGVycm9yKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAgICAgICAgIHZhciBoYXNJbnRlZ3JhdGlvbiA9IGN1cnJlbnRIdWIuZ2V0SW50ZWdyYXRpb24oR2xvYmFsSGFuZGxlcnMpO1xuICAgICAgICAgICAgdmFyIGlzRmFpbGVkT3duRGVsaXZlcnkgPSBlcnJvciAmJiBlcnJvci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fID09PSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFoYXNJbnRlZ3JhdGlvbiB8fCBzaG91bGRJZ25vcmVPbkVycm9yKCkgfHwgaXNGYWlsZWRPd25EZWxpdmVyeSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl9vbGRPbkVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fb2xkT25FcnJvckhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNsaWVudCA9IGN1cnJlbnRIdWIuZ2V0Q2xpZW50KCk7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBpc1ByaW1pdGl2ZShlcnJvcilcbiAgICAgICAgICAgICAgICA/IHNlbGYuX2V2ZW50RnJvbUluY29tcGxldGVPbkVycm9yKG1zZywgdXJsLCBsaW5lLCBjb2x1bW4pXG4gICAgICAgICAgICAgICAgOiBzZWxmLl9lbmhhbmNlRXZlbnRXaXRoSW5pdGlhbEZyYW1lKGV2ZW50RnJvbVVua25vd25JbnB1dChlcnJvciwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaFN0YWNrdHJhY2U6IGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpLmF0dGFjaFN0YWNrdHJhY2UsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSksIHVybCwgbGluZSwgY29sdW1uKTtcbiAgICAgICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdvbmVycm9yJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3VycmVudEh1Yi5jYXB0dXJlRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogZXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzZWxmLl9vbGRPbkVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9vbGRPbkVycm9ySGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2luc3RhbGxHbG9iYWxPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9vblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXJJbnN0YWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tdGhpcy1hc3NpZ25tZW50XG4gICAgICAgIHRoaXMuX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IHRoaXMuX2dsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbjtcbiAgICAgICAgdGhpcy5fZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVycm9yID0gZSAmJiAncmVhc29uJyBpbiBlID8gZS5yZWFzb24gOiBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3VycmVudEh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAgICAgICAgIHZhciBoYXNJbnRlZ3JhdGlvbiA9IGN1cnJlbnRIdWIuZ2V0SW50ZWdyYXRpb24oR2xvYmFsSGFuZGxlcnMpO1xuICAgICAgICAgICAgdmFyIGlzRmFpbGVkT3duRGVsaXZlcnkgPSBlcnJvciAmJiBlcnJvci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fID09PSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFoYXNJbnRlZ3JhdGlvbiB8fCBzaG91bGRJZ25vcmVPbkVycm9yKCkgfHwgaXNGYWlsZWRPd25EZWxpdmVyeSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjbGllbnQgPSBjdXJyZW50SHViLmdldENsaWVudCgpO1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gaXNQcmltaXRpdmUoZXJyb3IpXG4gICAgICAgICAgICAgICAgPyBzZWxmLl9ldmVudEZyb21JbmNvbXBsZXRlUmVqZWN0aW9uKGVycm9yKVxuICAgICAgICAgICAgICAgIDogZXZlbnRGcm9tVW5rbm93bklucHV0KGVycm9yLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoU3RhY2t0cmFjZTogY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkuYXR0YWNoU3RhY2t0cmFjZSxcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnQubGV2ZWwgPSBTZXZlcml0eS5FcnJvcjtcbiAgICAgICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdvbnVuaGFuZGxlZHJlamVjdGlvbicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGN1cnJlbnRIdWIuY2FwdHVyZUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGVycm9yLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5fb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlckluc3RhbGxlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBzdGFjayBmcm9tIGFuIG9sZCwgZXJyb3ItbGVzcyBvbmVycm9yIGhhbmRsZXIuXG4gICAgICovXG4gICAgR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLl9ldmVudEZyb21JbmNvbXBsZXRlT25FcnJvciA9IGZ1bmN0aW9uIChtc2csIHVybCwgbGluZSwgY29sdW1uKSB7XG4gICAgICAgIHZhciBFUlJPUl9UWVBFU19SRSA9IC9eKD86W1V1XW5jYXVnaHQgKD86ZXhjZXB0aW9uOiApPyk/KD86KCg/OkV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSXwpRXJyb3IpOiApPyguKikkL2k7XG4gICAgICAgIC8vIElmICdtZXNzYWdlJyBpcyBFcnJvckV2ZW50LCBnZXQgcmVhbCBtZXNzYWdlIGZyb20gaW5zaWRlXG4gICAgICAgIHZhciBtZXNzYWdlID0gaXNFcnJvckV2ZW50KG1zZykgPyBtc2cubWVzc2FnZSA6IG1zZztcbiAgICAgICAgdmFyIG5hbWU7XG4gICAgICAgIGlmIChpc1N0cmluZyhtZXNzYWdlKSkge1xuICAgICAgICAgICAgdmFyIGdyb3VwcyA9IG1lc3NhZ2UubWF0Y2goRVJST1JfVFlQRVNfUkUpO1xuICAgICAgICAgICAgaWYgKGdyb3Vwcykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBncm91cHNbMV07XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGdyb3Vwc1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgICBleGNlcHRpb246IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogbmFtZSB8fCAnRXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmhhbmNlRXZlbnRXaXRoSW5pdGlhbEZyYW1lKGV2ZW50LCB1cmwsIGxpbmUsIGNvbHVtbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gRXZlbnQgZnJvbSBhbiBUcmFjZUtpdFN0YWNrVHJhY2UgdGhhdCBoYXMgcGFydCBvZiBpdCBtaXNzaW5nLlxuICAgICAqL1xuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5fZXZlbnRGcm9tSW5jb21wbGV0ZVJlamVjdGlvbiA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdVbmhhbmRsZWRSZWplY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiTm9uLUVycm9yIHByb21pc2UgcmVqZWN0aW9uIGNhcHR1cmVkIHdpdGggdmFsdWU6IFwiICsgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUgPSBmdW5jdGlvbiAoZXZlbnQsIHVybCwgbGluZSwgY29sdW1uKSB7XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbiA9IGV2ZW50LmV4Y2VwdGlvbiB8fCB7fTtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgfHwgW107XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIHx8IHt9O1xuICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UgfHwge307XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UuZnJhbWVzIHx8IFtdO1xuICAgICAgICB2YXIgY29sbm8gPSBpc05hTihwYXJzZUludChjb2x1bW4sIDEwKSkgPyB1bmRlZmluZWQgOiBjb2x1bW47XG4gICAgICAgIHZhciBsaW5lbm8gPSBpc05hTihwYXJzZUludChsaW5lLCAxMCkpID8gdW5kZWZpbmVkIDogbGluZTtcbiAgICAgICAgdmFyIGZpbGVuYW1lID0gaXNTdHJpbmcodXJsKSAmJiB1cmwubGVuZ3RoID4gMCA/IHVybCA6IGdldExvY2F0aW9uSHJlZigpO1xuICAgICAgICBpZiAoZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29sbm86IGNvbG5vLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogJz8nLFxuICAgICAgICAgICAgICAgIGluX2FwcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBsaW5lbm86IGxpbmVubyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgR2xvYmFsSGFuZGxlcnMuaWQgPSAnR2xvYmFsSGFuZGxlcnMnO1xuICAgIHJldHVybiBHbG9iYWxIYW5kbGVycztcbn0oKSk7XG5leHBvcnQgeyBHbG9iYWxIYW5kbGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsaGFuZGxlcnMuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGlzSW5zdGFuY2VPZiB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2UgfSBmcm9tICcuLi9wYXJzZXJzJztcbmltcG9ydCB7IGNvbXB1dGVTdGFja1RyYWNlIH0gZnJvbSAnLi4vdHJhY2VraXQnO1xudmFyIERFRkFVTFRfS0VZID0gJ2NhdXNlJztcbnZhciBERUZBVUxUX0xJTUlUID0gNTtcbi8qKiBBZGRzIFNESyBpbmZvIHRvIGFuIGV2ZW50LiAqL1xudmFyIExpbmtlZEVycm9ycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpbmtlZEVycm9ycyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gTGlua2VkRXJyb3JzLmlkO1xuICAgICAgICB0aGlzLl9rZXkgPSBvcHRpb25zLmtleSB8fCBERUZBVUxUX0tFWTtcbiAgICAgICAgdGhpcy5fbGltaXQgPSBvcHRpb25zLmxpbWl0IHx8IERFRkFVTFRfTElNSVQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTGlua2VkRXJyb3JzLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uIChldmVudCwgaGludCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oTGlua2VkRXJyb3JzKTtcbiAgICAgICAgICAgIGlmIChzZWxmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2hhbmRsZXIoZXZlbnQsIGhpbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTGlua2VkRXJyb3JzLnByb3RvdHlwZS5faGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCwgaGludCkge1xuICAgICAgICBpZiAoIWV2ZW50LmV4Y2VwdGlvbiB8fCAhZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyB8fCAhaGludCB8fCAhaXNJbnN0YW5jZU9mKGhpbnQub3JpZ2luYWxFeGNlcHRpb24sIEVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaW5rZWRFcnJvcnMgPSB0aGlzLl93YWxrRXJyb3JUcmVlKGhpbnQub3JpZ2luYWxFeGNlcHRpb24sIHRoaXMuX2tleSk7XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPSB0c2xpYl8xLl9fc3ByZWFkKGxpbmtlZEVycm9ycywgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTGlua2VkRXJyb3JzLnByb3RvdHlwZS5fd2Fsa0Vycm9yVHJlZSA9IGZ1bmN0aW9uIChlcnJvciwga2V5LCBzdGFjaykge1xuICAgICAgICBpZiAoc3RhY2sgPT09IHZvaWQgMCkgeyBzdGFjayA9IFtdOyB9XG4gICAgICAgIGlmICghaXNJbnN0YW5jZU9mKGVycm9yW2tleV0sIEVycm9yKSB8fCBzdGFjay5sZW5ndGggKyAxID49IHRoaXMuX2xpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YWNrdHJhY2UgPSBjb21wdXRlU3RhY2tUcmFjZShlcnJvcltrZXldKTtcbiAgICAgICAgdmFyIGV4Y2VwdGlvbiA9IGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Fsa0Vycm9yVHJlZShlcnJvcltrZXldLCBrZXksIHRzbGliXzEuX19zcHJlYWQoW2V4Y2VwdGlvbl0sIHN0YWNrKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIExpbmtlZEVycm9ycy5pZCA9ICdMaW5rZWRFcnJvcnMnO1xuICAgIHJldHVybiBMaW5rZWRFcnJvcnM7XG59KCkpO1xuZXhwb3J0IHsgTGlua2VkRXJyb3JzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5rZWRlcnJvcnMuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIFVzZXJBZ2VudCAqL1xudmFyIFVzZXJBZ2VudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVc2VyQWdlbnQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gVXNlckFnZW50LmlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFVzZXJBZ2VudC5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oVXNlckFnZW50KSkge1xuICAgICAgICAgICAgICAgIGlmICghZ2xvYmFsLm5hdmlnYXRvciB8fCAhZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBJbnRlcmZhY2U6IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vZGV2ZWxvcG1lbnQvc2RrLWRldi9ldmVudC1wYXlsb2Fkcy9yZXF1ZXN0L1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gZXZlbnQucmVxdWVzdCB8fCB7fTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnVybCA9IHJlcXVlc3QudXJsIHx8IGdsb2JhbC5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycyB8fCB7fTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbJ1VzZXItQWdlbnQnXSA9IGdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXNzaWduKHt9LCBldmVudCwgeyByZXF1ZXN0OiByZXF1ZXN0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgVXNlckFnZW50LmlkID0gJ1VzZXJBZ2VudCc7XG4gICAgcmV0dXJuIFVzZXJBZ2VudDtcbn0oKSk7XG5leHBvcnQgeyBVc2VyQWdlbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJhZ2VudC5qcy5tYXAiLCJpbXBvcnQgeyBnZXRDdXJyZW50SHViLCBpbml0QW5kQmluZCwgSW50ZWdyYXRpb25zIGFzIENvcmVJbnRlZ3JhdGlvbnMgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0LCBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgQnJvd3NlckNsaWVudCB9IGZyb20gJy4vY2xpZW50JztcbmltcG9ydCB7IHdyYXAgYXMgaW50ZXJuYWxXcmFwIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IEJyZWFkY3J1bWJzLCBHbG9iYWxIYW5kbGVycywgTGlua2VkRXJyb3JzLCBUcnlDYXRjaCwgVXNlckFnZW50IH0gZnJvbSAnLi9pbnRlZ3JhdGlvbnMnO1xuZXhwb3J0IHZhciBkZWZhdWx0SW50ZWdyYXRpb25zID0gW1xuICAgIG5ldyBDb3JlSW50ZWdyYXRpb25zLkluYm91bmRGaWx0ZXJzKCksXG4gICAgbmV3IENvcmVJbnRlZ3JhdGlvbnMuRnVuY3Rpb25Ub1N0cmluZygpLFxuICAgIG5ldyBUcnlDYXRjaCgpLFxuICAgIG5ldyBCcmVhZGNydW1icygpLFxuICAgIG5ldyBHbG9iYWxIYW5kbGVycygpLFxuICAgIG5ldyBMaW5rZWRFcnJvcnMoKSxcbiAgICBuZXcgVXNlckFnZW50KCksXG5dO1xuLyoqXG4gKiBUaGUgU2VudHJ5IEJyb3dzZXIgU0RLIENsaWVudC5cbiAqXG4gKiBUbyB1c2UgdGhpcyBTREssIGNhbGwgdGhlIHtAbGluayBpbml0fSBmdW5jdGlvbiBhcyBlYXJseSBhcyBwb3NzaWJsZSB3aGVuXG4gKiBsb2FkaW5nIHRoZSB3ZWIgcGFnZS4gVG8gc2V0IGNvbnRleHQgaW5mb3JtYXRpb24gb3Igc2VuZCBtYW51YWwgZXZlbnRzLCB1c2VcbiAqIHRoZSBwcm92aWRlZCBtZXRob2RzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKlxuICogaW1wb3J0IHsgaW5pdCB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKlxuICogaW5pdCh7XG4gKiAgIGRzbjogJ19fRFNOX18nLFxuICogICAvLyAuLi5cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICpcbiAqIGltcG9ydCB7IGNvbmZpZ3VyZVNjb3BlIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqIGNvbmZpZ3VyZVNjb3BlKChzY29wZTogU2NvcGUpID0+IHtcbiAqICAgc2NvcGUuc2V0RXh0cmEoeyBiYXR0ZXJ5OiAwLjcgfSk7XG4gKiAgIHNjb3BlLnNldFRhZyh7IHVzZXJfbW9kZTogJ2FkbWluJyB9KTtcbiAqICAgc2NvcGUuc2V0VXNlcih7IGlkOiAnNDcxMScgfSk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqXG4gKiBpbXBvcnQgeyBhZGRCcmVhZGNydW1iIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqIGFkZEJyZWFkY3J1bWIoe1xuICogICBtZXNzYWdlOiAnTXkgQnJlYWRjcnVtYicsXG4gKiAgIC8vIC4uLlxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICpcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICogU2VudHJ5LmNhcHR1cmVNZXNzYWdlKCdIZWxsbywgd29ybGQhJyk7XG4gKiBTZW50cnkuY2FwdHVyZUV4Y2VwdGlvbihuZXcgRXJyb3IoJ0dvb2QgYnllJykpO1xuICogU2VudHJ5LmNhcHR1cmVFdmVudCh7XG4gKiAgIG1lc3NhZ2U6ICdNYW51YWwnLFxuICogICBzdGFja3RyYWNlOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgIF0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUge0BsaW5rIEJyb3dzZXJPcHRpb25zfSBmb3IgZG9jdW1lbnRhdGlvbiBvbiBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmIChvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgPSBkZWZhdWx0SW50ZWdyYXRpb25zO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5yZWxlYXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHdpbmRvd18xID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgICAgIC8vIFRoaXMgc3VwcG9ydHMgdGhlIHZhcmlhYmxlIHRoYXQgc2VudHJ5LXdlYnBhY2stcGx1Z2luIGluamVjdHNcbiAgICAgICAgaWYgKHdpbmRvd18xLlNFTlRSWV9SRUxFQVNFICYmIHdpbmRvd18xLlNFTlRSWV9SRUxFQVNFLmlkKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJlbGVhc2UgPSB3aW5kb3dfMS5TRU5UUllfUkVMRUFTRS5pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0QW5kQmluZChCcm93c2VyQ2xpZW50LCBvcHRpb25zKTtcbn1cbi8qKlxuICogUHJlc2VudCB0aGUgdXNlciB3aXRoIGEgcmVwb3J0IGRpYWxvZy5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBFdmVyeXRoaW5nIGlzIG9wdGlvbmFsLCB3ZSB0cnkgdG8gZmV0Y2ggYWxsIGluZm8gbmVlZCBmcm9tIHRoZSBnbG9iYWwgc2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG93UmVwb3J0RGlhbG9nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmICghb3B0aW9ucy5ldmVudElkKSB7XG4gICAgICAgIG9wdGlvbnMuZXZlbnRJZCA9IGdldEN1cnJlbnRIdWIoKS5sYXN0RXZlbnRJZCgpO1xuICAgIH1cbiAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgY2xpZW50LnNob3dSZXBvcnREaWFsb2cob3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGlzIHRoZSBnZXR0ZXIgZm9yIGxhc3RFdmVudElkLlxuICpcbiAqIEByZXR1cm5zIFRoZSBsYXN0IGV2ZW50IGlkIG9mIGEgY2FwdHVyZWQgZXZlbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXN0RXZlbnRJZCgpIHtcbiAgICByZXR1cm4gZ2V0Q3VycmVudEh1YigpLmxhc3RFdmVudElkKCk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgaGVyZSB0byBiZSBBUEkgY29tcGF0aWJsZSB3aXRoIHRoZSBsb2FkZXIuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JjZUxvYWQoKSB7XG4gICAgLy8gTm9vcFxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGhlcmUgdG8gYmUgQVBJIGNvbXBhdGlibGUgd2l0aCB0aGUgbG9hZGVyLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2soKTtcbn1cbi8qKlxuICogQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgY3VycmVudCBldmVudHMgaGF2ZSBiZWVuIHNlbnQuXG4gKiBJZiB5b3UgcHJvdmlkZSBhIHRpbWVvdXQgYW5kIHRoZSBxdWV1ZSB0YWtlcyBsb25nZXIgdG8gZHJhaW4gdGhlIHByb21pc2UgcmV0dXJucyBmYWxzZS5cbiAqXG4gKiBAcGFyYW0gdGltZW91dCBNYXhpbXVtIHRpbWUgaW4gbXMgdGhlIGNsaWVudCBzaG91bGQgd2FpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKHRpbWVvdXQpIHtcbiAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudC5mbHVzaCh0aW1lb3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChmYWxzZSk7XG59XG4vKipcbiAqIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGN1cnJlbnQgZXZlbnRzIGhhdmUgYmVlbiBzZW50LlxuICogSWYgeW91IHByb3ZpZGUgYSB0aW1lb3V0IGFuZCB0aGUgcXVldWUgdGFrZXMgbG9uZ2VyIHRvIGRyYWluIHRoZSBwcm9taXNlIHJldHVybnMgZmFsc2UuXG4gKlxuICogQHBhcmFtIHRpbWVvdXQgTWF4aW11bSB0aW1lIGluIG1zIHRoZSBjbGllbnQgc2hvdWxkIHdhaXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZSh0aW1lb3V0KSB7XG4gICAgdmFyIGNsaWVudCA9IGdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQoKTtcbiAgICBpZiAoY2xpZW50KSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuY2xvc2UodGltZW91dCk7XG4gICAgfVxuICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZWplY3QoZmFsc2UpO1xufVxuLyoqXG4gKiBXcmFwIGNvZGUgd2l0aGluIGEgdHJ5L2NhdGNoIGJsb2NrIHNvIHRoZSBTREsgaXMgYWJsZSB0byBjYXB0dXJlIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0gZm4gQSBmdW5jdGlvbiB0byB3cmFwLlxuICpcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2Ygd3JhcHBlZCBmdW5jdGlvbiBjYWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcChmbikge1xuICAgIHJldHVybiBpbnRlcm5hbFdyYXAoZm4pKCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tdW5zYWZlLWFueVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdhcm4ocykge1xuICBjb25zb2xlLndhcm4oJ1tyZWFjdC1nYV0nLCBzKTtcbn0iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybiBmcm9tICcuLi91dGlscy9jb25zb2xlL3dhcm4nO1xudmFyIE5FV1RBQiA9ICdfYmxhbmsnO1xudmFyIE1JRERMRUNMSUNLID0gMTtcblxudmFyIE91dGJvdW5kTGluayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3V0Ym91bmRMaW5rLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBPdXRib3VuZExpbmsoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3V0Ym91bmRMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKE91dGJvdW5kTGluaykpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdGFyZ2V0ID0gX3RoaXMkcHJvcHMudGFyZ2V0LFxuICAgICAgICAgIGV2ZW50TGFiZWwgPSBfdGhpcyRwcm9wcy5ldmVudExhYmVsLFxuICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG8sXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgdHJhY2tlck5hbWVzID0gX3RoaXMkcHJvcHMudHJhY2tlck5hbWVzO1xuICAgICAgdmFyIGV2ZW50TWV0YSA9IHtcbiAgICAgICAgbGFiZWw6IGV2ZW50TGFiZWxcbiAgICAgIH07XG4gICAgICB2YXIgc2FtZVRhcmdldCA9IHRhcmdldCAhPT0gTkVXVEFCO1xuICAgICAgdmFyIG5vcm1hbENsaWNrID0gIShldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYnV0dG9uID09PSBNSURETEVDTElDSyk7XG5cbiAgICAgIGlmIChzYW1lVGFyZ2V0ICYmIG5vcm1hbENsaWNrKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIE91dGJvdW5kTGluay50cmFja0xpbmsoZXZlbnRNZXRhLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0bztcbiAgICAgICAgfSwgdHJhY2tlck5hbWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE91dGJvdW5kTGluay50cmFja0xpbmsoZXZlbnRNZXRhLCBmdW5jdGlvbiAoKSB7fSwgdHJhY2tlck5hbWVzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoT3V0Ym91bmRMaW5rLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaHJlZiA9IF90aGlzJHByb3BzMi50byxcbiAgICAgICAgICBvbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczIsIFtcInRvXCJdKTtcblxuICAgICAgdmFyIHByb3BzID0gX29iamVjdFNwcmVhZCh7fSwgb2xkUHJvcHMsIHtcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnRhcmdldCA9PT0gTkVXVEFCKSB7XG4gICAgICAgIHByb3BzLnJlbCA9ICdub29wZW5lciBub3JlZmVycmVyJztcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHByb3BzLmV2ZW50TGFiZWw7XG4gICAgICBkZWxldGUgcHJvcHMudHJhY2tlck5hbWVzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBwcm9wcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE91dGJvdW5kTGluaztcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE91dGJvdW5kTGluaywgXCJ0cmFja0xpbmtcIiwgZnVuY3Rpb24gKCkge1xuICB3YXJuKCdnYSB0cmFja2luZyBub3QgZW5hYmxlZCcpO1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShPdXRib3VuZExpbmssIFwicHJvcFR5cGVzXCIsIHtcbiAgZXZlbnRMYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdHJhY2tlck5hbWVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKVxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShPdXRib3VuZExpbmssIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgdGFyZ2V0OiBudWxsLFxuICB0bzogbnVsbCxcbiAgb25DbGljazogbnVsbCxcbiAgdHJhY2tlck5hbWVzOiBudWxsXG59KTtcblxuZXhwb3J0IHsgT3V0Ym91bmRMaW5rIGFzIGRlZmF1bHQgfTsiLCIvLyBHQSBzdHJpbmdzIG5lZWQgdG8gaGF2ZSBsZWFkaW5nL3RyYWlsaW5nIHdoaXRlc3BhY2UgdHJpbW1lZCwgYW5kIG5vdCBhbGxcbi8vIGJyb3dzZXJzIGhhdmUgU3RyaW5nLnByb3RvdG95cGUudHJpbSgpLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJpbShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn0iLCIvKipcbiAqIFRvIFRpdGxlIENhc2UgMi4xIC0gaHR0cDovL2luZGl2aWRlZC5jb20vY29kZS90by10aXRsZS1jYXNlL1xuICogQ29weXJpZ2h0IDIwMDgtMjAxMyBEYXZpZCBHb3VjaC4gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvdWNoL3RvLXRpdGxlLWNhc2VcbiAqL1xuaW1wb3J0IHRyaW0gZnJvbSAnLi90cmltJztcbnZhciBzbWFsbFdvcmRzID0gL14oYXxhbnxhbmR8YXN8YXR8YnV0fGJ5fGVufGZvcnxpZnxpbnxub3J8b2Z8b258b3J8cGVyfHRoZXx0b3x2cz9cXC4/fHZpYSkkL2k7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1RpdGxlQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHRyaW0oc3RyaW5nKS5yZXBsYWNlKC9bQS1aYS16MC05XFx1MDBDMC1cXHUwMEZGXStbXlxccy1dKi9nLCBmdW5jdGlvbiAobWF0Y2gsIGluZGV4LCB0aXRsZSkge1xuICAgIGlmIChpbmRleCA+IDAgJiYgaW5kZXggKyBtYXRjaC5sZW5ndGggIT09IHRpdGxlLmxlbmd0aCAmJiBtYXRjaC5zZWFyY2goc21hbGxXb3JkcykgPiAtMSAmJiB0aXRsZS5jaGFyQXQoaW5kZXggLSAyKSAhPT0gJzonICYmICh0aXRsZS5jaGFyQXQoaW5kZXggKyBtYXRjaC5sZW5ndGgpICE9PSAnLScgfHwgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkgPT09ICctJykgJiYgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkuc2VhcmNoKC9bXlxccy1dLykgPCAwKSB7XG4gICAgICByZXR1cm4gbWF0Y2gudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2guc3Vic3RyKDEpLnNlYXJjaCgvW0EtWl18XFwuLi8pID4gLTEpIHtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2guY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBtYXRjaC5zdWJzdHIoMSk7XG4gIH0pO1xufSIsImltcG9ydCBtaWdodEJlRW1haWwgZnJvbSAnLi9taWdodEJlRW1haWwnO1xuaW1wb3J0IHRvVGl0bGVDYXNlIGZyb20gJy4vdG9UaXRsZUNhc2UnO1xuaW1wb3J0IHdhcm4gZnJvbSAnLi9jb25zb2xlL3dhcm4nO1xudmFyIHJlZGFjdGVkID0gJ1JFREFDVEVEIChQb3RlbnRpYWwgRW1haWwgQWRkcmVzcyknO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KHMsIHRpdGxlQ2FzZSkge1xuICBpZiAobWlnaHRCZUVtYWlsKHMpKSB7XG4gICAgd2FybignVGhpcyBhcmcgbG9va3MgbGlrZSBhbiBlbWFpbCBhZGRyZXNzLCByZWRhY3RpbmcuJyk7XG4gICAgcmV0dXJuIHJlZGFjdGVkO1xuICB9XG5cbiAgaWYgKHRpdGxlQ2FzZSkge1xuICAgIHJldHVybiB0b1RpdGxlQ2FzZShzKTtcbiAgfVxuXG4gIHJldHVybiBzO1xufSIsIi8vIFNlZSBpZiBzIGNvdWxkIGJlIGFuIGVtYWlsIGFkZHJlc3MuIFdlIGRvbid0IHdhbnQgdG8gc2VuZCBwZXJzb25hbCBkYXRhIGxpa2UgZW1haWwuXG4vLyBodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9hbmFseXRpY3MvYW5zd2VyLzI3OTU5ODM/aGw9ZW5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ2h0QmVFbWFpbChzKSB7XG4gIC8vIFRoZXJlJ3Mgbm8gcG9pbnQgdHJ5aW5nIHRvIHZhbGlkYXRlIHJmYzgyMiBmdWxseSwganVzdCBsb29rIGZvciAuLi5ALi4uXG4gIHJldHVybiB0eXBlb2YgcyA9PT0gJ3N0cmluZycgJiYgcy5pbmRleE9mKCdAJykgIT09IC0xO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBnYUFkZHJlc3MgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJztcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdhQWRkcmVzcykge1xuICAgIGdhQWRkcmVzcyA9IG9wdGlvbnMuZ2FBZGRyZXNzO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1Zykge1xuICAgIGdhQWRkcmVzcyA9ICdodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3NfZGVidWcuanMnO1xuICB9IC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9hbmFseXRpY3Nqcy9cblxuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5cbiAgKGZ1bmN0aW9uIChpLCBzLCBvLCBnLCByLCBhLCBtKSB7XG4gICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByO1xuICAgIGlbcl0gPSBpW3JdIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgIChpW3JdLnEgPSBpW3JdLnEgfHwgW10pLnB1c2goYXJndW1lbnRzKTtcbiAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTtcbiAgICBhID0gcy5jcmVhdGVFbGVtZW50KG8pLCBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTtcbiAgICBhLmFzeW5jID0gMTtcbiAgICBhLnNyYyA9IGc7XG4gICAgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKTtcbiAgfSkod2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsIGdhQWRkcmVzcywgJ2dhJyk7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvZyhzKSB7XG4gIGNvbnNvbGUuaW5mbygnW3JlYWN0LWdhXScsIHMpO1xufSIsImV4cG9ydCB2YXIgZ2FDYWxscyA9IFtdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBjYWxsczogZ2FDYWxscyxcbiAgZ2E6IGZ1bmN0aW9uIGdhKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBnYUNhbGxzLnB1c2goW10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcbiAgcmVzZXRDYWxsczogZnVuY3Rpb24gcmVzZXRDYWxscygpIHtcbiAgICBnYUNhbGxzLmxlbmd0aCA9IDA7XG4gIH1cbn07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuLyoqXG4gKiBSZWFjdCBHb29nbGUgQW5hbHl0aWNzIE1vZHVsZVxuICpcbiAqIEBwYWNrYWdlIHJlYWN0LWdhXG4gKiBAYXV0aG9yICBBZGFtIExvZnRpbmcgPGFkYW1AbW96aWxsYWZvdW5kYXRpb24ub3JnPlxuICogICAgICAgICAgQXR1bCBWYXJtYSA8YXR1bEBtb3ppbGxhZm91bmRhdGlvbi5vcmc+XG4gKi9cblxuLyoqXG4gKiBVdGlsaXRpZXNcbiAqL1xuaW1wb3J0IGZvcm1hdCBmcm9tICcuL3V0aWxzL2Zvcm1hdCc7XG5pbXBvcnQgcmVtb3ZlTGVhZGluZ1NsYXNoIGZyb20gJy4vdXRpbHMvcmVtb3ZlTGVhZGluZ1NsYXNoJztcbmltcG9ydCB0cmltIGZyb20gJy4vdXRpbHMvdHJpbSc7XG5pbXBvcnQgbG9hZEdBIGZyb20gJy4vdXRpbHMvbG9hZEdBJztcbmltcG9ydCB3YXJuIGZyb20gJy4vdXRpbHMvY29uc29sZS93YXJuJztcbmltcG9ydCBsb2cgZnJvbSAnLi91dGlscy9jb25zb2xlL2xvZyc7XG5pbXBvcnQgVGVzdE1vZGVBUEkgZnJvbSAnLi91dGlscy90ZXN0TW9kZUFQSSc7XG5cbnZhciBfaXNOb3RCcm93c2VyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJztcblxudmFyIF9kZWJ1ZyA9IGZhbHNlO1xudmFyIF90aXRsZUNhc2UgPSB0cnVlO1xudmFyIF90ZXN0TW9kZSA9IGZhbHNlO1xudmFyIF9hbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciA9IHRydWU7XG5cbnZhciBpbnRlcm5hbEdhID0gZnVuY3Rpb24gaW50ZXJuYWxHYSgpIHtcbiAgdmFyIF93aW5kb3c7XG5cbiAgaWYgKF90ZXN0TW9kZSkgcmV0dXJuIFRlc3RNb2RlQVBJLmdhLmFwcGx5KFRlc3RNb2RlQVBJLCBhcmd1bWVudHMpO1xuICBpZiAoX2lzTm90QnJvd3NlcikgcmV0dXJuIGZhbHNlO1xuICBpZiAoIXdpbmRvdy5nYSkgcmV0dXJuIHdhcm4oJ1JlYWN0R0EuaW5pdGlhbGl6ZSBtdXN0IGJlIGNhbGxlZCBmaXJzdCBvciBHb29nbGVBbmFseXRpY3Mgc2hvdWxkIGJlIGxvYWRlZCBtYW51YWxseScpO1xuICByZXR1cm4gKF93aW5kb3cgPSB3aW5kb3cpLmdhLmFwcGx5KF93aW5kb3csIGFyZ3VtZW50cyk7XG59O1xuXG5mdW5jdGlvbiBfZm9ybWF0KHMpIHtcbiAgcmV0dXJuIGZvcm1hdChzLCBfdGl0bGVDYXNlKTtcbn1cblxuZnVuY3Rpb24gX2dhQ29tbWFuZCh0cmFja2VyTmFtZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGNvbW1hbmQgPSBhcmdzWzBdO1xuXG4gIGlmICh0eXBlb2YgaW50ZXJuYWxHYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgY29tbWFuZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHdhcm4oJ2dhIGNvbW1hbmQgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIgfHwgIUFycmF5LmlzQXJyYXkodHJhY2tlck5hbWVzKSkgaW50ZXJuYWxHYS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHJhY2tlck5hbWVzKSkge1xuICAgICAgdHJhY2tlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaW50ZXJuYWxHYS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShbXCJcIi5jb25jYXQobmFtZSwgXCIuXCIpLmNvbmNhdChjb21tYW5kKV0uY29uY2F0KGFyZ3Muc2xpY2UoMSkpKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2luaXRpYWxpemUoZ2FUcmFja2luZ0lELCBvcHRpb25zKSB7XG4gIGlmICghZ2FUcmFja2luZ0lEKSB7XG4gICAgd2FybignZ2FUcmFja2luZ0lEIGlzIHJlcXVpcmVkIGluIGluaXRpYWxpemUoKScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgJiYgb3B0aW9ucy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuICAgICAgX2RlYnVnID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50aXRsZUNhc2UgPT09IGZhbHNlKSB7XG4gICAgICBfdGl0bGVDYXNlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudXNlRXhpc3RpbmdHYSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2FPcHRpb25zKSB7XG4gICAgaW50ZXJuYWxHYSgnY3JlYXRlJywgZ2FUcmFja2luZ0lELCBvcHRpb25zLmdhT3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxHYSgnY3JlYXRlJywgZ2FUcmFja2luZ0lELCAnYXV0bycpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKGNvbmZpZ3NPclRyYWNraW5nSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50ZXN0TW9kZSA9PT0gdHJ1ZSkge1xuICAgIF90ZXN0TW9kZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKF9pc05vdEJyb3dzZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5zdGFuZGFyZEltcGxlbWVudGF0aW9uICE9PSB0cnVlKSBsb2FkR0Eob3B0aW9ucyk7XG4gIH1cblxuICBfYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIgPSBvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLmFsd2F5c1NlbmRUb0RlZmF1bHRUcmFja2VyID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmFsd2F5c1NlbmRUb0RlZmF1bHRUcmFja2VyIDogdHJ1ZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShjb25maWdzT3JUcmFja2luZ0lkKSkge1xuICAgIGNvbmZpZ3NPclRyYWNraW5nSWQuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICBpZiAoX3R5cGVvZihjb25maWcpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB3YXJuKCdBbGwgY29uZmlncyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9pbml0aWFsaXplKGNvbmZpZy50cmFja2luZ0lkLCBjb25maWcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF9pbml0aWFsaXplKGNvbmZpZ3NPclRyYWNraW5nSWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIGdhOlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgR0Egb2JqZWN0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnYSgpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgIGludGVybmFsR2EuYXBwbHkodm9pZCAwLCBhcmdzKTtcblxuICAgIGlmIChfZGVidWcpIHtcbiAgICAgIGxvZygnY2FsbGVkIGdhKFxcJ2FyZ3VtZW50c1xcJyk7Jyk7XG4gICAgICBsb2coXCJ3aXRoIGFyZ3VtZW50czogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KGFyZ3MpKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHdpbmRvdy5nYTtcbn1cbi8qKlxuICogc2V0OlxuICogR0EgdHJhY2tlciBzZXQgbWV0aG9kXG4gKiBAcGFyYW0ge09iamVjdH0gZmllbGRzT2JqZWN0IC0gYSBmaWVsZC92YWx1ZSBwYWlyIG9yIGEgZ3JvdXAgb2YgZmllbGQvdmFsdWUgcGFpcnMgb24gdGhlIHRyYWNrZXJcbiAqIEBwYXJhbSB7QXJyYXl9IHRyYWNrZXJOYW1lcyAtIChvcHRpb25hbCkgYSBsaXN0IG9mIGV4dHJhIHRyYWNrZXJzIHRvIHJ1biB0aGUgY29tbWFuZCBvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQoZmllbGRzT2JqZWN0LCB0cmFja2VyTmFtZXMpIHtcbiAgaWYgKCFmaWVsZHNPYmplY3QpIHtcbiAgICB3YXJuKCdgZmllbGRzT2JqZWN0YCBpcyByZXF1aXJlZCBpbiAuc2V0KCknKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoX3R5cGVvZihmaWVsZHNPYmplY3QpICE9PSAnb2JqZWN0Jykge1xuICAgIHdhcm4oJ0V4cGVjdGVkIGBmaWVsZHNPYmplY3RgIGFyZyB0byBiZSBhbiBPYmplY3QnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoZmllbGRzT2JqZWN0KS5sZW5ndGggPT09IDApIHtcbiAgICB3YXJuKCdlbXB0eSBgZmllbGRzT2JqZWN0YCBnaXZlbiB0byAuc2V0KCknKTtcbiAgfVxuXG4gIF9nYUNvbW1hbmQodHJhY2tlck5hbWVzLCAnc2V0JywgZmllbGRzT2JqZWN0KTtcblxuICBpZiAoX2RlYnVnKSB7XG4gICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2V0XFwnLCBmaWVsZHNPYmplY3QpOycpO1xuICAgIGxvZyhcIndpdGggZmllbGRzT2JqZWN0OiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZmllbGRzT2JqZWN0KSkpO1xuICB9XG59XG4vKipcbiAqIHNlbmQ6XG4gKiBDbG9uZSBvZiB0aGUgbG93IGxldmVsIGBnYS5zZW5kYCBtZXRob2RcbiAqIFdBUk5JTkc6IE5vIHZhbGlkYXRpb25zIHdpbGwgYmUgYXBwbGllZCB0byB0aGlzXG4gKiBAcGFyYW0gIHtPYmplY3R9IGZpZWxkT2JqZWN0IC0gZmllbGQgb2JqZWN0IGZvciB0cmFja2luZyBkaWZmZXJlbnQgYW5hbHl0aWNzXG4gKiBAcGFyYW0gIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gdHJhY2tlcnMgdG8gc2VuZCB0aGUgY29tbWFuZCB0b1xuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmQoZmllbGRPYmplY3QsIHRyYWNrZXJOYW1lcykge1xuICBfZ2FDb21tYW5kKHRyYWNrZXJOYW1lcywgJ3NlbmQnLCBmaWVsZE9iamVjdCk7XG5cbiAgaWYgKF9kZWJ1Zykge1xuICAgIGxvZygnY2FsbGVkIGdhKFxcJ3NlbmRcXCcsIGZpZWxkT2JqZWN0KTsnKTtcbiAgICBsb2coXCJ3aXRoIGZpZWxkT2JqZWN0OiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZmllbGRPYmplY3QpKSk7XG4gICAgbG9nKFwid2l0aCB0cmFja2VyczogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHRyYWNrZXJOYW1lcykpKTtcbiAgfVxufVxuLyoqXG4gKiBwYWdldmlldzpcbiAqIEJhc2ljIEdBIHBhZ2V2aWV3IHRyYWNraW5nXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHBhdGggLSB0aGUgY3VycmVudCBwYWdlIHBhZ2UgZS5nLiAnL2Fib3V0J1xuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKiBAcGFyYW0ge1N0cmluZ30gdGl0bGUgLSAob3B0aW9uYWwpIHRoZSBwYWdlIHRpdGxlIGUuIGcuICdNeSBXZWJzaXRlJ1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdldmlldyhyYXdQYXRoLCB0cmFja2VyTmFtZXMsIHRpdGxlKSB7XG4gIGlmICghcmF3UGF0aCkge1xuICAgIHdhcm4oJ3BhdGggaXMgcmVxdWlyZWQgaW4gLnBhZ2V2aWV3KCknKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGF0aCA9IHRyaW0ocmF3UGF0aCk7XG5cbiAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgd2FybigncGF0aCBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nIGluIC5wYWdldmlldygpJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGV4dHJhRmllbGRzID0ge307XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgZXh0cmFGaWVsZHMudGl0bGUgPSB0aXRsZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICBfZ2FDb21tYW5kKHRyYWNrZXJOYW1lcywgJ3NlbmQnLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGhpdFR5cGU6ICdwYWdldmlldycsXG4gICAgICBwYWdlOiBwYXRoXG4gICAgfSwgZXh0cmFGaWVsZHMpKTtcblxuICAgIGlmIChfZGVidWcpIHtcbiAgICAgIGxvZygnY2FsbGVkIGdhKFxcJ3NlbmRcXCcsIFxcJ3BhZ2V2aWV3XFwnLCBwYXRoKTsnKTtcbiAgICAgIHZhciBleHRyYUxvZyA9ICcnO1xuXG4gICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgZXh0cmFMb2cgPSBcIiBhbmQgdGl0bGU6IFwiLmNvbmNhdCh0aXRsZSk7XG4gICAgICB9XG5cbiAgICAgIGxvZyhcIndpdGggcGF0aDogXCIuY29uY2F0KHBhdGgpLmNvbmNhdChleHRyYUxvZykpO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBtb2RhbHZpZXc6XG4gKiBhIHByb3h5IHRvIGJhc2ljIEdBIHBhZ2V2aWV3IHRyYWNraW5nIHRvIGNvbnNpc3RlbnRseSB0cmFja1xuICogbW9kYWwgdmlld3MgdGhhdCBhcmUgYW4gZXF1aXZhbGVudCBVWCB0byBhIHRyYWRpdGlvbmFsIHBhZ2V2aWV3XG4gKiBAcGFyYW0gIHtTdHJpbmd9IG1vZGFsTmFtZSBlLmcuICdhZGQtb3ItZWRpdC1jbHViJ1xuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1vZGFsdmlldyhyYXdNb2RhbE5hbWUsIHRyYWNrZXJOYW1lcykge1xuICBpZiAoIXJhd01vZGFsTmFtZSkge1xuICAgIHdhcm4oJ21vZGFsTmFtZSBpcyByZXF1aXJlZCBpbiAubW9kYWx2aWV3KG1vZGFsTmFtZSknKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbW9kYWxOYW1lID0gcmVtb3ZlTGVhZGluZ1NsYXNoKHRyaW0ocmF3TW9kYWxOYW1lKSk7XG5cbiAgaWYgKG1vZGFsTmFtZSA9PT0gJycpIHtcbiAgICB3YXJuKCdtb2RhbE5hbWUgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZyBvciBhIHNpbmdsZSAvIGluIC5tb2RhbHZpZXcoKScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcGF0aCA9IFwiL21vZGFsL1wiLmNvbmNhdChtb2RhbE5hbWUpO1xuXG4gICAgX2dhQ29tbWFuZCh0cmFja2VyTmFtZXMsICdzZW5kJywgJ3BhZ2V2aWV3JywgcGF0aCk7XG5cbiAgICBpZiAoX2RlYnVnKSB7XG4gICAgICBsb2coJ2NhbGxlZCBnYShcXCdzZW5kXFwnLCBcXCdwYWdldmlld1xcJywgcGF0aCk7Jyk7XG4gICAgICBsb2coXCJ3aXRoIHBhdGg6IFwiLmNvbmNhdChwYXRoKSk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIHRpbWluZzpcbiAqIEdBIHRpbWluZ1xuICogQHBhcmFtIGFyZ3MuY2F0ZWdvcnkge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSBhcmdzLnZhcmlhYmxlIHtTdHJpbmd9IHJlcXVpcmVkXG4gKiBAcGFyYW0gYXJncy52YWx1ZSAge0ludH0gIHJlcXVpcmVkXG4gKiBAcGFyYW0gYXJncy5sYWJlbCAge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSB7QXJyYXl9IHRyYWNrZXJOYW1lcyAtIChvcHRpb25hbCkgYSBsaXN0IG9mIGV4dHJhIHRyYWNrZXJzIHRvIHJ1biB0aGUgY29tbWFuZCBvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1pbmcoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIGNhdGVnb3J5ID0gX3JlZi5jYXRlZ29yeSxcbiAgICAgIHZhcmlhYmxlID0gX3JlZi52YXJpYWJsZSxcbiAgICAgIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgIGxhYmVsID0gX3JlZi5sYWJlbDtcblxuICB2YXIgdHJhY2tlck5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghY2F0ZWdvcnkgfHwgIXZhcmlhYmxlIHx8ICF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICB3YXJuKCdhcmdzLmNhdGVnb3J5LCBhcmdzLnZhcmlhYmxlICcgKyAnQU5EIGFyZ3MudmFsdWUgYXJlIHJlcXVpcmVkIGluIHRpbWluZygpICcgKyAnQU5EIGFyZ3MudmFsdWUgaGFzIHRvIGJlIGEgbnVtYmVyJyk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBSZXF1aXJlZCBGaWVsZHNcblxuXG4gICAgdmFyIGZpZWxkT2JqZWN0ID0ge1xuICAgICAgaGl0VHlwZTogJ3RpbWluZycsXG4gICAgICB0aW1pbmdDYXRlZ29yeTogX2Zvcm1hdChjYXRlZ29yeSksXG4gICAgICB0aW1pbmdWYXI6IF9mb3JtYXQodmFyaWFibGUpLFxuICAgICAgdGltaW5nVmFsdWU6IHZhbHVlXG4gICAgfTtcblxuICAgIGlmIChsYWJlbCkge1xuICAgICAgZmllbGRPYmplY3QudGltaW5nTGFiZWwgPSBfZm9ybWF0KGxhYmVsKTtcbiAgICB9XG5cbiAgICBzZW5kKGZpZWxkT2JqZWN0LCB0cmFja2VyTmFtZXMpO1xuICB9XG59XG4vKipcbiAqIGV2ZW50OlxuICogR0EgZXZlbnQgdHJhY2tpbmdcbiAqIEBwYXJhbSBhcmdzLmNhdGVnb3J5IHtTdHJpbmd9IHJlcXVpcmVkXG4gKiBAcGFyYW0gYXJncy5hY3Rpb24ge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSBhcmdzLmxhYmVsIHtTdHJpbmd9IG9wdGlvbmFsXG4gKiBAcGFyYW0gYXJncy52YWx1ZSB7SW50fSBvcHRpb25hbFxuICogQHBhcmFtIGFyZ3Mubm9uSW50ZXJhY3Rpb24ge2Jvb2xlYW59IG9wdGlvbmFsXG4gKiBAcGFyYW0gYXJncy50cmFuc3BvcnQge3N0cmluZ30gb3B0aW9uYWxcbiAqIEBwYXJhbSB7QXJyYXl9IHRyYWNrZXJOYW1lcyAtIChvcHRpb25hbCkgYSBsaXN0IG9mIGV4dHJhIHRyYWNrZXJzIHRvIHJ1biB0aGUgY29tbWFuZCBvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBldmVudCgpIHtcbiAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIGNhdGVnb3J5ID0gX3JlZjIuY2F0ZWdvcnksXG4gICAgICBhY3Rpb24gPSBfcmVmMi5hY3Rpb24sXG4gICAgICBsYWJlbCA9IF9yZWYyLmxhYmVsLFxuICAgICAgdmFsdWUgPSBfcmVmMi52YWx1ZSxcbiAgICAgIG5vbkludGVyYWN0aW9uID0gX3JlZjIubm9uSW50ZXJhY3Rpb24sXG4gICAgICB0cmFuc3BvcnQgPSBfcmVmMi50cmFuc3BvcnQsXG4gICAgICBhcmdzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbXCJjYXRlZ29yeVwiLCBcImFjdGlvblwiLCBcImxhYmVsXCIsIFwidmFsdWVcIiwgXCJub25JbnRlcmFjdGlvblwiLCBcInRyYW5zcG9ydFwiXSk7XG5cbiAgdmFyIHRyYWNrZXJOYW1lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBTaW1wbGUgVmFsaWRhdGlvblxuICAgIGlmICghY2F0ZWdvcnkgfHwgIWFjdGlvbikge1xuICAgICAgd2FybignYXJncy5jYXRlZ29yeSBBTkQgYXJncy5hY3Rpb24gYXJlIHJlcXVpcmVkIGluIGV2ZW50KCknKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlcXVpcmVkIEZpZWxkc1xuXG5cbiAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgZXZlbnRDYXRlZ29yeTogX2Zvcm1hdChjYXRlZ29yeSksXG4gICAgICBldmVudEFjdGlvbjogX2Zvcm1hdChhY3Rpb24pXG4gICAgfTsgLy8gT3B0aW9uYWwgRmllbGRzXG5cbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGZpZWxkT2JqZWN0LmV2ZW50TGFiZWwgPSBfZm9ybWF0KGxhYmVsKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgd2FybignRXhwZWN0ZWQgYGFyZ3MudmFsdWVgIGFyZyB0byBiZSBhIE51bWJlci4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkT2JqZWN0LmV2ZW50VmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5vbkludGVyYWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBub25JbnRlcmFjdGlvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHdhcm4oJ2BhcmdzLm5vbkludGVyYWN0aW9uYCBtdXN0IGJlIGEgYm9vbGVhbi4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkT2JqZWN0Lm5vbkludGVyYWN0aW9uID0gbm9uSW50ZXJhY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0cmFuc3BvcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIHRyYW5zcG9ydCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgd2FybignYGFyZ3MudHJhbnNwb3J0YCBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFsnYmVhY29uJywgJ3hocicsICdpbWFnZSddLmluZGV4T2YodHJhbnNwb3J0KSA9PT0gLTEpIHtcbiAgICAgICAgICB3YXJuKCdgYXJncy50cmFuc3BvcnRgIG11c3QgYmUgZWl0aGVyIG9uZSBvZiB0aGVzZSB2YWx1ZXM6IGBiZWFjb25gLCBgeGhyYCBvciBgaW1hZ2VgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmaWVsZE9iamVjdC50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoYXJncykuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBrZXkuc3Vic3RyKDAsICdkaW1lbnNpb24nLmxlbmd0aCkgPT09ICdkaW1lbnNpb24nO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZmllbGRPYmplY3Rba2V5XSA9IGFyZ3Nba2V5XTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhhcmdzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGtleS5zdWJzdHIoMCwgJ21ldHJpYycubGVuZ3RoKSA9PT0gJ21ldHJpYyc7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBmaWVsZE9iamVjdFtrZXldID0gYXJnc1trZXldO1xuICAgIH0pOyAvLyBTZW5kIHRvIEdBXG5cbiAgICBzZW5kKGZpZWxkT2JqZWN0LCB0cmFja2VyTmFtZXMpO1xuICB9XG59XG4vKipcbiAqIGV4Y2VwdGlvbjpcbiAqIEdBIGV4Y2VwdGlvbiB0cmFja2luZ1xuICogQHBhcmFtIGFyZ3MuZGVzY3JpcHRpb24ge1N0cmluZ30gb3B0aW9uYWxcbiAqIEBwYXJhbSBhcmdzLmZhdGFsIHtib29sZWFufSBvcHRpb25hbFxuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VwdGlvbihfcmVmMywgdHJhY2tlck5hbWVzKSB7XG4gIHZhciBkZXNjcmlwdGlvbiA9IF9yZWYzLmRlc2NyaXB0aW9uLFxuICAgICAgZmF0YWwgPSBfcmVmMy5mYXRhbDtcblxuICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gUmVxdWlyZWQgRmllbGRzXG4gICAgdmFyIGZpZWxkT2JqZWN0ID0ge1xuICAgICAgaGl0VHlwZTogJ2V4Y2VwdGlvbidcbiAgICB9OyAvLyBPcHRpb25hbCBGaWVsZHNcblxuICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgZmllbGRPYmplY3QuZXhEZXNjcmlwdGlvbiA9IF9mb3JtYXQoZGVzY3JpcHRpb24pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmF0YWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIGZhdGFsICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgd2FybignYGFyZ3MuZmF0YWxgIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRPYmplY3QuZXhGYXRhbCA9IGZhdGFsO1xuICAgICAgfVxuICAgIH0gLy8gU2VuZCB0byBHQVxuXG5cbiAgICBzZW5kKGZpZWxkT2JqZWN0LCB0cmFja2VyTmFtZXMpO1xuICB9XG59XG5leHBvcnQgdmFyIHBsdWdpbiA9IHtcbiAgLyoqXG4gICAqIHJlcXVpcmU6XG4gICAqIEdBIHJlcXVpcmVzIGEgcGx1Z2luXG4gICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9IGUuZy4gJ2Vjb21tZXJjZScgb3IgJ215cGx1Z2luJ1xuICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBvcHRpb25hbCBlLmcge3BhdGg6ICcvbG9nJywgZGVidWc6IHRydWV9XG4gICAqIEBwYXJhbSB0cmFja2VyTmFtZSB7U3RyaW5nfSBvcHRpb25hbCBlLmcgJ3RyYWNrZXJOYW1lJ1xuICAgKi9cbiAgcmVxdWlyZTogZnVuY3Rpb24gcmVxdWlyZShyYXdOYW1lLCBvcHRpb25zLCB0cmFja2VyTmFtZSkge1xuICAgIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFJlcXVpcmVkIEZpZWxkc1xuICAgICAgaWYgKCFyYXdOYW1lKSB7XG4gICAgICAgIHdhcm4oJ2BuYW1lYCBpcyByZXF1aXJlZCBpbiAucmVxdWlyZSgpJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5hbWUgPSB0cmltKHJhd05hbWUpO1xuXG4gICAgICBpZiAobmFtZSA9PT0gJycpIHtcbiAgICAgICAgd2FybignYG5hbWVgIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcgaW4gLnJlcXVpcmUoKScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZXF1aXJlU3RyaW5nID0gdHJhY2tlck5hbWUgPyBcIlwiLmNvbmNhdCh0cmFja2VyTmFtZSwgXCIucmVxdWlyZVwiKSA6ICdyZXF1aXJlJzsgLy8gT3B0aW9uYWwgRmllbGRzXG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChfdHlwZW9mKG9wdGlvbnMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBvcHRpb25zYCBhcmcgdG8gYmUgYW4gT2JqZWN0Jyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHdhcm4oJ0VtcHR5IGBvcHRpb25zYCBnaXZlbiB0byAucmVxdWlyZSgpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBnYShyZXF1aXJlU3RyaW5nLCBuYW1lLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgbG9nKFwiY2FsbGVkIGdhKCdyZXF1aXJlJywgJ1wiLmNvbmNhdChuYW1lLCBcIicsIFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkob3B0aW9ucykpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2EocmVxdWlyZVN0cmluZywgbmFtZSk7XG5cbiAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgIGxvZyhcImNhbGxlZCBnYSgncmVxdWlyZScsICdcIi5jb25jYXQobmFtZSwgXCInKTtcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBleGVjdXRlOlxuICAgKiBHQSBleGVjdXRlIGFjdGlvbiBmb3IgcGx1Z2luXG4gICAqIFRha2VzIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHNcbiAgICogQHBhcmFtIHBsdWdpbk5hbWUge1N0cmluZ30gZS5nLiAnZWNvbW1lcmNlJyBvciAnbXlwbHVnaW4nXG4gICAqIEBwYXJhbSBhY3Rpb24ge1N0cmluZ30gZS5nLiAnYWRkSXRlbScgb3IgJ215Q3VzdG9tQWN0aW9uJ1xuICAgKiBAcGFyYW0gYWN0aW9uVHlwZSB7U3RyaW5nfSBvcHRpb25hbCBlLmcuICdkZXRhaWwnXG4gICAqIEBwYXJhbSBwYXlsb2FkIHtPYmplY3R9IG9wdGlvbmFsIGUuZyB7IGlkOiAnMXg1ZScsIG5hbWUgOiAnTXkgcHJvZHVjdCB0byB0cmFjaycgfVxuICAgKi9cbiAgZXhlY3V0ZTogZnVuY3Rpb24gZXhlY3V0ZShwbHVnaW5OYW1lLCBhY3Rpb24pIHtcbiAgICB2YXIgcGF5bG9hZDtcbiAgICB2YXIgYWN0aW9uVHlwZTtcblxuICAgIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gMCA6IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA9PT0gMSkge1xuICAgICAgcGF5bG9hZCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uVHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICAgIHBheWxvYWQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW5OYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICB3YXJuKCdFeHBlY3RlZCBgcGx1Z2luTmFtZWAgYXJnIHRvIGJlIGEgU3RyaW5nLicpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICB3YXJuKCdFeHBlY3RlZCBgYWN0aW9uYCBhcmcgdG8gYmUgYSBTdHJpbmcuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29tbWFuZCA9IFwiXCIuY29uY2F0KHBsdWdpbk5hbWUsIFwiOlwiKS5jb25jYXQoYWN0aW9uKTtcbiAgICAgICAgcGF5bG9hZCA9IHBheWxvYWQgfHwgbnVsbDtcblxuICAgICAgICBpZiAoYWN0aW9uVHlwZSAmJiBwYXlsb2FkKSB7XG4gICAgICAgICAgZ2EoY29tbWFuZCwgYWN0aW9uVHlwZSwgcGF5bG9hZCk7XG5cbiAgICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgICBsb2coXCJjYWxsZWQgZ2EoJ1wiLmNvbmNhdChjb21tYW5kLCBcIicpO1wiKSk7XG4gICAgICAgICAgICBsb2coXCJhY3Rpb25UeXBlOiBcXFwiXCIuY29uY2F0KGFjdGlvblR5cGUsIFwiXFxcIiB3aXRoIHBheWxvYWQ6IFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZCkge1xuICAgICAgICAgIGdhKGNvbW1hbmQsIHBheWxvYWQpO1xuXG4gICAgICAgICAgaWYgKF9kZWJ1Zykge1xuICAgICAgICAgICAgbG9nKFwiY2FsbGVkIGdhKCdcIi5jb25jYXQoY29tbWFuZCwgXCInKTtcIikpO1xuICAgICAgICAgICAgbG9nKFwid2l0aCBwYXlsb2FkOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2EoY29tbWFuZCk7XG5cbiAgICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgICBsb2coXCJjYWxsZWQgZ2EoJ1wiLmNvbmNhdChjb21tYW5kLCBcIicpO1wiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuLyoqXG4gKiBvdXRib3VuZExpbms6XG4gKiBHQSBvdXRib3VuZExpbmsgdHJhY2tpbmdcbiAqIEBwYXJhbSBhcmdzLmxhYmVsIHtTdHJpbmd9IGUuZy4gdXJsLCBvciAnQ3JlYXRlIGFuIEFjY291bnQnXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBoaXRDYWxsYmFjayAtIENhbGxlZCBhZnRlciBwcm9jZXNzaW5nIGEgaGl0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBvdXRib3VuZExpbmsoYXJncywgaGl0Q2FsbGJhY2ssIHRyYWNrZXJOYW1lcykge1xuICBpZiAodHlwZW9mIGhpdENhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgd2FybignaGl0Q2FsbGJhY2sgZnVuY3Rpb24gaXMgcmVxdWlyZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gU2ltcGxlIFZhbGlkYXRpb25cbiAgICBpZiAoIWFyZ3MgfHwgIWFyZ3MubGFiZWwpIHtcbiAgICAgIHdhcm4oJ2FyZ3MubGFiZWwgaXMgcmVxdWlyZWQgaW4gb3V0Ym91bmRMaW5rKCknKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlcXVpcmVkIEZpZWxkc1xuXG5cbiAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgZXZlbnRDYXRlZ29yeTogJ091dGJvdW5kJyxcbiAgICAgIGV2ZW50QWN0aW9uOiAnQ2xpY2snLFxuICAgICAgZXZlbnRMYWJlbDogX2Zvcm1hdChhcmdzLmxhYmVsKVxuICAgIH07XG4gICAgdmFyIHNhZmV0eUNhbGxiYWNrQ2FsbGVkID0gZmFsc2U7XG5cbiAgICB2YXIgc2FmZXR5Q2FsbGJhY2sgPSBmdW5jdGlvbiBzYWZldHlDYWxsYmFjaygpIHtcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgYSBkZWxheWVkIHJlc3BvbnNlIGZyb20gR0FcbiAgICAgIC8vIGNhdXNpbmcgaGl0Q2FsbGJhY2sgZnJvbSBiZWluZyBmaXJlZCB0d2ljZVxuICAgICAgc2FmZXR5Q2FsbGJhY2tDYWxsZWQgPSB0cnVlO1xuICAgICAgaGl0Q2FsbGJhY2soKTtcbiAgICB9OyAvLyBVc2luZyBhIHRpbWVvdXQgdG8gZW5zdXJlIHRoZSBleGVjdXRpb24gb2YgY3JpdGljYWwgYXBwbGljYXRpb24gY29kZVxuICAgIC8vIGluIHRoZSBjYXNlIHdoZW4gdGhlIEdBIHNlcnZlciBtaWdodCBiZSBkb3duXG4gICAgLy8gb3IgYW4gYWQgYmxvY2tlciBwcmV2ZW50cyBzZW5kaW5nIHRoZSBkYXRhXG4gICAgLy8gcmVnaXN0ZXIgc2FmZXR5IG5ldCB0aW1lb3V0OlxuXG5cbiAgICB2YXIgdCA9IHNldFRpbWVvdXQoc2FmZXR5Q2FsbGJhY2ssIDI1MCk7XG5cbiAgICB2YXIgY2xlYXJhYmxlQ2FsbGJhY2tGb3JHQSA9IGZ1bmN0aW9uIGNsZWFyYWJsZUNhbGxiYWNrRm9yR0EoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodCk7XG5cbiAgICAgIGlmICghc2FmZXR5Q2FsbGJhY2tDYWxsZWQpIHtcbiAgICAgICAgaGl0Q2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZmllbGRPYmplY3QuaGl0Q2FsbGJhY2sgPSBjbGVhcmFibGVDYWxsYmFja0ZvckdBOyAvLyBTZW5kIHRvIEdBXG5cbiAgICBzZW5kKGZpZWxkT2JqZWN0LCB0cmFja2VyTmFtZXMpO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGdhIGlzIG5vdCBkZWZpbmVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIHNvIHRoZSBhcHBsaWNhdGlvblxuICAgIC8vIGNvbnRpbnVlcyB0byB3b3JrIGFzIGV4cGVjdGVkXG4gICAgc2V0VGltZW91dChoaXRDYWxsYmFjaywgMCk7XG4gIH1cbn1cbmV4cG9ydCB2YXIgdGVzdE1vZGVBUEkgPSBUZXN0TW9kZUFQSTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdGlhbGl6ZTogaW5pdGlhbGl6ZSxcbiAgZ2E6IGdhLFxuICBzZXQ6IHNldCxcbiAgc2VuZDogc2VuZCxcbiAgcGFnZXZpZXc6IHBhZ2V2aWV3LFxuICBtb2RhbHZpZXc6IG1vZGFsdmlldyxcbiAgdGltaW5nOiB0aW1pbmcsXG4gIGV2ZW50OiBldmVudCxcbiAgZXhjZXB0aW9uOiBleGNlcHRpb24sXG4gIHBsdWdpbjogcGx1Z2luLFxuICBvdXRib3VuZExpbms6IG91dGJvdW5kTGluayxcbiAgdGVzdE1vZGVBUEk6IFRlc3RNb2RlQVBJXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUxlYWRpbmdTbGFzaChzdHJpbmcpIHtcbiAgaWYgKHN0cmluZy5zdWJzdHJpbmcoMCwgMSkgPT09ICcvJykge1xuICAgIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn0iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgVW5ib3VuZE91dGJvdW5kTGluayBmcm9tICcuL2NvbXBvbmVudHMvT3V0Ym91bmRMaW5rJztcbmltcG9ydCAqIGFzIERlZmF1bHRzIGZyb20gJy4vY29yZSc7XG5leHBvcnQgdmFyIGluaXRpYWxpemUgPSBEZWZhdWx0cy5pbml0aWFsaXplO1xuZXhwb3J0IHZhciBnYSA9IERlZmF1bHRzLmdhO1xuZXhwb3J0IHZhciBzZXQgPSBEZWZhdWx0cy5zZXQ7XG5leHBvcnQgdmFyIHNlbmQgPSBEZWZhdWx0cy5zZW5kO1xuZXhwb3J0IHZhciBwYWdldmlldyA9IERlZmF1bHRzLnBhZ2V2aWV3O1xuZXhwb3J0IHZhciBtb2RhbHZpZXcgPSBEZWZhdWx0cy5tb2RhbHZpZXc7XG5leHBvcnQgdmFyIHRpbWluZyA9IERlZmF1bHRzLnRpbWluZztcbmV4cG9ydCB2YXIgZXZlbnQgPSBEZWZhdWx0cy5ldmVudDtcbmV4cG9ydCB2YXIgZXhjZXB0aW9uID0gRGVmYXVsdHMuZXhjZXB0aW9uO1xuZXhwb3J0IHZhciBwbHVnaW4gPSBEZWZhdWx0cy5wbHVnaW47XG5leHBvcnQgdmFyIG91dGJvdW5kTGluayA9IERlZmF1bHRzLm91dGJvdW5kTGluaztcbmV4cG9ydCB2YXIgdGVzdE1vZGVBUEkgPSBEZWZhdWx0cy50ZXN0TW9kZUFQSTtcblVuYm91bmRPdXRib3VuZExpbmsub3JpZ1RyYWNrTGluayA9IFVuYm91bmRPdXRib3VuZExpbmsudHJhY2tMaW5rO1xuVW5ib3VuZE91dGJvdW5kTGluay50cmFja0xpbmsgPSBEZWZhdWx0cy5vdXRib3VuZExpbms7XG5leHBvcnQgdmFyIE91dGJvdW5kTGluayA9IFVuYm91bmRPdXRib3VuZExpbms7XG5leHBvcnQgZGVmYXVsdCBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0cywge1xuICBPdXRib3VuZExpbms6IE91dGJvdW5kTGlua1xufSk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZ3VkIGZyb20gJ2d1ZCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ3VkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkuaGlzdG9yeTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgodXNlTG9jYXRpb24oKS5wYXRobmFtZSwgcGF0aCkgOiB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0ICogZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi4vLi4vaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwibGV0IHdzID0gbnVsbDtcbmNvbnN0IG1lc3NhZ2VIYW5kbGVycyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gZ2V0V3NVcmkoKSB7XG4gIGNvbnN0IGxvYyA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgbGV0IHdzVXJpID0gJyc7XG4gIGlmIChsb2MucHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgd3NVcmkgKz0gJ3dzczovLyc7XG4gIH0gZWxzZSB7XG4gICAgd3NVcmkgKz0gJ3dzOi8vJztcbiAgfVxuICB3c1VyaSArPSBsb2MuaG9zdDtcbiAgd3NVcmkgKz0gJy93cyc7XG4gIHJldHVybiB3c1VyaTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcih0eXBlLCBoYW5kbGVyKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gbWVzc2FnZUhhbmRsZXJzLmdldCh0eXBlKSB8fCBbXTtcbiAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgbWVzc2FnZUhhbmRsZXJzLnNldCh0eXBlLCBoYW5kbGVycyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1lc3NhZ2VIYW5kbGVyKHR5cGUsIGhhbmRsZXIpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSBtZXNzYWdlSGFuZGxlcnMuZ2V0KHR5cGUpIHx8IFtdO1xuICBjb25zdCBuZXdIYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihoID0+IGggIT09IGhhbmRsZXIpO1xuICBpZiAobmV3SGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgbWVzc2FnZUhhbmRsZXJzLmRlbGV0ZSh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICBtZXNzYWdlSGFuZGxlcnMuc2V0KHR5cGUsIG5ld0hhbmRsZXJzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XG4gIGlmICh0eXBlb2YgZXZlbnQuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBtc2cgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICBwYXlsb2FkLFxuICAgIH0gPSBtc2c7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBtZXNzYWdlSGFuZGxlcnMuZ2V0KHR5cGUpO1xuICAgIGlmICghaGFuZGxlcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW2ldO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlcihwYXlsb2FkKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCd3ZWJzb2NrZXQgbWVzc2FnZSBoYW5kbGVyIGVycm9yOiAnLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygncmVjZWl2ZWQgbm90IHN0cmluZyB3cyBtc2cnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb25uZWN0KCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHVyaSA9IGdldFdzVXJpKCk7XG4gICAgaWYgKHdzICYmIHdzLnJlYWR5U3RhdGUgPT09IDEpIHtcbiAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgfVxuICAgIHdzID0gbmV3IHdpbmRvdy5XZWJTb2NrZXQodXJpKTtcbiAgICB3cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfTtcbiAgICB3cy5vbmVycm9yID0gKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3Qgd2ViIHNvY2tldCBlcnJvcjogJywgZXJyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH07XG4gICAgd3Mub25jbG9zZSA9ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCd3ZWJzb2NrZXQgY2xvc2VkJyk7XG4gICAgfTtcbiAgICB3cy5vbm1lc3NhZ2UgPSBoYW5kbGVNZXNzYWdlO1xuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VuZChkYXRhKSB7XG4gIGlmICghd3MgfHwgd3MucmVhZHlTdGF0ZSAhPT0gMSkge1xuICAgIGF3YWl0IGNvbm5lY3QoKTtcbiAgfVxuICB3cy5zZW5kKGRhdGEpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kSlNPTihvYmopIHtcbiAgYXdhaXQgc2VuZChKU09OLnN0cmluZ2lmeShvYmopKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBzZW5kSlNPTixcbiAgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcixcbiAgcmVtb3ZlTWVzc2FnZUhhbmRsZXIsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7XG4gIHdpdGhSb3V0ZXIsXG4gIG1hdGNoUGF0aCxcbn0gZnJvbSAncmVhY3Qtcm91dGVyJztcblxuaW1wb3J0IHtcbiAgTGluayxcbn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9OYXZCYXIuY20uc3R5bCc7XG5cbmZ1bmN0aW9uIE5hdkJhcihwcm9wcykge1xuICBjb25zdCBwYXRobmFtZSA9IHByb3BzLmxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gIGNvbnN0IG1hdGNoUmVjdiA9IG1hdGNoUGF0aChwYXRobmFtZSwgJy9yZWN2LzpyZWN2Q29kZT8nKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYmFzZX0+XG4gICAgICA8YSBocmVmPVwiL1wiPlxuICAgICAgICA8aW1nIHNyYz1cIi9pbWFnZXMvbG9nby5wbmdcIiBhbHQ9XCJsb2dvXCIgY2xhc3NOYW1lPXtzdHlsZXMubG9nb30gLz5cbiAgICAgIDwvYT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2xvZ2FufT5cbiAgICAgICAg566A5Y2V5a6J5YWo6auY5pWI55qEUDJQ5paH5Lu25Lyg6L6T5pyN5YqhXG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWVudXN9PlxuICAgICAgICA8TGluayB0bz1cIi9zZW5kXCI+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhzdHlsZXMubWVudSwgcGF0aG5hbWUgPT09ICcvc2VuZCcgJiYgc3R5bGVzLmFjdGl2ZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAg5Y+R6YCB5paH5Lu2XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L0xpbms+XG4gICAgICAgIDxMaW5rIHRvPVwiL3JlY3ZcIj5cbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKHN0eWxlcy5tZW51LCBtYXRjaFJlY3YgJiYgc3R5bGVzLmFjdGl2ZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAg5o6l5pS25paH5Lu2XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L0xpbms+XG4gICAgICAgIDxMaW5rIHRvPVwiL2NvbnRhY3RcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoc3R5bGVzLm1lbnUsIHBhdGhuYW1lID09PSAnL2NvbnRhY3QnICYmIHN0eWxlcy5hY3RpdmUpfT5cbiAgICAgICAgICAg6IGU57O75oiR5LusXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L0xpbms+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuTmF2QmFyLmRlZmF1bHRQcm9wcyA9IHt9O1xuXG5OYXZCYXIucHJvcFR5cGVzID0ge1xuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoTmF2QmFyKTtcbiIsImV4cG9ydCB2YXIgQ09NTU9OX01JTUVfVFlQRVMgPSBuZXcgTWFwKFtcbiAgICBbJ2F2aScsICd2aWRlby9hdmknXSxcbiAgICBbJ2dpZicsICdpbWFnZS9naWYnXSxcbiAgICBbJ2ljbycsICdpbWFnZS94LWljb24nXSxcbiAgICBbJ2pwZWcnLCAnaW1hZ2UvanBlZyddLFxuICAgIFsnanBnJywgJ2ltYWdlL2pwZWcnXSxcbiAgICBbJ21rdicsICd2aWRlby94LW1hdHJvc2thJ10sXG4gICAgWydtb3YnLCAndmlkZW8vcXVpY2t0aW1lJ10sXG4gICAgWydtcDQnLCAndmlkZW8vbXA0J10sXG4gICAgWydwZGYnLCAnYXBwbGljYXRpb24vcGRmJ10sXG4gICAgWydwbmcnLCAnaW1hZ2UvcG5nJ10sXG4gICAgWyd6aXAnLCAnYXBwbGljYXRpb24vemlwJ10sXG4gICAgWydkb2MnLCAnYXBwbGljYXRpb24vbXN3b3JkJ10sXG4gICAgWydkb2N4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50J11cbl0pO1xuZXhwb3J0IGZ1bmN0aW9uIHRvRmlsZVdpdGhQYXRoKGZpbGUsIHBhdGgpIHtcbiAgICB2YXIgZiA9IHdpdGhNaW1lVHlwZShmaWxlKTtcbiAgICBpZiAodHlwZW9mIGYucGF0aCAhPT0gJ3N0cmluZycpIHsgLy8gb24gZWxlY3Ryb24sIHBhdGggaXMgYWxyZWFkeSBzZXQgdG8gdGhlIGFic29sdXRlIHBhdGhcbiAgICAgICAgdmFyIHdlYmtpdFJlbGF0aXZlUGF0aCA9IGZpbGUud2Via2l0UmVsYXRpdmVQYXRoO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgJ3BhdGgnLCB7XG4gICAgICAgICAgICB2YWx1ZTogdHlwZW9mIHBhdGggPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBwYXRoXG4gICAgICAgICAgICAgICAgLy8gSWYgPGlucHV0IHdlYmtpdGRpcmVjdG9yeT4gaXMgc2V0LFxuICAgICAgICAgICAgICAgIC8vIHRoZSBGaWxlIHdpbGwgaGF2ZSBhIHt3ZWJraXRSZWxhdGl2ZVBhdGh9IHByb3BlcnR5XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxJbnB1dEVsZW1lbnQvd2Via2l0ZGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgOiB0eXBlb2Ygd2Via2l0UmVsYXRpdmVQYXRoID09PSAnc3RyaW5nJyAmJiB3ZWJraXRSZWxhdGl2ZVBhdGgubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IHdlYmtpdFJlbGF0aXZlUGF0aFxuICAgICAgICAgICAgICAgICAgICA6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZjtcbn1cbmZ1bmN0aW9uIHdpdGhNaW1lVHlwZShmaWxlKSB7XG4gICAgdmFyIG5hbWUgPSBmaWxlLm5hbWU7XG4gICAgdmFyIGhhc0V4dGVuc2lvbiA9IG5hbWUgJiYgbmFtZS5sYXN0SW5kZXhPZignLicpICE9PSAtMTtcbiAgICBpZiAoaGFzRXh0ZW5zaW9uICYmICFmaWxlLnR5cGUpIHtcbiAgICAgICAgdmFyIGV4dCA9IG5hbWUuc3BsaXQoJy4nKVxuICAgICAgICAgICAgLnBvcCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciB0eXBlID0gQ09NTU9OX01JTUVfVFlQRVMuZ2V0KGV4dCk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZSwgJ3R5cGUnLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHR5cGUsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB0b0ZpbGVXaXRoUGF0aCB9IGZyb20gJy4vZmlsZSc7XG52YXIgRklMRVNfVE9fSUdOT1JFID0gW1xuICAgIC8vIFRodW1ibmFpbCBjYWNoZSBmaWxlcyBmb3IgbWFjT1MgYW5kIFdpbmRvd3NcbiAgICAnLkRTX1N0b3JlJyxcbiAgICAnVGh1bWJzLmRiJyAvLyBXaW5kb3dzXG5dO1xuLyoqXG4gKiBDb252ZXJ0IGEgRHJhZ0V2ZW50J3MgRGF0YVRyYXNmZXIgb2JqZWN0IHRvIGEgbGlzdCBvZiBGaWxlIG9iamVjdHNcbiAqIE5PVEU6IElmIHNvbWUgb2YgdGhlIGl0ZW1zIGFyZSBmb2xkZXJzLFxuICogZXZlcnl0aGluZyB3aWxsIGJlIGZsYXR0ZW5lZCBhbmQgcGxhY2VkIGluIHRoZSBzYW1lIGxpc3QgYnV0IHRoZSBwYXRocyB3aWxsIGJlIGtlcHQgYXMgYSB7cGF0aH0gcHJvcGVydHkuXG4gKiBAcGFyYW0gZXZ0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQoZXZ0KSB7XG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGlzRHJhZ0V2dChldnQpICYmIGV2dC5kYXRhVHJhbnNmZXJcbiAgICAgICAgICAgICAgICAgICAgPyBnZXREYXRhVHJhbnNmZXJGaWxlcyhldnQuZGF0YVRyYW5zZmVyLCBldnQudHlwZSlcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRJbnB1dEZpbGVzKGV2dCldO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGlzRHJhZ0V2dCh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlLmRhdGFUcmFuc2Zlcjtcbn1cbmZ1bmN0aW9uIGdldElucHV0RmlsZXMoZXZ0KSB7XG4gICAgdmFyIGZpbGVzID0gaXNJbnB1dChldnQudGFyZ2V0KVxuICAgICAgICA/IGV2dC50YXJnZXQuZmlsZXNcbiAgICAgICAgICAgID8gZnJvbUxpc3QoZXZ0LnRhcmdldC5maWxlcylcbiAgICAgICAgICAgIDogW11cbiAgICAgICAgOiBbXTtcbiAgICByZXR1cm4gZmlsZXMubWFwKGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiB0b0ZpbGVXaXRoUGF0aChmaWxlKTsgfSk7XG59XG5mdW5jdGlvbiBpc0lucHV0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsO1xufVxuZnVuY3Rpb24gZ2V0RGF0YVRyYW5zZmVyRmlsZXMoZHQsIHR5cGUpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGl0ZW1zLCBmaWxlcztcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWR0Lml0ZW1zKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBmcm9tTGlzdChkdC5pdGVtcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0ua2luZCA9PT0gJ2ZpbGUnOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RuZC5odG1sI2RuZGV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSAnZHJhZ3N0YXJ0JyBhbmQgJ2Ryb3AnIGhhcyBhY2Nlc3MgdG8gdGhlIGRhdGEgKHNvdXJjZSBub2RlKVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2Ryb3AnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgaXRlbXNdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKGl0ZW1zLm1hcCh0b0ZpbGVQcm9taXNlcykpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGZpbGVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbm9JZ25vcmVkRmlsZXMoZmxhdHRlbihmaWxlcykpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBub0lnbm9yZWRGaWxlcyhmcm9tTGlzdChkdC5maWxlcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHRvRmlsZVdpdGhQYXRoKGZpbGUpOyB9KSldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG5vSWdub3JlZEZpbGVzKGZpbGVzKSB7XG4gICAgcmV0dXJuIGZpbGVzLmZpbHRlcihmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gRklMRVNfVE9fSUdOT1JFLmluZGV4T2YoZmlsZS5uYW1lKSA9PT0gLTE7IH0pO1xufVxuLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5LmZyb20oKVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZnJvbSNCcm93c2VyX2NvbXBhdGliaWxpdHlcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlTGlzdFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RhdGFUcmFuc2Zlckl0ZW1MaXN0XG5mdW5jdGlvbiBmcm9tTGlzdChpdGVtcykge1xuICAgIHZhciBmaWxlcyA9IFtdO1xuICAgIC8vIHRzbGludDpkaXNhYmxlOiBwcmVmZXItZm9yLW9mXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZmlsZSA9IGl0ZW1zW2ldO1xuICAgICAgICBmaWxlcy5wdXNoKGZpbGUpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZXM7XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRGF0YVRyYW5zZmVySXRlbVxuZnVuY3Rpb24gdG9GaWxlUHJvbWlzZXMoaXRlbSkge1xuICAgIGlmICh0eXBlb2YgaXRlbS53ZWJraXRHZXRBc0VudHJ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmcm9tRGF0YVRyYW5zZmVySXRlbShpdGVtKTtcbiAgICB9XG4gICAgdmFyIGVudHJ5ID0gaXRlbS53ZWJraXRHZXRBc0VudHJ5KCk7XG4gICAgLy8gU2FmYXJpIHN1cHBvcnRzIGRyb3BwaW5nIGFuIGltYWdlIG5vZGUgZnJvbSBhIGRpZmZlcmVudCB3aW5kb3cgYW5kIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmdcbiAgICAvLyB0aGUgRGF0YVRyYW5zZmVySXRlbS5nZXRBc0ZpbGUoKSBBUElcbiAgICAvLyBOT1RFOiBGaWxlU3lzdGVtRW50cnkuZmlsZSgpIHRocm93cyBpZiB0cnlpbmcgdG8gZ2V0IHRoZSBmaWxlXG4gICAgaWYgKGVudHJ5ICYmIGVudHJ5LmlzRGlyZWN0b3J5KSB7XG4gICAgICAgIHJldHVybiBmcm9tRGlyRW50cnkoZW50cnkpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbURhdGFUcmFuc2Zlckl0ZW0oaXRlbSk7XG59XG5mdW5jdGlvbiBmbGF0dGVuKGl0ZW1zKSB7XG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmaWxlcykgeyByZXR1cm4gdHNsaWJfMS5fX3NwcmVhZChhY2MsIChBcnJheS5pc0FycmF5KGZpbGVzKSA/IGZsYXR0ZW4oZmlsZXMpIDogW2ZpbGVzXSkpOyB9LCBbXSk7XG59XG5mdW5jdGlvbiBmcm9tRGF0YVRyYW5zZmVySXRlbShpdGVtKSB7XG4gICAgdmFyIGZpbGUgPSBpdGVtLmdldEFzRmlsZSgpO1xuICAgIGlmICghZmlsZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoaXRlbSArIFwiIGlzIG5vdCBhIEZpbGVcIik7XG4gICAgfVxuICAgIHZhciBmd3AgPSB0b0ZpbGVXaXRoUGF0aChmaWxlKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZ3cCk7XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVN5c3RlbUVudHJ5XG5mdW5jdGlvbiBmcm9tRW50cnkoZW50cnkpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZW50cnkuaXNEaXJlY3RvcnkgPyBmcm9tRGlyRW50cnkoZW50cnkpIDogZnJvbUZpbGVFbnRyeShlbnRyeSldO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlU3lzdGVtRGlyZWN0b3J5RW50cnlcbmZ1bmN0aW9uIGZyb21EaXJFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWFkZXIgPSBlbnRyeS5jcmVhdGVSZWFkZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgICBmdW5jdGlvbiByZWFkRW50cmllcygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVN5c3RlbURpcmVjdG9yeUVudHJ5L2NyZWF0ZVJlYWRlclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVTeXN0ZW1EaXJlY3RvcnlSZWFkZXIvcmVhZEVudHJpZXNcbiAgICAgICAgICAgIHJlYWRlci5yZWFkRW50cmllcyhmdW5jdGlvbiAoYmF0Y2gpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlcywgZXJyXzEsIGl0ZW1zO1xuICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhYmF0Y2gubGVuZ3RoKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsxLCAzLCAsIDRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChlbnRyaWVzKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmaWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyXzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBQcm9taXNlLmFsbChiYXRjaC5tYXAoZnJvbUVudHJ5KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKGl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb250aW51ZSByZWFkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDY7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7IH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgfSk7XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVN5c3RlbUZpbGVFbnRyeVxuZnVuY3Rpb24gZnJvbUZpbGVFbnRyeShlbnRyeSkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmZpbGUoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmd3AgPSB0b0ZpbGVXaXRoUGF0aChmaWxlLCBlbnRyeS5mdWxsUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZ3cCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS1zZWxlY3Rvci5qcy5tYXAiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgYWNjZXB0cyBmcm9tICdhdHRyLWFjY2VwdCc7IC8vIEZpcmVmb3ggdmVyc2lvbnMgcHJpb3IgdG8gNTMgcmV0dXJuIGEgYm9ndXMgTUlNRSB0eXBlIGZvciBldmVyeSBmaWxlIGRyYWcsIHNvIGRyYWdvdmVycyB3aXRoXG4vLyB0aGF0IE1JTUUgdHlwZSB3aWxsIGFsd2F5cyBiZSBhY2NlcHRlZFxuXG5leHBvcnQgZnVuY3Rpb24gZmlsZUFjY2VwdGVkKGZpbGUsIGFjY2VwdCkge1xuICByZXR1cm4gZmlsZS50eXBlID09PSAnYXBwbGljYXRpb24veC1tb3otZmlsZScgfHwgYWNjZXB0cyhmaWxlLCBhY2NlcHQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbGVNYXRjaFNpemUoZmlsZSwgbWluU2l6ZSwgbWF4U2l6ZSkge1xuICBpZiAoaXNEZWZpbmVkKGZpbGUuc2l6ZSkpIHtcbiAgICBpZiAoaXNEZWZpbmVkKG1pblNpemUpICYmIGlzRGVmaW5lZChtYXhTaXplKSkgcmV0dXJuIGZpbGUuc2l6ZSA+PSBtaW5TaXplICYmIGZpbGUuc2l6ZSA8PSBtYXhTaXplO2Vsc2UgaWYgKGlzRGVmaW5lZChtaW5TaXplKSkgcmV0dXJuIGZpbGUuc2l6ZSA+PSBtaW5TaXplO2Vsc2UgaWYgKGlzRGVmaW5lZChtYXhTaXplKSkgcmV0dXJuIGZpbGUuc2l6ZSA8PSBtYXhTaXplO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbEZpbGVzQWNjZXB0ZWQoZmlsZXMsIGFjY2VwdCwgbWluU2l6ZSwgbWF4U2l6ZSkge1xuICByZXR1cm4gZmlsZXMuZXZlcnkoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICByZXR1cm4gZmlsZUFjY2VwdGVkKGZpbGUsIGFjY2VwdCkgJiYgZmlsZU1hdGNoU2l6ZShmaWxlLCBtaW5TaXplLCBtYXhTaXplKTtcbiAgfSk7XG59IC8vIFJlYWN0J3Mgc3ludGhldGljIGV2ZW50cyBoYXMgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQsXG4vLyBidXQgdG8gcmVtYWluIGNvbXBhdGliaWxpdHkgd2l0aCBvdGhlciBsaWJzIChQcmVhY3QpIGZhbGwgYmFja1xuLy8gdG8gY2hlY2sgZXZlbnQuY2FuY2VsQnViYmxlXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3BhZ2F0aW9uU3RvcHBlZChldmVudCkge1xuICBpZiAodHlwZW9mIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV2ZW50LmNhbmNlbEJ1YmJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZXZlbnQuY2FuY2VsQnViYmxlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRXZ0V2l0aEZpbGVzKGV2ZW50KSB7XG4gIGlmICghZXZlbnQuZGF0YVRyYW5zZmVyKSB7XG4gICAgcmV0dXJuICEhZXZlbnQudGFyZ2V0ICYmICEhZXZlbnQudGFyZ2V0LmZpbGVzO1xuICB9IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9EYXRhVHJhbnNmZXIvdHlwZXNcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxfRHJhZ19hbmRfRHJvcF9BUEkvUmVjb21tZW5kZWRfZHJhZ190eXBlcyNmaWxlXG5cblxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChldmVudC5kYXRhVHJhbnNmZXIudHlwZXMsIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdGaWxlcycgfHwgdHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3gtbW96LWZpbGUnO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0tpbmRGaWxlKGl0ZW0pIHtcbiAgcmV0dXJuIF90eXBlb2YoaXRlbSkgPT09ICdvYmplY3QnICYmIGl0ZW0gIT09IG51bGwgJiYgaXRlbS5raW5kID09PSAnZmlsZSc7XG59IC8vIGFsbG93IHRoZSBlbnRpcmUgZG9jdW1lbnQgdG8gYmUgYSBkcmFnIHRhcmdldFxuXG5leHBvcnQgZnVuY3Rpb24gb25Eb2N1bWVudERyYWdPdmVyKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmZ1bmN0aW9uIGlzSWUodXNlckFnZW50KSB7XG4gIHJldHVybiB1c2VyQWdlbnQuaW5kZXhPZignTVNJRScpICE9PSAtMSB8fCB1c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudC8nKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGlzRWRnZSh1c2VyQWdlbnQpIHtcbiAgcmV0dXJuIHVzZXJBZ2VudC5pbmRleE9mKCdFZGdlLycpICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSWVPckVkZ2UoKSB7XG4gIHZhciB1c2VyQWdlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICByZXR1cm4gaXNJZSh1c2VyQWdlbnQpIHx8IGlzRWRnZSh1c2VyQWdlbnQpO1xufVxuLyoqXG4gKiBUaGlzIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgdG8gY29tcG9zZSBldmVudCBoYW5kbGVyc1xuICogVGhleSBhcmUgZXhlY3V0ZWQgaW4gb3JkZXIgdW50aWwgb25lIG9mIHRoZW0gY2FsbHMgYGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKClgLlxuICogTm90ZSB0aGF0IHRoZSBjaGVjayBpcyBkb25lIG9uIHRoZSBmaXJzdCBpbnZva2UgdG9vLFxuICogbWVhbmluZyB0aGF0IGlmIHByb3BhZ2F0aW9uIHdhcyBzdG9wcGVkIGJlZm9yZSBpbnZva2luZyB0aGUgZm5zLFxuICogbm8gaGFuZGxlcnMgd2lsbCBiZSBleGVjdXRlZC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbnMgdGhlIGV2ZW50IGhhbmxkZXIgZnVuY3Rpb25zXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGV2ZW50IGhhbmRsZXIgdG8gYWRkIHRvIGFuIGVsZW1lbnRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZUV2ZW50SGFuZGxlcnMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZm5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBmbnMuc29tZShmdW5jdGlvbiAoZm4pIHtcbiAgICAgIGlmICghaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpICYmIGZuKSB7XG4gICAgICAgIGZuLmFwcGx5KHZvaWQgMCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpO1xuICAgIH0pO1xuICB9O1xufSIsImZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSkgeyByZXR1cm47IH0gdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG4vKiBlc2xpbnQgcHJlZmVyLXRlbXBsYXRlOiAwICovXG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZUltcGVyYXRpdmVIYW5kbGUsIHVzZU1lbW8sIHVzZVJlZHVjZXIsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBmcm9tRXZlbnQgfSBmcm9tICdmaWxlLXNlbGVjdG9yJztcbmltcG9ydCB7IGFsbEZpbGVzQWNjZXB0ZWQsIGNvbXBvc2VFdmVudEhhbmRsZXJzLCBmaWxlQWNjZXB0ZWQsIGZpbGVNYXRjaFNpemUsIGlzRXZ0V2l0aEZpbGVzLCBpc0llT3JFZGdlLCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCwgb25Eb2N1bWVudERyYWdPdmVyIH0gZnJvbSAnLi91dGlscy9pbmRleCc7XG4vKipcbiAqIENvbnZlbmllbmNlIHdyYXBwZXIgY29tcG9uZW50IGZvciB0aGUgYHVzZURyb3B6b25lYCBob29rXG4gKlxuICogYGBganN4XG4gKiA8RHJvcHpvbmU+XG4gKiAgIHsoe2dldFJvb3RQcm9wcywgZ2V0SW5wdXRQcm9wc30pID0+IChcbiAqICAgICA8ZGl2IHsuLi5nZXRSb290UHJvcHMoKX0+XG4gKiAgICAgICA8aW5wdXQgey4uLmdldElucHV0UHJvcHMoKX0gLz5cbiAqICAgICAgIDxwPkRyYWcgJ24nIGRyb3Agc29tZSBmaWxlcyBoZXJlLCBvciBjbGljayB0byBzZWxlY3QgZmlsZXM8L3A+XG4gKiAgICAgPC9kaXY+XG4gKiAgICl9XG4gKiA8L0Ryb3B6b25lPlxuICogYGBgXG4gKi9cblxudmFyIERyb3B6b25lID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBwYXJhbXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiY2hpbGRyZW5cIl0pO1xuXG4gIHZhciBfdXNlRHJvcHpvbmUgPSB1c2VEcm9wem9uZShwYXJhbXMpLFxuICAgICAgb3BlbiA9IF91c2VEcm9wem9uZS5vcGVuLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3VzZURyb3B6b25lLCBbXCJvcGVuXCJdKTtcblxuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuOiBvcGVuXG4gICAgfTtcbiAgfSwgW29wZW5dKTsgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgcmVhY3Qtc3R5bGVndWlkaXN0IGNhbm5vdCBjcmVhdGUgZG9jcyBpZiB3ZSBkb24ndCByZXR1cm4gYSBqc3ggZWxlbWVudFxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcywge1xuICAgIG9wZW46IG9wZW5cbiAgfSkpKTtcbn0pO1xuRHJvcHpvbmUuZGlzcGxheU5hbWUgPSAnRHJvcHpvbmUnO1xuRHJvcHpvbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogUmVuZGVyIGZ1bmN0aW9uIHRoYXQgZXhwb3NlcyB0aGUgZHJvcHpvbmUgc3RhdGUgYW5kIHByb3AgZ2V0dGVyIGZuc1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcmFtcy5nZXRSb290UHJvcHMgUmV0dXJucyB0aGUgcHJvcHMgeW91IHNob3VsZCBhcHBseSB0byB0aGUgcm9vdCBkcm9wIGNvbnRhaW5lciB5b3UgcmVuZGVyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcmFtcy5nZXRJbnB1dFByb3BzIFJldHVybnMgdGhlIHByb3BzIHlvdSBzaG91bGQgYXBwbHkgdG8gaGlkZGVuIGZpbGUgaW5wdXQgeW91IHJlbmRlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJhbXMub3BlbiBPcGVuIHRoZSBuYXRpdmUgZmlsZSBzZWxlY3Rpb24gZGlhbG9nXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLmlzRm9jdXNlZCBEcm9wem9uZSBhcmVhIGlzIGluIGZvY3VzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLmlzRmlsZURpYWxvZ0FjdGl2ZSBGaWxlIGRpYWxvZyBpcyBvcGVuZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBwYXJhbXMuaXNEcmFnQWN0aXZlIEFjdGl2ZSBkcmFnIGlzIGluIHByb2dyZXNzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLmlzRHJhZ0FjY2VwdCBEcmFnZ2VkIGZpbGVzIGFyZSBhY2NlcHRlZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmFtcy5pc0RyYWdSZWplY3QgU29tZSBkcmFnZ2VkIGZpbGVzIGFyZSByZWplY3RlZFxuICAgKiBAcGFyYW0ge0ZpbGVbXX0gcGFyYW1zLmRyYWdnZWRGaWxlcyBGaWxlcyBpbiBhY3RpdmUgZHJhZ1xuICAgKiBAcGFyYW0ge0ZpbGVbXX0gcGFyYW1zLmFjY2VwdGVkRmlsZXMgQWNjZXB0ZWQgZmlsZXNcbiAgICogQHBhcmFtIHtGaWxlW119IHBhcmFtcy5yZWplY3RlZEZpbGVzIFJlamVjdGVkIGZpbGVzXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFNldCBhY2NlcHRlZCBmaWxlIHR5cGVzLlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL29rb25ldC9hdHRyLWFjY2VwdCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogS2VlcCBpbiBtaW5kIHRoYXQgbWltZSB0eXBlIGRldGVybWluYXRpb24gaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBwbGF0Zm9ybXMuIENTViBmaWxlcyxcbiAgICogZm9yIGV4YW1wbGUsIGFyZSByZXBvcnRlZCBhcyB0ZXh0L3BsYWluIHVuZGVyIG1hY09TIGJ1dCBhcyBhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwgdW5kZXJcbiAgICogV2luZG93cy4gSW4gc29tZSBjYXNlcyB0aGVyZSBtaWdodCBub3QgYmUgYSBtaW1lIHR5cGUgc2V0IGF0IGFsbC5cbiAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZHJvcHpvbmUvcmVhY3QtZHJvcHpvbmUvaXNzdWVzLzI3NlxuICAgKi9cbiAgYWNjZXB0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuXG4gIC8qKlxuICAgKiBBbGxvdyBkcmFnICduJyBkcm9wIChvciBzZWxlY3Rpb24gZnJvbSB0aGUgZmlsZSBkaWFsb2cpIG9mIG11bHRpcGxlIGZpbGVzXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGZhbHNlLCBhbGxvdyBkcm9wcGVkIGl0ZW1zIHRvIHRha2Ugb3ZlciB0aGUgY3VycmVudCBicm93c2VyIHdpbmRvd1xuICAgKi9cbiAgcHJldmVudERyb3BPbkRvY3VtZW50OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgZGlzYWJsZXMgY2xpY2sgdG8gb3BlbiB0aGUgbmF0aXZlIGZpbGUgc2VsZWN0aW9uIGRpYWxvZ1xuICAgKi9cbiAgbm9DbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGRpc2FibGVzIFNQQUNFL0VOVEVSIHRvIG9wZW4gdGhlIG5hdGl2ZSBmaWxlIHNlbGVjdGlvbiBkaWFsb2cuXG4gICAqIE5vdGUgdGhhdCBpdCBhbHNvIHN0b3BzIHRyYWNraW5nIHRoZSBmb2N1cyBzdGF0ZS5cbiAgICovXG4gIG5vS2V5Ym9hcmQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBkaXNhYmxlcyBkcmFnICduJyBkcm9wXG4gICAqL1xuICBub0RyYWc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzdG9wcyBkcmFnIGV2ZW50IHByb3BhZ2F0aW9uIHRvIHBhcmVudHNcbiAgICovXG4gIG5vRHJhZ0V2ZW50c0J1YmJsaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWluaW11bSBmaWxlIHNpemUgKGluIGJ5dGVzKVxuICAgKi9cbiAgbWluU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogTWF4aW11bSBmaWxlIHNpemUgKGluIGJ5dGVzKVxuICAgKi9cbiAgbWF4U2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogRW5hYmxlL2Rpc2FibGUgdGhlIGRyb3B6b25lXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHByb3ZpZGUgYSBjdXN0b20gZmlsZSBhZ2dyZWdhdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50IEEgZHJhZyBldmVudCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQgKGlmIGZpbGVzIHdlcmUgc2VsZWN0ZWQgdmlhIHRoZSBmaWxlIGRpYWxvZylcbiAgICovXG4gIGdldEZpbGVzRnJvbUV2ZW50OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2IgZm9yIHdoZW4gY2xvc2luZyB0aGUgZmlsZSBkaWFsb2cgd2l0aCBubyBzZWxlY3Rpb25cbiAgICovXG4gIG9uRmlsZURpYWxvZ0NhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENiIGZvciB3aGVuIHRoZSBgZHJhZ2VudGVyYCBldmVudCBvY2N1cnMuXG4gICAqXG4gICAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBldmVudFxuICAgKi9cbiAgb25EcmFnRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYiBmb3Igd2hlbiB0aGUgYGRyYWdsZWF2ZWAgZXZlbnQgb2NjdXJzXG4gICAqXG4gICAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBldmVudFxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYiBmb3Igd2hlbiB0aGUgYGRyYWdvdmVyYCBldmVudCBvY2N1cnNcbiAgICpcbiAgICogQHBhcmFtIHtEcmFnRXZlbnR9IGV2ZW50XG4gICAqL1xuICBvbkRyYWdPdmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2IgZm9yIHdoZW4gdGhlIGBkcm9wYCBldmVudCBvY2N1cnMuXG4gICAqIE5vdGUgdGhhdCB0aGlzIGNhbGxiYWNrIGlzIGludm9rZWQgYWZ0ZXIgdGhlIGBnZXRGaWxlc0Zyb21FdmVudGAgY2FsbGJhY2sgaXMgZG9uZS5cbiAgICpcbiAgICogRmlsZXMgYXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkIGJhc2VkIG9uIHRoZSBgYWNjZXB0YCwgYG11bHRpcGxlYCwgYG1pblNpemVgIGFuZCBgbWF4U2l6ZWAgcHJvcHMuXG4gICAqIGBhY2NlcHRgIG11c3QgYmUgYSB2YWxpZCBbTUlNRSB0eXBlXShodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sKSBhY2NvcmRpbmcgdG8gW2lucHV0IGVsZW1lbnQgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cudzMub3JnL3dpa2kvSFRNTC9FbGVtZW50cy9pbnB1dC9maWxlKSBvciBhIHZhbGlkIGZpbGUgZXh0ZW5zaW9uLlxuICAgKiBJZiBgbXVsdGlwbGVgIGlzIHNldCB0byBmYWxzZSBhbmQgYWRkaXRpb25hbCBmaWxlcyBhcmUgZHJvcHBwZWQsXG4gICAqIGFsbCBmaWxlcyBiZXNpZGVzIHRoZSBmaXJzdCB3aWxsIGJlIHJlamVjdGVkLlxuICAgKiBBbnkgZmlsZSB3aGljaCBkb2VzIG5vdCBoYXZlIGEgc2l6ZSBpbiB0aGUgW2BtaW5TaXplYCwgYG1heFNpemVgXSByYW5nZSwgd2lsbCBiZSByZWplY3RlZCBhcyB3ZWxsLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGBvbkRyb3BgIGNhbGxiYWNrIHdpbGwgYWx3YXlzIGJlIGludm9rZWQgcmVnYXJkbGVzcyBpZiB0aGUgZHJvcHBlZCBmaWxlcyB3ZXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkLlxuICAgKiBJZiB5b3UnZCBsaWtlIHRvIHJlYWN0IHRvIGEgc3BlY2lmaWMgc2NlbmFyaW8sIHVzZSB0aGUgYG9uRHJvcEFjY2VwdGVkYC9gb25Ecm9wUmVqZWN0ZWRgIHByb3BzLlxuICAgKlxuICAgKiBgb25Ecm9wYCB3aWxsIHByb3ZpZGUgeW91IHdpdGggYW4gYXJyYXkgb2YgW0ZpbGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlKSBvYmplY3RzIHdoaWNoIHlvdSBjYW4gdGhlbiBwcm9jZXNzIGFuZCBzZW5kIHRvIGEgc2VydmVyLlxuICAgKiBGb3IgZXhhbXBsZSwgd2l0aCBbU3VwZXJBZ2VudF0oaHR0cHM6Ly9naXRodWIuY29tL3Zpc2lvbm1lZGlhL3N1cGVyYWdlbnQpIGFzIGEgaHR0cC9hamF4IGxpYnJhcnk6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uIG9uRHJvcChhY2NlcHRlZEZpbGVzKSB7XG4gICAqICAgY29uc3QgcmVxID0gcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAgICogICBhY2NlcHRlZEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAqICAgICByZXEuYXR0YWNoKGZpbGUubmFtZSwgZmlsZSlcbiAgICogICB9KVxuICAgKiAgIHJlcS5lbmQoY2FsbGJhY2spXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7RmlsZVtdfSBhY2NlcHRlZEZpbGVzXG4gICAqIEBwYXJhbSB7RmlsZVtdfSByZWplY3RlZEZpbGVzXG4gICAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50IEEgZHJhZyBldmVudCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQgKGlmIGZpbGVzIHdlcmUgc2VsZWN0ZWQgdmlhIHRoZSBmaWxlIGRpYWxvZylcbiAgICovXG4gIG9uRHJvcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENiIGZvciB3aGVuIHRoZSBgZHJvcGAgZXZlbnQgb2NjdXJzLlxuICAgKiBOb3RlIHRoYXQgaWYgbm8gZmlsZXMgYXJlIGFjY2VwdGVkLCB0aGlzIGNhbGxiYWNrIGlzIG5vdCBpbnZva2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge0ZpbGVbXX0gZmlsZXNcbiAgICogQHBhcmFtIHsoRHJhZ0V2ZW50fEV2ZW50KX0gZXZlbnRcbiAgICovXG4gIG9uRHJvcEFjY2VwdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2IgZm9yIHdoZW4gdGhlIGBkcm9wYCBldmVudCBvY2N1cnMuXG4gICAqIE5vdGUgdGhhdCBpZiBubyBmaWxlcyBhcmUgcmVqZWN0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0W119IGZpbGVzXG4gICAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50XG4gICAqL1xuICBvbkRyb3BSZWplY3RlZDogUHJvcFR5cGVzLmZ1bmNcbn07XG5leHBvcnQgZGVmYXVsdCBEcm9wem9uZTtcbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgZm9yIHRoZSBgZHJhZ2VudGVyYCxcbiAqIGBkcmFnb3ZlcmAgYW5kIGBkcmFnbGVhdmVgIGV2ZW50cy5cbiAqIEl0IGlzIG5vdCBpbnZva2VkIGlmIHRoZSBpdGVtcyBhcmUgbm90IGZpbGVzIChzdWNoIGFzIGxpbmssIHRleHQsIGV0Yy4pLlxuICpcbiAqIEBjYWxsYmFjayBkcmFnQ2JcbiAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBldmVudFxuICovXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgZm9yIHRoZSBgZHJvcGAgb3IgaW5wdXQgY2hhbmdlIGV2ZW50LlxuICogSXQgaXMgbm90IGludm9rZWQgaWYgdGhlIGl0ZW1zIGFyZSBub3QgZmlsZXMgKHN1Y2ggYXMgbGluaywgdGV4dCwgZXRjLikuXG4gKlxuICogQGNhbGxiYWNrIGRyb3BDYlxuICogQHBhcmFtIHtGaWxlW119IGFjY2VwdGVkRmlsZXMgTGlzdCBvZiBhY2NlcHRlZCBmaWxlc1xuICogQHBhcmFtIHtGaWxlW119IHJlamVjdGVkRmlsZXMgTGlzdCBvZiByZWplY3RlZCBmaWxlc1xuICogQHBhcmFtIHsoRHJhZ0V2ZW50fEV2ZW50KX0gZXZlbnQgQSBkcmFnIGV2ZW50IG9yIGlucHV0IGNoYW5nZSBldmVudCAoaWYgZmlsZXMgd2VyZSBzZWxlY3RlZCB2aWEgdGhlIGZpbGUgZGlhbG9nKVxuICovXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgZm9yIHRoZSBgZHJvcGAgb3IgaW5wdXQgY2hhbmdlIGV2ZW50LlxuICogSXQgaXMgbm90IGludm9rZWQgaWYgdGhlIGl0ZW1zIGFyZSBmaWxlcyAoc3VjaCBhcyBsaW5rLCB0ZXh0LCBldGMuKS5cbiAqXG4gKiBAY2FsbGJhY2sgZHJvcEFjY2VwdGVkQ2JcbiAqIEBwYXJhbSB7RmlsZVtdfSBmaWxlcyBMaXN0IG9mIGFjY2VwdGVkIGZpbGVzIHRoYXQgbWVldCB0aGUgZ2l2ZW4gY3JpdGVyaWFcbiAqIChgYWNjZXB0YCwgYG11bHRpcGxlYCwgYG1pblNpemVgLCBgbWF4U2l6ZWApXG4gKiBAcGFyYW0geyhEcmFnRXZlbnR8RXZlbnQpfSBldmVudCBBIGRyYWcgZXZlbnQgb3IgaW5wdXQgY2hhbmdlIGV2ZW50IChpZiBmaWxlcyB3ZXJlIHNlbGVjdGVkIHZpYSB0aGUgZmlsZSBkaWFsb2cpXG4gKi9cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBmb3IgdGhlIGBkcm9wYCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQuXG4gKlxuICogQGNhbGxiYWNrIGRyb3BSZWplY3RlZENiXG4gKiBAcGFyYW0ge0ZpbGVbXX0gZmlsZXMgTGlzdCBvZiByZWplY3RlZCBmaWxlcyB0aGF0IGRvIG5vdCBtZWV0IHRoZSBnaXZlbiBjcml0ZXJpYVxuICogKGBhY2NlcHRgLCBgbXVsdGlwbGVgLCBgbWluU2l6ZWAsIGBtYXhTaXplYClcbiAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50IEEgZHJhZyBldmVudCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQgKGlmIGZpbGVzIHdlcmUgc2VsZWN0ZWQgdmlhIHRoZSBmaWxlIGRpYWxvZylcbiAqL1xuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCBpcyB1c2VkIGFnZ3JlZ2F0ZSBmaWxlcyxcbiAqIGluIGEgYXN5bmNocm9ub3VzIGZhc2hpb24sIGZyb20gZHJhZyBvciBpbnB1dCBjaGFuZ2UgZXZlbnRzLlxuICpcbiAqIEBjYWxsYmFjayBnZXRGaWxlc0Zyb21FdmVudFxuICogQHBhcmFtIHsoRHJhZ0V2ZW50fEV2ZW50KX0gZXZlbnQgQSBkcmFnIGV2ZW50IG9yIGlucHV0IGNoYW5nZSBldmVudCAoaWYgZmlsZXMgd2VyZSBzZWxlY3RlZCB2aWEgdGhlIGZpbGUgZGlhbG9nKVxuICogQHJldHVybnMgeyhGaWxlW118UHJvbWlzZTxGaWxlW10+KX1cbiAqL1xuXG4vKipcbiAqIEFuIG9iamVjdCB3aXRoIHRoZSBjdXJyZW50IGRyb3B6b25lIHN0YXRlIGFuZCBzb21lIGhlbHBlciBmdW5jdGlvbnMuXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gRHJvcHpvbmVTdGF0ZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0Um9vdFByb3BzIFJldHVybnMgdGhlIHByb3BzIHlvdSBzaG91bGQgYXBwbHkgdG8gdGhlIHJvb3QgZHJvcCBjb250YWluZXIgeW91IHJlbmRlclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0SW5wdXRQcm9wcyBSZXR1cm5zIHRoZSBwcm9wcyB5b3Ugc2hvdWxkIGFwcGx5IHRvIGhpZGRlbiBmaWxlIGlucHV0IHlvdSByZW5kZXJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IG9wZW4gT3BlbiB0aGUgbmF0aXZlIGZpbGUgc2VsZWN0aW9uIGRpYWxvZ1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc0ZvY3VzZWQgRHJvcHpvbmUgYXJlYSBpcyBpbiBmb2N1c1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc0ZpbGVEaWFsb2dBY3RpdmUgRmlsZSBkaWFsb2cgaXMgb3BlbmVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzRHJhZ0FjdGl2ZSBBY3RpdmUgZHJhZyBpcyBpbiBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc0RyYWdBY2NlcHQgRHJhZ2dlZCBmaWxlcyBhcmUgYWNjZXB0ZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNEcmFnUmVqZWN0IFNvbWUgZHJhZ2dlZCBmaWxlcyBhcmUgcmVqZWN0ZWRcbiAqIEBwcm9wZXJ0eSB7RmlsZVtdfSBkcmFnZ2VkRmlsZXMgRmlsZXMgaW4gYWN0aXZlIGRyYWdcbiAqIEBwcm9wZXJ0eSB7RmlsZVtdfSBhY2NlcHRlZEZpbGVzIEFjY2VwdGVkIGZpbGVzXG4gKiBAcHJvcGVydHkge0ZpbGVbXX0gcmVqZWN0ZWRGaWxlcyBSZWplY3RlZCBmaWxlc1xuICovXG5cbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIGlzRmlsZURpYWxvZ0FjdGl2ZTogZmFsc2UsXG4gIGlzRHJhZ0FjdGl2ZTogZmFsc2UsXG4gIGlzRHJhZ0FjY2VwdDogZmFsc2UsXG4gIGlzRHJhZ1JlamVjdDogZmFsc2UsXG4gIGRyYWdnZWRGaWxlczogW10sXG4gIGFjY2VwdGVkRmlsZXM6IFtdLFxuICByZWplY3RlZEZpbGVzOiBbXVxufTtcbi8qKlxuICogQSBSZWFjdCBob29rIHRoYXQgY3JlYXRlcyBhIGRyYWcgJ24nIGRyb3AgYXJlYS5cbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIE15RHJvcHpvbmUocHJvcHMpIHtcbiAqICAgY29uc3Qge2dldFJvb3RQcm9wcywgZ2V0SW5wdXRQcm9wc30gPSB1c2VEcm9wem9uZSh7XG4gKiAgICAgb25Ecm9wOiBhY2NlcHRlZEZpbGVzID0+IHtcbiAqICAgICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSBGaWxlIG9iamVjdHMsIGUuZy4gdXBsb2FkIHRvIHNvbWUgc2VydmVyXG4gKiAgICAgfVxuICogICB9KTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2IHsuLi5nZXRSb290UHJvcHMoKX0+XG4gKiAgICAgICA8aW5wdXQgey4uLmdldElucHV0UHJvcHMoKX0gLz5cbiAqICAgICAgIDxwPkRyYWcgYW5kIGRyb3Agc29tZSBmaWxlcyBoZXJlLCBvciBjbGljayB0byBzZWxlY3QgZmlsZXM8L3A+XG4gKiAgICAgPC9kaXY+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBmdW5jdGlvbiB1c2VEcm9wem9uZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFtwcm9wcy5hY2NlcHRdIFNldCBhY2NlcHRlZCBmaWxlIHR5cGVzLlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9va29uZXQvYXR0ci1hY2NlcHQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBtaW1lIHR5cGUgZGV0ZXJtaW5hdGlvbiBpcyBub3QgcmVsaWFibGUgYWNyb3NzIHBsYXRmb3Jtcy4gQ1NWIGZpbGVzLFxuICogZm9yIGV4YW1wbGUsIGFyZSByZXBvcnRlZCBhcyB0ZXh0L3BsYWluIHVuZGVyIG1hY09TIGJ1dCBhcyBhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwgdW5kZXJcbiAqIFdpbmRvd3MuIEluIHNvbWUgY2FzZXMgdGhlcmUgbWlnaHQgbm90IGJlIGEgbWltZSB0eXBlIHNldCBhdCBhbGwuXG4gKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1kcm9wem9uZS9yZWFjdC1kcm9wem9uZS9pc3N1ZXMvMjc2XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5tdWx0aXBsZT10cnVlXSBBbGxvdyBkcmFnICduJyBkcm9wIChvciBzZWxlY3Rpb24gZnJvbSB0aGUgZmlsZSBkaWFsb2cpIG9mIG11bHRpcGxlIGZpbGVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5wcmV2ZW50RHJvcE9uRG9jdW1lbnQ9dHJ1ZV0gSWYgZmFsc2UsIGFsbG93IGRyb3BwZWQgaXRlbXMgdG8gdGFrZSBvdmVyIHRoZSBjdXJyZW50IGJyb3dzZXIgd2luZG93XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5ub0NsaWNrPWZhbHNlXSBJZiB0cnVlLCBkaXNhYmxlcyBjbGljayB0byBvcGVuIHRoZSBuYXRpdmUgZmlsZSBzZWxlY3Rpb24gZGlhbG9nXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5ub0tleWJvYXJkPWZhbHNlXSBJZiB0cnVlLCBkaXNhYmxlcyBTUEFDRS9FTlRFUiB0byBvcGVuIHRoZSBuYXRpdmUgZmlsZSBzZWxlY3Rpb24gZGlhbG9nLlxuICogTm90ZSB0aGF0IGl0IGFsc28gc3RvcHMgdHJhY2tpbmcgdGhlIGZvY3VzIHN0YXRlLlxuICogQHBhcmFtIHtib29sZWFufSBbcHJvcHMubm9EcmFnPWZhbHNlXSBJZiB0cnVlLCBkaXNhYmxlcyBkcmFnICduJyBkcm9wXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5ub0RyYWdFdmVudHNCdWJibGluZz1mYWxzZV0gSWYgdHJ1ZSwgc3RvcHMgZHJhZyBldmVudCBwcm9wYWdhdGlvbiB0byBwYXJlbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gW3Byb3BzLm1pblNpemU9MF0gTWluaW11bSBmaWxlIHNpemUgKGluIGJ5dGVzKVxuICogQHBhcmFtIHtudW1iZXJ9IFtwcm9wcy5tYXhTaXplPUluZmluaXR5XSBNYXhpbXVtIGZpbGUgc2l6ZSAoaW4gYnl0ZXMpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5kaXNhYmxlZD1mYWxzZV0gRW5hYmxlL2Rpc2FibGUgdGhlIGRyb3B6b25lXG4gKiBAcGFyYW0ge2dldEZpbGVzRnJvbUV2ZW50fSBbcHJvcHMuZ2V0RmlsZXNGcm9tRXZlbnRdIFVzZSB0aGlzIHRvIHByb3ZpZGUgYSBjdXN0b20gZmlsZSBhZ2dyZWdhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcHMub25GaWxlRGlhbG9nQ2FuY2VsXSBDYiBmb3Igd2hlbiBjbG9zaW5nIHRoZSBmaWxlIGRpYWxvZyB3aXRoIG5vIHNlbGVjdGlvblxuICogQHBhcmFtIHtkcmFnQ2J9IFtwcm9wcy5vbkRyYWdFbnRlcl0gQ2IgZm9yIHdoZW4gdGhlIGBkcmFnZW50ZXJgIGV2ZW50IG9jY3Vycy5cbiAqIEBwYXJhbSB7ZHJhZ0NifSBbcHJvcHMub25EcmFnTGVhdmVdIENiIGZvciB3aGVuIHRoZSBgZHJhZ2xlYXZlYCBldmVudCBvY2N1cnNcbiAqIEBwYXJhbSB7ZHJhZ0NifSBbcHJvcHMub25EcmFnT3Zlcl0gQ2IgZm9yIHdoZW4gdGhlIGBkcmFnb3ZlcmAgZXZlbnQgb2NjdXJzXG4gKiBAcGFyYW0ge2Ryb3BDYn0gW3Byb3BzLm9uRHJvcF0gQ2IgZm9yIHdoZW4gdGhlIGBkcm9wYCBldmVudCBvY2N1cnMuXG4gKiBOb3RlIHRoYXQgdGhpcyBjYWxsYmFjayBpcyBpbnZva2VkIGFmdGVyIHRoZSBgZ2V0RmlsZXNGcm9tRXZlbnRgIGNhbGxiYWNrIGlzIGRvbmUuXG4gKlxuICogRmlsZXMgYXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkIGJhc2VkIG9uIHRoZSBgYWNjZXB0YCwgYG11bHRpcGxlYCwgYG1pblNpemVgIGFuZCBgbWF4U2l6ZWAgcHJvcHMuXG4gKiBgYWNjZXB0YCBtdXN0IGJlIGEgdmFsaWQgW01JTUUgdHlwZV0oaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9tZWRpYS10eXBlcy9tZWRpYS10eXBlcy54aHRtbCkgYWNjb3JkaW5nIHRvIFtpbnB1dCBlbGVtZW50IHNwZWNpZmljYXRpb25dKGh0dHBzOi8vd3d3LnczLm9yZy93aWtpL0hUTUwvRWxlbWVudHMvaW5wdXQvZmlsZSkgb3IgYSB2YWxpZCBmaWxlIGV4dGVuc2lvbi5cbiAqIElmIGBtdWx0aXBsZWAgaXMgc2V0IHRvIGZhbHNlIGFuZCBhZGRpdGlvbmFsIGZpbGVzIGFyZSBkcm9wcHBlZCxcbiAqIGFsbCBmaWxlcyBiZXNpZGVzIHRoZSBmaXJzdCB3aWxsIGJlIHJlamVjdGVkLlxuICogQW55IGZpbGUgd2hpY2ggZG9lcyBub3QgaGF2ZSBhIHNpemUgaW4gdGhlIFtgbWluU2l6ZWAsIGBtYXhTaXplYF0gcmFuZ2UsIHdpbGwgYmUgcmVqZWN0ZWQgYXMgd2VsbC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIGBvbkRyb3BgIGNhbGxiYWNrIHdpbGwgYWx3YXlzIGJlIGludm9rZWQgcmVnYXJkbGVzcyBpZiB0aGUgZHJvcHBlZCBmaWxlcyB3ZXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkLlxuICogSWYgeW91J2QgbGlrZSB0byByZWFjdCB0byBhIHNwZWNpZmljIHNjZW5hcmlvLCB1c2UgdGhlIGBvbkRyb3BBY2NlcHRlZGAvYG9uRHJvcFJlamVjdGVkYCBwcm9wcy5cbiAqXG4gKiBgb25Ecm9wYCB3aWxsIHByb3ZpZGUgeW91IHdpdGggYW4gYXJyYXkgb2YgW0ZpbGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlKSBvYmplY3RzIHdoaWNoIHlvdSBjYW4gdGhlbiBwcm9jZXNzIGFuZCBzZW5kIHRvIGEgc2VydmVyLlxuICogRm9yIGV4YW1wbGUsIHdpdGggW1N1cGVyQWdlbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS92aXNpb25tZWRpYS9zdXBlcmFnZW50KSBhcyBhIGh0dHAvYWpheCBsaWJyYXJ5OlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBvbkRyb3AoYWNjZXB0ZWRGaWxlcykge1xuICogICBjb25zdCByZXEgPSByZXF1ZXN0LnBvc3QoJy91cGxvYWQnKVxuICogICBhY2NlcHRlZEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gKiAgICAgcmVxLmF0dGFjaChmaWxlLm5hbWUsIGZpbGUpXG4gKiAgIH0pXG4gKiAgIHJlcS5lbmQoY2FsbGJhY2spXG4gKiB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7ZHJvcEFjY2VwdGVkQ2J9IFtwcm9wcy5vbkRyb3BBY2NlcHRlZF1cbiAqIEBwYXJhbSB7ZHJvcFJlamVjdGVkQ2J9IFtwcm9wcy5vbkRyb3BSZWplY3RlZF1cbiAqXG4gKiBAcmV0dXJucyB7RHJvcHpvbmVTdGF0ZX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRHJvcHpvbmUoKSB7XG4gIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBhY2NlcHQgPSBfcmVmMi5hY2NlcHQsXG4gICAgICBfcmVmMiRkaXNhYmxlZCA9IF9yZWYyLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcmVmMiRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkaXNhYmxlZCxcbiAgICAgIF9yZWYyJGdldEZpbGVzRnJvbUV2ZSA9IF9yZWYyLmdldEZpbGVzRnJvbUV2ZW50LFxuICAgICAgZ2V0RmlsZXNGcm9tRXZlbnQgPSBfcmVmMiRnZXRGaWxlc0Zyb21FdmUgPT09IHZvaWQgMCA/IGZyb21FdmVudCA6IF9yZWYyJGdldEZpbGVzRnJvbUV2ZSxcbiAgICAgIF9yZWYyJG1heFNpemUgPSBfcmVmMi5tYXhTaXplLFxuICAgICAgbWF4U2l6ZSA9IF9yZWYyJG1heFNpemUgPT09IHZvaWQgMCA/IEluZmluaXR5IDogX3JlZjIkbWF4U2l6ZSxcbiAgICAgIF9yZWYyJG1pblNpemUgPSBfcmVmMi5taW5TaXplLFxuICAgICAgbWluU2l6ZSA9IF9yZWYyJG1pblNpemUgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiRtaW5TaXplLFxuICAgICAgX3JlZjIkbXVsdGlwbGUgPSBfcmVmMi5tdWx0aXBsZSxcbiAgICAgIG11bHRpcGxlID0gX3JlZjIkbXVsdGlwbGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRtdWx0aXBsZSxcbiAgICAgIG9uRHJhZ0VudGVyID0gX3JlZjIub25EcmFnRW50ZXIsXG4gICAgICBvbkRyYWdMZWF2ZSA9IF9yZWYyLm9uRHJhZ0xlYXZlLFxuICAgICAgb25EcmFnT3ZlciA9IF9yZWYyLm9uRHJhZ092ZXIsXG4gICAgICBvbkRyb3AgPSBfcmVmMi5vbkRyb3AsXG4gICAgICBvbkRyb3BBY2NlcHRlZCA9IF9yZWYyLm9uRHJvcEFjY2VwdGVkLFxuICAgICAgb25Ecm9wUmVqZWN0ZWQgPSBfcmVmMi5vbkRyb3BSZWplY3RlZCxcbiAgICAgIG9uRmlsZURpYWxvZ0NhbmNlbCA9IF9yZWYyLm9uRmlsZURpYWxvZ0NhbmNlbCxcbiAgICAgIF9yZWYyJHByZXZlbnREcm9wT25EbyA9IF9yZWYyLnByZXZlbnREcm9wT25Eb2N1bWVudCxcbiAgICAgIHByZXZlbnREcm9wT25Eb2N1bWVudCA9IF9yZWYyJHByZXZlbnREcm9wT25EbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHByZXZlbnREcm9wT25EbyxcbiAgICAgIF9yZWYyJG5vQ2xpY2sgPSBfcmVmMi5ub0NsaWNrLFxuICAgICAgbm9DbGljayA9IF9yZWYyJG5vQ2xpY2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkbm9DbGljayxcbiAgICAgIF9yZWYyJG5vS2V5Ym9hcmQgPSBfcmVmMi5ub0tleWJvYXJkLFxuICAgICAgbm9LZXlib2FyZCA9IF9yZWYyJG5vS2V5Ym9hcmQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkbm9LZXlib2FyZCxcbiAgICAgIF9yZWYyJG5vRHJhZyA9IF9yZWYyLm5vRHJhZyxcbiAgICAgIG5vRHJhZyA9IF9yZWYyJG5vRHJhZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRub0RyYWcsXG4gICAgICBfcmVmMiRub0RyYWdFdmVudHNCdWIgPSBfcmVmMi5ub0RyYWdFdmVudHNCdWJibGluZyxcbiAgICAgIG5vRHJhZ0V2ZW50c0J1YmJsaW5nID0gX3JlZjIkbm9EcmFnRXZlbnRzQnViID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJG5vRHJhZ0V2ZW50c0J1YjtcblxuICB2YXIgcm9vdFJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGlucHV0UmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbFN0YXRlKSxcbiAgICAgIF91c2VSZWR1Y2VyMiA9IF9zbGljZWRUb0FycmF5KF91c2VSZWR1Y2VyLCAyKSxcbiAgICAgIHN0YXRlID0gX3VzZVJlZHVjZXIyWzBdLFxuICAgICAgZGlzcGF0Y2ggPSBfdXNlUmVkdWNlcjJbMV07XG5cbiAgdmFyIGlzRm9jdXNlZCA9IHN0YXRlLmlzRm9jdXNlZCxcbiAgICAgIGlzRmlsZURpYWxvZ0FjdGl2ZSA9IHN0YXRlLmlzRmlsZURpYWxvZ0FjdGl2ZSxcbiAgICAgIGRyYWdnZWRGaWxlcyA9IHN0YXRlLmRyYWdnZWRGaWxlczsgLy8gRm4gZm9yIG9wZW5pbmcgdGhlIGZpbGUgZGlhbG9nIHByb2dyYW1tYXRpY2FsbHlcblxuICB2YXIgb3BlbkZpbGVEaWFsb2cgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQpIHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ29wZW5EaWFsb2cnXG4gICAgICB9KTtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQudmFsdWUgPSBudWxsO1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5jbGljaygpO1xuICAgIH1cbiAgfSwgW2Rpc3BhdGNoXSk7IC8vIFVwZGF0ZSBmaWxlIGRpYWxvZyBhY3RpdmUgc3RhdGUgd2hlbiB0aGUgd2luZG93IGlzIGZvY3VzZWQgb25cblxuICB2YXIgb25XaW5kb3dGb2N1cyA9IGZ1bmN0aW9uIG9uV2luZG93Rm9jdXMoKSB7XG4gICAgLy8gRXhlY3V0ZSB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBmaWxlIGRpYWxvZyBpcyBvcGVuZWQgaW4gdGhlIGJyb3dzZXJcbiAgICBpZiAoaXNGaWxlRGlhbG9nQWN0aXZlKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlucHV0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICB2YXIgZmlsZXMgPSBpbnB1dFJlZi5jdXJyZW50LmZpbGVzO1xuXG4gICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2Nsb3NlRGlhbG9nJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25GaWxlRGlhbG9nQ2FuY2VsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIG9uRmlsZURpYWxvZ0NhbmNlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgMzAwKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbldpbmRvd0ZvY3VzLCBmYWxzZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uV2luZG93Rm9jdXMsIGZhbHNlKTtcbiAgICB9O1xuICB9LCBbaW5wdXRSZWYsIGlzRmlsZURpYWxvZ0FjdGl2ZSwgb25GaWxlRGlhbG9nQ2FuY2VsXSk7IC8vIENiIHRvIG9wZW4gdGhlIGZpbGUgZGlhbG9nIHdoZW4gU1BBQ0UvRU5URVIgb2NjdXJzIG9uIHRoZSBkcm9wem9uZVxuXG4gIHZhciBvbktleURvd25DYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIElnbm9yZSBrZXlib2FyZCBldmVudHMgYnViYmxpbmcgdXAgdGhlIERPTSB0cmVlXG4gICAgaWYgKCFyb290UmVmLmN1cnJlbnQgfHwgIXJvb3RSZWYuY3VycmVudC5pc0VxdWFsTm9kZShldmVudC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDMyIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgb3BlbkZpbGVEaWFsb2coKTtcbiAgICB9XG4gIH0sIFtyb290UmVmLCBpbnB1dFJlZl0pOyAvLyBVcGRhdGUgZm9jdXMgc3RhdGUgZm9yIHRoZSBkcm9wem9uZVxuXG4gIHZhciBvbkZvY3VzQ2IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ2ZvY3VzJ1xuICAgIH0pO1xuICB9LCBbXSk7XG4gIHZhciBvbkJsdXJDYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnYmx1cidcbiAgICB9KTtcbiAgfSwgW10pOyAvLyBDYiB0byBvcGVuIHRoZSBmaWxlIGRpYWxvZyB3aGVuIGNsaWNrIG9jY3VycyBvbiB0aGUgZHJvcHpvbmVcblxuICB2YXIgb25DbGlja0NiID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChub0NsaWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJbiBJRTExL0VkZ2UgdGhlIGZpbGUtYnJvd3NlciBkaWFsb2cgaXMgYmxvY2tpbmcsIHRoZXJlZm9yZSwgdXNlIHNldFRpbWVvdXQoKVxuICAgIC8vIHRvIGVuc3VyZSBSZWFjdCBjYW4gaGFuZGxlIHN0YXRlIGNoYW5nZXNcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1kcm9wem9uZS9yZWFjdC1kcm9wem9uZS9pc3N1ZXMvNDUwXG5cblxuICAgIGlmIChpc0llT3JFZGdlKCkpIHtcbiAgICAgIHNldFRpbWVvdXQob3BlbkZpbGVEaWFsb2csIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVuRmlsZURpYWxvZygpO1xuICAgIH1cbiAgfSwgW2lucHV0UmVmLCBub0NsaWNrXSk7XG4gIHZhciBkcmFnVGFyZ2V0c1JlZiA9IHVzZVJlZihbXSk7XG5cbiAgdmFyIG9uRG9jdW1lbnREcm9wID0gZnVuY3Rpb24gb25Eb2N1bWVudERyb3AoZXZlbnQpIHtcbiAgICBpZiAocm9vdFJlZi5jdXJyZW50ICYmIHJvb3RSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAvLyBJZiB3ZSBpbnRlcmNlcHRlZCBhbiBldmVudCBmb3Igb3VyIGluc3RhbmNlLCBsZXQgaXQgcHJvcGFnYXRlIGRvd24gdG8gdGhlIGluc3RhbmNlJ3Mgb25Ecm9wIGhhbmRsZXJcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGRyYWdUYXJnZXRzUmVmLmN1cnJlbnQgPSBbXTtcbiAgfTtcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcmV2ZW50RHJvcE9uRG9jdW1lbnQpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgb25Eb2N1bWVudERyYWdPdmVyLCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgb25Eb2N1bWVudERyb3AsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByZXZlbnREcm9wT25Eb2N1bWVudCkge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRG9jdW1lbnREcmFnT3Zlcik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBvbkRvY3VtZW50RHJvcCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW3Jvb3RSZWYsIHByZXZlbnREcm9wT25Eb2N1bWVudF0pO1xuICB2YXIgb25EcmFnRW50ZXJDYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFBlcnNpc3QgaGVyZSBiZWNhdXNlIHdlIG5lZWQgdGhlIGV2ZW50IGxhdGVyIGFmdGVyIGdldEZpbGVzRnJvbUV2ZW50KCkgaXMgZG9uZVxuXG4gICAgZXZlbnQucGVyc2lzdCgpO1xuICAgIHN0b3BQcm9wYWdhdGlvbihldmVudCk7IC8vIENvdW50IHRoZSBkcm9wem9uZSBhbmQgYW55IGNoaWxkcmVuIHRoYXQgYXJlIGVudGVyZWQuXG5cbiAgICBpZiAoZHJhZ1RhcmdldHNSZWYuY3VycmVudC5pbmRleE9mKGV2ZW50LnRhcmdldCkgPT09IC0xKSB7XG4gICAgICBkcmFnVGFyZ2V0c1JlZi5jdXJyZW50ID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShkcmFnVGFyZ2V0c1JlZi5jdXJyZW50KSwgW2V2ZW50LnRhcmdldF0pO1xuICAgIH1cblxuICAgIGlmIChpc0V2dFdpdGhGaWxlcyhldmVudCkpIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZShnZXRGaWxlc0Zyb21FdmVudChldmVudCkpLnRoZW4oZnVuY3Rpb24gKGRyYWdnZWRGaWxlcykge1xuICAgICAgICBpZiAoaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpICYmICFub0RyYWdFdmVudHNCdWJibGluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICBkcmFnZ2VkRmlsZXM6IGRyYWdnZWRGaWxlcyxcbiAgICAgICAgICBpc0RyYWdBY3RpdmU6IHRydWUsXG4gICAgICAgICAgdHlwZTogJ3NldERyYWdnZWRGaWxlcydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9uRHJhZ0VudGVyKSB7XG4gICAgICAgICAgb25EcmFnRW50ZXIoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtnZXRGaWxlc0Zyb21FdmVudCwgb25EcmFnRW50ZXIsIG5vRHJhZ0V2ZW50c0J1YmJsaW5nXSk7XG4gIHZhciBvbkRyYWdPdmVyQ2IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICBzdG9wUHJvcGFnYXRpb24oZXZlbnQpO1xuXG4gICAgaWYgKGV2ZW50LmRhdGFUcmFuc2Zlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnY29weSc7XG4gICAgICB9IGNhdGNoIChfdW51c2VkKSB7fVxuICAgICAgLyogZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eSAqL1xuXG4gICAgfVxuXG4gICAgaWYgKGlzRXZ0V2l0aEZpbGVzKGV2ZW50KSAmJiBvbkRyYWdPdmVyKSB7XG4gICAgICBvbkRyYWdPdmVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIFtvbkRyYWdPdmVyLCBub0RyYWdFdmVudHNCdWJibGluZ10pO1xuICB2YXIgb25EcmFnTGVhdmVDYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQucGVyc2lzdCgpO1xuICAgIHN0b3BQcm9wYWdhdGlvbihldmVudCk7IC8vIE9ubHkgZGVhY3RpdmF0ZSBvbmNlIHRoZSBkcm9wem9uZSBhbmQgYWxsIGNoaWxkcmVuIGhhdmUgYmVlbiBsZWZ0XG5cbiAgICB2YXIgdGFyZ2V0cyA9IGRyYWdUYXJnZXRzUmVmLmN1cnJlbnQuZmlsdGVyKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0YXJnZXQgIT09IGV2ZW50LnRhcmdldCAmJiByb290UmVmLmN1cnJlbnQgJiYgcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKHRhcmdldCk7XG4gICAgfSk7XG4gICAgZHJhZ1RhcmdldHNSZWYuY3VycmVudCA9IHRhcmdldHM7XG5cbiAgICBpZiAodGFyZ2V0cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgaXNEcmFnQWN0aXZlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdzZXREcmFnZ2VkRmlsZXMnLFxuICAgICAgZHJhZ2dlZEZpbGVzOiBbXVxuICAgIH0pO1xuXG4gICAgaWYgKGlzRXZ0V2l0aEZpbGVzKGV2ZW50KSAmJiBvbkRyYWdMZWF2ZSkge1xuICAgICAgb25EcmFnTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSwgW3Jvb3RSZWYsIG9uRHJhZ0xlYXZlLCBub0RyYWdFdmVudHNCdWJibGluZ10pO1xuICB2YXIgb25Ecm9wQ2IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQZXJzaXN0IGhlcmUgYmVjYXVzZSB3ZSBuZWVkIHRoZSBldmVudCBsYXRlciBhZnRlciBnZXRGaWxlc0Zyb21FdmVudCgpIGlzIGRvbmVcblxuICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICBzdG9wUHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGRyYWdUYXJnZXRzUmVmLmN1cnJlbnQgPSBbXTtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAncmVzZXQnXG4gICAgfSk7XG5cbiAgICBpZiAoaXNFdnRXaXRoRmlsZXMoZXZlbnQpKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoZ2V0RmlsZXNGcm9tRXZlbnQoZXZlbnQpKS50aGVuKGZ1bmN0aW9uIChmaWxlcykge1xuICAgICAgICBpZiAoaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpICYmICFub0RyYWdFdmVudHNCdWJibGluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY2NlcHRlZEZpbGVzID0gW107XG4gICAgICAgIHZhciByZWplY3RlZEZpbGVzID0gW107XG4gICAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICBpZiAoZmlsZUFjY2VwdGVkKGZpbGUsIGFjY2VwdCkgJiYgZmlsZU1hdGNoU2l6ZShmaWxlLCBtaW5TaXplLCBtYXhTaXplKSkge1xuICAgICAgICAgICAgYWNjZXB0ZWRGaWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3RlZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIW11bHRpcGxlICYmIGFjY2VwdGVkRmlsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJlamVjdGVkRmlsZXMucHVzaC5hcHBseShyZWplY3RlZEZpbGVzLCBfdG9Db25zdW1hYmxlQXJyYXkoYWNjZXB0ZWRGaWxlcy5zcGxpY2UoMCkpKTsgLy8gUmVqZWN0IGV2ZXJ5dGhpbmcgYW5kIGVtcHR5IGFjY2VwdGVkIGZpbGVzXG4gICAgICAgIH1cblxuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgYWNjZXB0ZWRGaWxlczogYWNjZXB0ZWRGaWxlcyxcbiAgICAgICAgICByZWplY3RlZEZpbGVzOiByZWplY3RlZEZpbGVzLFxuICAgICAgICAgIHR5cGU6ICdzZXRGaWxlcydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9uRHJvcCkge1xuICAgICAgICAgIG9uRHJvcChhY2NlcHRlZEZpbGVzLCByZWplY3RlZEZpbGVzLCBldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVqZWN0ZWRGaWxlcy5sZW5ndGggPiAwICYmIG9uRHJvcFJlamVjdGVkKSB7XG4gICAgICAgICAgb25Ecm9wUmVqZWN0ZWQocmVqZWN0ZWRGaWxlcywgZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjY2VwdGVkRmlsZXMubGVuZ3RoID4gMCAmJiBvbkRyb3BBY2NlcHRlZCkge1xuICAgICAgICAgIG9uRHJvcEFjY2VwdGVkKGFjY2VwdGVkRmlsZXMsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbXVsdGlwbGUsIGFjY2VwdCwgbWluU2l6ZSwgbWF4U2l6ZSwgZ2V0RmlsZXNGcm9tRXZlbnQsIG9uRHJvcCwgb25Ecm9wQWNjZXB0ZWQsIG9uRHJvcFJlamVjdGVkLCBub0RyYWdFdmVudHNCdWJibGluZ10pO1xuXG4gIHZhciBjb21wb3NlSGFuZGxlciA9IGZ1bmN0aW9uIGNvbXBvc2VIYW5kbGVyKGZuKSB7XG4gICAgcmV0dXJuIGRpc2FibGVkID8gbnVsbCA6IGZuO1xuICB9O1xuXG4gIHZhciBjb21wb3NlS2V5Ym9hcmRIYW5kbGVyID0gZnVuY3Rpb24gY29tcG9zZUtleWJvYXJkSGFuZGxlcihmbikge1xuICAgIHJldHVybiBub0tleWJvYXJkID8gbnVsbCA6IGNvbXBvc2VIYW5kbGVyKGZuKTtcbiAgfTtcblxuICB2YXIgY29tcG9zZURyYWdIYW5kbGVyID0gZnVuY3Rpb24gY29tcG9zZURyYWdIYW5kbGVyKGZuKSB7XG4gICAgcmV0dXJuIG5vRHJhZyA/IG51bGwgOiBjb21wb3NlSGFuZGxlcihmbik7XG4gIH07XG5cbiAgdmFyIHN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbihldmVudCkge1xuICAgIGlmIChub0RyYWdFdmVudHNCdWJibGluZykge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRSb290UHJvcHMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgICBfcmVmMyRyZWZLZXkgPSBfcmVmMy5yZWZLZXksXG4gICAgICAgICAgcmVmS2V5ID0gX3JlZjMkcmVmS2V5ID09PSB2b2lkIDAgPyAncmVmJyA6IF9yZWYzJHJlZktleSxcbiAgICAgICAgICBvbktleURvd24gPSBfcmVmMy5vbktleURvd24sXG4gICAgICAgICAgb25Gb2N1cyA9IF9yZWYzLm9uRm9jdXMsXG4gICAgICAgICAgb25CbHVyID0gX3JlZjMub25CbHVyLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfcmVmMy5vbkNsaWNrLFxuICAgICAgICAgIG9uRHJhZ0VudGVyID0gX3JlZjMub25EcmFnRW50ZXIsXG4gICAgICAgICAgb25EcmFnT3ZlciA9IF9yZWYzLm9uRHJhZ092ZXIsXG4gICAgICAgICAgb25EcmFnTGVhdmUgPSBfcmVmMy5vbkRyYWdMZWF2ZSxcbiAgICAgICAgICBvbkRyb3AgPSBfcmVmMy5vbkRyb3AsXG4gICAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMywgW1wicmVmS2V5XCIsIFwib25LZXlEb3duXCIsIFwib25Gb2N1c1wiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkRyYWdFbnRlclwiLCBcIm9uRHJhZ092ZXJcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRHJvcFwiXSk7XG5cbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIG9uS2V5RG93bjogY29tcG9zZUtleWJvYXJkSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbktleURvd24sIG9uS2V5RG93bkNiKSksXG4gICAgICAgIG9uRm9jdXM6IGNvbXBvc2VLZXlib2FyZEhhbmRsZXIoY29tcG9zZUV2ZW50SGFuZGxlcnMob25Gb2N1cywgb25Gb2N1c0NiKSksXG4gICAgICAgIG9uQmx1cjogY29tcG9zZUtleWJvYXJkSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkJsdXIsIG9uQmx1ckNiKSksXG4gICAgICAgIG9uQ2xpY2s6IGNvbXBvc2VIYW5kbGVyKGNvbXBvc2VFdmVudEhhbmRsZXJzKG9uQ2xpY2ssIG9uQ2xpY2tDYikpLFxuICAgICAgICBvbkRyYWdFbnRlcjogY29tcG9zZURyYWdIYW5kbGVyKGNvbXBvc2VFdmVudEhhbmRsZXJzKG9uRHJhZ0VudGVyLCBvbkRyYWdFbnRlckNiKSksXG4gICAgICAgIG9uRHJhZ092ZXI6IGNvbXBvc2VEcmFnSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkRyYWdPdmVyLCBvbkRyYWdPdmVyQ2IpKSxcbiAgICAgICAgb25EcmFnTGVhdmU6IGNvbXBvc2VEcmFnSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkRyYWdMZWF2ZSwgb25EcmFnTGVhdmVDYikpLFxuICAgICAgICBvbkRyb3A6IGNvbXBvc2VEcmFnSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkRyb3AsIG9uRHJvcENiKSlcbiAgICAgIH0sIHJlZktleSwgcm9vdFJlZiksICFkaXNhYmxlZCAmJiAhbm9LZXlib2FyZCA/IHtcbiAgICAgICAgdGFiSW5kZXg6IDBcbiAgICAgIH0gOiB7fSwge30sIHJlc3QpO1xuICAgIH07XG4gIH0sIFtyb290UmVmLCBvbktleURvd25DYiwgb25Gb2N1c0NiLCBvbkJsdXJDYiwgb25DbGlja0NiLCBvbkRyYWdFbnRlckNiLCBvbkRyYWdPdmVyQ2IsIG9uRHJhZ0xlYXZlQ2IsIG9uRHJvcENiLCBub0tleWJvYXJkLCBub0RyYWcsIGRpc2FibGVkXSk7XG4gIHZhciBvbklucHV0RWxlbWVudENsaWNrID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0sIFtdKTtcbiAgdmFyIGdldElucHV0UHJvcHMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWY0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgICBfcmVmNCRyZWZLZXkgPSBfcmVmNC5yZWZLZXksXG4gICAgICAgICAgcmVmS2V5ID0gX3JlZjQkcmVmS2V5ID09PSB2b2lkIDAgPyAncmVmJyA6IF9yZWY0JHJlZktleSxcbiAgICAgICAgICBvbkNoYW5nZSA9IF9yZWY0Lm9uQ2hhbmdlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfcmVmNC5vbkNsaWNrLFxuICAgICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjQsIFtcInJlZktleVwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgICAgIHZhciBpbnB1dFByb3BzID0gX2RlZmluZVByb3BlcnR5KHtcbiAgICAgICAgYWNjZXB0OiBhY2NlcHQsXG4gICAgICAgIG11bHRpcGxlOiBtdWx0aXBsZSxcbiAgICAgICAgdHlwZTogJ2ZpbGUnLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9LFxuICAgICAgICBvbkNoYW5nZTogY29tcG9zZUhhbmRsZXIoY29tcG9zZUV2ZW50SGFuZGxlcnMob25DaGFuZ2UsIG9uRHJvcENiKSksXG4gICAgICAgIG9uQ2xpY2s6IGNvbXBvc2VIYW5kbGVyKGNvbXBvc2VFdmVudEhhbmRsZXJzKG9uQ2xpY2ssIG9uSW5wdXRFbGVtZW50Q2xpY2spKSxcbiAgICAgICAgYXV0b0NvbXBsZXRlOiAnb2ZmJyxcbiAgICAgICAgdGFiSW5kZXg6IC0xXG4gICAgICB9LCByZWZLZXksIGlucHV0UmVmKTtcblxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGlucHV0UHJvcHMsIHt9LCByZXN0KTtcbiAgICB9O1xuICB9LCBbaW5wdXRSZWYsIGFjY2VwdCwgbXVsdGlwbGUsIG9uRHJvcENiLCBkaXNhYmxlZF0pO1xuICB2YXIgZmlsZUNvdW50ID0gZHJhZ2dlZEZpbGVzLmxlbmd0aDtcbiAgdmFyIGlzTXVsdGlwbGVBbGxvd2VkID0gbXVsdGlwbGUgfHwgZmlsZUNvdW50IDw9IDE7XG4gIHZhciBpc0RyYWdBY2NlcHQgPSBmaWxlQ291bnQgPiAwICYmIGFsbEZpbGVzQWNjZXB0ZWQoZHJhZ2dlZEZpbGVzLCBhY2NlcHQsIG1pblNpemUsIG1heFNpemUpO1xuICB2YXIgaXNEcmFnUmVqZWN0ID0gZmlsZUNvdW50ID4gMCAmJiAoIWlzRHJhZ0FjY2VwdCB8fCAhaXNNdWx0aXBsZUFsbG93ZWQpO1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHtcbiAgICBpc0RyYWdBY2NlcHQ6IGlzRHJhZ0FjY2VwdCxcbiAgICBpc0RyYWdSZWplY3Q6IGlzRHJhZ1JlamVjdCxcbiAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCAmJiAhZGlzYWJsZWQsXG4gICAgZ2V0Um9vdFByb3BzOiBnZXRSb290UHJvcHMsXG4gICAgZ2V0SW5wdXRQcm9wczogZ2V0SW5wdXRQcm9wcyxcbiAgICByb290UmVmOiByb290UmVmLFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZixcbiAgICBvcGVuOiBjb21wb3NlSGFuZGxlcihvcGVuRmlsZURpYWxvZylcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnZm9jdXMnOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzRm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdibHVyJzpcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc0ZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ29wZW5EaWFsb2cnOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzRmlsZURpYWxvZ0FjdGl2ZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdjbG9zZURpYWxvZyc6XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHtcbiAgICAgICAgaXNGaWxlRGlhbG9nQWN0aXZlOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdzZXREcmFnZ2VkRmlsZXMnOlxuICAgICAgLyogZXNsaW50IG5vLWNhc2UtZGVjbGFyYXRpb25zOiAwICovXG4gICAgICB2YXIgaXNEcmFnQWN0aXZlID0gYWN0aW9uLmlzRHJhZ0FjdGl2ZSxcbiAgICAgICAgICBkcmFnZ2VkRmlsZXMgPSBhY3Rpb24uZHJhZ2dlZEZpbGVzO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgIGRyYWdnZWRGaWxlczogZHJhZ2dlZEZpbGVzLFxuICAgICAgICBpc0RyYWdBY3RpdmU6IGlzRHJhZ0FjdGl2ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdzZXRGaWxlcyc6XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHtcbiAgICAgICAgYWNjZXB0ZWRGaWxlczogYWN0aW9uLmFjY2VwdGVkRmlsZXMsXG4gICAgICAgIHJlamVjdGVkRmlsZXM6IGFjdGlvbi5yZWplY3RlZEZpbGVzXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc0ZpbGVEaWFsb2dBY3RpdmU6IGZhbHNlLFxuICAgICAgICBpc0RyYWdBY3RpdmU6IGZhbHNlLFxuICAgICAgICBkcmFnZ2VkRmlsZXM6IFtdXG4gICAgICB9KTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5jbGFzcyBJY29uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgbmFtZSxcbiAgICAgIHRvb2x0aXAsXG4gICAgICBvbkNsaWNrLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgaWNvbiA9IChcbiAgICAgIDxpXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnaWNvbmZvbnQnLCBgaWNvbi0ke25hbWV9YCwgY2xhc3NOYW1lKX1cbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIGlmICh0b29sdGlwKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3Rvb2x0aXAtLXRvcCcpfSBhcmlhLWxhYmVsPXt0b29sdGlwfT5cbiAgICAgICAgICB7aWNvbn1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgaWNvblxuICAgICk7XG4gIH1cbn1cblxuSWNvbi5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG9vbHRpcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5JY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiBudWxsLFxuICBuYW1lOiBudWxsLFxuICBvbkNsaWNrOiBudWxsLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgY2xhc3NOYW1lc0JpbmQgZnJvbSAnY2xhc3NuYW1lcy9iaW5kJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9CdXR0b24uY20uc3R5bCc7XG5cbmNvbnN0IGN4ID0gY2xhc3NOYW1lc0JpbmQuYmluZChzdHlsZXMpO1xuXG5jbGFzcyBCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdHlwZSxcbiAgICAgIHN0eWxlLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGhyZWYsXG4gICAgICBvbkNsaWNrLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NOYW1lcyhjeChcbiAgICAgIGBidG4tJHt0eXBlfWAsXG4gICAgICB7ICdidG4tZGlzYWJsZWQnOiBkaXNhYmxlZCB9LFxuICAgICksXG4gICAgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xuXG4gICAgaWYgKGhyZWYpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMaW5rXG4gICAgICAgICAgdG89e2hyZWZ9XG4gICAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0xpbms+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8YnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvYnV0dG9uPlxuICAgICk7XG4gIH1cbn1cblxuQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0eWxlOiBQcm9wVHlwZXMuc2hhcGUoe30pLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5CdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIHN0eWxlOiBudWxsLFxuICBjbGFzc05hbWU6IG51bGwsXG4gIG9uQ2xpY2s6IG51bGwsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBocmVmOiBudWxsLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TdGVwcy5jbS5zdHlsJztcblxuY2xhc3MgU3RlcHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBjb25zdCB7XG4gICAgLy8gICBzdGVwcyxcbiAgICAvLyB9ID0gdGhpcy5wcm9zO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc3RlcHN9PlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgU3RlcCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRpdGxlLFxuICAgICAgaW5kZXgsXG4gICAgICBhY3RpdmUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc25hbWVzKHN0eWxlcy5zdGVwLCBhY3RpdmUgJiYgc3R5bGVzLmFjdGl2ZSl9PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoc3R5bGVzLmluZGV4V3JhcHBlciwgYWN0aXZlICYmIHN0eWxlcy5hY3RpdmUpfT5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5pbmRleH0+XG4gICAgICAgICAgICB7aW5kZXh9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLnRpdGxlfT5cbiAgICAgICAgICB7dGl0bGV9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9XG59XG5cblN0ZXBzLlN0ZXAgPSBTdGVwO1xuXG5leHBvcnQgZGVmYXVsdCBTdGVwcztcbiIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsiLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICB2YXIgaGFzTmV4dCA9IGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gICAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAgICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gICAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAgICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAgICogaXRlbXMuXG4gICAqL1xuXG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiZnVuY3Rpb24gcmVwbGFjZUNsYXNzTmFtZShvcmlnQ2xhc3MsIGNsYXNzVG9SZW1vdmUpIHtcbiAgcmV0dXJuIG9yaWdDbGFzcy5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIGNsYXNzVG9SZW1vdmUgKyBcIig/OlxcXFxzfCQpXCIsICdnJyksICckMScpLnJlcGxhY2UoL1xccysvZywgJyAnKS5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgO1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycsIGNsYXNzTmFtZSkpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChub2RlLCBlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpOyAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuXG4gICAgaWYgKCFleGl0IHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChub2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG5vZGUpO1xuXG4gICAgICBfdGhpczMub25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXRzLmV4aXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciA9IHRpbWVvdXQgPT0gbnVsbCAmJiAhdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcjtcblxuICAgIGlmICghbm9kZSB8fCBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBjaGlsZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCJdKTsgLy8gZmlsdGVyIHByb3BzIGZvciBUcmFuc3RpdGlvblxuXG5cbiAgICBkZWxldGUgY2hpbGRQcm9wcy5pbjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5tb3VudE9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudW5tb3VudE9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy50aW1lb3V0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFkZEVuZExpc3RlbmVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyZWQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRlZDtcblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICByZXR1cm4gKC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiBpc1xuICAgKiBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1cyAoYCdlbnRlcmluZydgLCBgJ2VudGVyZWQnYCxcbiAgICogYCdleGl0aW5nJ2AsIGAnZXhpdGVkJ2ApLCB3aGljaCBjYW4gYmUgdXNlZCB0byBhcHBseSBjb250ZXh0XG4gICAqIHNwZWNpZmljIHByb3BzIHRvIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezE1MH0+XG4gICAqICAge3N0YXRlID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0ZX1gfSAvPlxuICAgKiAgICl9XG4gICAqIDwvVHJhbnNpdGlvbj5cbiAgICogYGBgXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZF0pLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGVudGVyIG9yIGV4aXQgc3RhdGVzXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBtb3VudGVkIGltbWVkaWF0ZWx5IGFsb25nIHdpdGhcbiAgICogdGhlIHBhcmVudCBgVHJhbnNpdGlvbmAgY29tcG9uZW50LiBJZiB5b3Ugd2FudCB0byBcImxhenkgbW91bnRcIiB0aGUgY29tcG9uZW50IG9uIHRoZVxuICAgKiBmaXJzdCBgaW49e3RydWV9YCB5b3UgY2FuIHNldCBgbW91bnRPbkVudGVyYC4gQWZ0ZXIgdGhlIGZpcnN0IGVudGVyIHRyYW5zaXRpb24gdGhlIGNvbXBvbmVudCB3aWxsIHN0YXlcbiAgICogbW91bnRlZCwgZXZlbiBvbiBcImV4aXRlZFwiLCB1bmxlc3MgeW91IGFsc28gc3BlY2lmeSBgdW5tb3VudE9uRXhpdGAuXG4gICAqL1xuICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgc3RheXMgbW91bnRlZCBhZnRlciBpdCByZWFjaGVzIHRoZSBgJ2V4aXRlZCdgIHN0YXRlLlxuICAgKiBTZXQgYHVubW91bnRPbkV4aXRgIGlmIHlvdSdkIHByZWZlciB0byB1bm1vdW50IHRoZSBjb21wb25lbnQgYWZ0ZXIgaXQgZmluaXNoZXMgZXhpdGluZy5cbiAgICovXG4gIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOb3JtYWxseSBhIGNvbXBvbmVudCBpcyBub3QgdHJhbnNpdGlvbmVkIGlmIGl0IGlzIHNob3duIHdoZW4gdGhlXG4gICAqIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudCBtb3VudHMuIElmIHlvdSB3YW50IHRvIHRyYW5zaXRpb24gb24gdGhlIGZpcnN0XG4gICAqIG1vdW50IHNldCBgYXBwZWFyYCB0byBgdHJ1ZWAsIGFuZCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbiBhcyBzb29uXG4gICAqIGFzIHRoZSBgPFRyYW5zaXRpb24+YCBtb3VudHMuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgYWRkT25lQ2xhc3MgZnJvbSAnZG9tLWhlbHBlcnMvYWRkQ2xhc3MnO1xuaW1wb3J0IHJlbW92ZU9uZUNsYXNzIGZyb20gJ2RvbS1oZWxwZXJzL3JlbW92ZUNsYXNzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICcuL1RyYW5zaXRpb24nO1xuaW1wb3J0IHsgY2xhc3NOYW1lc1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgX2FkZENsYXNzID0gZnVuY3Rpb24gYWRkQ2xhc3Mobm9kZSwgY2xhc3Nlcykge1xuICByZXR1cm4gbm9kZSAmJiBjbGFzc2VzICYmIGNsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGFkZE9uZUNsYXNzKG5vZGUsIGMpO1xuICB9KTtcbn07XG5cbnZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpIHtcbiAgcmV0dXJuIG5vZGUgJiYgY2xhc3NlcyAmJiBjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiByZW1vdmVPbmVDbGFzcyhub2RlLCBjKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBBIHRyYW5zaXRpb24gY29tcG9uZW50IGluc3BpcmVkIGJ5IHRoZSBleGNlbGxlbnRcbiAqIFtuZy1hbmltYXRlXShodHRwOi8vd3d3Lm5nYW5pbWF0ZS5vcmcvKSBsaWJyYXJ5LCB5b3Ugc2hvdWxkIHVzZSBpdCBpZiB5b3UncmVcbiAqIHVzaW5nIENTUyB0cmFuc2l0aW9ucyBvciBhbmltYXRpb25zLiBJdCdzIGJ1aWx0IHVwb24gdGhlXG4gKiBbYFRyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24pXG4gKiBjb21wb25lbnQsIHNvIGl0IGluaGVyaXRzIGFsbCBvZiBpdHMgcHJvcHMuXG4gKlxuICogYENTU1RyYW5zaXRpb25gIGFwcGxpZXMgYSBwYWlyIG9mIGNsYXNzIG5hbWVzIGR1cmluZyB0aGUgYGFwcGVhcmAsIGBlbnRlcmAsXG4gKiBhbmQgYGV4aXRgIHN0YXRlcyBvZiB0aGUgdHJhbnNpdGlvbi4gVGhlIGZpcnN0IGNsYXNzIGlzIGFwcGxpZWQgYW5kIHRoZW4gYVxuICogc2Vjb25kIGAqLWFjdGl2ZWAgY2xhc3MgaW4gb3JkZXIgdG8gYWN0aXZhdGUgdGhlIENTUyB0cmFuc2l0aW9uLiBBZnRlciB0aGVcbiAqIHRyYW5zaXRpb24sIG1hdGNoaW5nIGAqLWRvbmVgIGNsYXNzIG5hbWVzIGFyZSBhcHBsaWVkIHRvIHBlcnNpc3QgdGhlXG4gKiB0cmFuc2l0aW9uIHN0YXRlLlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8Q1NTVHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXsyMDB9IGNsYXNzTmFtZXM9XCJteS1ub2RlXCI+XG4gKiAgICAgICAgIDxkaXY+XG4gKiAgICAgICAgICAge1wiSSdsbCByZWNlaXZlIG15LW5vZGUtKiBjbGFzc2VzXCJ9XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYGluYCBwcm9wIGlzIHNldCB0byBgdHJ1ZWAsIHRoZSBjaGlsZCBjb21wb25lbnQgd2lsbCBmaXJzdCByZWNlaXZlXG4gKiB0aGUgY2xhc3MgYGV4YW1wbGUtZW50ZXJgLCB0aGVuIHRoZSBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIHdpbGwgYmUgYWRkZWQgaW5cbiAqIHRoZSBuZXh0IHRpY2suIGBDU1NUcmFuc2l0aW9uYCBbZm9yY2VzIGFcbiAqIHJlZmxvd10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzUwMDczMDNlNzI5YTc0YmU2NmEyMWMzZTIyMDVlNDkxNjgyMTUyNGIvc3JjL0NTU1RyYW5zaXRpb24uanMjTDIwOC1MMjE1KVxuICogYmV0d2VlbiBiZWZvcmUgYWRkaW5nIHRoZSBgZXhhbXBsZS1lbnRlci1hY3RpdmVgLiBUaGlzIGlzIGFuIGltcG9ydGFudCB0cmlja1xuICogYmVjYXVzZSBpdCBhbGxvd3MgdXMgdG8gdHJhbnNpdGlvbiBiZXR3ZWVuIGBleGFtcGxlLWVudGVyYCBhbmRcbiAqIGBleGFtcGxlLWVudGVyLWFjdGl2ZWAgZXZlbiB0aG91Z2ggdGhleSB3ZXJlIGFkZGVkIGltbWVkaWF0ZWx5IG9uZSBhZnRlclxuICogYW5vdGhlci4gTW9zdCBub3RhYmx5LCB0aGlzIGlzIHdoYXQgbWFrZXMgaXQgcG9zc2libGUgZm9yIHVzIHRvIGFuaW1hdGVcbiAqIF9hcHBlYXJhbmNlXy5cbiAqXG4gKiBgYGBjc3NcbiAqIC5teS1ub2RlLWVudGVyIHtcbiAqICAgb3BhY2l0eTogMDtcbiAqIH1cbiAqIC5teS1ub2RlLWVudGVyLWFjdGl2ZSB7XG4gKiAgIG9wYWNpdHk6IDE7XG4gKiAgIHRyYW5zaXRpb246IG9wYWNpdHkgMjAwbXM7XG4gKiB9XG4gKiAubXktbm9kZS1leGl0IHtcbiAqICAgb3BhY2l0eTogMTtcbiAqIH1cbiAqIC5teS1ub2RlLWV4aXQtYWN0aXZlIHtcbiAqICAgb3BhY2l0eTogMDtcbiAqICAgdHJhbnNpdGlvbjogb3BhY2l0eSAyMDBtcztcbiAqIH1cbiAqIGBgYFxuICpcbiAqIGAqLWFjdGl2ZWAgY2xhc3NlcyByZXByZXNlbnQgd2hpY2ggc3R5bGVzIHlvdSB3YW50IHRvIGFuaW1hdGUgKip0byoqLlxuICpcbiAqICoqTm90ZSoqOiBJZiB5b3UncmUgdXNpbmcgdGhlXG4gKiBbYGFwcGVhcmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uI1RyYW5zaXRpb24tcHJvcC1hcHBlYXIpXG4gKiBwcm9wLCBtYWtlIHN1cmUgdG8gZGVmaW5lIHN0eWxlcyBmb3IgYC5hcHBlYXItKmAgY2xhc3NlcyBhcyB3ZWxsLlxuICovXG5cblxudmFyIENTU1RyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ1NTVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ1NTVHJhbnNpdGlvbigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5hcHBsaWVkQ2xhc3NlcyA9IHtcbiAgICAgIGFwcGVhcjoge30sXG4gICAgICBlbnRlcjoge30sXG4gICAgICBleGl0OiB7fVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkVudGVyID0gZnVuY3Rpb24gKG5vZGUsIGFwcGVhcmluZykge1xuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZXhpdCcpO1xuXG4gICAgICBfdGhpcy5hZGRDbGFzcyhub2RlLCBhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcicsICdiYXNlJyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmluZyA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciB0eXBlID0gYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInO1xuXG4gICAgICBfdGhpcy5hZGRDbGFzcyhub2RlLCB0eXBlLCAnYWN0aXZlJyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyaW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmVkID0gZnVuY3Rpb24gKG5vZGUsIGFwcGVhcmluZykge1xuICAgICAgdmFyIHR5cGUgPSBhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcic7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgdHlwZSk7XG5cbiAgICAgIF90aGlzLmFkZENsYXNzKG5vZGUsIHR5cGUsICdkb25lJyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdhcHBlYXInKTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZW50ZXInKTtcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgJ2V4aXQnLCAnYmFzZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FeGl0aW5nID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLmFkZENsYXNzKG5vZGUsICdleGl0JywgJ2FjdGl2ZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0aW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FeGl0ZWQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZXhpdCcpO1xuXG4gICAgICBfdGhpcy5hZGRDbGFzcyhub2RlLCAnZXhpdCcsICdkb25lJyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0Q2xhc3NOYW1lcyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICB2YXIgY2xhc3NOYW1lcyA9IF90aGlzLnByb3BzLmNsYXNzTmFtZXM7XG4gICAgICB2YXIgaXNTdHJpbmdDbGFzc05hbWVzID0gdHlwZW9mIGNsYXNzTmFtZXMgPT09ICdzdHJpbmcnO1xuICAgICAgdmFyIHByZWZpeCA9IGlzU3RyaW5nQ2xhc3NOYW1lcyAmJiBjbGFzc05hbWVzID8gY2xhc3NOYW1lcyArIFwiLVwiIDogJyc7XG4gICAgICB2YXIgYmFzZUNsYXNzTmFtZSA9IGlzU3RyaW5nQ2xhc3NOYW1lcyA/IFwiXCIgKyBwcmVmaXggKyB0eXBlIDogY2xhc3NOYW1lc1t0eXBlXTtcbiAgICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSBpc1N0cmluZ0NsYXNzTmFtZXMgPyBiYXNlQ2xhc3NOYW1lICsgXCItYWN0aXZlXCIgOiBjbGFzc05hbWVzW3R5cGUgKyBcIkFjdGl2ZVwiXTtcbiAgICAgIHZhciBkb25lQ2xhc3NOYW1lID0gaXNTdHJpbmdDbGFzc05hbWVzID8gYmFzZUNsYXNzTmFtZSArIFwiLWRvbmVcIiA6IGNsYXNzTmFtZXNbdHlwZSArIFwiRG9uZVwiXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VDbGFzc05hbWU6IGJhc2VDbGFzc05hbWUsXG4gICAgICAgIGFjdGl2ZUNsYXNzTmFtZTogYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgICBkb25lQ2xhc3NOYW1lOiBkb25lQ2xhc3NOYW1lXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ1NTVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZENsYXNzID0gZnVuY3Rpb24gYWRkQ2xhc3Mobm9kZSwgdHlwZSwgcGhhc2UpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5nZXRDbGFzc05hbWVzKHR5cGUpW3BoYXNlICsgXCJDbGFzc05hbWVcIl07XG5cbiAgICBpZiAodHlwZSA9PT0gJ2FwcGVhcicgJiYgcGhhc2UgPT09ICdkb25lJykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIFwiICsgdGhpcy5nZXRDbGFzc05hbWVzKCdlbnRlcicpLmRvbmVDbGFzc05hbWU7XG4gICAgfSAvLyBUaGlzIGlzIGZvciB0byBmb3JjZSBhIHJlcGFpbnQsXG4gICAgLy8gd2hpY2ggaXMgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIHRyYW5zaXRpb24gc3R5bGVzIHdoZW4gYWRkaW5nIGEgY2xhc3MgbmFtZS5cblxuXG4gICAgaWYgKHBoYXNlID09PSAnYWN0aXZlJykge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gICAgICBub2RlICYmIG5vZGUuc2Nyb2xsVG9wO1xuICAgIH1cblxuICAgIHRoaXMuYXBwbGllZENsYXNzZXNbdHlwZV1bcGhhc2VdID0gY2xhc3NOYW1lO1xuXG4gICAgX2FkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUNsYXNzZXMgPSBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKG5vZGUsIHR5cGUpIHtcbiAgICB2YXIgX3RoaXMkYXBwbGllZENsYXNzZXMkID0gdGhpcy5hcHBsaWVkQ2xhc3Nlc1t0eXBlXSxcbiAgICAgICAgYmFzZUNsYXNzTmFtZSA9IF90aGlzJGFwcGxpZWRDbGFzc2VzJC5iYXNlLFxuICAgICAgICBhY3RpdmVDbGFzc05hbWUgPSBfdGhpcyRhcHBsaWVkQ2xhc3NlcyQuYWN0aXZlLFxuICAgICAgICBkb25lQ2xhc3NOYW1lID0gX3RoaXMkYXBwbGllZENsYXNzZXMkLmRvbmU7XG4gICAgdGhpcy5hcHBsaWVkQ2xhc3Nlc1t0eXBlXSA9IHt9O1xuXG4gICAgaWYgKGJhc2VDbGFzc05hbWUpIHtcbiAgICAgIHJlbW92ZUNsYXNzKG5vZGUsIGJhc2VDbGFzc05hbWUpO1xuICAgIH1cblxuICAgIGlmIChhY3RpdmVDbGFzc05hbWUpIHtcbiAgICAgIHJlbW92ZUNsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKGRvbmVDbGFzc05hbWUpIHtcbiAgICAgIHJlbW92ZUNsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF8gPSBfdGhpcyRwcm9wcy5jbGFzc05hbWVzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVzXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25FbnRlcjogdGhpcy5vbkVudGVyLFxuICAgICAgb25FbnRlcmVkOiB0aGlzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmc6IHRoaXMub25FbnRlcmluZyxcbiAgICAgIG9uRXhpdDogdGhpcy5vbkV4aXQsXG4gICAgICBvbkV4aXRpbmc6IHRoaXMub25FeGl0aW5nLFxuICAgICAgb25FeGl0ZWQ6IHRoaXMub25FeGl0ZWRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIENTU1RyYW5zaXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNTU1RyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWVzOiAnJ1xufTtcbkNTU1RyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gX2V4dGVuZHMoe30sIFRyYW5zaXRpb24ucHJvcFR5cGVzLCB7XG4gIC8qKlxuICAgKiBUaGUgYW5pbWF0aW9uIGNsYXNzTmFtZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50IGFzIGl0IGFwcGVhcnMsIGVudGVycyxcbiAgICogZXhpdHMgb3IgaGFzIGZpbmlzaGVkIHRoZSB0cmFuc2l0aW9uLiBBIHNpbmdsZSBuYW1lIGNhbiBiZSBwcm92aWRlZCBhbmQgaXRcbiAgICogd2lsbCBiZSBzdWZmaXhlZCBmb3IgZWFjaCBzdGFnZTogZS5nLlxuICAgKlxuICAgKiBgY2xhc3NOYW1lcz1cImZhZGVcImAgYXBwbGllcyBgZmFkZS1hcHBlYXJgLCBgZmFkZS1hcHBlYXItYWN0aXZlYCxcbiAgICogYGZhZGUtYXBwZWFyLWRvbmVgLCBgZmFkZS1lbnRlcmAsIGBmYWRlLWVudGVyLWFjdGl2ZWAsIGBmYWRlLWVudGVyLWRvbmVgLFxuICAgKiBgZmFkZS1leGl0YCwgYGZhZGUtZXhpdC1hY3RpdmVgLCBhbmQgYGZhZGUtZXhpdC1kb25lYC5cbiAgICpcbiAgICogKipOb3RlKio6IGBmYWRlLWFwcGVhci1kb25lYCBhbmQgYGZhZGUtZW50ZXItZG9uZWAgd2lsbCBfYm90aF8gYmUgYXBwbGllZC5cbiAgICogVGhpcyBhbGxvd3MgeW91IHRvIGRlZmluZSBkaWZmZXJlbnQgYmVoYXZpb3IgZm9yIHdoZW4gYXBwZWFyaW5nIGlzIGRvbmUgYW5kXG4gICAqIHdoZW4gcmVndWxhciBlbnRlcmluZyBpcyBkb25lLCB1c2luZyBzZWxlY3RvcnMgbGlrZVxuICAgKiBgLmZhZGUtZW50ZXItZG9uZTpub3QoLmZhZGUtYXBwZWFyLWRvbmUpYC4gRm9yIGV4YW1wbGUsIHlvdSBjb3VsZCBhcHBseSBhblxuICAgKiBlcGljIGVudHJhbmNlIGFuaW1hdGlvbiB3aGVuIGVsZW1lbnQgZmlyc3QgYXBwZWFycyBpbiB0aGUgRE9NIHVzaW5nXG4gICAqIFtBbmltYXRlLmNzc10oaHR0cHM6Ly9kYW5lZGVuLmdpdGh1Yi5pby9hbmltYXRlLmNzcy8pLiBPdGhlcndpc2UgeW91IGNhblxuICAgKiBzaW1wbHkgdXNlIGBmYWRlLWVudGVyLWRvbmVgIGZvciBkZWZpbmluZyBib3RoIGNhc2VzLlxuICAgKlxuICAgKiBFYWNoIGluZGl2aWR1YWwgY2xhc3NOYW1lcyBjYW4gYWxzbyBiZSBzcGVjaWZpZWQgaW5kZXBlbmRlbnRseSBsaWtlOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBjbGFzc05hbWVzPXt7XG4gICAqICBhcHBlYXI6ICdteS1hcHBlYXInLFxuICAgKiAgYXBwZWFyQWN0aXZlOiAnbXktYWN0aXZlLWFwcGVhcicsXG4gICAqICBhcHBlYXJEb25lOiAnbXktZG9uZS1hcHBlYXInLFxuICAgKiAgZW50ZXI6ICdteS1lbnRlcicsXG4gICAqICBlbnRlckFjdGl2ZTogJ215LWFjdGl2ZS1lbnRlcicsXG4gICAqICBlbnRlckRvbmU6ICdteS1kb25lLWVudGVyJyxcbiAgICogIGV4aXQ6ICdteS1leGl0JyxcbiAgICogIGV4aXRBY3RpdmU6ICdteS1hY3RpdmUtZXhpdCcsXG4gICAqICBleGl0RG9uZTogJ215LWRvbmUtZXhpdCcsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBJZiB5b3Ugd2FudCB0byBzZXQgdGhlc2UgY2xhc3NlcyB1c2luZyBDU1MgTW9kdWxlczpcbiAgICpcbiAgICogYGBganNcbiAgICogaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5jc3MnO1xuICAgKiBgYGBcbiAgICpcbiAgICogeW91IG1pZ2h0IHdhbnQgdG8gdXNlIGNhbWVsQ2FzZSBpbiB5b3VyIENTUyBmaWxlLCB0aGF0IHdheSBjb3VsZCBzaW1wbHlcbiAgICogc3ByZWFkIHRoZW0gaW5zdGVhZCBvZiBsaXN0aW5nIHRoZW0gb25lIGJ5IG9uZTpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3NOYW1lcz17eyAuLi5zdHlsZXMgfX1cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmcgfCB7XG4gICAqICBhcHBlYXI/OiBzdHJpbmcsXG4gICAqICBhcHBlYXJBY3RpdmU/OiBzdHJpbmcsXG4gICAqICBhcHBlYXJEb25lPzogc3RyaW5nLFxuICAgKiAgZW50ZXI/OiBzdHJpbmcsXG4gICAqICBlbnRlckFjdGl2ZT86IHN0cmluZyxcbiAgICogIGVudGVyRG9uZT86IHN0cmluZyxcbiAgICogIGV4aXQ/OiBzdHJpbmcsXG4gICAqICBleGl0QWN0aXZlPzogc3RyaW5nLFxuICAgKiAgZXhpdERvbmU/OiBzdHJpbmcsXG4gICAqIH19XG4gICAqL1xuICBjbGFzc05hbWVzOiBjbGFzc05hbWVzU2hhcGUsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlcicgb3IgJ2FwcGVhcicgY2xhc3MgaXNcbiAgICogYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlci1hY3RpdmUnIG9yXG4gICAqICdhcHBlYXItYWN0aXZlJyBjbGFzcyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2VudGVyJyBvclxuICAgKiAnYXBwZWFyJyBjbGFzc2VzIGFyZSAqKnJlbW92ZWQqKiBhbmQgdGhlIGBkb25lYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgRE9NIG5vZGUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0JyBjbGFzcyBpc1xuICAgKiBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0LWFjdGl2ZScgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3Nlc1xuICAgKiBhcmUgKipyZW1vdmVkKiogYW5kIHRoZSBgZXhpdC1kb25lYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgRE9NIG5vZGUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59KSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQ1NTVHJhbnNpdGlvbjsiLCJpbXBvcnQgaGFzQ2xhc3MgZnJvbSAnLi9oYXNDbGFzcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyBcIiBcIiArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArIFwiIFwiICsgY2xhc3NOYW1lKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB1dWlkdjQgZnJvbSAndXVpZC92NCc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAsIENTU1RyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuL0ljb24nO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1RvYXN0LmNtLnN0eWwnO1xuXG5jb25zdCBUT0FTVF9UWVBFUyA9IHtcbiAgU1VDQ0VTUzogMSxcbiAgRVJST1I6IDIsXG4gIElORk86IDMsXG59O1xuXG5jbGFzcyBUb2FzdCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0b2FzdHM6IFtdLFxuICAgIH07XG4gIH1cblxuICBhZGQodHlwZSwgdGl0bGUpIHtcbiAgICBjb25zdCBuZXdJZCA9IHV1aWR2NCgpO1xuICAgIGNvbnN0IHRvYXN0ID0ge1xuICAgICAgaWQ6IG5ld0lkLFxuICAgICAgdHlwZSxcbiAgICAgIHRpdGxlLFxuICAgIH07XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgICBjb25zdCBuZXh0VG9hc3RzID0gc3RhdGUudG9hc3RzLmZpbHRlcih0ID0+IHQuaWQgIT09IG5ld0lkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b2FzdHM6IG5leHRUb2FzdHMsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9LCAyMDAwKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9hc3RzOiBbLi4uc3RhdGUudG9hc3RzLCB0b2FzdF0sXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRvYXN0cyA9IFtdLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgaWNvbk5hbWVzID0ge1xuICAgICAgW1RPQVNUX1RZUEVTLlNVQ0NFU1NdOiAnY2hlY2snLFxuICAgICAgW1RPQVNUX1RZUEVTLkVSUk9SXTogJ2Nsb3NlJyxcbiAgICAgIFtUT0FTVF9UWVBFUy5JTkZPXTogJ2luZm8nLFxuICAgIH07XG5cbiAgICBjb25zdCBjbGFzc05hbWVzT2ZUb2FzdFR5cGUgPSB7XG4gICAgICBbVE9BU1RfVFlQRVMuU1VDQ0VTU106IHN0eWxlcy5zdWNjZXNzLFxuICAgICAgW1RPQVNUX1RZUEVTLkVSUk9SXTogc3R5bGVzLmVycm9yLFxuICAgICAgW1RPQVNUX1RZUEVTLklORk9dOiBzdHlsZXMuaW5mbyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPFRyYW5zaXRpb25Hcm91cCBjb21wb25lbnQ9e251bGx9PlxuICAgICAgICAgIHt0b2FzdHMubWFwKHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9hc3RUeXBlID0gdC50eXBlO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPENTU1RyYW5zaXRpb25cbiAgICAgICAgICAgICAgICBrZXk9e3QuaWR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcz1cInRvYXN0LWFuaW1hdGlvblwiXG4gICAgICAgICAgICAgICAgdGltZW91dD17MjIwfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoc3R5bGVzLnRvYXN0LCBjbGFzc05hbWVzT2ZUb2FzdFR5cGVbdG9hc3RUeXBlXSl9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoc3R5bGVzLmljb25XcmFwcGVyLCBjbGFzc05hbWVzT2ZUb2FzdFR5cGVbdG9hc3RUeXBlXSl9PlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiBuYW1lPXtpY29uTmFtZXNbdG9hc3RUeXBlXX0gLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3QuaWR9IGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhzdHlsZXMuY29udGVudCwgY2xhc3NOYW1lc09mVG9hc3RUeXBlW3RvYXN0VHlwZV0pfT5cbiAgICAgICAgICAgICAgICAgICAge3QudGl0bGV9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9DU1NUcmFuc2l0aW9uPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9UcmFuc2l0aW9uR3JvdXA+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuY29uc3QgdG9hc3RJbnN0YW5jZSA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuUmVhY3RET00ucmVuZGVyKDxUb2FzdCByZWY9e3RvYXN0SW5zdGFuY2V9IC8+LCBkaXYpO1xuXG5Ub2FzdC5zdWNjZXNzID0gKHRpdGxlKSA9PiB7XG4gIHRvYXN0SW5zdGFuY2UuY3VycmVudC5hZGQoVE9BU1RfVFlQRVMuU1VDQ0VTUywgdGl0bGUpO1xufTtcblxuVG9hc3QuZXJyb3IgPSAodGl0bGUpID0+IHtcbiAgdG9hc3RJbnN0YW5jZS5jdXJyZW50LmFkZChUT0FTVF9UWVBFUy5FUlJPUiwgdGl0bGUpO1xufTtcblxuVG9hc3QuaW5mbyA9ICh0aXRsZSkgPT4ge1xuICB0b2FzdEluc3RhbmNlLmN1cnJlbnQuYWRkKFRPQVNUX1RZUEVTLklORk8sIHRpdGxlKTtcbn07XG5cblRvYXN0LnByb3BUeXBlcyA9IHtcbiAgdG9hc3RzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb2FzdDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHByZXR0eUJ5dGVzIGZyb20gJ3ByZXR0eS1ieXRlcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuL2NvbW1vbi9JY29uJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9GaWxlQm94LmNtLnN0eWwnO1xuXG5jbGFzcyBGaWxlQm94IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGZpbGVzLFxuICAgICAgcmVtb3ZhYmxlLFxuICAgICAgY3VyRmlsZUlkLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAge2ZpbGVzLm1hcChmID0+IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB1aWQsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIGRvd25sb2FkVXJsLFxuICAgICAgICAgICAgcGN0LFxuICAgICAgICAgIH0gPSBmO1xuICAgICAgICAgIGxldCBkb3dubG9hZEluZm8gPSBudWxsO1xuICAgICAgICAgIGlmIChkb3dubG9hZFVybCkge1xuICAgICAgICAgICAgZG93bmxvYWRJbmZvID0gPGEgaHJlZj17ZG93bmxvYWRVcmx9IGRvd25sb2FkPXtuYW1lfSBjbGFzc05hbWU9e3N0eWxlcy5kb3dubG9hZH0+5LiL6L29PC9hPjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBjdCA+PSAxMDApIHtcbiAgICAgICAgICAgIGRvd25sb2FkSW5mbyA9IDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmNvbXBsZXRlZH0+5a6M5oiQPC9zcGFuPjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHVpZCA9PT0gY3VyRmlsZUlkKSB7XG4gICAgICAgICAgICBkb3dubG9hZEluZm8gPSA8c3Bhbj57cGN0fSU8L3NwYW4+O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3dubG9hZEluZm8gPSA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy53YWl0aW5nfT7nrYnlvoU8L3NwYW4+O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGtleT17Zi51aWR9IGNsYXNzTmFtZT17c3R5bGVzLmZpbGVSb3d9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJmaWxlXCIgY2xhc3NOYW1lPXtzdHlsZXMuZmlsZUljb259IC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5maWxlSW5mb30+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpbGVOYW1lfT5cbiAgICAgICAgICAgICAgICAgICAge25hbWV9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmlsZVNpemV9PlxuICAgICAgICAgICAgICAgICAgICB7cHJldHR5Qnl0ZXMoc2l6ZSl9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmlnaHR9PlxuICAgICAgICAgICAgICAgIHshcmVtb3ZhYmxlICYmIGRvd25sb2FkSW5mb31cbiAgICAgICAgICAgICAgICB7cmVtb3ZhYmxlICYmIDxJY29uIG5hbWU9XCJjbG9zZVwiIG9uQ2xpY2s9e3RoaXMucHJvcHMub25SZW1vdmVGaWxlKGYudWlkKX0gY2xhc3NOYW1lPXtzdHlsZXMuY2xvc2VJY29ufSAvPn1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuRmlsZUJveC5wcm9wVHlwZXMgPSB7XG4gIGZpbGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIHJlbW92YWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGN1ckZpbGVJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25SZW1vdmVGaWxlOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVCb3g7XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0IHdzIGZyb20gJy4vd3MnO1xuXG5jb25zdCBCVUZGRVJFRF9BTU9VTlRfTE9XX1RIUkVTSE9MRCA9IDE0ICogMTAyNCAqIDEwMjQ7IC8vIDhNQlxuY29uc3QgQlVGX1dBSVRJTkdfVEhSRVNIT0xEID0gMTUgKiAxMDI0ICogMTAyNDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pZCA9IG51bGw7IC8vIG5vdCB1c2VkXG4gICAgdGhpcy50YXJnZXRJZCA9IG51bGw7XG4gICAgdGhpcy5wYyA9IG51bGw7IC8vIFJUQ1BlZXJDb25uZWN0aW9uXG4gICAgdGhpcy5kYyA9IG51bGw7IC8vIFJUQ0RhdGFDaGFubmVsXG4gICAgdGhpcy53YWl0aW5nQ2FsbGJhY2sgPSBudWxsO1xuXG4gICAgdGhpcy5vbkljZUNhbmRpZGF0ZSA9IHRoaXMub25JY2VDYW5kaWRhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uRGVzY3JpcHRpb24gPSB0aGlzLm9uRGVzY3JpcHRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbm5lY3RQZWVyID0gdGhpcy5jb25uZWN0UGVlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Db25uZWN0aW9uU3RhdGVDaGFuZ2UgPSB0aGlzLm9uQ29ubmVjdGlvblN0YXRlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblJUQ01lc3NhZ2UgPSB0aGlzLm9uUlRDTWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DaGFubmVsT3BlbiA9IHRoaXMub25DaGFubmVsT3Blbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DaGFubmVsQ2xvc2UgPSB0aGlzLm9uQ2hhbm5lbENsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkJ1ZmZlcmVkQW1vdW50TG93ID0gdGhpcy5vbkJ1ZmZlcmVkQW1vdW50TG93LmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLm9uUzJjU2lnbmFsID0gdGhpcy5vblMyY1NpZ25hbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TMmNPcGVuID0gdGhpcy5vblMyY09wZW4uYmluZCh0aGlzKTtcbiAgICB3cy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKCdzMmNfb3BlbicsIHRoaXMub25TMmNPcGVuKTtcbiAgICB3cy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKCdzMmNfc2lnbmFsJywgdGhpcy5vblMyY1NpZ25hbCk7XG4gIH1cblxuICBvblMyY09wZW4ocGF5bG9hZCkge1xuICAgIHRoaXMuaWQgPSBwYXlsb2FkLmlkO1xuICAgIHRoaXMuZW1pdCgncGVlcklkJywgdGhpcy5pZCk7XG4gIH1cblxuICBvblMyY1NpZ25hbChwYXlsb2FkKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldElkKSB7XG4gICAgICB0aGlzLnRhcmdldElkID0gcGF5bG9hZC5zcmNJZDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnBjKSB7XG4gICAgICB0aGlzLmNyZWF0ZVJUQ0Nvbm5lY3Rpb24oZmFsc2UpO1xuICAgIH1cbiAgICBpZiAocGF5bG9hZC5zZHApIHtcbiAgICAgIHRoaXMucGMuc2V0UmVtb3RlRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihwYXlsb2FkLnNkcCkpXG4gICAgICAudGhlbihfID0+IHtcbiAgICAgICAgaWYgKHBheWxvYWQuc2RwLnR5cGUgPT09ICdvZmZlcicpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYy5jcmVhdGVBbnN3ZXIoKVxuICAgICAgICAgIC50aGVuKGQgPT4gdGhpcy5vbkRlc2NyaXB0aW9uKGQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkLmljZSkge1xuICAgICAgdGhpcy5wYy5hZGRJY2VDYW5kaWRhdGUobmV3IFJUQ0ljZUNhbmRpZGF0ZShwYXlsb2FkLmljZSkpO1xuICAgIH1cbiAgfVxuXG4gIG9uRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICB0aGlzLnBjLnNldExvY2FsRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgd3Muc2VuZEpTT04oe1xuICAgICAgICB0eXBlOiAnYzJzX3NpZ25hbCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICB0YXJnZXRJZDogdGhpcy50YXJnZXRJZCxcbiAgICAgICAgICBzZHA6IGRlc2NyaXB0aW9uLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZygnb25EZXNjcmlwdGlvbiBlcnJvcjogJywgZSkpO1xuICB9XG5cbiAgb25Db25uZWN0aW9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgaWYgKHRoaXMucGMuY29ubmVjdGlvblN0YXRlID09PSAnZGlzY29ubmVjdGVkJykge1xuICAgICAgaWYgKHRoaXMuZGMpIHtcbiAgICAgICAgdGhpcy5kYy5jbG9zZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMud2FpdGluZ0NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMud2FpdGluZ0NhbGxiYWNrKG5ldyBFcnJvcigncGVlciBkaXNjb25uZWN0ZWQsIGNhbm5vdCBzZW5kJykpO1xuICAgICAgICB0aGlzLndhaXRpbmdDYWxsYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYy5jb25uZWN0aW9uU3RhdGUgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3RlZCcpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYy5jb25uZWN0aW9uU3RhdGUgPT09ICdjb25uZWN0aW5nJykge1xuICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW5nJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBjLmNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2ZhaWxlZCcpIHtcbiAgICAgIHRoaXMuZW1pdCgnY29ubmVjdEZhaWxlZCcpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygnb25Db25uZWN0aW9uU3RhdGVDaGFuZ2U6ICcsIHRoaXMucGMuY29ubmVjdGlvblN0YXRlKTtcbiAgfVxuXG4gIG9uUlRDTWVzc2FnZShlKSB7XG4gICAgdGhpcy5lbWl0KCdkYXRhJywgZS5kYXRhKTtcbiAgfVxuXG4gIGNyZWF0ZVJUQ0Nvbm5lY3Rpb24oaXNDYWxsZXIpIHtcbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBpY2VTZXJ2ZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB1cmxzOiAnc3R1bjpzdHVuLmwuZ29vZ2xlLmNvbToxOTMwMicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB1cmxzOiAndHVybjowLnBlZXJqcy5jb206MzQ3OCcsXG4gICAgICAgICAgdXNlcm5hbWU6ICdwZWVyanMnLFxuICAgICAgICAgIGNyZWRlbnRpYWw6ICdwZWVyanNwJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgICBjb25zdCBwYyA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbihjb25maWcpO1xuICAgIHRoaXMucGMgPSBwYztcbiAgICBwYy5vbmljZWNhbmRpZGF0ZSA9IHRoaXMub25JY2VDYW5kaWRhdGU7XG4gICAgcGMub25jb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSBlID0+IHRoaXMub25Db25uZWN0aW9uU3RhdGVDaGFuZ2UoZSk7XG4gICAgcGMub25uZWdvdGlhdGlvbm5lZWRlZCA9IGUgPT4gdGhpcy5vbk5lZ290aWF0aW9uTmVlZGVkKGUpO1xuXG4gICAgaWYgKGlzQ2FsbGVyKSB7XG4gICAgICBjb25zdCBkYyA9IHBjLmNyZWF0ZURhdGFDaGFubmVsKCdmaWxlLXRyYW5zZmVyJywgeyByZWxpYWJsZTogdHJ1ZSB9KTtcbiAgICAgIHRoaXMuc2V0dXBEYXRhQ2hhbm5lbChkYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGMub25kYXRhY2hhbm5lbCA9IGUgPT4ge1xuICAgICAgICBjb25zdCBkYyA9IGUuY2hhbm5lbCB8fCBlLnRhcmdldDtcbiAgICAgICAgdGhpcy5zZXR1cERhdGFDaGFubmVsKGRjKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgc2V0dXBEYXRhQ2hhbm5lbChkYykge1xuICAgIHRoaXMuZGMgPSBkYztcbiAgICBkYy5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZCA9IEJVRkZFUkVEX0FNT1VOVF9MT1dfVEhSRVNIT0xEO1xuICAgIGRjLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgIGRjLm9ub3BlbiA9IHRoaXMub25DaGFubmVsT3BlbjtcbiAgICBkYy5vbmNsb3NlID0gdGhpcy5vbkNoYW5uZWxDbG9zZTtcbiAgICBkYy5vbmVycm9yID0gdGhpcy5vbkNoYW5uZWxFcnJvcjtcbiAgICBkYy5vbmJ1ZmZlcmVkYW1vdW50bG93ID0gdGhpcy5vbkJ1ZmZlcmVkQW1vdW50TG93O1xuICB9XG5cbiAgb25OZWdvdGlhdGlvbk5lZWRlZChldmVudCkge1xuICAgIHRoaXMucGMuY3JlYXRlT2ZmZXIoKVxuICAgIC50aGVuKGRlc2NyaXB0aW9uID0+IHtcbiAgICAgIHJldHVybiB0aGlzLm9uRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pO1xuICAgIH0pO1xuICB9XG5cbiAgY29ubmVjdFBlZXIodGFyZ2V0SWQpIHtcbiAgICB0aGlzLnRhcmdldElkID0gdGFyZ2V0SWQ7XG4gICAgdGhpcy5jcmVhdGVSVENDb25uZWN0aW9uKHRydWUpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnRhcmdldElkID0gbnVsbDtcbiAgICB0aGlzLndhaXRpbmdDYWxsYmFjayA9IG51bGw7XG4gICAgaWYgKHRoaXMucGMpIHtcbiAgICAgIHRoaXMucGMuY2xvc2UoKTtcbiAgICAgIHRoaXMucGMgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYykge1xuICAgICAgdGhpcy5kYy5jbG9zZSgpO1xuICAgICAgdGhpcy5kYyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgb25JY2VDYW5kaWRhdGUoZSkge1xuICAgIGlmICghZS5jYW5kaWRhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3cy5zZW5kSlNPTih7XG4gICAgICB0eXBlOiAnYzJzX3NpZ25hbCcsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHRhcmdldElkOiB0aGlzLnRhcmdldElkLFxuICAgICAgICBpY2U6IGUuY2FuZGlkYXRlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG9uQ2hhbm5lbE9wZW4oZSkge1xuICAgIHRoaXMuZW1pdCgnY2hhbm5lbE9wZW4nKTtcbiAgICB0aGlzLmRjLm9ubWVzc2FnZSA9IHRoaXMub25SVENNZXNzYWdlO1xuICB9XG5cbiAgb25DaGFubmVsQ2xvc2UoZSkge1xuICAgIGNvbnNvbGUubG9nKCcjIyBjaGFubmVsIGNsb3NlOiAnLCBlKTtcbiAgfVxuXG4gIG9uQ2hhbm5lbEVycm9yKGUpIHtcbiAgICBjb25zb2xlLmxvZygnIyMgY2hhbm5lbCBlcnJvcjogJywgZSk7XG4gIH1cblxuICBvbkJ1ZmZlcmVkQW1vdW50TG93KCkge1xuICAgIGlmICh0aGlzLndhaXRpbmdDYWxsYmFjaykge1xuICAgICAgdGhpcy53YWl0aW5nQ2FsbGJhY2soKTtcbiAgICAgIHRoaXMud2FpdGluZ0NhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBzZW5kKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZGMucmVhZHlTdGF0ZSA9PT0gJ29wZW4nKSB7XG4gICAgICAgIGlmICh0aGlzLmRjLmJ1ZmZlcmVkQW1vdW50ID49IEJVRl9XQUlUSU5HX1RIUkVTSE9MRCkge1xuICAgICAgICAgIHRoaXMud2FpdGluZ0NhbGxiYWNrID0gKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRjLnNlbmQoZGF0YSk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignc2VuZCBlcnJvcjogJywgZSk7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlcnJNc2cgPSAnc2VuZCBidXQgY2hhbm5lbCBpcyBub3Qgb3Blbiwgbm93IHN0YXRlIGlzOiAnICsgdGhpcy5kYy5yZWFkeVN0YXRlO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyTXNnKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZW5kSlNPTihvYmopIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kKEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICB9XG59XG4iLCJjb25zdCBDSFVOS19TSVpFID0gMTYgKiAxMDI0O1xuXG5jbGFzcyBGaWxlQ2h1bmtlciB7XG4gIGNvbnN0cnVjdG9yKGZpbGUpIHtcbiAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgIHRoaXMucmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICB0aGlzLm9mZnNldCA9IDA7XG4gIH1cblxuICBnZXROZXh0Q2h1bmsoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLm9mZnNldCA+PSB0aGlzLmZpbGUuc2l6ZSkge1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gQ0hVTktfU0laRTtcbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgZG9uZTogdGhpcy5vZmZzZXQgPj0gdGhpcy5maWxlLnNpemUsXG4gICAgICAgICAgY2h1bms6IGUudGFyZ2V0LnJlc3VsdCxcbiAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICB0aGlzLnJlYWRlci5vbmFib3J0ID0gKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKCdGaWxlUmVhZGVyIGFib3J0JykpO1xuICAgICAgfTtcbiAgICAgIHRoaXMucmVhZGVyLm9uZXJyb3IgPSAoZXZ0KSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0ZpbGVSZWFkZXIgb25lcnJvcicgKyBldnQpKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBibG9iID0gdGhpcy5maWxlLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIENIVU5LX1NJWkUpO1xuICAgICAgdGhpcy5yZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsZUNodW5rZXI7XG4iLCJleHBvcnQgZnVuY3Rpb24gY2FsY1BlcmNlbnQoYSwgYikge1xuICByZXR1cm4gKChhIC8gYikgKiAxMDApLnRvRml4ZWQoMSk7XG59XG4iLCJpbXBvcnQgd3MgZnJvbSAnLi4vd3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVNlbmQoZmlsZXMpIHtcbiAgd3Muc2VuZEpTT04oe1xuICAgIHR5cGU6ICdjMnNfcHJlcGFyZV9zZW5kJyxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBmaWxlcyxcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVJlY3ZDb2RlKHJlY3ZDb2RlKSB7XG4gIHdzLnNlbmRKU09OKHtcbiAgICB0eXBlOiAnYzJzX2RlbGV0ZV9yZWN2X2NvZGUnLFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIHJlY3ZDb2RlLFxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVJlY3YocmVjdkNvZGUpIHtcbiAgd3Muc2VuZEpTT04oe1xuICAgIHR5cGU6ICdjMnNfcHJlcGFyZV9yZWN2JyxcbiAgICBwYXlsb2FkOiB7XG4gICAgICByZWN2Q29kZSxcbiAgICB9LFxuICB9KTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IENvcHlUb0NsaXBib2FyZCBmcm9tICdyZWFjdC1jb3B5LXRvLWNsaXBib2FyZCc7XG5pbXBvcnQgcHJldHR5Qnl0ZXMgZnJvbSAncHJldHR5LWJ5dGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHV1aWR2NCBmcm9tICd1dWlkL3Y0JztcbmltcG9ydCB7XG4gIExpbmssXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFFSQ29kZSBmcm9tICdxcmNvZGUucmVhY3QnO1xuaW1wb3J0IERyb3B6b25lIGZyb20gJ3JlYWN0LWRyb3B6b25lJztcblxuaW1wb3J0IEljb24gZnJvbSAnLi9jb21tb24vSWNvbic7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vY29tbW9uL0J1dHRvbic7XG5pbXBvcnQgU3RlcHMgZnJvbSAnLi9jb21tb24vU3RlcHMnO1xuaW1wb3J0IFRvYXN0IGZyb20gJy4vY29tbW9uL1RvYXN0JztcbmltcG9ydCBGaWxlQm94IGZyb20gJy4vRmlsZUJveCc7XG5pbXBvcnQgUGVlciBmcm9tICcuLi9QZWVyJztcbmltcG9ydCBGaWxlQ2h1bmtlciBmcm9tICcuLi9GaWxlQ2h1bmtlcic7XG5pbXBvcnQgeyBjYWxjUGVyY2VudCB9IGZyb20gJy4uL2NvbW1vbi91dGlsJztcbmltcG9ydCB7IHByZXBhcmVTZW5kLCBkZWxldGVSZWN2Q29kZSB9IGZyb20gJy4uL2FjdGlvbnMvZmlsZSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZW5kRmlsZVBhbmVsLmNtLnN0eWwnO1xuXG5jb25zdCBTdGVwID0gU3RlcHMuU3RlcDtcblxuY2xhc3MgU2VuZEZpbGVQYW5lbCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMucGVlciA9IG5ldyBQZWVyKCk7XG4gICAgdGhpcy5pbnB1dFJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgIHRoaXMub25DaGFuZ2VGaWxlID0gdGhpcy5vbkNoYW5nZUZpbGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUmVtb3ZlRmlsZSA9IHRoaXMub25SZW1vdmVGaWxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNsaWNrU2VsZWN0RG9uZSA9IHRoaXMub25DbGlja1NlbGVjdERvbmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xpY2tCYWNrID0gdGhpcy5vbkNsaWNrQmFjay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25SZXNldCA9IHRoaXMub25SZXNldC5iaW5kKHRoaXMpOyAvLyDlm57liLDliJ3lp4vnirbmgIHvvIznlKjlnKjngrnlh7vlj5bmtojmiJblj5HpgIHlrozmiJDnu6fnu63lj5HpgIHnrYnlnLDmlrlcblxuICAgIHRoaXMuc2VuZFNpemVzID0ge307XG4gICAgdGhpcy5icHMgPSAwO1xuXG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5wcm9wcy5maWxlcy5tYXAoZiA9PiB7XG4gICAgICAgIGNvbnN0IHNlbmRTaXplID0gdGhpcy5zZW5kU2l6ZXNbZi51aWRdIHx8IDA7XG4gICAgICAgIGNvbnN0IHBjdCA9IGNhbGNQZXJjZW50KHNlbmRTaXplLCBmLnNpemUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmYsXG4gICAgICAgICAgcGN0LFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoeyBmaWxlcywgYnBzOiB0aGlzLmJwcyB9KTtcbiAgICAgIHRoaXMuYnBzID0gMDtcbiAgICB9LCAxMDAwKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGRvY3VtZW50LnRpdGxlID0gJ+Wwj+m5v+W/q+S8oO+9nOWPkemAgeaWh+S7tic7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICB9XG5cbiAgb25DbGlja1NlbGVjdERvbmUoKSB7XG4gICAgdGhpcy5wcm9wcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJTdGVwOiAyLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZmlsZXMgPSB0aGlzLnByb3BzLmZpbGVzLm1hcChmID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVpZDogZi51aWQsXG4gICAgICAgIG5hbWU6IGYubmFtZSxcbiAgICAgICAgc2l6ZTogZi5zaXplLFxuICAgICAgICB0eXBlOiBmLnR5cGUsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHByZXBhcmVTZW5kKGZpbGVzKTtcblxuICAgIGNvbnN0IHBlZXIgPSB0aGlzLnBlZXI7XG5cbiAgICBwZWVyLm9uKCdjb25uZWN0aW5nJywgKCkgPT4ge1xuICAgICAgdGhpcy5wcm9wcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBlZXJTdGF0ZTogJ2Nvbm5lY3RpbmcnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBwZWVyLm9uKCdjb25uZWN0ZWQnLCAoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLnNldFN0YXRlKHtcbiAgICAgICAgcGVlclN0YXRlOiAnY29ubmVjdGVkJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcGVlci5vbignY29ubmVjdEZhaWxlZCcsICgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgICBwZWVyU3RhdGU6ICdjb25uZWN0RmFpbGVkJyxcbiAgICAgIH0pO1xuICAgICAgVG9hc3QuZXJyb3IoJ+i/nuaOpeWksei0pScpO1xuICAgIH0pO1xuXG4gICAgcGVlci5vbignZGlzY29ubmVjdGVkJywgYXN5bmMoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLnNldFN0YXRlKHtcbiAgICAgICAgcGVlclN0YXRlOiAnZGlzY29ubmVjdGVkJyxcbiAgICAgIH0pO1xuICAgICAgVG9hc3QuZXJyb3IoJ+i/nuaOpeaWreW8gO+8jOivt+mHjeivlScpO1xuICAgIH0pO1xuXG4gICAgcGVlci5vbignY2hhbm5lbE9wZW4nLCBhc3luYygpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJTdGVwOiAzLFxuICAgICAgICBwZWVyU3RhdGU6ICd0cmFuc2ZlcicsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLnByb3BzLmZpbGVzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBmaWxlID0gZmlsZXNbaV07XG4gICAgICAgIGNvbnN0IGZpbGVJZCA9IGZpbGUudWlkO1xuICAgICAgICBhd2FpdCBwZWVyLnNlbmRKU09OKHtcbiAgICAgICAgICB0eXBlOiAnZmlsZVN0YXJ0JyxcbiAgICAgICAgICBmaWxlSWQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgICAgIGN1ckZpbGVJZDogZmlsZUlkLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjaHVua2VyID0gbmV3IEZpbGVDaHVua2VyKGZpbGUucmVhbEZpbGUpO1xuICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICBsZXQgbGFzdE9mZnNldCA9IDA7XG4gICAgICAgIHdoaWxlICghZG9uZSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNodW5rZXIuZ2V0TmV4dENodW5rKCk7XG4gICAgICAgICAgZG9uZSA9IHJlc3VsdC5kb25lO1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgIH0gPSByZXN1bHQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHBlZXIuc2VuZChjaHVuayk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBUb2FzdC5lcnJvcign5Lyg6L6T6ZSZ6K+v77yaJyArIGVycik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zZW5kU2l6ZXNbZmlsZUlkXSA9IG9mZnNldDtcbiAgICAgICAgICB0aGlzLmJwcyArPSAob2Zmc2V0IC0gbGFzdE9mZnNldCk7XG4gICAgICAgICAgbGFzdE9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIGF3YWl0IHBlZXIuc2VuZEpTT04oe1xuICAgICAgICAgICAgdHlwZTogJ2ZpbGVFbmQnLFxuICAgICAgICAgICAgZmlsZUlkLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBvbkNsaWNrQmFjaygpIHtcbiAgICBkZWxldGVSZWN2Q29kZSh0aGlzLnByb3BzLnJlY3ZDb2RlKTtcbiAgICB0aGlzLnByb3BzLnNldFN0YXRlKHsgY3VyU3RlcDogdGhpcy5wcm9wcy5jdXJTdGVwIC0gMSB9KTtcbiAgfVxuXG4gIG9uUmVzZXQoKSB7XG4gICAgdGhpcy5wZWVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLnByb3BzLnNldFN0YXRlKHtcbiAgICAgIGN1clN0ZXA6IDEsXG4gICAgICBmaWxlczogW10sXG4gICAgICBwZWVyU3RhdGU6ICcnLFxuICAgIH0pO1xuICB9XG5cbiAgb25DaGFuZ2VGaWxlKGZpbGVzKSB7XG4gICAgY29uc3QgZmlsdGVyZWRGaWxlcyA9IGZpbGVzLmZpbHRlcihmID0+IHtcbiAgICAgIGNvbnN0IGV4aXN0ZWQgPSB0aGlzLnByb3BzLmZpbGVzLmZpbmQoX2YxID0+IHtcbiAgICAgICAgY29uc3QgZjEgPSBfZjEucmVhbEZpbGU7XG4gICAgICAgIGlmIChmMS5uYW1lID09PSBmLm5hbWUgJiYgZjEuc2l6ZSA9PT0gZi5zaXplICYmIGYxLmxhc3RNb2RpZmllZCA9PT0gZi5sYXN0TW9kaWZpZWQgJiYgZjEudHlwZSA9PT0gZi50eXBlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gIWV4aXN0ZWQ7XG4gICAgfSkubWFwKGYgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVhbEZpbGU6IGYsXG4gICAgICAgIHVpZDogdXVpZHY0KCksXG4gICAgICAgIG5hbWU6IGYubmFtZSxcbiAgICAgICAgc2l6ZTogZi5zaXplLFxuICAgICAgICB0eXBlOiBmLnR5cGUsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgaWYgKGZpbHRlcmVkRmlsZXMubGVuZ3RoICE9PSBmaWxlcy5sZW5ndGgpIHtcbiAgICAgIFRvYXN0LmluZm8oJ+WPkeeOsOeWkeS8vOebuOWQjOeahOaWh+S7tu+8jOW3suiHquWKqOi/h+a7pCcpO1xuICAgIH1cblxuICAgIGNvbnN0IG5leHRGaWxlcyA9IHRoaXMucHJvcHMuZmlsZXMuY29uY2F0KGZpbHRlcmVkRmlsZXMpO1xuICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgZmlsZXM6IG5leHRGaWxlcyxcbiAgICB9KTtcbiAgICBldmVudC50YXJnZXQudmFsdWUgPSBudWxsO1xuICB9XG5cbiAgb25SZW1vdmVGaWxlKHVpZCkge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0RmlsZXMgPSB0aGlzLnByb3BzLmZpbGVzLmZpbHRlcihmID0+IGYudWlkICE9PSB1aWQpO1xuICAgICAgdGhpcy5wcm9wcy5zZXRTdGF0ZSh7IGZpbGVzOiBuZXh0RmlsZXMgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlclN0ZXAxKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGZpbGVzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgdG90YWxCeXRlcyA9IGZpbGVzLnJlZHVjZSgoc3VtLCBjdXIpID0+IHtcbiAgICAgIHJldHVybiBzdW0gKyBjdXIuc2l6ZTtcbiAgICB9LCAwKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8RHJvcHpvbmUgb25Ecm9wPXt0aGlzLm9uQ2hhbmdlRmlsZX0gbm9DbGljaz5cbiAgICAgICAgICB7KHsgZ2V0Um9vdFByb3BzLCBnZXRJbnB1dFByb3BzLCBpc0RyYWdBY2NlcHQsIG9wZW4gfSkgPT4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoc3R5bGVzLnVwbG9hZEFyZWEsIGlzRHJhZ0FjY2VwdCAmJiBzdHlsZXMuZHJhZ0FjdGl2ZSl9IHsuLi5nZXRSb290UHJvcHMoKX0+XG4gICAgICAgICAgICAgIHtmaWxlcy5sZW5ndGggPT09IDAgJiYgKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmljb25QbHVzV3JhcHBlcn0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJwbHVzXCIgY2xhc3NOYW1lPXtzdHlsZXMuaWNvblBsdXN9IC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMudXBsb2FkVGlwfT5cbiAgICAgICAgICAgICAgICAgICAg5bCG5paH5Lu25ouW5Yqo5Yiw5pa55qGG5YaF5oiW54K55Ye75LiL5pa55oyJ6ZKuXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy51cGxvYWRCdG59XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9wZW4oKX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAg5LiK5Lyg5paH5Lu2XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge2ZpbGVzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICAgIDxGaWxlQm94XG4gICAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgICByZW1vdmFibGVcbiAgICAgICAgICAgICAgICAgIG9uUmVtb3ZlRmlsZT17dGhpcy5vblJlbW92ZUZpbGV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPGlucHV0IHsuLi5nZXRJbnB1dFByb3BzKCl9Lz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvRHJvcHpvbmU+XG4gICAgICAgIHtmaWxlcy5sZW5ndGggPT09IDAgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVjdkd1aWRlfT5cbiAgICAgICAgICAgIOW3suacieaUtuS7tuegge+8n+eCueWHu1xuICAgICAgICAgICAgPExpbmsgdG89XCIvcmVjdlwiIGNsYXNzTmFtZT17c3R5bGVzLmxpbmt9PiDmjqXmlLbmlofku7Y8L0xpbms+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIHtmaWxlcy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy51cGxvYWRNb3JlfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5hZGRNb3JlfT5cbiAgICAgICAgICAgICAgICA8c3Bhbj7mt7vliqDmlofku7Y8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZpbGVTdW1tYXJ5fT57ZmlsZXMubGVuZ3RofSDkuKrmlofku7bvvIzlhbEge3ByZXR0eUJ5dGVzKHRvdGFsQnl0ZXMpfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgY2xhc3NOYW1lPXtzdHlsZXMuYnRuU2VsZWN0RmlsZURvbmV9IG9uQ2xpY2s9e3RoaXMub25DbGlja1NlbGVjdERvbmV9PlxuICAgICAgICAgICAgICDpgInlpb3kuoZcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclN0ZXAyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlY3ZDb2RlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgcmVjdkxpbmsgPSBgaHR0cDovLyR7ZG9jdW1lbnQubG9jYXRpb24uaG9zdH0vcmVjdi8ke3JlY3ZDb2RlfWA7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zZWxlY3RTZW5kTWV0aG9kfT5cbiAgICAgICAgICDor7fpgInmi6nlj5HpgIHmlrnlvI/vvJpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VuZE1ldGhvZDF9PlxuICAgICAgICAgIDEuIOmAmui/h+mTvuaOpeWPkemAge+8iOWvueaWueaJk+W8gOmTvuaOpeWNs+WPr+S4i+i9veaWh+S7tu+8iVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZWN2TGlua0NvbnRhaW5lcn0+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMucmVjdkxpbmt9PlxuICAgICAgICAgICAge3JlY3ZMaW5rfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8Q29weVRvQ2xpcGJvYXJkIHRleHQ9e3JlY3ZMaW5rfSBvbkNvcHk9eygpID0+IFRvYXN0LnN1Y2Nlc3MoJ+WkjeWItuaIkOWKnycpfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmJ0bkNvcHl9PlxuICAgICAgICAgICAgICDlpI3liLZcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L0NvcHlUb0NsaXBib2FyZD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgMi4g6YCa6L+HNuS9jeaVsOWPluS7tuegge+8iOWvueaWueWcqOWwj+m5v+W/q+S8oOe9keermei+k+WFpeWNs+WPr+S4i+i9veaWh+S7tu+8iVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZWN2Q29kZUNvbnRhaW5lcn0+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMucmVjdkNvZGV9PlxuICAgICAgICAgICAge3JlY3ZDb2RlfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8Q29weVRvQ2xpcGJvYXJkIHRleHQ9e3JlY3ZDb2RlfSBvbkNvcHk9eygpID0+IFRvYXN0LnN1Y2Nlc3MoJ+WkjeWItuaIkOWKnycpfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmJ0bkNvcHl9PlxuICAgICAgICAgICAgICDlpI3liLZcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L0NvcHlUb0NsaXBib2FyZD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgMy4g5omr5o+P5LiL5pa55LqM57u056CB77yaXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnFyY29kZUNvbnRhaW5lcn0+XG4gICAgICAgICAgPFFSQ29kZSB2YWx1ZT17cmVjdkxpbmt9IC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29ubmVjdFRpcHN9PlxuICAgICAgICAgIOa4qemmqOaPkOekuu+8mjxiciAvPlxuICAgICAgICAgIOS7peS4iuWPluS7tueggeWcqDEw5YiG6ZKf5YaF5pyJ5pWI77yM6K+35bC95b+r5Y+R6YCB57uZ5a+55pa5IDxiciAvPlxuICAgICAgICAgIOWvueaWuei+k+WFpeWPluS7tueggeW5tuehruiupOS5i+WQjuS8muiHquWKqOW8gOWni+WPkemAgVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIGNsYXNzTmFtZT17c3R5bGVzLmJ0bldhaXRDb25uZWN0fSBkaXNhYmxlZD5cbiAgICAgICAgICDnrYnlvoXov57mjqUuLi5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyU3RlcDMoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY3VyRmlsZUlkLFxuICAgICAgZmlsZXMsXG4gICAgICBwZWVyU3RhdGUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB0b3RhbEJ5dGVzID0gZmlsZXMucmVkdWNlKChzdW0sIGN1cikgPT4ge1xuICAgICAgcmV0dXJuIHN1bSArIGN1ci5zaXplO1xuICAgIH0sIDApO1xuXG4gICAgbGV0IGFsbENvbXBsZXRlZCA9IHRydWU7XG4gICAgZmlsZXMuZm9yRWFjaChmID0+IHtcbiAgICAgIGlmIChmLnBjdCA8IDEwMCkge1xuICAgICAgICBhbGxDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBidG5Db250ZW50O1xuICAgIGlmIChhbGxDb21wbGV0ZWQpIHtcbiAgICAgIGJ0bkNvbnRlbnQgPSAn57un57ut5Y+R6YCBJztcbiAgICB9IGVsc2UgaWYgKHBlZXJTdGF0ZSA9PT0gJ2Nvbm5lY3RpbmcnKSB7XG4gICAgICBidG5Db250ZW50ID0gJ+ato+WcqOi/nuaOpS4uLic7XG4gICAgfSBlbHNlIGlmIChwZWVyU3RhdGUgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICBidG5Db250ZW50ID0gJ+i/nuaOpeaIkOWKnyc7XG4gICAgfSBlbHNlIGlmIChwZWVyU3RhdGUgPT09ICd0cmFuc2ZlcicpIHtcbiAgICAgIGJ0bkNvbnRlbnQgPSBg5q2j5Zyo5Y+R6YCBLi4uKCR7cHJldHR5Qnl0ZXModGhpcy5icHMgfHwgMCl9L3MpYDtcbiAgICB9IGVsc2UgaWYgKHBlZXJTdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcgfHwgcGVlclN0YXRlID09PSAnY29ubmVjdEZhaWxlZCcpIHtcbiAgICAgIGJ0bkNvbnRlbnQgPSAn6L+e5o6l5pat5byA77yM562J5b6F6YeN6L+eLi4uJztcbiAgICB9XG5cbiAgICBsZXQgYnRuRGlzYWJsZWQgPSB0cnVlO1xuICAgIGlmIChhbGxDb21wbGV0ZWQpIHtcbiAgICAgIGJ0bkRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VuZGluZ0JveH0+XG4gICAgICAgICAgPEZpbGVCb3ggZmlsZXM9e2ZpbGVzfSBjdXJGaWxlSWQ9e2N1ckZpbGVJZH0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VuZGluZ1N1bW1hcnl9PlxuICAgICAgICAgIDxkaXY+e2ZpbGVzLmxlbmd0aH3kuKrmlofku7bvvIzlhbF7cHJldHR5Qnl0ZXModG90YWxCeXRlcyl9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgY2xhc3NOYW1lPXtzdHlsZXMuYnRuU2VuZGluZ30gZGlzYWJsZWQ9e2J0bkRpc2FibGVkfSBvbkNsaWNrPXt0aGlzLm9uUmVzZXR9PlxuICAgICAgICAgIHtidG5Db250ZW50fVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY3VyU3RlcCxcbiAgICAgIGZpbGVzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYmFzZX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMudGl0bGVSb3d9PlxuICAgICAgICAgIHsoKGN1clN0ZXAgPT09IDEgJiYgZmlsZXMubGVuZ3RoID4gMCkgfHwgKGN1clN0ZXAgPT09IDMpKSAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmJhY2t9IG9uQ2xpY2s9e3RoaXMub25SZXNldH0+XG4gICAgICAgICAgICAgIOWPlua2iFxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7Y3VyU3RlcCA9PT0gMiAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmJhY2t9IG9uQ2xpY2s9e3RoaXMub25DbGlja0JhY2t9PlxuICAgICAgICAgICAgICDov5Tlm55cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy50aXRsZX0+XG4gICAgICAgICAgICDlj5HpgIHmlofku7ZcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxTdGVwcz5cbiAgICAgICAgICA8U3RlcFxuICAgICAgICAgICAgaW5kZXg9ezF9XG4gICAgICAgICAgICB0aXRsZT1cIumAieaLqeaWh+S7tlwiXG4gICAgICAgICAgICBhY3RpdmU9e2N1clN0ZXAgPT09IDF9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8U3RlcCBpbmRleD17Mn0gdGl0bGU9XCLmlLbku7bnoIFcIiBhY3RpdmU9e2N1clN0ZXAgPT09IDJ9IC8+XG4gICAgICAgICAgPFN0ZXAgaW5kZXg9ezN9IHRpdGxlPVwi5Y+R6YCBXCIgYWN0aXZlPXtjdXJTdGVwID09PSAzfSAvPlxuICAgICAgICA8L1N0ZXBzPlxuICAgICAgICB7Y3VyU3RlcCA9PT0gMSAmJiB0aGlzLnJlbmRlclN0ZXAxKCl9XG4gICAgICAgIHtjdXJTdGVwID09PSAyICYmIHRoaXMucmVuZGVyU3RlcDIoKX1cbiAgICAgICAge2N1clN0ZXAgPT09IDMgJiYgdGhpcy5yZW5kZXJTdGVwMygpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5TZW5kRmlsZVBhbmVsLnByb3BUeXBlcyA9IHtcbiAgY3VyU3RlcDogUHJvcFR5cGVzLm51bWJlcixcbiAgZmlsZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgY3VyRmlsZUlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwZWVyU3RhdGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlY3ZDb2RlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZW5kRmlsZVBhbmVsO1xuIiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuL0ljb24nO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vSW5wdXQuY20uc3R5bCc7XG5cbmNsYXNzIElucHV0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGVycm9yLFxuICAgICAgY29udGFpbmVyQ2xhc3NOYW1lLFxuICAgICAgaW5wdXRDbGFzc05hbWUsXG4gICAgICB0eXBlLFxuICAgICAgdmFsdWUsXG4gICAgICByZWFkT25seSxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgYXV0b0NhcGl0YWxpemUsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9uRW50ZXIgPSAoKSA9PiB7fSxcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uRm9jdXMsXG4gICAgICBvbkNsaWNrLFxuICAgICAgLi4ub3RoZXJQcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHN0eWxlcy5jb250YWluZXIsIGNvbnRhaW5lckNsYXNzTmFtZSl9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLndyYXBwZXJ9PlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHN0eWxlcy5pbnB1dCwgaW5wdXRDbGFzc05hbWUpfVxuICAgICAgICAgICAgdHlwZT17dHlwZSB8fCAndGV4dCd9XG4gICAgICAgICAgICB2YWx1ZT17dmFsdWUgfHwgJyd9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICBhdXRvQ29tcGxldGU9e2F1dG9Db21wbGV0ZX1cbiAgICAgICAgICAgIHJlYWRPbmx5PXtyZWFkT25seX1cbiAgICAgICAgICAgIGF1dG9Gb2N1cz17YXV0b0ZvY3VzfVxuICAgICAgICAgICAgYXV0b0NhcGl0YWxpemU9e2F1dG9DYXBpdGFsaXplfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gb25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgb25LZXlEb3duPXtlID0+IGUua2V5Q29kZSA9PT0gMTMgJiYgb25FbnRlcigpfVxuICAgICAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIHsuLi5vdGhlclByb3BzfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7ISFlcnJvciAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5lcnJvcn0+XG4gICAgICAgICAgICA8SWNvbiBuYW1lPVwid2FybmluZy1jaXJjbGVcIiBjbGFzc05hbWU9e3N0eWxlcy5lcnJvckljb259IC8+XG4gICAgICAgICAgICB7ZXJyb3J9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuSW5wdXQucHJvcFR5cGVzID0ge1xuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXJyb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaW5wdXRDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlzU2ltcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICBhdXRvQ2FwaXRhbGl6ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuSW5wdXQuZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbDogbnVsbCxcbiAgZXJyb3I6IG51bGwsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHByZXR0eUJ5dGVzIGZyb20gJ3ByZXR0eS1ieXRlcyc7XG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgSWNvbiBmcm9tICcuL2NvbW1vbi9JY29uJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9jb21tb24vQnV0dG9uJztcbmltcG9ydCBJbnB1dCBmcm9tICcuL2NvbW1vbi9JbnB1dCc7XG5pbXBvcnQgRmlsZUJveCBmcm9tICcuL0ZpbGVCb3gnO1xuaW1wb3J0IFRvYXN0IGZyb20gJy4vY29tbW9uL1RvYXN0JztcbmltcG9ydCB7XG4gIHByZXBhcmVSZWN2LFxuICBkZWxldGVSZWN2Q29kZSxcbn0gZnJvbSAnLi4vYWN0aW9ucy9maWxlJztcbmltcG9ydCBQZWVyIGZyb20gJy4uL1BlZXInO1xuaW1wb3J0IHtcbiAgY2FsY1BlcmNlbnQsXG59IGZyb20gJy4uL2NvbW1vbi91dGlsJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1JlY3ZGaWxlUGFuZWwuY20uc3R5bCc7XG5cbmNsYXNzIFJlY3ZGaWxlUGFuZWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQ2hhbmdlUmVjdkNvZGUgPSB0aGlzLm9uQ2hhbmdlUmVjdkNvZGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUHJlcGFyZVJlY3YgPSB0aGlzLm9uUHJlcGFyZVJlY3YuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU3RhcnRSZWN2ID0gdGhpcy5vblN0YXJ0UmVjdi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25SZXNldCA9IHRoaXMub25SZXNldC5iaW5kKHRoaXMpOyAvLyDlm57liLDliJ3lp4vnirbmgIHvvIzmr5TlpoLngrnlh7vlj5bmtojmiJbogIXmjqXmlLblrozmiJDnu6fnu63mjqXmlLbnrYlcblxuICAgIHRoaXMub25SZWN2RGF0YSA9IHRoaXMub25SZWN2RGF0YS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlTXNnID0gdGhpcy5oYW5kbGVNc2cuYmluZCh0aGlzKTtcblxuICAgIHRoaXMucGVlciA9IG5ldyBQZWVyKCk7XG4gICAgdGhpcy5yZWN2QnVmZmVyID0gW107XG4gICAgdGhpcy5yZWN2U2l6ZXMgPSB7fTtcbiAgICB0aGlzLmJwcyA9IDA7XG5cbiAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLnByb3BzLmZpbGVzLm1hcChmID0+IHtcbiAgICAgICAgY29uc3QgcmVjdlNpemUgPSB0aGlzLnJlY3ZTaXplc1tmLnVpZF0gfHwgMDtcbiAgICAgICAgY29uc3QgcGN0ID0gY2FsY1BlcmNlbnQocmVjdlNpemUsIGYuc2l6ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZixcbiAgICAgICAgICBwY3QsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgICBmaWxlcyxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5icHMgPSAwO1xuICAgIH0sIDEwMDApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgZG9jdW1lbnQudGl0bGUgPSAn5bCP6bm/5b+r5Lyg772c5o6l5pS25paH5Lu2JztcbiAgICBjb25zdCByZWN2Q29kZSA9IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLnJlY3ZDb2RlO1xuICAgIGlmIChyZWN2Q29kZSkge1xuICAgICAgcHJlcGFyZVJlY3YocmVjdkNvZGUpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbk1vdW50KCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gIH1cblxuICBvbkNoYW5nZVJlY3ZDb2RlKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5zZXRTdGF0ZSh7IHJlY3ZDb2RlOiB2YWx1ZSB9KTtcbiAgfVxuXG4gIG9uUHJlcGFyZVJlY3YoKSB7XG4gICAgcHJlcGFyZVJlY3YodGhpcy5wcm9wcy5yZWN2Q29kZSk7XG4gIH1cblxuICBvblJlc2V0KCkge1xuICAgIHRoaXMucGVlci5kZXN0cm95KCk7XG4gICAgdGhpcy5wcm9wcy5zZXRTdGF0ZSh7XG4gICAgICByZWN2Q29kZTogJycsXG4gICAgICBwZWVyU3RhdGU6ICcnLFxuICAgICAgc3RhcnRlZDogZmFsc2UsXG4gICAgICBmaWxlczogW10sXG4gICAgICB0YXJnZXRJZDogJycsXG4gICAgfSk7XG4gIH1cblxuICBvblN0YXJ0UmVjdigpIHtcbiAgICB0aGlzLnByb3BzLnNldFN0YXRlKHtcbiAgICAgIHN0YXJ0ZWQ6IHRydWUsXG4gICAgfSk7XG5cbiAgICBjb25zdCBwZWVyID0gdGhpcy5wZWVyO1xuXG4gICAgcGVlci5vbignY29ubmVjdGluZycsICgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgICBwZWVyU3RhdGU6ICdjb25uZWN0aW5nJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcGVlci5vbignY29ubmVjdGVkJywgKCkgPT4ge1xuICAgICAgVG9hc3Quc3VjY2Vzcygn6L+e5o6l5oiQ5YqfJyk7XG4gICAgICB0aGlzLnByb3BzLnNldFN0YXRlKHtcbiAgICAgICAgcGVlclN0YXRlOiAnY29ubmVjdGVkJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcGVlci5vbignZGlzY29ubmVjdGVkJywgKCkgPT4ge1xuICAgICAgVG9hc3QuZXJyb3IoJ+i/nuaOpeW3suaWreW8gCcpO1xuICAgICAgdGhpcy5wcm9wcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBlZXJTdGF0ZTogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHBlZXIub24oJ2Nvbm5lY3RGYWlsZWQnLCAoKSA9PiB7XG4gICAgICBUb2FzdC5lcnJvcign6L+e5o6l5aSx6LSl77yM6K+36YeN6K+VJyk7XG4gICAgICB0aGlzLnByb3BzLnNldFN0YXRlKHtcbiAgICAgICAgcGVlclN0YXRlOiAnY29ubmVjdEZhaWxlZCcsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHBlZXIub24oJ2NoYW5uZWxPcGVuJywgKCkgPT4ge1xuICAgICAgdGhpcy5wcm9wcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBlZXJTdGF0ZTogJ3RyYW5zZmVyJyxcbiAgICAgIH0pO1xuICAgICAgLy8g5pS25Lu256CB5Y+q6IO95L2/55So5LiA5qyh77yM5LiA5pem5byA5aeL5o6l5pS25bCx5L2/5YW25aSx5pWIXG4gICAgICBkZWxldGVSZWN2Q29kZSh0aGlzLnByb3BzLnJlY3ZDb2RlIHx8IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLnJlY3ZDb2RlKTtcbiAgICB9KTtcblxuICAgIHBlZXIub24oJ2RhdGEnLCB0aGlzLm9uUmVjdkRhdGEpO1xuXG4gICAgcGVlci5jb25uZWN0UGVlcih0aGlzLnByb3BzLnRhcmdldElkKTtcbiAgfVxuXG4gIG9uUmVjdkRhdGEoZGF0YSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGN1ckZpbGVJZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IG1zZyA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB0aGlzLmhhbmRsZU1zZyhtc2cpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlY3ZCdWZmZXIucHVzaChkYXRhKTtcbiAgICAgIGNvbnN0IGN1clJlY3ZCeXRlcyA9IHRoaXMucmVjdlNpemVzW2N1ckZpbGVJZF0gfHwgMDtcbiAgICAgIGNvbnN0IG5ld1JlY3ZCeXRlcyA9IGN1clJlY3ZCeXRlcyArIGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIHRoaXMucmVjdlNpemVzW2N1ckZpbGVJZF0gPSBuZXdSZWN2Qnl0ZXM7XG4gICAgICB0aGlzLmJwcyArPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlTXNnKG1zZykge1xuICAgIGlmIChtc2cudHlwZSA9PT0gJ2ZpbGVTdGFydCcpIHtcbiAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJGaWxlSWQ6IG1zZy5maWxlSWQsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG1zZy50eXBlID09PSAnZmlsZUVuZCcpIHtcbiAgICAgIGNvbnN0IGZpbGVJZCA9IG1zZy5maWxlSWQ7XG4gICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IodGhpcy5yZWN2QnVmZmVyKTtcbiAgICAgIHRoaXMucmVjdkJ1ZmZlciA9IFtdO1xuICAgICAgY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICBjb25zdCBmaWxlcyA9IHRoaXMucHJvcHMuZmlsZXMubWFwKGYgPT4ge1xuICAgICAgICBpZiAoZi51aWQgPT09IGZpbGVJZCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5mLFxuICAgICAgICAgICAgZG93bmxvYWRVcmw6IHVybCxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvcHMuc2V0U3RhdGUoe1xuICAgICAgICBmaWxlcyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclN0ZXAxKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlY3ZDb2RlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpTbkvY3mlLbku7bnoIFcIiBpbnB1dENsYXNzTmFtZT17c3R5bGVzLmlucHV0fSB2YWx1ZT17cmVjdkNvZGV9IG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlUmVjdkNvZGV9IC8+XG4gICAgICAgIDxCdXR0b24gdHlwZT1cInByaW1hcnlcIiBjbGFzc05hbWU9e3N0eWxlcy5yZWN2QnRufSBvbkNsaWNrPXt0aGlzLm9uUHJlcGFyZVJlY3Z9PuaOpeaUtuaWh+S7tjwvQnV0dG9uPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRpcH0+XG4gICAgICAgICAgPEljb24gbmFtZT1cImluZm9cIiAvPlxuICAgICAgICAgIOWmguS9leiOt+WPluaUtuS7tuegge+8n1xuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJTdGVwMigpIHtcbiAgICBjb25zdCB7XG4gICAgICBwZWVyU3RhdGUsXG4gICAgICBzdGFydGVkLFxuICAgICAgY3VyRmlsZUlkLFxuICAgICAgZmlsZXMsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB0b3RhbEJ5dGVzID0gZmlsZXMucmVkdWNlKChzdW0sIGN1cikgPT4ge1xuICAgICAgcmV0dXJuIHN1bSArIGN1ci5zaXplO1xuICAgIH0sIDApO1xuXG4gICAgbGV0IGFsbENvbXBsZXRlZCA9IHRydWU7XG4gICAgZmlsZXMuZm9yRWFjaChmID0+IHtcbiAgICAgIGlmICghZi5kb3dubG9hZFVybCkge1xuICAgICAgICBhbGxDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBidG5Db250ZW50ID0gJ+W8gOWni+S4i+i9vSc7XG4gICAgaWYgKGFsbENvbXBsZXRlZCkge1xuICAgICAgYnRuQ29udGVudCA9ICfnu6fnu63mjqXmlLYnO1xuICAgIH0gZWxzZSBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgIGJ0bkNvbnRlbnQgPSAn5byA5aeL5LiL6L29JztcbiAgICB9IGVsc2UgaWYgKHBlZXJTdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcgfHwgcGVlclN0YXRlID09PSAnY29ubmVjdEZhaWxlZCcpIHtcbiAgICAgIGJ0bkNvbnRlbnQgPSAn6YeN5paw5LiL6L29JztcbiAgICB9IGVsc2UgaWYgKHBlZXJTdGF0ZSA9PT0gJ2Nvbm5lY3RpbmcnKSB7XG4gICAgICBidG5Db250ZW50ID0gJ+ato+WcqOi/nuaOpS4uLic7XG4gICAgfSBlbHNlIGlmIChwZWVyU3RhdGUgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICBidG5Db250ZW50ID0gJ+i/nuaOpeaIkOWKnyc7XG4gICAgfSBlbHNlIGlmIChwZWVyU3RhdGUgPT09ICd0cmFuc2ZlcicpIHtcbiAgICAgIGJ0bkNvbnRlbnQgPSBg5q2j5Zyo5LiL6L29Li4uKCR7cHJldHR5Qnl0ZXModGhpcy5icHMpfS9zKWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubXNnMX0+XG4gICAgICAgICAg5a+55pa55Y+R6YCB57uZ5oKo5Lul5LiL5paH5Lu277yaXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8RmlsZUJveCBmaWxlcz17dGhpcy5wcm9wcy5maWxlc30gY3VyRmlsZUlkPXtjdXJGaWxlSWR9IC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubXNnMn0+XG4gICAgICAgICAgPGRpdj57ZmlsZXMubGVuZ3RofSDkuKrmlofku7bvvIzlhbEge3ByZXR0eUJ5dGVzKHRvdGFsQnl0ZXMpfTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5yZWN2QnRufVxuICAgICAgICAgIGRpc2FibGVkPXtzdGFydGVkICYmICFhbGxDb21wbGV0ZWQgJiYgKHBlZXJTdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcgfHwgcGVlclN0YXRlID09PSAnY29ubmVjdGluZycgfHwgcGVlclN0YXRlID09PSAndHJhbnNmZXInKX1cbiAgICAgICAgICBvbkNsaWNrPXthbGxDb21wbGV0ZWQgPyB0aGlzLm9uUmVzZXQgOiB0aGlzLm9uU3RhcnRSZWN2fVxuICAgICAgICA+XG4gICAgICAgICAge2J0bkNvbnRlbnR9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBmaWxlcyxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmJhc2V9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRpdGxlUm93fT5cbiAgICAgICAgICB7ZmlsZXMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNhbmNlbH0gb25DbGljaz17dGhpcy5vblJlc2V0fT5cbiAgICAgICAgICAgICAg5Y+W5raIXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMudGl0bGV9PlxuICAgICAgICAgICAg5o6l5pS25paH5Lu2XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7ZmlsZXMubGVuZ3RoID09PSAwICYmIHRoaXMucmVuZGVyU3RlcDEoKX1cbiAgICAgICAge2ZpbGVzLmxlbmd0aCA+IDAgJiYgdGhpcy5yZW5kZXJTdGVwMigpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5SZWN2RmlsZVBhbmVsLnByb3BUeXBlcyA9IHtcbiAgcmVjdkNvZGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHBlZXJTdGF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3RhcnRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGZpbGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIHRhcmdldElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjdXJGaWxlSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKFJlY3ZGaWxlUGFuZWwpO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi9jb21tb24vSW5wdXQnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL2NvbW1vbi9CdXR0b24nO1xuaW1wb3J0IFRvYXN0IGZyb20gJy4vY29tbW9uL1RvYXN0JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NvbnRhY3RQYW5lbC5jbS5zdHlsJztcblxuY2xhc3MgQ29udGFjdFBhbmVsIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRhY3Q6ICcnLFxuICAgICAgY29udGVudDogJycsXG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlQ29udGFjdENoYW5nZSA9IHRoaXMuaGFuZGxlQ29udGFjdENoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ29udGVudENoYW5nZSA9IHRoaXMuaGFuZGxlQ29udGVudENoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGRvY3VtZW50LnRpdGxlID0gJ+Wwj+m5v+W/q+S8oO+9nOiBlOezu+aIkeS7rCc7XG4gIH1cblxuICBoYW5kbGVDb250YWN0Q2hhbmdlKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250YWN0OiB2YWx1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUNvbnRlbnRDaGFuZ2UoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGVudDogZS50YXJnZXQudmFsdWUsXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29udGFjdCxcbiAgICAgIGNvbnRlbnQsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoIWNvbnRhY3QpIHtcbiAgICAgIFRvYXN0LmVycm9yKCfor7fovpPlhaXogZTns7vmlrnlvI8nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIFRvYXN0LmVycm9yKCfor7fovpPlhaXnlZnoqIDlhoXlrrknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBheGlvcy5wb3N0KCcvYXBpL2ZlZWRiYWNrJywge1xuICAgICAgY29udGFjdCxcbiAgICAgIGNvbnRlbnQsXG4gICAgfSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBUb2FzdC5zdWNjZXNzKCfnlZnoqIDmiJDlip8nKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjb250YWN0OiAnJyxcbiAgICAgICAgY29udGVudDogJycsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb250YWN0LFxuICAgICAgY29udGVudCxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmJhc2V9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRpdGxlfT5cbiAgICAgICAgICDogZTns7vmiJHku6xcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpeaCqOeahOaJi+acuuWPt+aIlumCrueusVwiIGlucHV0Q2xhc3NOYW1lPXtzdHlsZXMuaW5wdXR9IHZhbHVlPXtjb250YWN0fSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDb250YWN0Q2hhbmdlfSAvPlxuICAgICAgICA8dGV4dGFyZWEgcGxhY2Vob2xkZXI9XCLor7fovpPlhaXnlZnoqIDlhoXlrrlcIiByb3dzPVwiNlwiIGNsYXNzTmFtZT17c3R5bGVzLnRleHRhcmVhfSB2YWx1ZT17Y29udGVudH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ29udGVudENoYW5nZX0gLz5cbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIGNsYXNzTmFtZT17c3R5bGVzLmJ0bn0gb25DbGljaz17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgIOeVmeiogFxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy50aXBzfT5cbiAgICAgICAgICDor7fnm7TmjqXlnKjkuIrmlrnnlZnoqIDvvIzmiJHku6zkvJrlsL3lv6vnu5nmgqjlm57lpI3vvIw8YnIgLz5cbiAgICAgICAgICDmgqjkuZ/lj6/ku6Xlj5Hpgq7ku7bliLAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIGhyZWY9XCJtYWlsdG86c3VwcG9ydEBkZWVyc2hhcmUuY29tXCI+c3VwcG9ydEBkZWVyc2hhcmUuY29tPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGFjdFBhbmVsO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vU2xvZ2FuQ2FyZC5jbS5zdHlsJztcblxuZnVuY3Rpb24gU2xvZ2FuQ2FyZCh7IHRpdGxlLCBkZXNjLCBpY29uIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNhcmR9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy50aXRsZX0+XG4gICAgICAgIHtpY29ufVxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy50aXRsZVRleHR9Pnt0aXRsZX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZGVzY30+XG4gICAgICAgIHtkZXNjfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblNsb2dhbkNhcmQuZGVmYXVsdFByb3BzID0ge307XG5cblNsb2dhbkNhcmQucHJvcFR5cGVzID0ge1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVzYzogUHJvcFR5cGVzLnN0cmluZyxcbiAgaWNvbjogUHJvcFR5cGVzLmVsZW1lbnQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTbG9nYW5DYXJkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFN3aXRjaCxcbiAgUmVkaXJlY3QsXG4gIFJvdXRlLFxufSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB3cyBmcm9tICcuLi93cyc7XG5pbXBvcnQgTmF2QmFyIGZyb20gJy4uL2NvbXBvbmVudHMvTmF2QmFyJztcbmltcG9ydCBTZW5kRmlsZVBhbmVsIGZyb20gJy4uL2NvbXBvbmVudHMvU2VuZEZpbGVQYW5lbCc7XG5pbXBvcnQgUmVjdkZpbGVQYW5lbCBmcm9tICcuLi9jb21wb25lbnRzL1JlY3ZGaWxlUGFuZWwnO1xuaW1wb3J0IENvbnRhY3RQYW5lbCBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRhY3RQYW5lbCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi9JY29uJztcbmltcG9ydCBTbG9nYW5DYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvU2xvZ2FuQ2FyZCc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Ib21lUGFnZS5jbS5zdHlsJztcblxuY2xhc3MgSG9tZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZW5kOiB7XG4gICAgICAgIGN1clN0ZXA6IDEsIC8vIOW9k+WJjeWcqOesrOWHoOatpVxuICAgICAgICBmaWxlczogW10sIC8vIOW3sumAieaLqeeahOaWh+S7tlxuICAgICAgICBwZWVyU3RhdGU6ICcnLCAvLyBXZWJSVEPov57mjqXnirbmgIFcbiAgICAgIH0sXG4gICAgICByZWN2OiB7XG4gICAgICAgIHJlY3ZDb2RlOiAnJywgLy8g55So5oi36L6T5YWl55qE5pS25Lu256CBXG4gICAgICAgIHBlZXJTdGF0ZTogJycsIC8vIFdlYlJUQ+i/nuaOpeeKtuaAgVxuICAgICAgICBzdGFydGVkOiBmYWxzZSwgLy8g5piv5ZCm54K55Ye75LqG5byA5aeL5LiL6L29XG4gICAgICAgIGZpbGVzOiBbXSwgLy8g5o6l5pS25Yiw55qE5paH5Lu2XG4gICAgICAgIHRhcmdldElkOiAnJywgLy8g5a+55pa555qEcGVlcklkXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB0aGlzLnNldFNlbmRTdGF0ZSA9IHRoaXMuc2V0U2VuZFN0YXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRSZWN2U3RhdGUgPSB0aGlzLnNldFJlY3ZTdGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TMmNQcmVwYXJlU2VuZCA9IHRoaXMub25TMmNQcmVwYXJlU2VuZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TMmNQcmVwYXJlUmVjdiA9IHRoaXMub25TMmNQcmVwYXJlUmVjdi5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb25TMmNQcmVwYXJlU2VuZChwYXlsb2FkKSB7XG4gICAgdGhpcy5zZXRTZW5kU3RhdGUoe1xuICAgICAgcmVjdkNvZGU6IHBheWxvYWQucmVjdkNvZGUsXG4gICAgfSk7XG4gIH1cblxuICBvblMyY1ByZXBhcmVSZWN2KHBheWxvYWQpIHtcbiAgICB0aGlzLnNldFJlY3ZTdGF0ZSh7XG4gICAgICB0YXJnZXRJZDogcGF5bG9hZC5jbGllbnRJZCxcbiAgICAgIGZpbGVzOiBwYXlsb2FkLmZpbGVzLFxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd3MucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcignczJjX3ByZXBhcmVfc2VuZCcsIHRoaXMub25TMmNQcmVwYXJlU2VuZCk7XG4gICAgd3MucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcignczJjX3ByZXBhcmVfcmVjdicsIHRoaXMub25TMmNQcmVwYXJlUmVjdik7XG4gIH1cblxuICBzZXRTZW5kU3RhdGUobmV3U3RhdGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICBjb25zdCBuZXh0U3RhdGUgPSB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgc2VuZDoge1xuICAgICAgICAgIC4uLnByZXZTdGF0ZS5zZW5kLFxuICAgICAgICAgIC4uLm5ld1N0YXRlLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfSk7XG4gIH1cblxuICBzZXRSZWN2U3RhdGUobmV3U3RhdGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICBjb25zdCBuZXh0U3RhdGUgPSB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgcmVjdjoge1xuICAgICAgICAgIC4uLnByZXZTdGF0ZS5yZWN2LFxuICAgICAgICAgIC4uLm5ld1N0YXRlLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPE5hdkJhciAvPlxuICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIj5cbiAgICAgICAgICA8UmVkaXJlY3QgdG89XCIvc2VuZFwiIC8+XG4gICAgICAgIDwvUm91dGU+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGVudH0+XG4gICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlbmRcIj5cbiAgICAgICAgICAgICAgPFNlbmRGaWxlUGFuZWwgey4uLnRoaXMuc3RhdGUuc2VuZH0gc2V0U3RhdGU9e3RoaXMuc2V0U2VuZFN0YXRlfSAvPlxuICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3JlY3YvOnJlY3ZDb2RlP1wiPlxuICAgICAgICAgICAgICA8UmVjdkZpbGVQYW5lbCB7Li4udGhpcy5zdGF0ZS5yZWN2fSBzZXRTdGF0ZT17dGhpcy5zZXRSZWN2U3RhdGV9IC8+XG4gICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvY29udGFjdFwiPlxuICAgICAgICAgICAgICA8Q29udGFjdFBhbmVsIC8+XG4gICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2FyZHNBcmVhfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2FyZFJvd30+XG4gICAgICAgICAgICAgIDxTbG9nYW5DYXJkXG4gICAgICAgICAgICAgICAgdGl0bGU9XCLnroDljZVcIlxuICAgICAgICAgICAgICAgIGljb249ezxJY29uIG5hbWU9XCJzaW1wbGVcIiBjbGFzc05hbWU9e3N0eWxlcy5pY29uU2ltcGxlfS8+fVxuICAgICAgICAgICAgICAgIGRlc2M9XCLml6DpnIDnmbvlvZXlj6rpnIDopoHpgInmi6nlpb3mg7PopoHlj5HpgIHnmoTmlofku7bvvIznhLblkI7lsIbnlJ/miJDnmoTkuIvovb3pk77mjqXlj5HpgIHnu5nlr7nmlrnljbPlj6/lvIDlp4vkvKDpgIFcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8U2xvZ2FuQ2FyZFxuICAgICAgICAgICAgICAgIHRpdGxlPVwi5a6J5YWoXCJcbiAgICAgICAgICAgICAgICBpY29uPXs8SWNvbiBuYW1lPVwic2VjdXJlXCIgY2xhc3NOYW1lPXtzdHlsZXMuaWNvblNlY3VyZX0vPn1cbiAgICAgICAgICAgICAgICBkZXNjPVwi5bCP6bm/5b+r5Lyg5L2/55SoUDJQ5oqA5pyv77yM5paH5Lu25pWw5o2u5LiN6LWw5pyN5Yqh5Zmo77yM55u05o6l5Y+R6YCB57uZ5a+55pa577yM5LiU5pWw5o2u6Ieq5bim5Yqg5a+G77yM5YWN5Y676ZqQ56eB6KKr5rOE5ryP55qE6aOO6Zmp44CCXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jYXJkUm93fT5cbiAgICAgICAgICAgICAgPFNsb2dhbkNhcmRcbiAgICAgICAgICAgICAgICB0aXRsZT1cIumrmOaViFwiXG4gICAgICAgICAgICAgICAgaWNvbj17PEljb24gbmFtZT1cInNwZWVkXCIgY2xhc3NOYW1lPXtzdHlsZXMuaWNvblNwZWVkfS8+fVxuICAgICAgICAgICAgICAgIGRlc2M9XCLnlLHkuo7kvb/nlKhQMlDmioDmnK/vvIzmlofku7bkvKDovpPpgJ/luqbkuI3kvJrlj5fliLDmnI3liqHlmajmgKfog73nmoTlvbHlk43vvIzlrozlhajlj5blhrPkuo7kvaDlkozlr7nmlrnnmoTnvZHpgJ/jgIJcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8U2xvZ2FuQ2FyZFxuICAgICAgICAgICAgICAgIHRpdGxlPVwi5LiT5LiaXCJcbiAgICAgICAgICAgICAgICBpY29uPXs8SWNvbiBuYW1lPVwiY2hlY2stZmlsbFwiIGNsYXNzTmFtZT17c3R5bGVzLmljb25DaGVja30vPn1cbiAgICAgICAgICAgICAgICBkZXNjPVwi5LiN6ZmQ5Yi25paH5Lu257G75Z6L77yM5Lu75L2V5paH5Lu26YO95Y+v6ZqP5b+D5Lyg6L6T44CC5omA5pyJ5paH5Lu26YO95piv5Y6f5paH5Lu25Lyg6L6T77yM5Lyg6KeG6aKR5Zu+54mH5LiN5o2f5aSx55S76LSo44CCXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuSG9tZVBhZ2UuZGVmYXVsdFByb3BzID0ge307XG5cbkhvbWVQYWdlLnByb3BUeXBlcyA9IHtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0R0EgZnJvbSAncmVhY3QtZ2EnO1xuaW1wb3J0IHtcbiAgd2l0aFJvdXRlcixcbn0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7XG4gIFN3aXRjaCxcbiAgUm91dGUsXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG5cbmltcG9ydCBIb21lUGFnZSBmcm9tICcuLi9wYWdlcy9Ib21lUGFnZSc7XG5cbmltcG9ydCAnLi9BcHAuY3NzJztcbmltcG9ydCAnLi9BcHAuY20uc3R5bCc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLnByb3BzLmhpc3RvcnkubGlzdGVuKGxvY2F0aW9uID0+IHtcbiAgICAgICAgUmVhY3RHQS5wYWdldmlldyhsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKCkge1xuICAgIHJldHVybiB7IGhhc0Vycm9yOiB0cnVlIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgU2VudHJ5LndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhlcnJvckluZm8pLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgc2NvcGUuc2V0RXh0cmEoa2V5LCBlcnJvckluZm9ba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFNlbnRyeS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBoYXNFcnJvcixcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8aDEgc3R5bGU9e3sgdGV4dEFsaWduOiAnY2VudGVyJyB9fT7mirHmrYnpobXpnaLlh7rnjrDplJnor6/vvIzmiJHku6znmoTlt6XnqIvluIjlt7Lnu4/mlLbliLDpgJrnn6XvvIzkvJrlsL3lv6vlpITnkIbjgILmgqjlj6/ku6XvvJo8YSBocmVmPVwiXCI+54K55q2k5Yi35paw6aG16Z2i6YeN6K+VPC9hPjwvaDE+XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN3aXRjaD5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gICAgICAgICAgPEhvbWVQYWdlIC8+XG4gICAgICAgIDwvUm91dGU+XG4gICAgICA8L1N3aXRjaD5cbiAgICApO1xuICB9XG59XG5cbkFwcC5wcm9wVHlwZXMgPSB7XG4gIHNlbmRIZWxsbzogUHJvcFR5cGVzLmZ1bmMsXG4gIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICB1c2VyOiBzdGF0ZS51c2VyLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG59KShBcHApKTtcbiIsImZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiZXhwb3J0IGNvbnN0IFVQREFURV9IRUxMT19NU0cgPSAnVVBEQVRFX0hFTExPX01TRyc7XG5cbmV4cG9ydCBjb25zdCBVUERBVEVfU0VORF9GSUxFX0lORk8gPSAnVVBEQVRFX1NFTkRfRklMRV9JTkZPJztcblxuZXhwb3J0IGNvbnN0IFVQREFURV9SRUNWX0ZJTEVfSU5GTyA9ICdVUERBVEVfUkVDVl9GSUxFX0lORk8nO1xuIiwiaW1wb3J0IHByb2R1Y2UgZnJvbSAnaW1tZXInO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vY29tbW9uL2FjdGlvblR5cGVzJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICByZWN2Q29kZTogJycsXG59O1xuXG5jb25zdCBmaWxlUmVkdWNlciA9IHByb2R1Y2UoKGRyYWZ0ID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgdHlwZXMuVVBEQVRFX1NFTkRfRklMRV9JTkZPOiB7XG4gICAgICBkcmFmdC5yZWN2Q29kZSA9IGFjdGlvbi5wYXlsb2FkLnJlY3ZDb2RlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBkcmFmdDtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmaWxlUmVkdWNlcjtcbiIsImltcG9ydCBwcm9kdWNlIGZyb20gJ2ltbWVyJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2NvbW1vbi9hY3Rpb25UeXBlcyc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgdGFyZ2V0SWQ6ICcnLFxuICBmaWxlczogW10sXG59O1xuXG5jb25zdCBmaWxlUmVkdWNlciA9IHByb2R1Y2UoKGRyYWZ0ID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgdHlwZXMuVVBEQVRFX1JFQ1ZfRklMRV9JTkZPOiB7XG4gICAgICBkcmFmdC50YXJnZXRJZCA9IGFjdGlvbi5wYXlsb2FkLmNsaWVudElkO1xuICAgICAgZHJhZnQuZmlsZXMgPSBhY3Rpb24ucGF5bG9hZC5maWxlcztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHJhZnQ7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZmlsZVJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgc2VuZEZpbGUgZnJvbSAnLi9zZW5kRmlsZSc7XG5pbXBvcnQgcmVjdkZpbGUgZnJvbSAnLi9yZWN2RmlsZSc7XG5cbmNvbnN0IHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcbiAgc2VuZEZpbGUsXG4gIHJlY3ZGaWxlLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyO1xuIiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuayc7XG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi4vcmVkdWNlcnMnO1xuXG5jb25zdCBjb21wb3NlRW5oYW5jZXJzID0gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyB8fCBjb21wb3NlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25maWd1cmVTdG9yZShwcmVsb2FkZWRTdGF0ZSkge1xuICBjb25zdCBtaWRkbGV3YXJlcyA9IFt0aHVua107XG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlRW5oYW5jZXJzKGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykpKTtcbiAgcmV0dXJuIHN0b3JlO1xufVxuIiwiaW1wb3J0ICdub3JtYWxpemUuY3NzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCAnd2VicnRjLWFkYXB0ZXInO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbmltcG9ydCBSZWFjdEdBIGZyb20gJ3JlYWN0LWdhJztcbmltcG9ydCB7XG4gIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLFxufSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBBcHAgZnJvbSAnLi9jb21wb25lbnRzL0FwcCc7XG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9zdG9yZS9jb25maWd1cmVTdG9yZSc7XG5pbXBvcnQgY29uZmlndXJlV1MgZnJvbSAnLi9hY3Rpb25zL2NvbmZpZ3VyZVdTJztcblxuY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xuXG5jb25maWd1cmVXUyhzdG9yZS5kaXNwYXRjaCk7XG5cbi8vIENvbmZpZ3VyZSBTZW50cnlcblNlbnRyeS5pbml0KHsgZHNuOiAnaHR0cHM6Ly9iZThkYjMwYTBkYjA0M2Y2ODZmNjRjNGZjOTE2ODJjOEBzZW50cnkuaW8vMjAzNDYzNCcsIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOViB9KTtcblxuLy8gSW5pdGlhbGl6ZSBHb29nbGUgQW5hbHl0aWNzXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdEdBLmluaXRpYWxpemUoJ1VBLTEzMTM4MjcyNi0yJyk7XG4gIFJlYWN0R0EucGFnZXZpZXcod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG59XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFByb3ZpZGVyXG4gICAgc3RvcmU9e3N0b3JlfVxuICA+XG4gICAgPFJvdXRlcj5cbiAgICAgIDxBcHAgLz5cbiAgICA8L1JvdXRlcj5cbiAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JyksXG4pO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB3cyBmcm9tICcuLi93cyc7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi9jb21tb24vYWN0aW9uVHlwZXMnO1xuaW1wb3J0IFRvYXN0IGZyb20gJy4uL2NvbXBvbmVudHMvY29tbW9uL1RvYXN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uZmlndXJlV1MoZGlzcGF0Y2gpIHtcbiAgZnVuY3Rpb24gczJjUHJlcGFyZVNlbmQocGF5bG9hZCkge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogdHlwZXMuVVBEQVRFX1NFTkRfRklMRV9JTkZPLCBwYXlsb2FkIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gczJjUHJlcGFyZVJlY3YocGF5bG9hZCkge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogdHlwZXMuVVBEQVRFX1JFQ1ZfRklMRV9JTkZPLCBwYXlsb2FkIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gczJjRXJyb3IocGF5bG9hZCkge1xuICAgIFRvYXN0LmVycm9yKHBheWxvYWQubWVzc2FnZSk7XG4gIH1cblxuICAvLyDnp7vliqjliLBIb21lUGFnZS5qc+S4reWkhOeQhlxuICAvLyB3cy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKCdzMmNfcHJlcGFyZV9zZW5kJywgczJjUHJlcGFyZVNlbmQpO1xuICAvLyB3cy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKCdzMmNfcHJlcGFyZV9yZWN2JywgczJjUHJlcGFyZVJlY3YpO1xuICB3cy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKCdzMmNfZXJyb3InLCBzMmNFcnJvcik7XG59XG4iLCJpbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKipcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBTREsgY2xpZW50IGluc3RhbmNlLiBUaGUgY2xpZW50IGlzXG4gKiBpbnN0YWxsZWQgYW5kIHRoZW4gYm91bmQgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogQHBhcmFtIGNsaWVudENsYXNzIFRoZSBjbGllbnQgY2xhc3MgdG8gaW5zdGFuY2lhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRBbmRCaW5kKGNsaWVudENsYXNzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICAgICAgbG9nZ2VyLmVuYWJsZSgpO1xuICAgIH1cbiAgICBnZXRDdXJyZW50SHViKCkuYmluZENsaWVudChuZXcgY2xpZW50Q2xhc3Mob3B0aW9ucykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjb25zb2xlU2FuZGJveCwgZHluYW1pY1JlcXVpcmUsIGdldEdsb2JhbE9iamVjdCwgaXNOb2RlRW52LCBsb2dnZXIsIHRpbWVzdGFtcFdpdGhNcywgdXVpZDQsIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBTY29wZSB9IGZyb20gJy4vc2NvcGUnO1xuLyoqXG4gKiBBUEkgY29tcGF0aWJpbGl0eSB2ZXJzaW9uIG9mIHRoaXMgaHViLlxuICpcbiAqIFdBUk5JTkc6IFRoaXMgbnVtYmVyIHNob3VsZCBvbmx5IGJlIGluY3Jlc2VkIHdoZW4gdGhlIGdsb2JhbCBpbnRlcmZhY2VcbiAqIGNoYW5nZXMgYSBhbmQgbmV3IG1ldGhvZHMgYXJlIGludHJvZHVjZWQuXG4gKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdmFyIEFQSV9WRVJTSU9OID0gMztcbi8qKlxuICogRGVmYXVsdCBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gQ2FuIGJlIG92ZXJ3cml0dGVuXG4gKiB3aXRoIHtAbGluayBPcHRpb25zLm1heEJyZWFkY3J1bWJzfS5cbiAqL1xudmFyIERFRkFVTFRfQlJFQURDUlVNQlMgPSAxMDA7XG4vKipcbiAqIEFic29sdXRlIG1heGltdW0gbnVtYmVyIG9mIGJyZWFkY3J1bWJzIGFkZGVkIHRvIGFuIGV2ZW50LiBUaGVcbiAqIGBtYXhCcmVhZGNydW1ic2Agb3B0aW9uIGNhbm5vdCBiZSBoaWdoZXIgdGhhbiB0aGlzIHZhbHVlLlxuICovXG52YXIgTUFYX0JSRUFEQ1JVTUJTID0gMTAwO1xuLyoqXG4gKiBAaW5oZXJpdERvY1xuICovXG52YXIgSHViID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGh1Yiwgd2lsbCBwdXNoIG9uZSB7QGxpbmsgTGF5ZXJ9IGludG8gdGhlXG4gICAgICogaW50ZXJuYWwgc3RhY2sgb24gY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2xpZW50IGJvdW5kIHRvIHRoZSBodWIuXG4gICAgICogQHBhcmFtIHNjb3BlIGJvdW5kIHRvIHRoZSBodWIuXG4gICAgICogQHBhcmFtIHZlcnNpb24gbnVtYmVyLCBoaWdoZXIgbnVtYmVyIG1lYW5zIGhpZ2hlciBwcmlvcml0eS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIdWIoY2xpZW50LCBzY29wZSwgX3ZlcnNpb24pIHtcbiAgICAgICAgaWYgKHNjb3BlID09PSB2b2lkIDApIHsgc2NvcGUgPSBuZXcgU2NvcGUoKTsgfVxuICAgICAgICBpZiAoX3ZlcnNpb24gPT09IHZvaWQgMCkgeyBfdmVyc2lvbiA9IEFQSV9WRVJTSU9OOyB9XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSBfdmVyc2lvbjtcbiAgICAgICAgLyoqIElzIGEge0BsaW5rIExheWVyfVtdIGNvbnRhaW5pbmcgdGhlIGNsaWVudCBhbmQgc2NvcGUgKi9cbiAgICAgICAgdGhpcy5fc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5fc3RhY2sucHVzaCh7IGNsaWVudDogY2xpZW50LCBzY29wZTogc2NvcGUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGhlbHBlciBmdW5jdGlvbiB0byBjYWxsIGEgbWV0aG9kIG9uIHRoZSB0b3AgY2xpZW50IGlmIGl0IGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXRob2QgVGhlIG1ldGhvZCB0byBjYWxsIG9uIHRoZSBjbGllbnQuXG4gICAgICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGNsaWVudCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLl9pbnZva2VDbGllbnQgPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvcCA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICAgICAgaWYgKHRvcCAmJiB0b3AuY2xpZW50ICYmIHRvcC5jbGllbnRbbWV0aG9kXSkge1xuICAgICAgICAgICAgKF9hID0gdG9wLmNsaWVudClbbWV0aG9kXS5hcHBseShfYSwgdHNsaWJfMS5fX3NwcmVhZChhcmdzLCBbdG9wLnNjb3BlXSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuaXNPbGRlclRoYW4gPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbiA8IHZlcnNpb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuYmluZENsaWVudCA9IGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgdmFyIHRvcCA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICAgICAgdG9wLmNsaWVudCA9IGNsaWVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5wdXNoU2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY2xvbmUgdGhlIGNvbnRlbnQgb2YgcHJldiBzY29wZVxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmdldFN0YWNrKCk7XG4gICAgICAgIHZhciBwYXJlbnRTY29wZSA9IHN0YWNrLmxlbmd0aCA+IDAgPyBzdGFja1tzdGFjay5sZW5ndGggLSAxXS5zY29wZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHNjb3BlID0gU2NvcGUuY2xvbmUocGFyZW50U2NvcGUpO1xuICAgICAgICB0aGlzLmdldFN0YWNrKCkucHVzaCh7XG4gICAgICAgICAgICBjbGllbnQ6IHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICAgICAgICBzY29wZTogc2NvcGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUucG9wU2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YWNrKCkucG9wKCkgIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS53aXRoU2NvcGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5wdXNoU2NvcGUoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMucG9wU2NvcGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmdldENsaWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhY2tUb3AoKS5jbGllbnQ7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgc2NvcGUgb2YgdGhlIHRvcCBzdGFjay4gKi9cbiAgICBIdWIucHJvdG90eXBlLmdldFNjb3BlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGFja1RvcCgpLnNjb3BlO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIHNjb3BlIHN0YWNrIGZvciBkb21haW5zIG9yIHRoZSBwcm9jZXNzLiAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0U3RhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFjaztcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSB0b3Btb3N0IHNjb3BlIGxheWVyIGluIHRoZSBvcmRlciBkb21haW4gPiBsb2NhbCA+IHByb2Nlc3MuICovXG4gICAgSHViLnByb3RvdHlwZS5nZXRTdGFja1RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YWNrW3RoaXMuX3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmNhcHR1cmVFeGNlcHRpb24gPSBmdW5jdGlvbiAoZXhjZXB0aW9uLCBoaW50KSB7XG4gICAgICAgIHZhciBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gdXVpZDQoKSk7XG4gICAgICAgIHZhciBmaW5hbEhpbnQgPSBoaW50O1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGV4cGxpY2l0IGhpbnQgcHJvdmlkZWQsIG1pbWljayB0aGUgc2FtZSB0aGluZyB0aGF0IHdvdWxkIGhhcHBlblxuICAgICAgICAvLyBpbiB0aGUgbWluaW1hbCBpdHNlbGYgdG8gY3JlYXRlIGEgY29uc2lzdGVudCBiZWhhdmlvci5cbiAgICAgICAgLy8gV2UgZG9uJ3QgZG8gdGhpcyBpbiB0aGUgY2xpZW50LCBhcyBpdCdzIHRoZSBsb3dlc3QgbGV2ZWwgQVBJLCBhbmQgZG9pbmcgdGhpcyxcbiAgICAgICAgLy8gd291bGQgcHJldmVudCB1c2VyIGZyb20gaGF2aW5nIGZ1bGwgY29udHJvbCBvdmVyIGRpcmVjdCBjYWxscy5cbiAgICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgICAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbnRyeSBzeW50aGV0aWNFeGNlcHRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb24gPSBleGNlcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbEhpbnQgPSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW52b2tlQ2xpZW50KCdjYXB0dXJlRXhjZXB0aW9uJywgZXhjZXB0aW9uLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmaW5hbEhpbnQsIHsgZXZlbnRfaWQ6IGV2ZW50SWQgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5jYXB0dXJlTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBsZXZlbCwgaGludCkge1xuICAgICAgICB2YXIgZXZlbnRJZCA9ICh0aGlzLl9sYXN0RXZlbnRJZCA9IHV1aWQ0KCkpO1xuICAgICAgICB2YXIgZmluYWxIaW50ID0gaGludDtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBleHBsaWNpdCBoaW50IHByb3ZpZGVkLCBtaW1pY2sgdGhlIHNhbWUgdGhpbmcgdGhhdCB3b3VsZCBoYXBwZW5cbiAgICAgICAgLy8gaW4gdGhlIG1pbmltYWwgaXRzZWxmIHRvIGNyZWF0ZSBhIGNvbnNpc3RlbnQgYmVoYXZpb3IuXG4gICAgICAgIC8vIFdlIGRvbid0IGRvIHRoaXMgaW4gdGhlIGNsaWVudCwgYXMgaXQncyB0aGUgbG93ZXN0IGxldmVsIEFQSSwgYW5kIGRvaW5nIHRoaXMsXG4gICAgICAgIC8vIHdvdWxkIHByZXZlbnQgdXNlciBmcm9tIGhhdmluZyBmdWxsIGNvbnRyb2wgb3ZlciBkaXJlY3QgY2FsbHMuXG4gICAgICAgIGlmICghaGludCkge1xuICAgICAgICAgICAgdmFyIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsSGludCA9IHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW52b2tlQ2xpZW50KCdjYXB0dXJlTWVzc2FnZScsIG1lc3NhZ2UsIGxldmVsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmaW5hbEhpbnQsIHsgZXZlbnRfaWQ6IGV2ZW50SWQgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5jYXB0dXJlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQpIHtcbiAgICAgICAgdmFyIGV2ZW50SWQgPSAodGhpcy5fbGFzdEV2ZW50SWQgPSB1dWlkNCgpKTtcbiAgICAgICAgdGhpcy5faW52b2tlQ2xpZW50KCdjYXB0dXJlRXZlbnQnLCBldmVudCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgaGludCwgeyBldmVudF9pZDogZXZlbnRJZCB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmxhc3RFdmVudElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuYWRkQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChicmVhZGNydW1iLCBoaW50KSB7XG4gICAgICAgIHZhciB0b3AgPSB0aGlzLmdldFN0YWNrVG9wKCk7XG4gICAgICAgIGlmICghdG9wLnNjb3BlIHx8ICF0b3AuY2xpZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gKHRvcC5jbGllbnQuZ2V0T3B0aW9ucyAmJiB0b3AuY2xpZW50LmdldE9wdGlvbnMoKSkgfHwge30sIF9iID0gX2EuYmVmb3JlQnJlYWRjcnVtYiwgYmVmb3JlQnJlYWRjcnVtYiA9IF9iID09PSB2b2lkIDAgPyBudWxsIDogX2IsIF9jID0gX2EubWF4QnJlYWRjcnVtYnMsIG1heEJyZWFkY3J1bWJzID0gX2MgPT09IHZvaWQgMCA/IERFRkFVTFRfQlJFQURDUlVNQlMgOiBfYztcbiAgICAgICAgaWYgKG1heEJyZWFkY3J1bWJzIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGltZXN0YW1wID0gdGltZXN0YW1wV2l0aE1zKCk7XG4gICAgICAgIHZhciBtZXJnZWRCcmVhZGNydW1iID0gdHNsaWJfMS5fX2Fzc2lnbih7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0sIGJyZWFkY3J1bWIpO1xuICAgICAgICB2YXIgZmluYWxCcmVhZGNydW1iID0gYmVmb3JlQnJlYWRjcnVtYlxuICAgICAgICAgICAgPyBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7IHJldHVybiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsIGhpbnQpOyB9KVxuICAgICAgICAgICAgOiBtZXJnZWRCcmVhZGNydW1iO1xuICAgICAgICBpZiAoZmluYWxCcmVhZGNydW1iID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdG9wLnNjb3BlLmFkZEJyZWFkY3J1bWIoZmluYWxCcmVhZGNydW1iLCBNYXRoLm1pbihtYXhCcmVhZGNydW1icywgTUFYX0JSRUFEQ1JVTUJTKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0VXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHZhciB0b3AgPSB0aGlzLmdldFN0YWNrVG9wKCk7XG4gICAgICAgIGlmICghdG9wLnNjb3BlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdG9wLnNjb3BlLnNldFVzZXIodXNlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0VGFncyA9IGZ1bmN0aW9uICh0YWdzKSB7XG4gICAgICAgIHZhciB0b3AgPSB0aGlzLmdldFN0YWNrVG9wKCk7XG4gICAgICAgIGlmICghdG9wLnNjb3BlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdG9wLnNjb3BlLnNldFRhZ3ModGFncyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0RXh0cmFzID0gZnVuY3Rpb24gKGV4dHJhcykge1xuICAgICAgICB2YXIgdG9wID0gdGhpcy5nZXRTdGFja1RvcCgpO1xuICAgICAgICBpZiAoIXRvcC5zY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRvcC5zY29wZS5zZXRFeHRyYXMoZXh0cmFzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRUYWcgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdG9wID0gdGhpcy5nZXRTdGFja1RvcCgpO1xuICAgICAgICBpZiAoIXRvcC5zY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRvcC5zY29wZS5zZXRUYWcoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0RXh0cmEgPSBmdW5jdGlvbiAoa2V5LCBleHRyYSkge1xuICAgICAgICB2YXIgdG9wID0gdGhpcy5nZXRTdGFja1RvcCgpO1xuICAgICAgICBpZiAoIXRvcC5zY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRvcC5zY29wZS5zZXRFeHRyYShrZXksIGV4dHJhKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHRvcCA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICAgICAgaWYgKCF0b3Auc2NvcGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0b3Auc2NvcGUuc2V0Q29udGV4dChuYW1lLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5jb25maWd1cmVTY29wZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgdG9wID0gdGhpcy5nZXRTdGFja1RvcCgpO1xuICAgICAgICBpZiAodG9wLnNjb3BlICYmIHRvcC5jbGllbnQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHRvcC5zY29wZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9sZEh1YiA9IG1ha2VNYWluKHRoaXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBtYWtlTWFpbihvbGRIdWIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0SW50ZWdyYXRpb24gPSBmdW5jdGlvbiAoaW50ZWdyYXRpb24pIHtcbiAgICAgICAgdmFyIGNsaWVudCA9IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGlmICghY2xpZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJDYW5ub3QgcmV0cmlldmUgaW50ZWdyYXRpb24gXCIgKyBpbnRlZ3JhdGlvbi5pZCArIFwiIGZyb20gdGhlIGN1cnJlbnQgSHViXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zdGFydFNwYW4gPSBmdW5jdGlvbiAoc3Bhbk9yU3BhbkNvbnRleHQsIGZvcmNlTm9DaGlsZCkge1xuICAgICAgICBpZiAoZm9yY2VOb0NoaWxkID09PSB2b2lkIDApIHsgZm9yY2VOb0NoaWxkID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxFeHRlbnNpb25NZXRob2QoJ3N0YXJ0U3BhbicsIHNwYW5PclNwYW5Db250ZXh0LCBmb3JjZU5vQ2hpbGQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnRyYWNlSGVhZGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxFeHRlbnNpb25NZXRob2QoJ3RyYWNlSGVhZGVycycpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsbHMgZ2xvYmFsIGV4dGVuc2lvbiBtZXRob2QgYW5kIGJpbmRpbmcgY3VycmVudCBpbnN0YW5jZSB0byB0aGUgZnVuY3Rpb24gY2FsbFxuICAgICAqL1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBIdWIucHJvdG90eXBlLl9jYWxsRXh0ZW5zaW9uTWV0aG9kID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gICAgICAgIHZhciBzZW50cnkgPSBjYXJyaWVyLl9fU0VOVFJZX187XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogc3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuICAgICAgICBpZiAoc2VudHJ5ICYmIHNlbnRyeS5leHRlbnNpb25zICYmIHR5cGVvZiBzZW50cnkuZXh0ZW5zaW9uc1ttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VudHJ5LmV4dGVuc2lvbnNbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIud2FybihcIkV4dGVuc2lvbiBtZXRob2QgXCIgKyBtZXRob2QgKyBcIiBjb3VsZG4ndCBiZSBmb3VuZCwgZG9pbmcgbm90aGluZy5cIik7XG4gICAgfTtcbiAgICByZXR1cm4gSHViO1xufSgpKTtcbmV4cG9ydCB7IEh1YiB9O1xuLyoqIFJldHVybnMgdGhlIGdsb2JhbCBzaGltIHJlZ2lzdHJ5LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1haW5DYXJyaWVyKCkge1xuICAgIHZhciBjYXJyaWVyID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgY2Fycmllci5fX1NFTlRSWV9fID0gY2Fycmllci5fX1NFTlRSWV9fIHx8IHtcbiAgICAgICAgZXh0ZW5zaW9uczoge30sXG4gICAgICAgIGh1YjogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgcmV0dXJuIGNhcnJpZXI7XG59XG4vKipcbiAqIFJlcGxhY2VzIHRoZSBjdXJyZW50IG1haW4gaHViIHdpdGggdGhlIHBhc3NlZCBvbmUgb24gdGhlIGdsb2JhbCBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyBUaGUgb2xkIHJlcGxhY2VkIGh1YlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZU1haW4oaHViKSB7XG4gICAgdmFyIHJlZ2lzdHJ5ID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgICB2YXIgb2xkSHViID0gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO1xuICAgIHNldEh1Yk9uQ2FycmllcihyZWdpc3RyeSwgaHViKTtcbiAgICByZXR1cm4gb2xkSHViO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGh1YiBpbnN0YW5jZS5cbiAqXG4gKiBJZiBhIGh1YiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgaW4gdGhlIGdsb2JhbCBjYXJyaWVyIGJ1dCB0aGlzIG1vZHVsZVxuICogY29udGFpbnMgYSBtb3JlIHJlY2VudCB2ZXJzaW9uLCBpdCByZXBsYWNlcyB0aGUgcmVnaXN0ZXJlZCB2ZXJzaW9uLlxuICogT3RoZXJ3aXNlLCB0aGUgY3VycmVudGx5IHJlZ2lzdGVyZWQgaHViIHdpbGwgYmUgcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50SHViKCkge1xuICAgIC8vIEdldCBtYWluIGNhcnJpZXIgKGdsb2JhbCBmb3IgZXZlcnkgZW52aXJvbm1lbnQpXG4gICAgdmFyIHJlZ2lzdHJ5ID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgICAvLyBJZiB0aGVyZSdzIG5vIGh1Yiwgb3IgaXRzIGFuIG9sZCBBUEksIGFzc2lnbiBhIG5ldyBvbmVcbiAgICBpZiAoIWhhc0h1Yk9uQ2FycmllcihyZWdpc3RyeSkgfHwgZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpLmlzT2xkZXJUaGFuKEFQSV9WRVJTSU9OKSkge1xuICAgICAgICBzZXRIdWJPbkNhcnJpZXIocmVnaXN0cnksIG5ldyBIdWIoKSk7XG4gICAgfVxuICAgIC8vIFByZWZlciBkb21haW5zIG92ZXIgZ2xvYmFsIGlmIHRoZXkgYXJlIHRoZXJlIChhcHBsaWNhYmxlIG9ubHkgdG8gTm9kZSBlbnZpcm9ubWVudClcbiAgICBpZiAoaXNOb2RlRW52KCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEh1YkZyb21BY3RpdmVEb21haW4ocmVnaXN0cnkpO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gaHViIHRoYXQgbGl2ZXMgb24gYSBnbG9iYWwgb2JqZWN0XG4gICAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTtcbn1cbi8qKlxuICogVHJ5IHRvIHJlYWQgdGhlIGh1YiBmcm9tIGFuIGFjdGl2ZSBkb21haW4sIGZhbGxiYWNrIHRvIHRoZSByZWdpc3RyeSBpZiBvbmUgZG9lc250IGV4aXN0XG4gKiBAcmV0dXJucyBkaXNjb3ZlcmVkIGh1YlxuICovXG5mdW5jdGlvbiBnZXRIdWJGcm9tQWN0aXZlRG9tYWluKHJlZ2lzdHJ5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB1c2UgYGR5bmFtaWNSZXF1aXJlYCBiZWNhdXNlIGByZXF1aXJlYCBvbiBpdCdzIG93biB3aWxsIGJlIG9wdGltaXplZCBieSB3ZWJwYWNrLlxuICAgICAgICAvLyBXZSBkbyBub3Qgd2FudCB0aGlzIHRvIGhhcHBlbiwgd2UgbmVlZCB0byB0cnkgdG8gYHJlcXVpcmVgIHRoZSBkb21haW4gbm9kZSBtb2R1bGUgYW5kIGZhaWwgaWYgd2UgYXJlIGluIGJyb3dzZXJcbiAgICAgICAgLy8gZm9yIGV4YW1wbGUgc28gd2UgZG8gbm90IGhhdmUgdG8gc2hpbSBpdCBhbmQgdXNlIGBnZXRDdXJyZW50SHViYCB1bml2ZXJzYWxseS5cbiAgICAgICAgdmFyIGRvbWFpbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ2RvbWFpbicpO1xuICAgICAgICB2YXIgYWN0aXZlRG9tYWluID0gZG9tYWluLmFjdGl2ZTtcbiAgICAgICAgLy8gSWYgdGhlcmUgbm8gYWN0aXZlIGRvbWFpbiwganVzdCByZXR1cm4gZ2xvYmFsIGh1YlxuICAgICAgICBpZiAoIWFjdGl2ZURvbWFpbikge1xuICAgICAgICAgICAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGh1YiBvbiBjdXJyZW50IGRvbWFpbiwgb3IgaXRzIGFuIG9sZCBBUEksIGFzc2lnbiBhIG5ldyBvbmVcbiAgICAgICAgaWYgKCFoYXNIdWJPbkNhcnJpZXIoYWN0aXZlRG9tYWluKSB8fCBnZXRIdWJGcm9tQ2FycmllcihhY3RpdmVEb21haW4pLmlzT2xkZXJUaGFuKEFQSV9WRVJTSU9OKSkge1xuICAgICAgICAgICAgdmFyIHJlZ2lzdHJ5SHViVG9wU3RhY2sgPSBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSkuZ2V0U3RhY2tUb3AoKTtcbiAgICAgICAgICAgIHNldEh1Yk9uQ2FycmllcihhY3RpdmVEb21haW4sIG5ldyBIdWIocmVnaXN0cnlIdWJUb3BTdGFjay5jbGllbnQsIFNjb3BlLmNsb25lKHJlZ2lzdHJ5SHViVG9wU3RhY2suc2NvcGUpKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZG9tYWluXG4gICAgICAgIHJldHVybiBnZXRIdWJGcm9tQ2FycmllcihhY3RpdmVEb21haW4pO1xuICAgIH1cbiAgICBjYXRjaCAoX09vKSB7XG4gICAgICAgIC8vIFJldHVybiBodWIgdGhhdCBsaXZlcyBvbiBhIGdsb2JhbCBvYmplY3RcbiAgICAgICAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTtcbiAgICB9XG59XG4vKipcbiAqIFRoaXMgd2lsbCB0ZWxsIHdoZXRoZXIgYSBjYXJyaWVyIGhhcyBhIGh1YiBvbiBpdCBvciBub3RcbiAqIEBwYXJhbSBjYXJyaWVyIG9iamVjdFxuICovXG5mdW5jdGlvbiBoYXNIdWJPbkNhcnJpZXIoY2Fycmllcikge1xuICAgIGlmIChjYXJyaWVyICYmIGNhcnJpZXIuX19TRU5UUllfXyAmJiBjYXJyaWVyLl9fU0VOVFJZX18uaHViKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcge0BsaW5rIEh1Yn0gYW5kIGFkZCB0byB0aGUgcGFzc2VkIG9iamVjdCBvblxuICogX19TRU5UUllfXy5odWIuXG4gKiBAcGFyYW0gY2FycmllciBvYmplY3RcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEh1YkZyb21DYXJyaWVyKGNhcnJpZXIpIHtcbiAgICBpZiAoY2FycmllciAmJiBjYXJyaWVyLl9fU0VOVFJZX18gJiYgY2Fycmllci5fX1NFTlRSWV9fLmh1Yikge1xuICAgICAgICByZXR1cm4gY2Fycmllci5fX1NFTlRSWV9fLmh1YjtcbiAgICB9XG4gICAgY2Fycmllci5fX1NFTlRSWV9fID0gY2Fycmllci5fX1NFTlRSWV9fIHx8IHt9O1xuICAgIGNhcnJpZXIuX19TRU5UUllfXy5odWIgPSBuZXcgSHViKCk7XG4gICAgcmV0dXJuIGNhcnJpZXIuX19TRU5UUllfXy5odWI7XG59XG4vKipcbiAqIFRoaXMgd2lsbCBzZXQgcGFzc2VkIHtAbGluayBIdWJ9IG9uIHRoZSBwYXNzZWQgb2JqZWN0J3MgX19TRU5UUllfXy5odWIgYXR0cmlidXRlXG4gKiBAcGFyYW0gY2FycmllciBvYmplY3RcbiAqIEBwYXJhbSBodWIgSHViXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIdWJPbkNhcnJpZXIoY2FycmllciwgaHViKSB7XG4gICAgaWYgKCFjYXJyaWVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2Fycmllci5fX1NFTlRSWV9fID0gY2Fycmllci5fX1NFTlRSWV9fIHx8IHt9O1xuICAgIGNhcnJpZXIuX19TRU5UUllfXy5odWIgPSBodWI7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odWIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==