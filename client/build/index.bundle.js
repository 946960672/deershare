!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=105)}([function(e,t,n){"use strict";e.exports=n(68)},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"d",(function(){return c})),n.d(t,"g",(function(){return s})),n.d(t,"e",(function(){return u})),n.d(t,"f",(function(){return l}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function a(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function c(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(a,c)}s((r=r.apply(e,t||[])).next())}))}function c(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function s(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function l(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}},function(e,t,n){e.exports=n(72)()},function(e,t,n){e.exports={base:"_3xR6yF","title-row":"_1Rgz2l",titleRow:"_1Rgz2l",title:"_1xgR1v",back:"_16cJdu","upload-area":"_3Z-yfm",uploadArea:"_3Z-yfm","drag-active":"_29put-",dragActive:"_29put-","recv-guide":"_1XnDvl",recvGuide:"_1XnDvl","icon-plus-wrapper":"_2ObPGq",iconPlusWrapper:"_2ObPGq","icon-plus":"_3Bexjs",iconPlus:"_3Bexjs","upload-tip":"_1FRSSP",uploadTip:"_1FRSSP","upload-btn":"Ua8o6l",uploadBtn:"Ua8o6l",link:"IL_5aL","upload-more":"_31-MJ1",uploadMore:"_31-MJ1","add-more":"_2OVRj9",addMore:"_2OVRj9","file-summary":"_3TiMmv",fileSummary:"_3TiMmv","btn-select-file-done":"_3zjNNo",btnSelectFileDone:"_3zjNNo","select-send-method":"_3d5TSD",selectSendMethod:"_3d5TSD","recv-link-container":"_19gixB",recvLinkContainer:"_19gixB","recv-code-container":"_2qcrGl",recvCodeContainer:"_2qcrGl","recv-link":"_2Zoggo",recvLink:"_2Zoggo","recv-code":"_1SuOe4",recvCode:"_1SuOe4","btn-copy":"_20RtoV",btnCopy:"_20RtoV","qrcode-container":"_1L_XZ-",qrcodeContainer:"_1L_XZ-","recv-qrcode":"_1IkS0W",recvQrcode:"_1IkS0W","connect-tips":"_3dHOOW",connectTips:"_3dHOOW","btn-wait-connect":"_3kSmAG",btnWaitConnect:"_3kSmAG","sending-box":"lbn5Xj",sendingBox:"lbn5Xj","sending-summary":"PJ7cTz",sendingSummary:"PJ7cTz","peer-connected":"nkT-WI",peerConnected:"nkT-WI","peer-not-connected":"_5ew-iS",peerNotConnected:"_5ew-iS","btn-sending":"_2_x9HQ",btnSending:"_2_x9HQ"}},function(e,t,n){"use strict";(function(e,r){n.d(t,"d",(function(){return i})),n.d(t,"j",(function(){return a})),n.d(t,"g",(function(){return s})),n.d(t,"n",(function(){return u})),n.d(t,"l",(function(){return l})),n.d(t,"e",(function(){return f})),n.d(t,"c",(function(){return p})),n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return h})),n.d(t,"h",(function(){return m})),n.d(t,"i",(function(){return v})),n.d(t,"m",(function(){return g})),n.d(t,"k",(function(){return b})),n.d(t,"f",(function(){return w}));var o=n(8);n(20);function i(e,t){return e.require(t)}function a(){return"[object process]"===Object.prototype.toString.call(void 0!==e?e:0)}var c={};function s(){return a()?r:"undefined"!=typeof window?window:"undefined"!=typeof self?self:c}function u(){var e=s(),t=e.crypto||e.msCrypto;if(void 0!==t&&t.getRandomValues){var n=new Uint16Array(8);t.getRandomValues(n),n[3]=4095&n[3]|16384,n[4]=16383&n[4]|32768;var r=function(e){for(var t=e.toString(16);t.length<4;)t="0"+t;return t};return r(n[0])+r(n[1])+r(n[2])+r(n[3])+r(n[4])+r(n[5])+r(n[6])+r(n[7])}return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}function l(e){if(!e)return{};var t=e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};var n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],relative:t[5]+n+r}}function f(e){if(e.message)return e.message;if(e.exception&&e.exception.values&&e.exception.values[0]){var t=e.exception.values[0];return t.type&&t.value?t.type+": "+t.value:t.type||t.value||e.event_id||"<unknown>"}return e.event_id||"<unknown>"}function p(e){var t=s();if(!("console"in t))return e();var n=t.console,r={};["debug","info","warn","error","log","assert"].forEach((function(e){e in t.console&&n[e].__sentry_original__&&(r[e]=n[e],n[e]=n[e].__sentry_original__)}));var o=e();return Object.keys(r).forEach((function(e){n[e]=r[e]})),o}function d(e,t,n){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].value=e.exception.values[0].value||t||"",e.exception.values[0].type=e.exception.values[0].type||n||"Error"}function h(e,t){void 0===t&&(t={});try{e.exception.values[0].mechanism=e.exception.values[0].mechanism||{},Object.keys(t).forEach((function(n){e.exception.values[0].mechanism[n]=t[n]}))}catch(e){}}function m(){try{return document.location.href}catch(e){return""}}function v(e){try{for(var t=e,n=[],r=0,o=0,i=" > ".length,a=void 0;t&&r++<5&&!("html"===(a=y(t))||r>1&&o+n.length*i+a.length>=80);)n.push(a),o+=a.length,t=t.parentNode;return n.reverse().join(" > ")}catch(e){return"<unknown>"}}function y(e){var t,n,r,i,a,c=e,s=[];if(!c||!c.tagName)return"";if(s.push(c.tagName.toLowerCase()),c.id&&s.push("#"+c.id),(t=c.className)&&Object(o.k)(t))for(n=t.split(/\s+/),a=0;a<n.length;a++)s.push("."+n[a]);var u=["type","name","title","alt"];for(a=0;a<u.length;a++)r=u[a],(i=c.getAttribute(r))&&s.push("["+r+'="'+i+'"]');return s.join("")}function g(){return(new Date).getTime()/1e3}function b(e,t){if(!t)return 6e4;var n=parseInt(""+t,10);if(!isNaN(n))return 1e3*n;var r=Date.parse(""+t);return isNaN(r)?6e4:r-e}function w(e){try{return e&&"function"==typeof e&&e.name||"<anonymous>"}catch(e){return"<anonymous>"}}}).call(this,n(36),n(30))},,function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return c})),n.d(t,"e",(function(){return s})),n.d(t,"d",(function(){return f})),n.d(t,"c",(function(){return h})),n.d(t,"a",(function(){return m}));var r=n(8),o=n(64),i=n(4),a=n(20);function c(e,t,n){if(t in e){var r=e[t],o=n(r);if("function"==typeof o)try{o.prototype=o.prototype||{},Object.defineProperties(o,{__sentry_original__:{enumerable:!1,value:r}})}catch(e){}e[t]=o}}function s(e){return Object.keys(e).map((function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])})).join("&")}function u(e){if(Object(r.d)(e)){var t=e,n={message:t.message,name:t.name,stack:t.stack};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}if(Object(r.f)(e)){var a=e,c={};c.type=a.type;try{c.target=Object(r.c)(a.target)?Object(i.i)(a.target):Object.prototype.toString.call(a.target)}catch(e){c.target="<unknown>"}try{c.currentTarget=Object(r.c)(a.currentTarget)?Object(i.i)(a.currentTarget):Object.prototype.toString.call(a.currentTarget)}catch(e){c.currentTarget="<unknown>"}for(var o in"undefined"!=typeof CustomEvent&&Object(r.g)(e,CustomEvent)&&(c.detail=a.detail),a)Object.prototype.hasOwnProperty.call(a,o)&&(c[o]=a);return c}return e}function l(e){return function(e){return~-encodeURI(e).split(/%..|./).length}(JSON.stringify(e))}function f(e,t,n){void 0===t&&(t=3),void 0===n&&(n=102400);var r=h(e,t);return l(r)>n?f(e,t-1,n):r}function p(t,n){return"domain"===n&&t&&"object"==typeof t&&t._events?"[Domain]":"domainEmitter"===n?"[DomainEmitter]":void 0!==e&&t===e?"[Global]":"undefined"!=typeof window&&t===window?"[Window]":"undefined"!=typeof document&&t===document?"[Document]":Object(r.l)(t)?"[SyntheticEvent]":"number"==typeof t&&t!=t?"[NaN]":void 0===t?"[undefined]":"function"==typeof t?"[Function: "+Object(i.f)(t)+"]":t}function d(e,t,n,i){if(void 0===n&&(n=1/0),void 0===i&&(i=new o.a),0===n)return function(e){var t=Object.prototype.toString.call(e);if("string"==typeof e)return e;if("[object Object]"===t)return"[Object]";if("[object Array]"===t)return"[Array]";var n=p(e);return Object(r.i)(n)?n:t}(t);if(null!=t&&"function"==typeof t.toJSON)return t.toJSON();var a=p(t,e);if(Object(r.i)(a))return a;var c=u(t),s=Array.isArray(t)?[]:{};if(i.memoize(t))return"[Circular ~]";for(var l in c)Object.prototype.hasOwnProperty.call(c,l)&&(s[l]=d(l,c[l],n-1,i));return i.unmemoize(t),s}function h(e,t){try{return JSON.parse(JSON.stringify(e,(function(e,n){return d(e,n,t)})))}catch(e){return"**non-serializable**"}}function m(e,t){void 0===t&&(t=40);var n=Object.keys(u(e));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=t)return Object(a.d)(n[0],t);for(var r=n.length;r>0;r--){var o=n.slice(0,r).join(", ");if(!(o.length>t))return r===n.length?o:Object(a.d)(o,t)}return""}}).call(this,n(30))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var c in r)n.call(r,c)&&r[c]&&e.push(c)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";function r(e){switch(Object.prototype.toString.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return m(e,Error)}}function o(e){return"[object ErrorEvent]"===Object.prototype.toString.call(e)}function i(e){return"[object DOMError]"===Object.prototype.toString.call(e)}function a(e){return"[object DOMException]"===Object.prototype.toString.call(e)}function c(e){return"[object String]"===Object.prototype.toString.call(e)}function s(e){return null===e||"object"!=typeof e&&"function"!=typeof e}function u(e){return"[object Object]"===Object.prototype.toString.call(e)}function l(e){return"undefined"!=typeof Event&&m(e,Event)}function f(e){return"undefined"!=typeof Element&&m(e,Element)}function p(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function d(e){return Boolean(e&&e.then&&"function"==typeof e.then)}function h(e){return u(e)&&"nativeEvent"in e&&"preventDefault"in e&&"stopPropagation"in e}function m(e,t){try{return e instanceof t}catch(e){return!1}}n.d(t,"d",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"k",(function(){return c})),n.d(t,"i",(function(){return s})),n.d(t,"h",(function(){return u})),n.d(t,"f",(function(){return l})),n.d(t,"c",(function(){return f})),n.d(t,"j",(function(){return p})),n.d(t,"m",(function(){return d})),n.d(t,"l",(function(){return h})),n.d(t,"g",(function(){return m}))},function(e,t,n){"use strict";var r=n(47),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function c(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===o.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return c(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports={container:"_1qOzqf","file-row":"_3aoE0Y",fileRow:"_3aoE0Y",left:"_3xLTNB","file-icon":"_19-z7S",fileIcon:"_19-z7S","file-info":"_1HRqi1",fileInfo:"_1HRqi1","file-name":"adZEgA",fileName:"adZEgA","file-size":"VqVjWq",fileSize:"VqVjWq","close-icon":"_3x3TWQ",closeIcon:"_3x3TWQ",waiting:"_1LnFOT",download:"_2WJStE",completed:"_1u9qTB"}},function(e,t,n){e.exports=n(75)},function(e,t,n){e.exports={base:"_1nK53-",logo:"_3jtTy3",slogan:"ay1eIM",menus:"_3bzYjy",menu:"_1nX2tW",active:"_1x8lgF"}},function(e,t,n){e.exports={base:"_8bl-qe","title-row":"_3AsA1Y",titleRow:"_3AsA1Y",title:"MQm7zy",cancel:"_2Mx9a4",input:"_2iTtOQ","recv-btn":"_3WTb49",recvBtn:"_3WTb49",tip:"zqMaDg",msg1:"_3DmJej",msg2:"uBaZ2I","peer-connected":"iVIWn9",peerConnected:"iVIWn9","peer-not-connected":"_2eFt-R",peerNotConnected:"_2eFt-R"}},function(e,t,n){e.exports={container:"_2LUsdD",content:"_2KMkak","cards-area":"IScM0S",cardsArea:"IScM0S","card-row":"_22OOXg",cardRow:"_22OOXg","icon-simple":"_2ekLXR",iconSimple:"_2ekLXR","icon-secure":"_1fZxby",iconSecure:"_1fZxby","icon-speed":"_3jTGm8",iconSpeed:"_3jTGm8","icon-check":"_30NGwS",iconCheck:"_30NGwS"}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,c){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,c],l=0;(s=new Error(t.replace(/%s/g,(function(){return u[l++]})))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";const r=["B","kB","MB","GB","TB","PB","EB","ZB","YB"],o=["b","kbit","Mbit","Gbit","Tbit","Pbit","Ebit","Zbit","Ybit"],i=(e,t)=>{let n=e;return"string"==typeof t?n=e.toLocaleString(t):!0===t&&(n=e.toLocaleString()),n};e.exports=(e,t)=>{if(!Number.isFinite(e))throw new TypeError(`Expected a finite number, got ${typeof e}: ${e}`);const n=(t=Object.assign({bits:!1},t)).bits?o:r;if(t.signed&&0===e)return" 0 "+n[0];const a=e<0,c=a?"-":t.signed?"+":"";if(a&&(e=-e),e<1){return c+i(e,t.locale)+" "+n[0]}const s=Math.min(Math.floor(Math.log10(e)/3),n.length-1);return e=Number((e/Math.pow(1e3,s)).toPrecision(3)),c+i(e,t.locale)+" "+n[s]}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(69)},function(e,t,n){e.exports={steps:"_1zbcCu",step:"_2LELqN",title:"_2mAZEj",active:"_3TvyYS","index-wrapper":"_3bz5_s",indexWrapper:"_3bz5_s",index:"_3bZhAh"}},function(e,t,n){e.exports={container:"_3Xq0PF",toast:"_1zkGIF","icon-wrapper":"NfC2Sl",iconWrapper:"NfC2Sl",success:"_1JTff1",error:"_3hnrua",info:"_22hyiO",content:"HtHZPh"}},function(e,t,n){"use strict";n.d(t,"d",(function(){return o})),n.d(t,"c",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return c}));var r=n(8);function o(e,t){return void 0===t&&(t=0),"string"!=typeof e||0===t?e:e.length<=t?e:e.substr(0,t)+"..."}function i(e,t){var n=e,r=n.length;if(r<=150)return n;t>r&&(t=r);var o=Math.max(t-60,0);o<5&&(o=0);var i=Math.min(o+140,r);return i>r-5&&(i=r),i===r&&(o=Math.max(i-140,0)),n=n.slice(o,i),o>0&&(n="'{snip} "+n),i<r&&(n+=" {snip}"),n}function a(e,t){if(!Array.isArray(e))return"";for(var n=[],r=0;r<e.length;r++){var o=e[r];try{n.push(String(o))}catch(e){n.push("[value cannot be serialized]")}}return n.join(t)}function c(e,t){return Object(r.j)(t)?t.test(e):"string"==typeof t&&-1!==e.indexOf(t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),o=Object(r.g)(),i="Sentry Logger ",a=function(){function e(){this._enabled=!1}return e.prototype.disable=function(){this._enabled=!1},e.prototype.enable=function(){this._enabled=!0},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(r.c)((function(){o.console.log(i+"[Log]: "+e.join(" "))}))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(r.c)((function(){o.console.warn(i+"[Warn]: "+e.join(" "))}))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(r.c)((function(){o.console.error(i+"[Error]: "+e.join(" "))}))},e}();o.__SENTRY__=o.__SENTRY__||{};var c=o.__SENTRY__.logger||(o.__SENTRY__.logger=new a)},function(e,t,n){e.exports={base:"_3FHORl",title:"_1YW-mE",input:"ToSpzV",textarea:"_1Q8uUd",btn:"dgspjT",tips:"_3UKauA"}},function(e,t,n){"use strict";var r={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};r.localCName=r.generateIdentifier(),r.splitLines=function(e){return e.trim().split("\n").map((function(e){return e.trim()}))},r.splitSections=function(e){return e.split("\nm=").map((function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"}))},r.getDescription=function(e){var t=r.splitSections(e);return t&&t[0]},r.getMediaSections=function(e){var t=r.splitSections(e);return t.shift(),t},r.matchPrefix=function(e,t){return r.splitLines(e).filter((function(e){return 0===e.indexOf(t)}))},r.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]=t[r+1]}return n},r.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")},r.parseIceOptions=function(e){return e.substr(14).split(" ")},r.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=3===t.length?parseInt(t[2],10):1,n.numChannels=n.channels,n},r.writeRtpMap=function(e){var t=e.payloadType;void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType);var n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==n?"/"+n:"")+"\r\n"},r.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},r.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},r.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),o=0;o<r.length;o++)n[(t=r[o].trim().split("="))[0].trim()]=t[1];return n},r.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach((function(t){e.parameters[t]?r.push(t+"="+e.parameters[t]):r.push(t)})),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},r.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},r.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach((function(e){t+="a=rtcp-fb:"+n+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"})),t},r.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},r.parseSsrcGroup=function(e){var t=e.substr(13).split(" ");return{semantics:t.shift(),ssrcs:t.map((function(e){return parseInt(e,10)}))}},r.getMid=function(e){var t=r.matchPrefix(e,"a=mid:")[0];if(t)return t.substr(6)},r.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},r.getDtlsParameters=function(e,t){return{role:"auto",fingerprints:r.matchPrefix(e+t,"a=fingerprint:").map(r.parseFingerprint)}},r.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach((function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"})),n},r.parseCryptoLine=function(e){var t=e.substr(9).split(" ");return{tag:parseInt(t[0],10),cryptoSuite:t[1],keyParams:t[2],sessionParams:t.slice(3)}},r.writeCryptoLine=function(e){return"a=crypto:"+e.tag+" "+e.cryptoSuite+" "+("object"==typeof e.keyParams?r.writeCryptoKeyParams(e.keyParams):e.keyParams)+(e.sessionParams?" "+e.sessionParams.join(" "):"")+"\r\n"},r.parseCryptoKeyParams=function(e){if(0!==e.indexOf("inline:"))return null;var t=e.substr(7).split("|");return{keyMethod:"inline",keySalt:t[0],lifeTime:t[1],mkiValue:t[2]?t[2].split(":")[0]:void 0,mkiLength:t[2]?t[2].split(":")[1]:void 0}},r.writeCryptoKeyParams=function(e){return e.keyMethod+":"+e.keySalt+(e.lifeTime?"|"+e.lifeTime:"")+(e.mkiValue&&e.mkiLength?"|"+e.mkiValue+":"+e.mkiLength:"")},r.getCryptoParameters=function(e,t){return r.matchPrefix(e+t,"a=crypto:").map(r.parseCryptoLine)},r.getIceParameters=function(e,t){var n=r.matchPrefix(e+t,"a=ice-ufrag:")[0],o=r.matchPrefix(e+t,"a=ice-pwd:")[0];return n&&o?{usernameFragment:n.substr(12),password:o.substr(10)}:null},r.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},r.parseRtpParameters=function(e){for(var t={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},n=r.splitLines(e)[0].split(" "),o=3;o<n.length;o++){var i=n[o],a=r.matchPrefix(e,"a=rtpmap:"+i+" ")[0];if(a){var c=r.parseRtpMap(a),s=r.matchPrefix(e,"a=fmtp:"+i+" ");switch(c.parameters=s.length?r.parseFmtp(s[0]):{},c.rtcpFeedback=r.matchPrefix(e,"a=rtcp-fb:"+i+" ").map(r.parseRtcpFb),t.codecs.push(c),c.name.toUpperCase()){case"RED":case"ULPFEC":t.fecMechanisms.push(c.name.toUpperCase())}}}return r.matchPrefix(e,"a=extmap:").forEach((function(e){t.headerExtensions.push(r.parseExtmap(e))})),t},r.writeRtpDescription=function(e,t){var n="";n+="m="+e+" ",n+=t.codecs.length>0?"9":"0",n+=" UDP/TLS/RTP/SAVPF ",n+=t.codecs.map((function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType})).join(" ")+"\r\n",n+="c=IN IP4 0.0.0.0\r\n",n+="a=rtcp:9 IN IP4 0.0.0.0\r\n",t.codecs.forEach((function(e){n+=r.writeRtpMap(e),n+=r.writeFmtp(e),n+=r.writeRtcpFb(e)}));var o=0;return t.codecs.forEach((function(e){e.maxptime>o&&(o=e.maxptime)})),o>0&&(n+="a=maxptime:"+o+"\r\n"),n+="a=rtcp-mux\r\n",t.headerExtensions&&t.headerExtensions.forEach((function(e){n+=r.writeExtmap(e)})),n},r.parseRtpEncodingParameters=function(e){var t,n=[],o=r.parseRtpParameters(e),i=-1!==o.fecMechanisms.indexOf("RED"),a=-1!==o.fecMechanisms.indexOf("ULPFEC"),c=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute})),s=c.length>0&&c[0].ssrc,u=r.matchPrefix(e,"a=ssrc-group:FID").map((function(e){return e.substr(17).split(" ").map((function(e){return parseInt(e,10)}))}));u.length>0&&u[0].length>1&&u[0][0]===s&&(t=u[0][1]),o.codecs.forEach((function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var r={ssrc:s,codecPayloadType:parseInt(e.parameters.apt,10)};s&&t&&(r.rtx={ssrc:t}),n.push(r),i&&((r=JSON.parse(JSON.stringify(r))).fec={ssrc:s,mechanism:a?"red+ulpfec":"red"},n.push(r))}})),0===n.length&&s&&n.push({ssrc:s});var l=r.matchPrefix(e,"b=");return l.length&&(l=0===l[0].indexOf("b=TIAS:")?parseInt(l[0].substr(7),10):0===l[0].indexOf("b=AS:")?1e3*parseInt(l[0].substr(5),10)*.95-16e3:void 0,n.forEach((function(e){e.maxBitrate=l}))),n},r.parseRtcpParameters=function(e){var t={},n=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute}))[0];n&&(t.cname=n.value,t.ssrc=n.ssrc);var o=r.matchPrefix(e,"a=rtcp-rsize");t.reducedSize=o.length>0,t.compound=0===o.length;var i=r.matchPrefix(e,"a=rtcp-mux");return t.mux=i.length>0,t},r.parseMsid=function(e){var t,n=r.matchPrefix(e,"a=msid:");if(1===n.length)return{stream:(t=n[0].substr(7).split(" "))[0],track:t[1]};var o=r.matchPrefix(e,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"msid"===e.attribute}));return o.length>0?{stream:(t=o[0].value.split(" "))[0],track:t[1]}:void 0},r.parseSctpDescription=function(e){var t,n=r.parseMLine(e),o=r.matchPrefix(e,"a=max-message-size:");o.length>0&&(t=parseInt(o[0].substr(19),10)),isNaN(t)&&(t=65536);var i=r.matchPrefix(e,"a=sctp-port:");if(i.length>0)return{port:parseInt(i[0].substr(12),10),protocol:n.fmt,maxMessageSize:t};if(r.matchPrefix(e,"a=sctpmap:").length>0){var a=r.matchPrefix(e,"a=sctpmap:")[0].substr(10).split(" ");return{port:parseInt(a[0],10),protocol:a[1],maxMessageSize:t}}},r.writeSctpDescription=function(e,t){var n=[];return n="DTLS/SCTP"!==e.protocol?["m="+e.kind+" 9 "+e.protocol+" "+t.protocol+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctp-port:"+t.port+"\r\n"]:["m="+e.kind+" 9 "+e.protocol+" "+t.port+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctpmap:"+t.port+" "+t.protocol+" 65535\r\n"],void 0!==t.maxMessageSize&&n.push("a=max-message-size:"+t.maxMessageSize+"\r\n"),n.join("")},r.generateSessionId=function(){return Math.random().toString().substr(2,21)},r.writeSessionBoilerplate=function(e,t,n){var o=void 0!==t?t:2;return"v=0\r\no="+(n||"thisisadapterortc")+" "+(e||r.generateSessionId())+" "+o+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},r.writeMediaSection=function(e,t,n,o){var i=r.writeRtpDescription(e.kind,t);if(i+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),i+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":"active"),i+="a=mid:"+e.mid+"\r\n",e.direction?i+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?i+="a=sendrecv\r\n":e.rtpSender?i+="a=sendonly\r\n":e.rtpReceiver?i+="a=recvonly\r\n":i+="a=inactive\r\n",e.rtpSender){var a="msid:"+o.id+" "+e.rtpSender.track.id+"\r\n";i+="a="+a,i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+a,e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+a,i+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),i},r.getDirection=function(e,t){for(var n=r.splitLines(e),o=0;o<n.length;o++)switch(n[o]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return n[o].substr(2)}return t?r.getDirection(t):"sendrecv"},r.getKind=function(e){return r.splitLines(e)[0].split(" ")[0].substr(2)},r.isRejected=function(e){return"0"===e.split(" ",2)[1]},r.parseMLine=function(e){var t=r.splitLines(e)[0].substr(2).split(" ");return{kind:t[0],port:parseInt(t[1],10),protocol:t[2],fmt:t.slice(3).join(" ")}},r.parseOLine=function(e){var t=r.matchPrefix(e,"o=")[0].substr(2).split(" ");return{username:t[0],sessionId:t[1],sessionVersion:parseInt(t[2],10),netType:t[3],addressType:t[4],address:t[5]}},r.isValidSDP=function(e){if("string"!=typeof e||0===e.length)return!1;for(var t=r.splitLines(e),n=0;n<t.length;n++)if(t[n].length<2||"="!==t[n].charAt(1))return!1;return!0},e.exports=r},function(e,t,n){e.exports={container:"_2NI-Bu",wrapper:"_38jnea",input:"_1ItMl6","error-icon":"_2_bPxy",errorIcon:"_2_bPxy",error:"gCi4nG"}},,function(e,t,n){"use strict";var r=n(31),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function s(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var u=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var c=s(t),m=s(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||c&&c[y])){var g=p(n,y);try{u(t,y,g)}catch(e){}}}}return t}},function(e,t,n){e.exports={card:"_13zwq3",title:"O7Bq1A","title-text":"BCfR8x",titleText:"BCfR8x",desc:"_1-uRnm"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r,o=n(8);!function(e){e.PENDING="PENDING",e.RESOLVED="RESOLVED",e.REJECTED="REJECTED"}(r||(r={}));var i=function(){function e(e){var t=this;this._state=r.PENDING,this._handlers=[],this._resolve=function(e){t._setResult(r.RESOLVED,e)},this._reject=function(e){t._setResult(r.REJECTED,e)},this._setResult=function(e,n){t._state===r.PENDING&&(Object(o.m)(n)?n.then(t._resolve,t._reject):(t._state=e,t._value=n,t._executeHandlers()))},this._attachHandler=function(e){t._handlers=t._handlers.concat(e),t._executeHandlers()},this._executeHandlers=function(){t._state!==r.PENDING&&(t._state===r.REJECTED?t._handlers.forEach((function(e){e.onrejected&&e.onrejected(t._value)})):t._handlers.forEach((function(e){e.onfulfilled&&e.onfulfilled(t._value)})),t._handlers=[])};try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}return e.prototype.toString=function(){return"[object SyncPromise]"},e.resolve=function(t){return new e((function(e){e(t)}))},e.reject=function(t){return new e((function(e,n){n(t)}))},e.all=function(t){return new e((function(n,r){if(Array.isArray(t))if(0!==t.length){var o=t.length,i=[];t.forEach((function(t,a){e.resolve(t).then((function(e){i[a]=e,0===(o-=1)&&n(i)})).then(null,r)}))}else n([]);else r(new TypeError("Promise.all requires an array as input."))}))},e.prototype.then=function(t,n){var r=this;return new e((function(e,o){r._attachHandler({onfulfilled:function(n){if(t)try{return void e(t(n))}catch(e){return void o(e)}else e(n)},onrejected:function(t){if(n)try{return void e(n(t))}catch(e){return void o(e)}else o(t)}})}))},e.prototype.catch=function(e){return this.then((function(e){return e}),e)},e.prototype.finally=function(t){var n=this;return new e((function(e,r){var o,i;return n.then((function(e){i=!1,o=e,t&&t()}),(function(e){i=!0,o=e,t&&t()})).then((function(){i?r(o):e(o)}))}))},e}()},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(74)},function(e,t,n){var r=n(80),o=n(81);e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var c=0;c<16;++c)t[i+c]=a[c];return t||o(a)}},function(e,t,n){"use strict";(function(e){var n,r,o,i="undefined"!=typeof Symbol,a="undefined"!=typeof Map,c="undefined"!=typeof Set,s=i?Symbol("immer-nothing"):((n={})["immer-nothing"]=!0,n),u=i?Symbol("immer-draftable"):"__$immer_draftable",l=i?Symbol("immer-state"):"__$immer_state",f=i?Symbol.iterator:"@@iterator",p=function(e,t){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function d(e,t){function n(){this.constructor=e}p(e,t),e.prototype=(n.prototype=t.prototype,new n)}function h(e){return!!e&&!!e[l]}function m(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[u]||!!e.constructor[u]||S(e)||C(e))}!function(e){e[e.Object=0]="Object",e[e.Array=1]="Array",e[e.Map=2]="Map",e[e.Set=3]="Set"}(r||(r={})),function(e){e[e.ProxyObject=0]="ProxyObject",e[e.ProxyArray=1]="ProxyArray",e[e.ES5Object=2]="ES5Object",e[e.ES5Array=3]="ES5Array",e[e.Map=4]="Map",e[e.Set=5]="Set"}(o||(o={}));var v="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function y(e,t){g(e)===r.Object?v(e).forEach((function(n){return t(n,e[n],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function g(e){if(e||O(),e[l])switch(e[l].type){case o.ES5Object:case o.ProxyObject:return r.Object;case o.ES5Array:case o.ProxyArray:return r.Array;case o.Map:return r.Map;case o.Set:return r.Set}return Array.isArray(e)?r.Array:S(e)?r.Map:C(e)?r.Set:r.Object}function b(e,t){return g(e)===r.Map?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function w(e,t){return g(e)===r.Map?e.get(t):e[t]}function E(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function S(e){return a&&e instanceof Map}function C(e){return c&&e instanceof Set}function _(e){return e.copy||e.base}function k(e,t){if(void 0===t&&(t=!1),Array.isArray(e))return e.slice();var n=Object.create(Object.getPrototypeOf(e));return v(e).forEach((function(r){if(r!==l){var o=Object.getOwnPropertyDescriptor(e,r),i=o.value;if(o.get){if(!t)throw new Error("Immer drafts cannot have computed properties");i=o.get.call(e)}o.enumerable?n[r]=i:Object.defineProperty(n,r,{value:i,writable:!0,configurable:!0})}})),n}function x(e,t){if(m(e)&&!h(e)&&!Object.isFrozen(e)){var n=g(e);n===r.Set?e.add=e.clear=e.delete=T:n===r.Map&&(e.set=e.clear=e.delete=T),Object.freeze(e),t&&y(e,(function(e,t){return x(t,!0)}))}}function T(){throw new Error("This object has been frozen and should not be mutated")}function O(){throw new Error("Illegal state, please file a bug")}var P=function(){function e(e,t){this.drafts=[],this.parent=e,this.immer=t,this.canAutoFreeze=!0}return e.prototype.usePatches=function(e){e&&(this.patches=[],this.inversePatches=[],this.patchListener=e)},e.prototype.revoke=function(){this.leave(),this.drafts.forEach(R),this.drafts=null},e.prototype.leave=function(){this===e.current&&(e.current=this.parent)},e.enter=function(t){var n=new e(e.current,t);return e.current=n,n},e}();function R(e){var t=e[l];t.type===o.ProxyObject||t.type===o.ProxyArray?t.revoke():t.revoked=!0}function j(e,t,n){var r=n.drafts[0],o=void 0!==t&&t!==r;if(e.willFinalize(n,t,o),o){if(r[l].modified)throw n.revoke(),new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");m(t)&&M(e,t=D(e,t,n)),n.patches&&(n.patches.push({op:"replace",path:[],value:t}),n.inversePatches.push({op:"replace",path:[],value:r[l].base}))}else t=D(e,r,n,[]);return n.revoke(),n.patches&&n.patchListener(n.patches,n.inversePatches),t!==s?t:void 0}function D(e,t,n,r){var i=t[l];if(!i)return Object.isFrozen(t)?t:N(e,t,n);if(i.scope!==n)return t;if(!i.modified)return M(e,i.base,!0),i.base;if(!i.finalized){if(i.finalized=!0,N(e,i.draft,n,r),e.onDelete&&i.type!==o.Set)if(e.useProxies){y(i.assigned,(function(t,n){n||e.onDelete(i,t)}))}else{var a=i.base,c=i.copy;y(a,(function(t){b(c,t)||e.onDelete(i,t)}))}e.onCopy&&e.onCopy(i),e.autoFreeze&&n.canAutoFreeze&&x(i.copy,!1),r&&n.patches&&function(e,t,n,r){switch(e.type){case o.ProxyObject:case o.ES5Object:case o.Map:return function(e,t,n,r){var o=e.base,i=e.copy;y(e.assigned,(function(e,a){var c=w(o,e),s=w(i,e),u=a?b(o,e)?"replace":"add":"remove";if(c!==s||"replace"!==u){var l=t.concat(e);n.push("remove"===u?{op:u,path:l}:{op:u,path:l,value:s}),r.push("add"===u?{op:"remove",path:l}:"remove"===u?{op:"add",path:l,value:c}:{op:"replace",path:l,value:c})}}))}(e,t,n,r);case o.ES5Array:case o.ProxyArray:return function(e,t,n,r){var o,i,a=e.base,c=e.assigned,s=e.copy;s||O();s.length<a.length&&(a=(o=[s,a])[0],s=o[1],n=(i=[r,n])[0],r=i[1]);var u=s.length-a.length,l=0;for(;a[l]===s[l]&&l<a.length;)++l;var f=a.length;for(;f>l&&a[f-1]===s[f+u-1];)--f;for(var p=l;p<f;++p)if(c[p]&&s[p]!==a[p]){var d=t.concat([p]);n.push({op:"replace",path:d,value:s[p]}),r.push({op:"replace",path:d,value:a[p]})}var h=n.length;for(p=f+u-1;p>=f;--p){d=t.concat([p]);n[h+p-f]={op:"add",path:d,value:s[p]},r.push({op:"remove",path:d})}}(e,t,n,r);case o.Set:(function(e,t,n,r){var o=e.base,i=e.copy,a=0;o.forEach((function(e){if(!i.has(e)){var o=t.concat([a]);n.push({op:"remove",path:o,value:e}),r.unshift({op:"add",path:o,value:e})}a++})),a=0,i.forEach((function(e){if(!o.has(e)){var i=t.concat([a]);n.push({op:"add",path:i,value:e}),r.unshift({op:"remove",path:i,value:e})}a++}))})(e,t,n,r)}}(i,r,n.patches,n.inversePatches)}return i.copy}function N(e,t,n,i){var a=t[l];return a&&(a.type!==o.ES5Object&&a.type!==o.ES5Array||(a.copy=k(a.draft,!0)),t=a.copy),y(t,(function(o,c){return function e(t,n,o,i,a,c,s,u){if(s===a)throw Error("Immer forbids circular references");var l=!!i&&a===o,f=C(a);if(h(s)){var p=u&&l&&!f&&!b(i.assigned,c)?u.concat(c):void 0;s=D(t,s,n,p),function(e,t,n){switch(g(e)){case r.Map:e.set(t,n);break;case r.Set:e.delete(t),e.add(n);break;default:e[t]=n}}(a,c,s),h(s)&&(n.canAutoFreeze=!1)}else{if(l&&E(s,w(i.base,c)))return;m(s)&&!Object.isFrozen(s)&&(y(s,(function(r,a){return e(t,n,o,i,s,r,a,u)})),M(t,s))}l&&t.onAssign&&!f&&t.onAssign(i,c,s)}(e,n,t,a,t,o,c,i)})),t}function M(e,t,n){void 0===n&&(n=!1),e.autoFreeze&&!h(t)&&x(t,n)}var I={get:function(e,t){if(t===l)return e;var n=e.drafts;if(!e.modified&&b(n,t))return n[t];var r=_(e)[t];if(e.finalized||!m(r))return r;if(e.modified){if(r!==L(e.base,t))return r;n=e.copy}return n[t]=e.scope.immer.createProxy(r,e)},has:function(e,t){return t in _(e)},ownKeys:function(e){return Reflect.ownKeys(_(e))},set:function(e,t,n){if(!e.modified){var r=L(e.base,t);if(n?E(r,n)||n===e.drafts[t]:E(r,n)&&t in e.base)return!0;U(e),F(e)}return e.assigned[t]=!0,e.copy[t]=n,!0},deleteProperty:function(e,t){return void 0!==L(e.base,t)||t in e.base?(e.assigned[t]=!1,U(e),F(e)):e.assigned[t]&&delete e.assigned[t],e.copy&&delete e.copy[t],!0},getOwnPropertyDescriptor:function(e,t){var n=_(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r&&(r.writable=!0,r.configurable=e.type!==o.ProxyArray||"length"!==t),r},defineProperty:function(){throw new Error("Object.defineProperty() cannot be used on an Immer draft")},getPrototypeOf:function(e){return Object.getPrototypeOf(e.base)},setPrototypeOf:function(){throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft")}},A={};function L(e,t){var n=e[l],r=Reflect.getOwnPropertyDescriptor(n?_(n):e,t);return r&&r.value}function F(e){if(!e.modified){if(e.modified=!0,e.type===o.ProxyObject||e.type===o.ProxyArray){var t=e.copy=k(e.base);y(e.drafts,(function(e,n){t[e]=n})),e.drafts=void 0}e.parent&&F(e.parent)}}function U(e){e.copy||(e.copy=k(e.base))}function z(e,t,n){e.drafts.forEach((function(e){e[l].finalizing=!0})),n?h(t)&&t[l].scope===e&&K(e.drafts):(e.patches&&function e(t){if(!t||"object"!=typeof t)return;var n=t[l];if(!n)return;var r=n.base,i=n.draft,a=n.assigned,c=n.type;if(c===o.ES5Object)y(i,(function(t){t!==l&&(void 0!==r[t]||b(r,t)?a[t]||e(i[t]):(a[t]=!0,W(n)))})),y(r,(function(e){void 0!==i[e]||b(i,e)||(a[e]=!1,W(n))}));else if(c===o.ES5Array&&Y(n)){if(W(n),a.length=!0,i.length<r.length)for(var s=i.length;s<r.length;s++)a[s]=!1;else for(s=r.length;s<i.length;s++)a[s]=!0;for(s=0;s<i.length;s++)void 0===a[s]&&e(i[s])}}(e.drafts[0]),K(e.drafts))}function B(e,t){var n=Array.isArray(e),r=V(e);y(r,(function(t){!function(e,t,n){var r=G[t];r?r.enumerable=n:G[t]=r={configurable:!0,enumerable:n,get:function(){return function(e,t){$(e);var n=H(_(e),t);if(e.finalizing)return n;if(n===H(e.base,t)&&m(n))return q(e),e.copy[t]=e.scope.immer.createProxy(n,e);return n}(this[l],t)},set:function(e){!function(e,t,n){if($(e),e.assigned[t]=!0,!e.modified){if(E(n,H(_(e),t)))return;W(e),q(e)}e.copy[t]=n}(this[l],t,e)}};Object.defineProperty(e,t,r)}(r,t,n||function(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!(!n||!n.enumerable)}(e,t))}));var i,a,c,s={type:n?o.ES5Array:o.ES5Object,scope:t?t.scope:P.current,modified:!1,finalizing:!1,finalized:!1,assigned:{},parent:t,base:e,draft:r,copy:null,revoked:!1,isManual:!1};return i=r,a=l,c=s,Object.defineProperty(i,a,{value:c,enumerable:!1,writable:!0}),r}function H(e,t){var n=e[l];if(n&&!n.finalizing){n.finalizing=!0;var r=e[t];return n.finalizing=!1,r}return e[t]}function W(e){e.modified||(e.modified=!0,e.parent&&W(e.parent))}function q(e){e.copy||(e.copy=V(e.base))}function V(e){var t=e&&e[l];if(t){t.finalizing=!0;var n=k(t.draft,!0);return t.finalizing=!1,n}return k(e)}y(I,(function(e,t){A[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),A.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer only supports deleting array indices");return I.deleteProperty.call(this,e[0],t)},A.set=function(e,t,n){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer only supports setting array indices and the 'length' property");return I.set.call(this,e[0],t,n,e[0])};var G={};function $(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(_(e)))}function K(e){for(var t=e.length-1;t>=0;t--){var n=e[t][l];if(!n.modified)switch(n.type){case o.ES5Array:Y(n)&&W(n);break;case o.ES5Object:J(n)&&W(n)}}}function J(e){for(var t=e.base,n=e.draft,r=Object.keys(n),o=r.length-1;o>=0;o--){var i=r[o],a=t[i];if(void 0===a&&!b(t,i))return!0;var c=n[i],s=c&&c[l];if(s?s.base!==a:!E(c,a))return!0}return r.length!==Object.keys(t).length}function Y(e){var t=e.draft;if(t.length!==e.base.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var X=function(e){if(!e)throw new Error("Map is not polyfilled");function t(e,t){return this[l]={type:o.Map,parent:t,scope:t?t.scope:P.current,modified:!1,finalized:!1,copy:void 0,assigned:void 0,base:e,draft:this,isManual:!1,revoked:!1},this}d(t,e);var n=t.prototype;return Object.defineProperty(n,"size",{get:function(){return _(this[l]).size},enumerable:!0,configurable:!0}),n.has=function(e){return _(this[l]).has(e)},n.set=function(e,t){var n=this[l];return $(n),_(n).get(e)!==t&&(Q(n),n.scope.immer.markChanged(n),n.assigned.set(e,!0),n.copy.set(e,t),n.assigned.set(e,!0)),this},n.delete=function(e){if(!this.has(e))return!1;var t=this[l];return $(t),Q(t),t.scope.immer.markChanged(t),t.assigned.set(e,!1),t.copy.delete(e),!0},n.clear=function(){var e=this[l];return $(e),Q(e),e.scope.immer.markChanged(e),e.assigned=new Map,e.copy.clear()},n.forEach=function(e,t){var n=this;_(this[l]).forEach((function(r,o,i){e.call(t,n.get(o),o,n)}))},n.get=function(e){var t=this[l];$(t);var n=_(t).get(e);if(t.finalized||!m(n))return n;if(n!==t.base.get(e))return n;var r=t.scope.immer.createProxy(n,t);return Q(t),t.copy.set(e,r),r},n.keys=function(){return _(this[l]).keys()},n.values=function(){var e,t=this,n=this.keys();return(e={})[f]=function(){return t.values()},e.next=function(){var e=n.next();return e.done?e:{done:!1,value:t.get(e.value)}},e},n.entries=function(){var e,t=this,n=this.keys();return(e={})[f]=function(){return t.entries()},e.next=function(){var e=n.next();if(e.done)return e;var r=t.get(e.value);return{done:!1,value:[e.value,r]}},e},n[f]=function(){return this.entries()},t}(Map);function Q(e){e.copy||(e.assigned=new Map,e.copy=new Map(e.base))}var Z=function(e){if(!e)throw new Error("Set is not polyfilled");function t(e,t){return this[l]={type:o.Set,parent:t,scope:t?t.scope:P.current,modified:!1,finalized:!1,copy:void 0,base:e,draft:this,drafts:new Map,revoked:!1,isManual:!1},this}d(t,e);var n=t.prototype;return Object.defineProperty(n,"size",{get:function(){return _(this[l]).size},enumerable:!0,configurable:!0}),n.has=function(e){var t=this[l];return $(t),t.copy?!!t.copy.has(e)||!(!t.drafts.has(e)||!t.copy.has(t.drafts.get(e))):t.base.has(e)},n.add=function(e){var t=this[l];return $(t),t.copy?t.copy.add(e):t.base.has(e)||(ee(t),t.scope.immer.markChanged(t),t.copy.add(e)),this},n.delete=function(e){if(!this.has(e))return!1;var t=this[l];return $(t),ee(t),t.scope.immer.markChanged(t),t.copy.delete(e)||!!t.drafts.has(e)&&t.copy.delete(t.drafts.get(e))},n.clear=function(){var e=this[l];return $(e),ee(e),e.scope.immer.markChanged(e),e.copy.clear()},n.values=function(){var e=this[l];return $(e),ee(e),e.copy.values()},n.entries=function(){var e=this[l];return $(e),ee(e),e.copy.entries()},n.keys=function(){return this.values()},n[f]=function(){return this.values()},n.forEach=function(e,t){for(var n=this.values(),r=n.next();!r.done;)e.call(t,r.value,r.value,this),r=n.next()},t}(Set);function ee(e){e.copy||(e.copy=new Set,e.base.forEach((function(t){if(m(t)){var n=e.scope.immer.createProxy(t,e);e.drafts.set(t,n),e.copy.add(n)}else e.copy.add(t)})))}function te(e,t){return t.forEach((function(t){var n=t.path,o=t.op;n.length||O();for(var i=e,a=0;a<n.length-1;a++)if(!(i=w(i,n[a]))||"object"!=typeof i)throw new Error("Cannot apply patch, path doesn't resolve: "+n.join("/"));var c=g(i),s=ne(t.value),u=n[n.length-1];switch(o){case"replace":switch(c){case r.Map:return i.set(u,s);case r.Set:throw new Error('Sets cannot have "replace" patches.');default:return i[u]=s}case"add":switch(c){case r.Array:return i.splice(u,0,s);case r.Map:return i.set(u,s);case r.Set:return i.add(s);default:return i[u]=s}case"remove":switch(c){case r.Array:return i.splice(u,1);case r.Map:return i.delete(u);case r.Set:return i.delete(t.value);default:return delete i[u]}default:throw new Error("Unsupported patch operation: "+o)}})),e}function ne(e){if(!e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(ne);if(S(e))return new Map(Array.from(e.entries()).map((function(e){return[e[0],ne(e[1])]})));var t=Object.create(Object.getPrototypeOf(e));for(var n in e)t[n]=ne(e[n]);return t}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function re(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,c=i.length;a<c;a++,o++)r[o]=i[a];return r}var oe={useProxies:"undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},ie=new(function(){function e(e){var t=this;this.useProxies=!1,this.autoFreeze=!1,y(oe,(function(n,r){var o,i;t[n]=null!=(i=null===(o=e)||void 0===o?void 0:o[n])?i:r})),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}return e.prototype.produce=function(e,t,n){var r,o=this;if("function"==typeof e&&"function"!=typeof t){var i=t;t=e;var a=this;return function(e){var n=arguments,r=this;void 0===e&&(e=i);for(var o=[],c=1;c<arguments.length;c++)o[c-1]=n[c];return a.produce(e,(function(e){return t.call.apply(t,re([r,e],o))}))}}if("function"!=typeof t)throw new Error("The first or second argument to `produce` must be a function");if(void 0!==n&&"function"!=typeof n)throw new Error("The third argument to `produce` must be a function or undefined");if(m(e)){var c=P.enter(this),u=this.createProxy(e,void 0),l=!0;try{r=t(u),l=!1}finally{l?c.revoke():c.leave()}return"undefined"!=typeof Promise&&r instanceof Promise?r.then((function(e){return c.usePatches(n),j(o,e,c)}),(function(e){throw c.revoke(),e})):(c.usePatches(n),j(this,r,c))}if((r=t(e))!==s)return void 0===r&&(r=e),M(this,r,!0),r},e.prototype.produceWithPatches=function(e,t,n){var r,o,i=this;return"function"==typeof e?function(t){for(var n=arguments,r=[],o=1;o<arguments.length;o++)r[o-1]=n[o];return i.produceWithPatches(t,(function(t){return e.apply(void 0,re([t],r))}))}:(n&&O(),[this.produce(e,t,(function(e,t){r=e,o=t})),r,o])},e.prototype.createDraft=function(e){if(!m(e))throw new Error("First argument to `createDraft` must be a plain object, an array, or an immerable object");var t=P.enter(this),n=this.createProxy(e,void 0);return n[l].isManual=!0,t.leave(),n},e.prototype.finishDraft=function(e,t){var n=e&&e[l];if(!n||!n.isManual)throw new Error("First argument to `finishDraft` must be a draft returned by `createDraft`");if(n.finalized)throw new Error("The given draft is already finalized");var r=n.scope;return r.usePatches(t),j(this,void 0,r)},e.prototype.setAutoFreeze=function(e){this.autoFreeze=e},e.prototype.setUseProxies=function(e){this.useProxies=e},e.prototype.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}return h(e)?te(e,t):this.produce(e,(function(e){return te(e,t.slice(n+1))}))},e.prototype.createProxy=function(e,t){var n=S(e)?function(e,t){return new X(e,t)}(e,t):C(e)?function(e,t){return new Z(e,t)}(e,t):this.useProxies?function(e,t){var n=Array.isArray(e),r={type:n?o.ProxyArray:o.ProxyObject,scope:t?t.scope:P.current,modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null,isManual:!1},i=r,a=I;n&&(i=[r],a=A);var c=Proxy.revocable(i,a),s=c.revoke,u=c.proxy;return r.draft=u,r.revoke=s,u}(e,t):B(e,t);return(t?t.scope:P.current).drafts.push(n),n},e.prototype.willFinalize=function(e,t,n){this.useProxies||z(e,t,n)},e.prototype.markChanged=function(e){this.useProxies?F(e):W(e)},e}()),ae=ie.produce;ie.produceWithPatches.bind(ie),ie.setAutoFreeze.bind(ie),ie.setUseProxies.bind(ie),ie.applyPatches.bind(ie),ie.createDraft.bind(ie),ie.finishDraft.bind(ie);t.a=ae}).call(this,n(36))},function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return l}));var r=n(1),o=n(28),i=n(8),a=n(6),c=n(4),s=function(){function e(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._user={},this._tags={},this._extra={},this._context={}}return e.prototype.addScopeListener=function(e){this._scopeListeners.push(e)},e.prototype.addEventProcessor=function(e){return this._eventProcessors.push(e),this},e.prototype._notifyScopeListeners=function(){var e=this;this._notifyingListeners||(this._notifyingListeners=!0,setTimeout((function(){e._scopeListeners.forEach((function(t){t(e)})),e._notifyingListeners=!1})))},e.prototype._notifyEventProcessors=function(e,t,n,a){var c=this;return void 0===a&&(a=0),new o.a((function(o,s){var u=e[a];if(null===t||"function"!=typeof u)o(t);else{var l=u(r.a({},t),n);Object(i.m)(l)?l.then((function(t){return c._notifyEventProcessors(e,t,n,a+1).then(o)})).then(null,s):c._notifyEventProcessors(e,l,n,a+1).then(o).then(null,s)}}))},e.prototype.setUser=function(e){return this._user=Object(a.c)(e),this._notifyScopeListeners(),this},e.prototype.setTags=function(e){return this._tags=r.a({},this._tags,Object(a.c)(e)),this._notifyScopeListeners(),this},e.prototype.setTag=function(e,t){var n;return this._tags=r.a({},this._tags,((n={})[e]=Object(a.c)(t),n)),this._notifyScopeListeners(),this},e.prototype.setExtras=function(e){return this._extra=r.a({},this._extra,Object(a.c)(e)),this._notifyScopeListeners(),this},e.prototype.setExtra=function(e,t){var n;return this._extra=r.a({},this._extra,((n={})[e]=Object(a.c)(t),n)),this._notifyScopeListeners(),this},e.prototype.setFingerprint=function(e){return this._fingerprint=Object(a.c)(e),this._notifyScopeListeners(),this},e.prototype.setLevel=function(e){return this._level=Object(a.c)(e),this._notifyScopeListeners(),this},e.prototype.setTransaction=function(e){return this._transaction=e,this._notifyScopeListeners(),this},e.prototype.setContext=function(e,t){return this._context[e]=t?Object(a.c)(t):void 0,this._notifyScopeListeners(),this},e.prototype.setSpan=function(e){return this._span=e,this._notifyScopeListeners(),this},e.prototype.getSpan=function(){return this._span},e.clone=function(t){var n=new e;return t&&(n._breadcrumbs=r.f(t._breadcrumbs),n._tags=r.a({},t._tags),n._extra=r.a({},t._extra),n._context=r.a({},t._context),n._user=t._user,n._level=t._level,n._span=t._span,n._transaction=t._transaction,n._fingerprint=t._fingerprint,n._eventProcessors=r.f(t._eventProcessors)),n},e.prototype.clear=function(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._context={},this._level=void 0,this._transaction=void 0,this._fingerprint=void 0,this._span=void 0,this._notifyScopeListeners(),this},e.prototype.addBreadcrumb=function(e,t){var n=Object(c.m)(),o=r.a({timestamp:n},e);return this._breadcrumbs=void 0!==t&&t>=0?r.f(this._breadcrumbs,[Object(a.c)(o)]).slice(-t):r.f(this._breadcrumbs,[Object(a.c)(o)]),this._notifyScopeListeners(),this},e.prototype.clearBreadcrumbs=function(){return this._breadcrumbs=[],this._notifyScopeListeners(),this},e.prototype._applyFingerprint=function(e){e.fingerprint=e.fingerprint?Array.isArray(e.fingerprint)?e.fingerprint:[e.fingerprint]:[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint},e.prototype.applyToEvent=function(e,t){return this._extra&&Object.keys(this._extra).length&&(e.extra=r.a({},this._extra,e.extra)),this._tags&&Object.keys(this._tags).length&&(e.tags=r.a({},this._tags,e.tags)),this._user&&Object.keys(this._user).length&&(e.user=r.a({},this._user,e.user)),this._context&&Object.keys(this._context).length&&(e.contexts=r.a({},this._context,e.contexts)),this._level&&(e.level=this._level),this._transaction&&(e.transaction=this._transaction),this._applyFingerprint(e),e.breadcrumbs=r.f(e.breadcrumbs||[],this._breadcrumbs),e.breadcrumbs=e.breadcrumbs.length>0?e.breadcrumbs:void 0,this._notifyEventProcessors(r.f(u(),this._eventProcessors),e,t)},e}();function u(){var e=Object(c.g)();return e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.globalEventProcessors=e.__SENTRY__.globalEventProcessors||[],e.__SENTRY__.globalEventProcessors}function l(e){u().push(e)}},,function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,u=[],l=!1,f=-1;function p(){l&&s&&(l=!1,s.length?u=s.concat(u):f=-1,u.length&&d())}function d(){if(!l){var e=c(p);l=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";(function(e,r){var o,i=n(56);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(30),n(42)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(76);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return c(i(e,t),t)},e.exports.tokensToFunction=c,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,c="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(c+=e.slice(a,d),a=d+f.length,p)c+=p[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];c&&(r.push(c),c="");var E=null!=m&&null!=h&&h!==m,S="+"===b||"*"===b,C="?"===b||"*"===b,_=n[2]||l,k=y||g;r.push({name:v||i++,prefix:m||"",delimiter:_,optional:C,repeat:S,partial:E,asterisk:!!w,pattern:k?u(k):w?".*":"[^"+s(_)+"]+?"})}}return a<e.length&&(c+=e.substr(a)),c&&r.push(c),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function c(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",c=t||{},s=(o||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var l=e[u];if("string"!=typeof l){var f,p=c[l.name];if(null==p){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(r(p)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=s(p[d]),!n[u].test(f))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?l.prefix:l.delimiter)+f}}else{if(f=l.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(p),!n[u].test(f))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+f+'"');i+=l.prefix+f}}else i+=l}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function l(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",c=0;c<e.length;c++){var u=e[c];if("string"==typeof u)a+=s(u);else{var p=s(u.prefix),d="(?:"+u.pattern+")";t.push(u),u.repeat&&(d+="(?:"+p+d+")*"),a+=d=u.optional?u.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=s(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",l(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return l(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return l(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r=n(77).CopyToClipboard;r.CopyToClipboard=r,e.exports=r},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,c,s=a(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){c=r(n);for(var f=0;f<c.length;f++)i.call(n,c[f])&&(s[c[f]]=n[c[f]])}}return s}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8}},function(e,t){e.exports={L:1,M:0,Q:3,H:2}},function(e,t,n){var r=n(46);function o(e,t){if(null==e.length)throw new Error(e.length+"/"+t);for(var n=0;n<e.length&&0==e[n];)n++;this.num=new Array(e.length-n+t);for(var r=0;r<e.length-n;r++)this.num[r]=e[r+n]}o.prototype={get:function(e){return this.num[e]},getLength:function(){return this.num.length},multiply:function(e){for(var t=new Array(this.getLength()+e.getLength()-1),n=0;n<this.getLength();n++)for(var i=0;i<e.getLength();i++)t[n+i]^=r.gexp(r.glog(this.get(n))+r.glog(e.get(i)));return new o(t,0)},mod:function(e){if(this.getLength()-e.getLength()<0)return this;for(var t=r.glog(this.get(0))-r.glog(e.get(0)),n=new Array(this.getLength()),i=0;i<this.getLength();i++)n[i]=this.get(i);for(i=0;i<e.getLength();i++)n[i]^=r.gexp(r.glog(e.get(i))+t);return new o(n,0).mod(e)}},e.exports=o},function(e,t){for(var n={glog:function(e){if(e<1)throw new Error("glog("+e+")");return n.LOG_TABLE[e]},gexp:function(e){for(;e<0;)e+=255;for(;e>=256;)e-=255;return n.EXP_TABLE[e]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},r=0;r<8;r++)n.EXP_TABLE[r]=1<<r;for(r=8;r<256;r++)n.EXP_TABLE[r]=n.EXP_TABLE[r-4]^n.EXP_TABLE[r-5]^n.EXP_TABLE[r-6]^n.EXP_TABLE[r-8];for(r=0;r<255;r++)n.LOG_TABLE[n.EXP_TABLE[r]]=r;e.exports=n},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(9);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var c=e.indexOf("#");-1!==c&&(e=e.slice(0,c)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(9),o=n(92),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,s={adapter:("undefined"!=typeof XMLHttpRequest?c=n(51):void 0!==t&&"[object process]"===Object.prototype.toString.call(t)&&(c=n(51)),c),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(i)})),e.exports=s}).call(this,n(36))},function(e,t,n){"use strict";var r=n(9),o=n(93),i=n(48),a=n(95),c=n(98),s=n(99),u=n(52);e.exports=function(e){return new Promise((function(t,l){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";p.Authorization="Basic "+btoa(h+":"+m)}var v=a(e.baseURL,e.url);if(d.open(e.method.toUpperCase(),i(v,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?c(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};o(t,l,r),d=null}},d.onabort=function(){d&&(l(u("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){l(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),l(u(t,e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var y=n(100),g=(e.withCredentials||s(v))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;g&&(p[e.xsrfHeaderName]=g)}if("setRequestHeader"in d&&r.forEach(p,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),l(e),d=null)})),void 0===f&&(f=null),d.send(f)}))}},function(e,t,n){"use strict";var r=n(94);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],i=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(i,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(a,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var c=o.concat(i).concat(a),s=Object.keys(t).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(s,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";var r=n(23);function o(e,t,n,o,i){var a=r.writeRtpDescription(e.kind,t);if(a+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),a+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":i||"active"),a+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?a+="a=sendrecv\r\n":e.rtpSender?a+="a=sendonly\r\n":e.rtpReceiver?a+="a=recvonly\r\n":a+="a=inactive\r\n",e.rtpSender){var c=e.rtpSender._initialTrackId||e.rtpSender.track.id;e.rtpSender._initialTrackId=c;var s="msid:"+(o?o.id:"-")+" "+c+"\r\n";a+="a="+s,a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+s,e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+s,a+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),a}function i(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]},r=function(e,t){e=parseInt(e,10);for(var n=0;n<t.length;n++)if(t[n].payloadType===e||t[n].preferredPayloadType===e)return t[n]},o=function(e,t,n,o){var i=r(e.parameters.apt,n),a=r(t.parameters.apt,o);return i&&a&&i.name.toLowerCase()===a.name.toLowerCase()};return e.codecs.forEach((function(r){for(var i=0;i<t.codecs.length;i++){var a=t.codecs[i];if(r.name.toLowerCase()===a.name.toLowerCase()&&r.clockRate===a.clockRate){if("rtx"===r.name.toLowerCase()&&r.parameters&&a.parameters.apt&&!o(r,a,e.codecs,t.codecs))continue;(a=JSON.parse(JSON.stringify(a))).numChannels=Math.min(r.numChannels,a.numChannels),n.codecs.push(a),a.rtcpFeedback=a.rtcpFeedback.filter((function(e){for(var t=0;t<r.rtcpFeedback.length;t++)if(r.rtcpFeedback[t].type===e.type&&r.rtcpFeedback[t].parameter===e.parameter)return!0;return!1}));break}}})),e.headerExtensions.forEach((function(e){for(var r=0;r<t.headerExtensions.length;r++){var o=t.headerExtensions[r];if(e.uri===o.uri){n.headerExtensions.push(o);break}}})),n}function a(e,t,n){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(n)}function c(e,t){var n=e.getRemoteCandidates().find((function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type}));return n||e.addRemoteCandidate(t),!n}function s(e,t){var n=new Error(t);return n.name=e,n.code={NotSupportedError:9,InvalidStateError:11,InvalidAccessError:15,TypeError:void 0,OperationError:void 0}[e],n}e.exports=function(e,t){function n(t,n){n.addTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack",{track:t}))}function u(t,n,r,o){var i=new Event("track");i.track=n,i.receiver=r,i.transceiver={receiver:r},i.streams=o,e.setTimeout((function(){t._dispatchEvent("track",i)}))}var l=function(n){var o=this,i=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){o[e]=i[e].bind(i)})),this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this._localDescription=null,this._remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.connectionState="new",this.iceGatheringState="new",n=JSON.parse(JSON.stringify(n||{})),this.usingBundle="max-bundle"===n.bundlePolicy,"negotiate"===n.rtcpMuxPolicy)throw s("NotSupportedError","rtcpMuxPolicy 'negotiate' is not supported");switch(n.rtcpMuxPolicy||(n.rtcpMuxPolicy="require"),n.iceTransportPolicy){case"all":case"relay":break;default:n.iceTransportPolicy="all"}switch(n.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:n.bundlePolicy="balanced"}if(n.iceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((function(e){if(e&&(e.urls||e.url)){var r=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var o="string"==typeof r;return o&&(r=[r]),r=r.filter((function(e){return 0===e.indexOf("turn:")&&-1!==e.indexOf("transport=udp")&&-1===e.indexOf("turn:[")&&!n?(n=!0,!0):0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp")})),delete e.url,e.urls=o?r[0]:r,!!r.length}}))}(n.iceServers||[],t),this._iceGatherers=[],n.iceCandidatePoolSize)for(var a=n.iceCandidatePoolSize;a>0;a--)this._iceGatherers.push(new e.RTCIceGatherer({iceServers:n.iceServers,gatherPolicy:n.iceTransportPolicy}));else n.iceCandidatePoolSize=0;this._config=n,this.transceivers=[],this._sdpSessionId=r.generateSessionId(),this._sdpSessionVersion=0,this._dtlsRole=void 0,this._isClosed=!1};Object.defineProperty(l.prototype,"localDescription",{configurable:!0,get:function(){return this._localDescription}}),Object.defineProperty(l.prototype,"remoteDescription",{configurable:!0,get:function(){return this._remoteDescription}}),l.prototype.onicecandidate=null,l.prototype.onaddstream=null,l.prototype.ontrack=null,l.prototype.onremovestream=null,l.prototype.onsignalingstatechange=null,l.prototype.oniceconnectionstatechange=null,l.prototype.onconnectionstatechange=null,l.prototype.onicegatheringstatechange=null,l.prototype.onnegotiationneeded=null,l.prototype.ondatachannel=null,l.prototype._dispatchEvent=function(e,t){this._isClosed||(this.dispatchEvent(t),"function"==typeof this["on"+e]&&this["on"+e](t))},l.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this._dispatchEvent("icegatheringstatechange",e)},l.prototype.getConfiguration=function(){return this._config},l.prototype.getLocalStreams=function(){return this.localStreams},l.prototype.getRemoteStreams=function(){return this.remoteStreams},l.prototype._createTransceiver=function(e,t){var n=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,associatedRemoteMediaStreams:[],wantReceive:!0};if(this.usingBundle&&n)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var o=this._createIceAndDtlsTransports();r.iceTransport=o.iceTransport,r.dtlsTransport=o.dtlsTransport}return t||this.transceivers.push(r),r},l.prototype.addTrack=function(t,n){if(this._isClosed)throw s("InvalidStateError","Attempted to call addTrack on a closed peerconnection.");var r;if(this.transceivers.find((function(e){return e.track===t})))throw s("InvalidAccessError","Track already exists.");for(var o=0;o<this.transceivers.length;o++)this.transceivers[o].track||this.transceivers[o].kind!==t.kind||(r=this.transceivers[o]);return r||(r=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(n)&&this.localStreams.push(n),r.track=t,r.stream=n,r.rtpSender=new e.RTCRtpSender(t,r.dtlsTransport),r.rtpSender},l.prototype.addStream=function(e){var n=this;if(t>=15025)e.getTracks().forEach((function(t){n.addTrack(t,e)}));else{var r=e.clone();e.getTracks().forEach((function(e,t){var n=r.getTracks()[t];e.addEventListener("enabled",(function(e){n.enabled=e.enabled}))})),r.getTracks().forEach((function(e){n.addTrack(e,r)}))}},l.prototype.removeTrack=function(t){if(this._isClosed)throw s("InvalidStateError","Attempted to call removeTrack on a closed peerconnection.");if(!(t instanceof e.RTCRtpSender))throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");var n=this.transceivers.find((function(e){return e.rtpSender===t}));if(!n)throw s("InvalidAccessError","Sender was not created by this connection.");var r=n.stream;n.rtpSender.stop(),n.rtpSender=null,n.track=null,n.stream=null,-1===this.transceivers.map((function(e){return e.stream})).indexOf(r)&&this.localStreams.indexOf(r)>-1&&this.localStreams.splice(this.localStreams.indexOf(r),1),this._maybeFireNegotiationNeeded()},l.prototype.removeStream=function(e){var t=this;e.getTracks().forEach((function(e){var n=t.getSenders().find((function(t){return t.track===e}));n&&t.removeTrack(n)}))},l.prototype.getSenders=function(){return this.transceivers.filter((function(e){return!!e.rtpSender})).map((function(e){return e.rtpSender}))},l.prototype.getReceivers=function(){return this.transceivers.filter((function(e){return!!e.rtpReceiver})).map((function(e){return e.rtpReceiver}))},l.prototype._createIceGatherer=function(t,n){var r=this;if(n&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var o=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(o,"state",{value:"new",writable:!0}),this.transceivers[t].bufferedCandidateEvents=[],this.transceivers[t].bufferCandidates=function(e){var n=!e.candidate||0===Object.keys(e.candidate).length;o.state=n?"completed":"gathering",null!==r.transceivers[t].bufferedCandidateEvents&&r.transceivers[t].bufferedCandidateEvents.push(e)},o.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),o},l.prototype._gather=function(t,n){var o=this,i=this.transceivers[n].iceGatherer;if(!i.onlocalcandidate){var a=this.transceivers[n].bufferedCandidateEvents;this.transceivers[n].bufferedCandidateEvents=null,i.removeEventListener("localcandidate",this.transceivers[n].bufferCandidates),i.onlocalcandidate=function(e){if(!(o.usingBundle&&n>0)){var a=new Event("icecandidate");a.candidate={sdpMid:t,sdpMLineIndex:n};var c=e.candidate,s=!c||0===Object.keys(c).length;if(s)"new"!==i.state&&"gathering"!==i.state||(i.state="completed");else{"new"===i.state&&(i.state="gathering"),c.component=1,c.ufrag=i.getLocalParameters().usernameFragment;var u=r.writeCandidate(c);a.candidate=Object.assign(a.candidate,r.parseCandidate(u)),a.candidate.candidate=u,a.candidate.toJSON=function(){return{candidate:a.candidate.candidate,sdpMid:a.candidate.sdpMid,sdpMLineIndex:a.candidate.sdpMLineIndex,usernameFragment:a.candidate.usernameFragment}}}var l=r.getMediaSections(o._localDescription.sdp);l[a.candidate.sdpMLineIndex]+=s?"a=end-of-candidates\r\n":"a="+a.candidate.candidate+"\r\n",o._localDescription.sdp=r.getDescription(o._localDescription.sdp)+l.join("");var f=o.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}));"gathering"!==o.iceGatheringState&&(o.iceGatheringState="gathering",o._emitGatheringStateChange()),s||o._dispatchEvent("icecandidate",a),f&&(o._dispatchEvent("icecandidate",new Event("icecandidate")),o.iceGatheringState="complete",o._emitGatheringStateChange())}},e.setTimeout((function(){a.forEach((function(e){i.onlocalcandidate(e)}))}),0)}},l.prototype._createIceAndDtlsTransports=function(){var t=this,n=new e.RTCIceTransport(null);n.onicestatechange=function(){t._updateIceConnectionState(),t._updateConnectionState()};var r=new e.RTCDtlsTransport(n);return r.ondtlsstatechange=function(){t._updateConnectionState()},r.onerror=function(){Object.defineProperty(r,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:n,dtlsTransport:r}},l.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var n=this.transceivers[e].iceTransport;n&&(delete n.onicestatechange,delete this.transceivers[e].iceTransport);var r=this.transceivers[e].dtlsTransport;r&&(delete r.ondtlsstatechange,delete r.onerror,delete this.transceivers[e].dtlsTransport)},l.prototype._transceive=function(e,n,o){var a=i(e.localCapabilities,e.remoteCapabilities);n&&e.rtpSender&&(a.encodings=e.sendEncodingParameters,a.rtcp={cname:r.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(a.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(a)),o&&e.rtpReceiver&&a.codecs.length>0&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach((function(e){delete e.rtx})),e.recvEncodingParameters.length?a.encodings=e.recvEncodingParameters:a.encodings=[{}],a.rtcp={compound:e.rtcpParameters.compound},e.rtcpParameters.cname&&(a.rtcp.cname=e.rtcpParameters.cname),e.sendEncodingParameters.length&&(a.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(a))},l.prototype.setLocalDescription=function(e){var t,n,o=this;if(-1===["offer","answer"].indexOf(e.type))return Promise.reject(s("TypeError",'Unsupported type "'+e.type+'"'));if(!a("setLocalDescription",e.type,o.signalingState)||o._isClosed)return Promise.reject(s("InvalidStateError","Can not set local "+e.type+" in state "+o.signalingState));if("offer"===e.type)t=r.splitSections(e.sdp),n=t.shift(),t.forEach((function(e,t){var n=r.parseRtpParameters(e);o.transceivers[t].localCapabilities=n})),o.transceivers.forEach((function(e,t){o._gather(e.mid,t)}));else if("answer"===e.type){t=r.splitSections(o._remoteDescription.sdp),n=t.shift();var c=r.matchPrefix(n,"a=ice-lite").length>0;t.forEach((function(e,t){var a=o.transceivers[t],s=a.iceGatherer,u=a.iceTransport,l=a.dtlsTransport,f=a.localCapabilities,p=a.remoteCapabilities;if(!(r.isRejected(e)&&0===r.matchPrefix(e,"a=bundle-only").length)&&!a.rejected){var d=r.getIceParameters(e,n),h=r.getDtlsParameters(e,n);c&&(h.role="server"),o.usingBundle&&0!==t||(o._gather(a.mid,t),"new"===u.state&&u.start(s,d,c?"controlling":"controlled"),"new"===l.state&&l.start(h));var m=i(f,p);o._transceive(a,m.codecs.length>0,!1)}}))}return o._localDescription={type:e.type,sdp:e.sdp},"offer"===e.type?o._updateSignalingState("have-local-offer"):o._updateSignalingState("stable"),Promise.resolve()},l.prototype.setRemoteDescription=function(o){var l=this;if(-1===["offer","answer"].indexOf(o.type))return Promise.reject(s("TypeError",'Unsupported type "'+o.type+'"'));if(!a("setRemoteDescription",o.type,l.signalingState)||l._isClosed)return Promise.reject(s("InvalidStateError","Can not set remote "+o.type+" in state "+l.signalingState));var f={};l.remoteStreams.forEach((function(e){f[e.id]=e}));var p=[],d=r.splitSections(o.sdp),h=d.shift(),m=r.matchPrefix(h,"a=ice-lite").length>0,v=r.matchPrefix(h,"a=group:BUNDLE ").length>0;l.usingBundle=v;var y=r.matchPrefix(h,"a=ice-options:")[0];return l.canTrickleIceCandidates=!!y&&y.substr(14).split(" ").indexOf("trickle")>=0,d.forEach((function(a,s){var u=r.splitLines(a),d=r.getKind(a),y=r.isRejected(a)&&0===r.matchPrefix(a,"a=bundle-only").length,g=u[0].substr(2).split(" ")[2],b=r.getDirection(a,h),w=r.parseMsid(a),E=r.getMid(a)||r.generateIdentifier();if(y||"application"===d&&("DTLS/SCTP"===g||"UDP/DTLS/SCTP"===g))l.transceivers[s]={mid:E,kind:d,protocol:g,rejected:!0};else{var S,C,_,k,x,T,O,P,R;!y&&l.transceivers[s]&&l.transceivers[s].rejected&&(l.transceivers[s]=l._createTransceiver(d,!0));var j,D,N=r.parseRtpParameters(a);y||(j=r.getIceParameters(a,h),(D=r.getDtlsParameters(a,h)).role="client"),O=r.parseRtpEncodingParameters(a);var M=r.parseRtcpParameters(a),I=r.matchPrefix(a,"a=end-of-candidates",h).length>0,A=r.matchPrefix(a,"a=candidate:").map((function(e){return r.parseCandidate(e)})).filter((function(e){return 1===e.component}));if(("offer"===o.type||"answer"===o.type)&&!y&&v&&s>0&&l.transceivers[s]&&(l._disposeIceAndDtlsTransports(s),l.transceivers[s].iceGatherer=l.transceivers[0].iceGatherer,l.transceivers[s].iceTransport=l.transceivers[0].iceTransport,l.transceivers[s].dtlsTransport=l.transceivers[0].dtlsTransport,l.transceivers[s].rtpSender&&l.transceivers[s].rtpSender.setTransport(l.transceivers[0].dtlsTransport),l.transceivers[s].rtpReceiver&&l.transceivers[s].rtpReceiver.setTransport(l.transceivers[0].dtlsTransport)),"offer"!==o.type||y){if("answer"===o.type&&!y){C=(S=l.transceivers[s]).iceGatherer,_=S.iceTransport,k=S.dtlsTransport,x=S.rtpReceiver,T=S.sendEncodingParameters,P=S.localCapabilities,l.transceivers[s].recvEncodingParameters=O,l.transceivers[s].remoteCapabilities=N,l.transceivers[s].rtcpParameters=M,A.length&&"new"===_.state&&(!m&&!I||v&&0!==s?A.forEach((function(e){c(S.iceTransport,e)})):_.setRemoteCandidates(A)),v&&0!==s||("new"===_.state&&_.start(C,j,"controlling"),"new"===k.state&&k.start(D)),!i(S.localCapabilities,S.remoteCapabilities).codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&S.sendEncodingParameters[0].rtx&&delete S.sendEncodingParameters[0].rtx,l._transceive(S,"sendrecv"===b||"recvonly"===b,"sendrecv"===b||"sendonly"===b),!x||"sendrecv"!==b&&"sendonly"!==b?delete S.rtpReceiver:(R=x.track,w?(f[w.stream]||(f[w.stream]=new e.MediaStream),n(R,f[w.stream]),p.push([R,x,f[w.stream]])):(f.default||(f.default=new e.MediaStream),n(R,f.default),p.push([R,x,f.default])))}}else{(S=l.transceivers[s]||l._createTransceiver(d)).mid=E,S.iceGatherer||(S.iceGatherer=l._createIceGatherer(s,v)),A.length&&"new"===S.iceTransport.state&&(!I||v&&0!==s?A.forEach((function(e){c(S.iceTransport,e)})):S.iceTransport.setRemoteCandidates(A)),P=e.RTCRtpReceiver.getCapabilities(d),t<15019&&(P.codecs=P.codecs.filter((function(e){return"rtx"!==e.name}))),T=S.sendEncodingParameters||[{ssrc:1001*(2*s+2)}];var L,F=!1;if("sendrecv"===b||"sendonly"===b){if(F=!S.rtpReceiver,x=S.rtpReceiver||new e.RTCRtpReceiver(S.dtlsTransport,d),F)R=x.track,w&&"-"===w.stream||(w?(f[w.stream]||(f[w.stream]=new e.MediaStream,Object.defineProperty(f[w.stream],"id",{get:function(){return w.stream}})),Object.defineProperty(R,"id",{get:function(){return w.track}}),L=f[w.stream]):(f.default||(f.default=new e.MediaStream),L=f.default)),L&&(n(R,L),S.associatedRemoteMediaStreams.push(L)),p.push([R,x,L])}else S.rtpReceiver&&S.rtpReceiver.track&&(S.associatedRemoteMediaStreams.forEach((function(t){var n=t.getTracks().find((function(e){return e.id===S.rtpReceiver.track.id}));n&&function(t,n){n.removeTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("removetrack",{track:t}))}(n,t)})),S.associatedRemoteMediaStreams=[]);S.localCapabilities=P,S.remoteCapabilities=N,S.rtpReceiver=x,S.rtcpParameters=M,S.sendEncodingParameters=T,S.recvEncodingParameters=O,l._transceive(l.transceivers[s],!1,F)}}})),void 0===l._dtlsRole&&(l._dtlsRole="offer"===o.type?"active":"passive"),l._remoteDescription={type:o.type,sdp:o.sdp},"offer"===o.type?l._updateSignalingState("have-remote-offer"):l._updateSignalingState("stable"),Object.keys(f).forEach((function(t){var n=f[t];if(n.getTracks().length){if(-1===l.remoteStreams.indexOf(n)){l.remoteStreams.push(n);var r=new Event("addstream");r.stream=n,e.setTimeout((function(){l._dispatchEvent("addstream",r)}))}p.forEach((function(e){var t=e[0],r=e[1];n.id===e[2].id&&u(l,t,r,[n])}))}})),p.forEach((function(e){e[2]||u(l,e[0],e[1],[])})),e.setTimeout((function(){l&&l.transceivers&&l.transceivers.forEach((function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))}))}),4e3),Promise.resolve()},l.prototype.close=function(){this.transceivers.forEach((function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()})),this._isClosed=!0,this._updateSignalingState("closed")},l.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this._dispatchEvent("signalingstatechange",t)},l.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout((function(){if(t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t._dispatchEvent("negotiationneeded",e)}}),0))},l.prototype._updateIceConnectionState=function(){var e,t={new:0,closed:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&!e.rejected&&t[e.iceTransport.state]++})),e="new",t.failed>0?e="failed":t.checking>0?e="checking":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0?e="connected":t.completed>0&&(e="completed"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this._dispatchEvent("iceconnectionstatechange",n)}},l.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&e.dtlsTransport&&!e.rejected&&(t[e.iceTransport.state]++,t[e.dtlsTransport.state]++)})),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0&&(e="connected"),e!==this.connectionState){this.connectionState=e;var n=new Event("connectionstatechange");this._dispatchEvent("connectionstatechange",n)}},l.prototype.createOffer=function(){var n=this;if(n._isClosed)return Promise.reject(s("InvalidStateError","Can not call createOffer after close"));var i=n.transceivers.filter((function(e){return"audio"===e.kind})).length,a=n.transceivers.filter((function(e){return"video"===e.kind})).length,c=arguments[0];if(c){if(c.mandatory||c.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==c.offerToReceiveAudio&&(i=!0===c.offerToReceiveAudio?1:!1===c.offerToReceiveAudio?0:c.offerToReceiveAudio),void 0!==c.offerToReceiveVideo&&(a=!0===c.offerToReceiveVideo?1:!1===c.offerToReceiveVideo?0:c.offerToReceiveVideo)}for(n.transceivers.forEach((function(e){"audio"===e.kind?--i<0&&(e.wantReceive=!1):"video"===e.kind&&--a<0&&(e.wantReceive=!1)}));i>0||a>0;)i>0&&(n._createTransceiver("audio"),i--),a>0&&(n._createTransceiver("video"),a--);var u=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.transceivers.forEach((function(o,i){var a=o.track,c=o.kind,s=o.mid||r.generateIdentifier();o.mid=s,o.iceGatherer||(o.iceGatherer=n._createIceGatherer(i,n.usingBundle));var u=e.RTCRtpSender.getCapabilities(c);t<15019&&(u.codecs=u.codecs.filter((function(e){return"rtx"!==e.name}))),u.codecs.forEach((function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1"),o.remoteCapabilities&&o.remoteCapabilities.codecs&&o.remoteCapabilities.codecs.forEach((function(t){e.name.toLowerCase()===t.name.toLowerCase()&&e.clockRate===t.clockRate&&(e.preferredPayloadType=t.payloadType)}))})),u.headerExtensions.forEach((function(e){(o.remoteCapabilities&&o.remoteCapabilities.headerExtensions||[]).forEach((function(t){e.uri===t.uri&&(e.id=t.id)}))}));var l=o.sendEncodingParameters||[{ssrc:1001*(2*i+1)}];a&&t>=15019&&"video"===c&&!l[0].rtx&&(l[0].rtx={ssrc:l[0].ssrc+1}),o.wantReceive&&(o.rtpReceiver=new e.RTCRtpReceiver(o.dtlsTransport,c)),o.localCapabilities=u,o.sendEncodingParameters=l})),"max-compat"!==n._config.bundlePolicy&&(u+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),u+="a=ice-options:trickle\r\n",n.transceivers.forEach((function(e,t){u+=o(e,e.localCapabilities,"offer",e.stream,n._dtlsRole),u+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===n.iceGatheringState||0!==t&&n.usingBundle||(e.iceGatherer.getLocalCandidates().forEach((function(e){e.component=1,u+="a="+r.writeCandidate(e)+"\r\n"})),"completed"===e.iceGatherer.state&&(u+="a=end-of-candidates\r\n"))}));var l=new e.RTCSessionDescription({type:"offer",sdp:u});return Promise.resolve(l)},l.prototype.createAnswer=function(){var n=this;if(n._isClosed)return Promise.reject(s("InvalidStateError","Can not call createAnswer after close"));if("have-remote-offer"!==n.signalingState&&"have-local-pranswer"!==n.signalingState)return Promise.reject(s("InvalidStateError","Can not call createAnswer in signalingState "+n.signalingState));var a=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.usingBundle&&(a+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),a+="a=ice-options:trickle\r\n";var c=r.getMediaSections(n._remoteDescription.sdp).length;n.transceivers.forEach((function(e,r){if(!(r+1>c)){if(e.rejected)return"application"===e.kind?"DTLS/SCTP"===e.protocol?a+="m=application 0 DTLS/SCTP 5000\r\n":a+="m=application 0 "+e.protocol+" webrtc-datachannel\r\n":"audio"===e.kind?a+="m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n":"video"===e.kind&&(a+="m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"),void(a+="c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:"+e.mid+"\r\n");var s;if(e.stream)"audio"===e.kind?s=e.stream.getAudioTracks()[0]:"video"===e.kind&&(s=e.stream.getVideoTracks()[0]),s&&t>=15019&&"video"===e.kind&&!e.sendEncodingParameters[0].rtx&&(e.sendEncodingParameters[0].rtx={ssrc:e.sendEncodingParameters[0].ssrc+1});var u=i(e.localCapabilities,e.remoteCapabilities);!u.codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,a+=o(e,u,"answer",e.stream,n._dtlsRole),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(a+="a=rtcp-rsize\r\n")}}));var u=new e.RTCSessionDescription({type:"answer",sdp:a});return Promise.resolve(u)},l.prototype.addIceCandidate=function(e){var t,n=this;return e&&void 0===e.sdpMLineIndex&&!e.sdpMid?Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")):new Promise((function(o,i){if(!n._remoteDescription)return i(s("InvalidStateError","Can not add ICE candidate without a remote description"));if(e&&""!==e.candidate){var a=e.sdpMLineIndex;if(e.sdpMid)for(var u=0;u<n.transceivers.length;u++)if(n.transceivers[u].mid===e.sdpMid){a=u;break}var l=n.transceivers[a];if(!l)return i(s("OperationError","Can not add ICE candidate"));if(l.rejected)return o();var f=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===f.protocol&&(0===f.port||9===f.port))return o();if(f.component&&1!==f.component)return o();if((0===a||a>0&&l.iceTransport!==n.transceivers[0].iceTransport)&&!c(l.iceTransport,f))return i(s("OperationError","Can not add ICE candidate"));var p=e.candidate.trim();0===p.indexOf("a=")&&(p=p.substr(2)),(t=r.getMediaSections(n._remoteDescription.sdp))[a]+="a="+(f.type?p:"end-of-candidates")+"\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join("")}else for(var d=0;d<n.transceivers.length&&(n.transceivers[d].rejected||(n.transceivers[d].iceTransport.addRemoteCandidate({}),(t=r.getMediaSections(n._remoteDescription.sdp))[d]+="a=end-of-candidates\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join(""),!n.usingBundle));d++);o()}))},l.prototype.getStats=function(t){if(t&&t instanceof e.MediaStreamTrack){var n=null;if(this.transceivers.forEach((function(e){e.rtpSender&&e.rtpSender.track===t?n=e.rtpSender:e.rtpReceiver&&e.rtpReceiver.track===t&&(n=e.rtpReceiver)})),!n)throw s("InvalidAccessError","Invalid selector.");return n.getStats()}var r=[];return this.transceivers.forEach((function(e){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach((function(t){e[t]&&r.push(e[t].getStats())}))})),Promise.all(r).then((function(e){var t=new Map;return e.forEach((function(e){e.forEach((function(e){t.set(e.id,e)}))})),t}))};["RTCRtpSender","RTCRtpReceiver","RTCIceGatherer","RTCIceTransport","RTCDtlsTransport"].forEach((function(t){var n=e[t];if(n&&n.prototype&&n.prototype.getStats){var r=n.prototype.getStats;n.prototype.getStats=function(){return r.apply(this).then((function(e){var t=new Map;return Object.keys(e).forEach((function(n){var r;e[n].type={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[(r=e[n]).type]||r.type,t.set(n,e[n])})),t}))}}}));var f=["createOffer","createAnswer"];return f.forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[0]||"function"==typeof e[1]?t.apply(this,[arguments[2]]).then((function(t){"function"==typeof e[0]&&e[0].apply(null,[t])}),(function(t){"function"==typeof e[1]&&e[1].apply(null,[t])})):t.apply(this,arguments)}})),(f=["setLocalDescription","setRemoteDescription","addIceCandidate"]).forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]||"function"==typeof e[2]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)}),(function(t){"function"==typeof e[2]&&e[2].apply(null,[t])})):t.apply(this,arguments)}})),["getStats"].forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)})):t.apply(this,arguments)}})),l}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(30))},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(n,!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}function f(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?d(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=n(0),g=(n(2),n(82)),b=n(44);function w(e){for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r<2048?(t+=String.fromCharCode(192|r>>6),t+=String.fromCharCode(128|63&r)):r<55296||r>=57344?(t+=String.fromCharCode(224|r>>12),t+=String.fromCharCode(128|r>>6&63),t+=String.fromCharCode(128|63&r)):(n++,r=65536+((1023&r)<<10|1023&e.charCodeAt(n)),t+=String.fromCharCode(240|r>>18),t+=String.fromCharCode(128|r>>12&63),t+=String.fromCharCode(128|r>>6&63),t+=String.fromCharCode(128|63&r))}return t}var E={size:128,level:"L",bgColor:"#FFFFFF",fgColor:"#000000",includeMargin:!1};function S(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[];return e.forEach((function(e,r){var o=null;e.forEach((function(i,a){if(!i&&null!==o)return n.push("M".concat(o+t," ").concat(r+t,"h").concat(a-o,"v1H").concat(o+t,"z")),void(o=null);if(a!==e.length-1)i&&null===o&&(o=a);else{if(!i)return;null===o?n.push("M".concat(a+t,",").concat(r+t," h1v1H").concat(a+t,"z")):n.push("M".concat(o+t,",").concat(r+t," h").concat(a+1-o,"v1H").concat(o+t,"z"))}}))})),n.join("")}function C(e,t){return e.slice().map((function(e,n){return n<t.y||n>=t.y+t.h?e:e.map((function(e,n){return(n<t.x||n>=t.x+t.w)&&e}))}))}function _(e,t){var n=e.imageSettings,r=e.size,o=e.includeMargin;if(null==n)return null;var i=o?4:0,a=t.length+2*i,c=Math.floor(.1*r),s=a/r,u=(n.width||c)*s,l=(n.height||c)*s,f=null==n.x?t.length/2-u/2:n.x*s,p=null==n.y?t.length/2-l/2:n.y*s,d=null;if(n.excavate){var h=Math.floor(f),m=Math.floor(p);d={x:h,y:m,w:Math.ceil(u+f-h),h:Math.ceil(l+p-m)}}return{x:f,y:p,h:l,w:u,excavation:d}}var k=function(){try{(new Path2D).addPath(new Path2D)}catch(e){return!1}return!0}(),x=function(e){function t(){var e,n;s(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return v(d(n=f(this,(e=p(t)).call.apply(e,[this].concat(o)))),"_canvas",void 0),v(d(n),"_image",void 0),v(d(n),"state",{imgLoaded:!1}),v(d(n),"handleImageLoad",(function(){n.setState({imgLoaded:!0})})),n}return h(t,e),l(t,[{key:"componentDidMount",value:function(){this.update()}},{key:"componentDidUpdate",value:function(){this.update()}},{key:"update",value:function(){var e=this.props,t=e.value,n=e.size,r=e.level,o=e.bgColor,i=e.fgColor,a=e.includeMargin,c=e.imageSettings,s=new g(-1,b[r]);if(s.addData(w(t)),s.make(),null!=this._canvas){var u=this._canvas,l=u.getContext("2d");if(!l)return;var f=s.modules;if(null===f)return;var p=a?4:0,d=f.length+2*p,h=_(this.props,f);null!=c&&null!=h&&null!=h.excavation&&(f=C(f,h.excavation));var m=window.devicePixelRatio||1;u.height=u.width=n*m;var v=n/d*m;l.scale(v,v),l.fillStyle=o,l.fillRect(0,0,d,d),l.fillStyle=i,k?l.fill(new Path2D(S(f,p))):f.forEach((function(e,t){e.forEach((function(e,n){e&&l.fillRect(n+p,t+p,1,1)}))})),this.state.imgLoaded&&this._image&&null!=h&&l.drawImage(this._image,h.x+p,h.y+p,h.w,h.h)}}},{key:"render",value:function(){var e=this,t=this.props,n=(t.value,t.size),r=(t.level,t.bgColor,t.fgColor,t.style),i=(t.includeMargin,t.imageSettings),s=c(t,["value","size","level","bgColor","fgColor","style","includeMargin","imageSettings"]),u=a({height:n,width:n},r),l=null,f=i&&i.src;return null!=i&&null!=f&&(l=y.createElement("img",{src:f,style:{display:"none"},onLoad:this.handleImageLoad,ref:function(t){return e._image=t}})),y.createElement(y.Fragment,null,y.createElement("canvas",o({style:u,height:n,width:n,ref:function(t){return e._canvas=t}},s)),l)}}]),t}(y.PureComponent);v(x,"defaultProps",E);var T=function(e){function t(){return s(this,t),f(this,p(t).apply(this,arguments))}return h(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.value,n=e.size,r=e.level,i=e.bgColor,a=e.fgColor,s=e.includeMargin,u=e.imageSettings,l=c(e,["value","size","level","bgColor","fgColor","includeMargin","imageSettings"]),f=new g(-1,b[r]);f.addData(w(t)),f.make();var p=f.modules;if(null===p)return null;var d=s?4:0,h=p.length+2*d,m=_(this.props,p),v=null;null!=u&&null!=m&&(null!=m.excavation&&(p=C(p,m.excavation)),v=y.createElement("image",{xlinkHref:u.src,height:m.h,width:m.w,x:m.x+d,y:m.y+d,preserveAspectRatio:"none"}));var E=S(p,d);return y.createElement("svg",o({shapeRendering:"crispEdges",height:n,width:n,viewBox:"0 0 ".concat(h," ").concat(h)},l),y.createElement("path",{fill:i,d:"M0,0 h".concat(h,"v").concat(h,"H0z")}),y.createElement("path",{fill:a,d:E}),v)}}]),t}(y.PureComponent);v(T,"defaultProps",E);var O=function(e){var t=e.renderAs,n=c(e,["renderAs"]),r="svg"===t?T:x;return y.createElement(r,n)};O.defaultProps=a({renderAs:"canvas"},E),e.exports=O},function(e,t){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(","),r=e.name||"",o=e.type||"",i=o.replace(/\/.*$/,"");return n.some((function(e){var t=e.trim();return"."===t.charAt(0)?r.toLowerCase().endsWith(t.toLowerCase()):t.endsWith("/*")?i===t.replace(/\/.*$/,""):o===t}))}return!0}}])},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(this&&this[r]||r);else if(Array.isArray(r))e.push(o.apply(this,r));else if("object"===i)for(var a in r)n.call(r,a)&&r[a]&&e.push(this&&this[a]||a)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){e.exports={"btn-primary":"_1efWOZ",btnPrimary:"_1efWOZ","btn-secondary":"_1WZn8u",btnSecondary:"_1WZn8u","btn-disabled":"hSD9ab",btnDisabled:"hSD9ab"}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function a(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function c(e,t,n,r,i){if("function"!=typeof n)throw new TypeError("The listener must be a function");var c=new a(n,r||e,i),s=o?o+t:t;return e._events[s]?e._events[s].fn?e._events[s]=[e._events[s],c]:e._events[s].push(c):(e._events[s]=c,e._eventsCount++),e}function s(e,t){0==--e._eventsCount?e._events=new i:delete e._events[t]}function u(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),u.prototype.eventNames=function(){var e,t,n=[];if(0===this._eventsCount)return n;for(t in e=this._events)r.call(e,t)&&n.push(o?t.slice(1):t);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},u.prototype.listeners=function(e){var t=o?o+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,i=n.length,a=new Array(i);r<i;r++)a[r]=n[r].fn;return a},u.prototype.listenerCount=function(e){var t=o?o+e:e,n=this._events[t];return n?n.fn?1:n.length:0},u.prototype.emit=function(e,t,n,r,i,a){var c=o?o+e:e;if(!this._events[c])return!1;var s,u,l=this._events[c],f=arguments.length;if(l.fn){switch(l.once&&this.removeListener(e,l.fn,void 0,!0),f){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,t),!0;case 3:return l.fn.call(l.context,t,n),!0;case 4:return l.fn.call(l.context,t,n,r),!0;case 5:return l.fn.call(l.context,t,n,r,i),!0;case 6:return l.fn.call(l.context,t,n,r,i,a),!0}for(u=1,s=new Array(f-1);u<f;u++)s[u-1]=arguments[u];l.fn.apply(l.context,s)}else{var p,d=l.length;for(u=0;u<d;u++)switch(l[u].once&&this.removeListener(e,l[u].fn,void 0,!0),f){case 1:l[u].fn.call(l[u].context);break;case 2:l[u].fn.call(l[u].context,t);break;case 3:l[u].fn.call(l[u].context,t,n);break;case 4:l[u].fn.call(l[u].context,t,n,r);break;default:if(!s)for(p=1,s=new Array(f-1);p<f;p++)s[p-1]=arguments[p];l[u].fn.apply(l[u].context,s)}}return!0},u.prototype.on=function(e,t,n){return c(this,e,t,n,!1)},u.prototype.once=function(e,t,n){return c(this,e,t,n,!0)},u.prototype.removeListener=function(e,t,n,r){var i=o?o+e:e;if(!this._events[i])return this;if(!t)return s(this,i),this;var a=this._events[i];if(a.fn)a.fn!==t||r&&!a.once||n&&a.context!==n||s(this,i);else{for(var c=0,u=[],l=a.length;c<l;c++)(a[c].fn!==t||r&&!a[c].once||n&&a[c].context!==n)&&u.push(a[c]);u.length?this._events[i]=1===u.length?u[0]:u:s(this,i)}return this},u.prototype.removeAllListeners=function(e){var t;return e?(t=o?o+e:e,this._events[t]&&s(this,t)):(this._events=new i,this._eventsCount=0),this},u.prototype.off=u.prototype.removeListener,u.prototype.addListener=u.prototype.on,u.prefixed=o,u.EventEmitter=u,e.exports=u},function(e,t,n){e.exports=n(87)},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(){function e(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}return e.prototype.memoize=function(e){if(this._hasWeakSet)return!!this._inner.has(e)||(this._inner.add(e),!1);for(var t=0;t<this._inner.length;t++){if(this._inner[t]===e)return!0}return this._inner.push(e),!1},e.prototype.unmemoize=function(e){if(this._hasWeakSet)this._inner.delete(e);else for(var t=0;t<this._inner.length;t++)if(this._inner[t]===e){this._inner.splice(t,1);break}},e}()},,,function(e,t,n){},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(41),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,c=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function E(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var C=S.prototype=new E;C.constructor=S,r(C,w.prototype),C.isPureReactComponent=!0;var _={current:null},k={current:null},x=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,o={},a=null,c=null;if(null!=t)for(r in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var u=Array(s),l=0;l<s;l++)u[l]=arguments[l+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:c,props:o,_owner:k.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var R=/\/+/g,j=[];function D(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,o){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var s=!1;if(null===t)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return r(o,t,""===n?"."+I(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var l=n+I(c=t[u],u);s+=e(c,l,r,o)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=v&&t[v]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),u=0;!(c=t.next()).done;)s+=e(c=c.value,l=n+I(c,u++),r,o);else if("object"===c)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return s}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),M(e,L,t=D(t,i,r,o)),N(t)}function U(){var e=_.current;if(null===e)throw Error(y(321));return e}var z={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,A,t=D(null,null,t,n)),N(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return F(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:S,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:c,Profiler:u,StrictMode:s,Suspense:d,createElement:O,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,c=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,s=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in t)x.call(t,l)&&!T.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==u?u[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){u=Array(l);for(var f=0;f<l;f++)u[f]=arguments[f+2];o.children=u}return{$$typeof:i,type:e.type,key:a,ref:c,props:o,_owner:s}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:_,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r}},B={default:z},H=B&&z||B;e.exports=H.default||H},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(41),i=n(70);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var c=null,s={};function u(){if(c)for(var e in s){var t=s[e],n=c.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,d=r;if(p.hasOwnProperty(d))throw Error(a(99,d));p[d]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&l(h[o],u,d);o=!0}else i.registrationName?(l(i.registrationName,u,d),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function l(e,t,n){if(d[e])throw Error(a(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};function m(e,t,n,r,o,i,a,c,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var v=!1,y=null,g=!1,b=null,w={onError:function(e){v=!0,y=e}};function E(e,t,n,r,o,i,a,c,s){v=!1,y=null,m.apply(w,arguments)}var S=null,C=null,_=null;function k(e,t,n){var r=e.type||"unknown-event";e.currentTarget=_(n),function(e,t,n,r,o,i,c,s,u){if(E.apply(this,arguments),v){if(!v)throw Error(a(198));var l=y;v=!1,y=null,g||(g=!0,b=l)}}(r,t,void 0,e),e.currentTarget=null}function x(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)k(e,t[r],n[r]);else t&&k(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function R(e){if(null!==e&&(O=x(O,e)),e=O,O=null,e){if(T(e,P),O)throw Error(a(95));if(g)throw e=b,g=!1,b=null,e}}var j={injectEventPluginOrder:function(e){if(c)throw Error(a(101));c=Array.prototype.slice.call(e),u()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!s.hasOwnProperty(t)||s[t]!==r){if(s[t])throw Error(a(102,t));s[t]=r,n=!0}}n&&u()}};function D(e,t){var n=e.stateNode;if(!n)return null;var r=S(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var N=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;N.hasOwnProperty("ReactCurrentDispatcher")||(N.ReactCurrentDispatcher={current:null}),N.hasOwnProperty("ReactCurrentBatchConfig")||(N.ReactCurrentBatchConfig={suspense:null});var M=/^(.*)[\\\/]/,I="function"==typeof Symbol&&Symbol.for,A=I?Symbol.for("react.element"):60103,L=I?Symbol.for("react.portal"):60106,F=I?Symbol.for("react.fragment"):60107,U=I?Symbol.for("react.strict_mode"):60108,z=I?Symbol.for("react.profiler"):60114,B=I?Symbol.for("react.provider"):60109,H=I?Symbol.for("react.context"):60110,W=I?Symbol.for("react.concurrent_mode"):60111,q=I?Symbol.for("react.forward_ref"):60112,V=I?Symbol.for("react.suspense"):60113,G=I?Symbol.for("react.suspense_list"):60120,$=I?Symbol.for("react.memo"):60115,K=I?Symbol.for("react.lazy"):60116;I&&Symbol.for("react.fundamental"),I&&Symbol.for("react.responder"),I&&Symbol.for("react.scope");var J="function"==typeof Symbol&&Symbol.iterator;function Y(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=J&&e[J]||e["@@iterator"])?e:null}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case F:return"Fragment";case L:return"Portal";case z:return"Profiler";case U:return"StrictMode";case V:return"Suspense";case G:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case H:return"Context.Consumer";case B:return"Context.Provider";case q:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case $:return X(e.type);case K:if(e=1===e._status?e._result:null)return X(e)}return null}function Q(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=X(e.type);n=null,r&&(n=X(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(M,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=C(e)){if("function"!=typeof ee)throw Error(a(280));var t=S(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ie(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function ce(e,t,n,r){return e(t,n,r)}function se(){}var ue=ae,le=!1,fe=!1;function pe(){null===te&&null===ne||(se(),ie())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ve={};function ye(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ge[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ge[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ge[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ge[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ge[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ge[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ge[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ge[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ge[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function Ee(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Se(e,t,n,r){var o=ge.hasOwnProperty(t)?ge[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(ve,e)||!he.call(me,e)&&(de.test(e)?ve[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Ce(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function _e(e){e._valueTracker||(e._valueTracker=function(e){var t=Ce(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ce(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Te(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ee(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Oe(e,t){null!=(t=t.checked)&&Se(e,"checked",t,!1)}function Pe(e,t){Oe(e,t);var n=Ee(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?je(e,t.type,n):t.hasOwnProperty("defaultValue")&&je(e,t.type,Ee(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function je(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function De(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Ee(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Me(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ie(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:Ee(n)}}function Ae(e,t){var n=Ee(t.value),r=Ee(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),ge.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var Fe="http://www.w3.org/1999/xhtml",Ue="http://www.w3.org/2000/svg";function ze(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ze(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var He,We=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ue||"innerHTML"in e)e.innerHTML=t;else{for((He=He||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=He.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function qe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ve(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ge={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},$e={},Ke={};function Je(e){if($e[e])return $e[e];if(!Ge[e])return e;var t,n=Ge[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ke)return $e[e]=n[t];return e}Z&&(Ke=document.createElement("div").style,"AnimationEvent"in window||(delete Ge.animationend.animation,delete Ge.animationiteration.animation,delete Ge.animationstart.animation),"TransitionEvent"in window||delete Ge.transitionend.transition);var Ye=Je("animationend"),Xe=Je("animationiteration"),Qe=Je("animationstart"),Ze=Je("transitionend"),et="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function tt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function nt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function rt(e){if(tt(e)!==e)throw Error(a(188))}function ot(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return rt(o),e;if(i===r)return rt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var c=!1,s=o.child;s;){if(s===n){c=!0,n=o,r=i;break}if(s===r){c=!0,r=o,n=i;break}s=s.sibling}if(!c){for(s=i.child;s;){if(s===n){c=!0,n=i,r=o;break}if(s===r){c=!0,r=i,n=o;break}s=s.sibling}if(!c)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var it,at,ct,st=!1,ut=[],lt=null,ft=null,pt=null,dt=new Map,ht=new Map,mt=[],vt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),yt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function gt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":lt=null;break;case"dragenter":case"dragleave":ft=null;break;case"mouseover":case"mouseout":pt=null;break;case"pointerover":case"pointerout":dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ht.delete(t.pointerId)}}function wt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=gt(t,n,r,o),null!==t&&(null!==(t=ur(t))&&at(t)),e):(e.eventSystemFlags|=r,e)}function Et(e){var t=sr(e.target);if(null!==t){var n=tt(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=nt(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){ct(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function St(e){if(null!==e.blockedOn)return!1;var t=jn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=ur(t);return null!==n&&at(n),e.blockedOn=t,!1}return!0}function Ct(e,t,n){St(e)&&n.delete(t)}function _t(){for(st=!1;0<ut.length;){var e=ut[0];if(null!==e.blockedOn){null!==(e=ur(e.blockedOn))&&it(e);break}var t=jn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ut.shift()}null!==lt&&St(lt)&&(lt=null),null!==ft&&St(ft)&&(ft=null),null!==pt&&St(pt)&&(pt=null),dt.forEach(Ct),ht.forEach(Ct)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,st||(st=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,_t)))}function xt(e){function t(t){return kt(t,e)}if(0<ut.length){kt(ut[0],e);for(var n=1;n<ut.length;n++){var r=ut[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==ft&&kt(ft,e),null!==pt&&kt(pt,e),dt.forEach(t),ht.forEach(t),n=0;n<mt.length;n++)(r=mt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<mt.length&&null===(n=mt[0]).blockedOn;)Et(n),null===n.blockedOn&&mt.shift()}function Tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ot(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Pt(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function Rt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Ot(t);for(t=n.length;0<t--;)Pt(n[t],"captured",e);for(t=0;t<n.length;t++)Pt(n[t],"bubbled",e)}}function jt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function Dt(e){e&&e.dispatchConfig.registrationName&&jt(e._targetInst,null,e)}function Nt(e){T(e,Rt)}function Mt(){return!0}function It(){return!1}function At(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Mt:It,this.isPropagationStopped=It,this}function Lt(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ft(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ut(e){e.eventPool=[],e.getPooled=Lt,e.release=Ft}o(At.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Mt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Mt)},persist:function(){this.isPersistent=Mt},isPersistent:It,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=It,this._dispatchInstances=this._dispatchListeners=null}}),At.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},At.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Ut(n),n},Ut(At);var zt=At.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Bt=At.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Ht=At.extend({view:null,detail:null}),Wt=Ht.extend({relatedTarget:null});function qt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Vt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Gt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},$t={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Kt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=$t[e])&&!!t[e]}function Jt(){return Kt}for(var Yt=Ht.extend({key:function(e){if(e.key){var t=Vt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=qt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Gt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Jt,charCode:function(e){return"keypress"===e.type?qt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?qt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Xt=0,Qt=0,Zt=!1,en=!1,tn=Ht.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Jt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Xt;return Xt=e.screenX,Zt?"mousemove"===e.type?e.screenX-t:0:(Zt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Qt;return Qt=e.screenY,en?"mousemove"===e.type?e.screenY-t:0:(en=!0,0)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),rn=tn.extend({dataTransfer:null}),on=Ht.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Jt}),an=At.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),sn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Ye,"animationEnd",2],[Xe,"animationIteration",2],[Qe,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Ze,"transitionEnd",2],["waiting","waiting",2]],un={},ln={},fn=0;fn<sn.length;fn++){var pn=sn[fn],dn=pn[0],hn=pn[1],mn=pn[2],vn="on"+(hn[0].toUpperCase()+hn.slice(1)),yn={phasedRegistrationNames:{bubbled:vn,captured:vn+"Capture"},dependencies:[dn],eventPriority:mn};un[hn]=yn,ln[dn]=yn}var gn={eventTypes:un,getEventPriority:function(e){return void 0!==(e=ln[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=ln[e];if(!o)return null;switch(e){case"keypress":if(0===qt(n))return null;case"keydown":case"keyup":e=Yt;break;case"blur":case"focus":e=Wt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=on;break;case Ye:case Xe:case Qe:e=zt;break;case Ze:e=an;break;case"scroll":e=Ht;break;case"wheel":e=cn;break;case"copy":case"cut":case"paste":e=Bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=At}return Nt(t=e.getPooled(o,t,n,r)),t}},bn=i.unstable_UserBlockingPriority,wn=i.unstable_runWithPriority,En=gn.getEventPriority,Sn=[];function Cn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=sr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Tt(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=e.eventSystemFlags,c=null,s=0;s<f.length;s++){var u=f[s];u&&(u=u.extractEvents(r,t,i,o,a))&&(c=x(c,u))}R(c)}}var _n=!0;function kn(e,t){xn(t,e,!1)}function xn(e,t,n){switch(En(t)){case 0:var r=Tn.bind(null,t,1);break;case 1:r=On.bind(null,t,1);break;default:r=Rn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Tn(e,t,n){le||se();var r=Rn,o=le;le=!0;try{ce(r,e,t,n)}finally{(le=o)||pe()}}function On(e,t,n){wn(bn,Rn.bind(null,e,t,n))}function Pn(e,t,n,r){if(Sn.length){var o=Sn.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=Cn,n=e,fe)t(n,void 0);else{fe=!0;try{ue(t,n,void 0)}finally{fe=!1,pe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,Sn.length<10&&Sn.push(e)}}function Rn(e,t,n){if(_n)if(0<ut.length&&-1<vt.indexOf(e))e=gt(null,e,t,n),ut.push(e);else{var r=jn(e,t,n);null===r?bt(e,n):-1<vt.indexOf(e)?(e=gt(r,e,t,n),ut.push(e)):function(e,t,n,r){switch(t){case"focus":return lt=wt(lt,e,t,n,r),!0;case"dragenter":return ft=wt(ft,e,t,n,r),!0;case"mouseover":return pt=wt(pt,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return dt.set(o,wt(dt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,ht.set(o,wt(ht.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),Pn(e,t,n,null))}}function jn(e,t,n){var r=Tt(n);if(null!==(r=sr(r))){var o=tt(r);if(null===o)r=null;else{var i=o.tag;if(13===i){if(null!==(r=nt(o)))return r;r=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Pn(e,t,n,r),null}function Dn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Nn=new("function"==typeof WeakMap?WeakMap:Map);function Mn(e){var t=Nn.get(e);return void 0===t&&(t=new Set,Nn.set(e,t)),t}function In(e,t,n){if(!n.has(e)){switch(e){case"scroll":xn(t,"scroll",!0);break;case"focus":case"blur":xn(t,"focus",!0),xn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Dn(e)&&xn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===et.indexOf(e)&&kn(e,t)}n.add(e)}}var An={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ln=["Webkit","ms","Moz","O"];function Fn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||An.hasOwnProperty(e)&&An[e]?(""+t).trim():t+"px"}function Un(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Fn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(An).forEach((function(e){Ln.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),An[t]=An[e]}))}));var zn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Bn(e,t){if(t){if(zn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function Hn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Wn(e,t){var n=Mn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)In(t[r],e,n)}function qn(){}function Vn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Gn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function $n(e,t){var n,r=Gn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Gn(r)}}function Kn(){for(var e=window,t=Vn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Vn((e=t.contentWindow).document)}return t}function Jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Yn=null,Xn=null;function Qn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Zn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var er="function"==typeof setTimeout?setTimeout:void 0,tr="function"==typeof clearTimeout?clearTimeout:void 0;function nr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function rr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var or=Math.random().toString(36).slice(2),ir="__reactInternalInstance$"+or,ar="__reactEventHandlers$"+or,cr="__reactContainere$"+or;function sr(e){var t=e[ir];if(t)return t;for(var n=e.parentNode;n;){if(t=n[cr]||n[ir]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=rr(e);null!==e;){if(n=e[ir])return n;e=rr(e)}return t}n=(e=n).parentNode}return null}function ur(e){return!(e=e[ir]||e[cr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function lr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function fr(e){return e[ar]||null}var pr=null,dr=null,hr=null;function mr(){if(hr)return hr;var e,t,n=dr,r=n.length,o="value"in pr?pr.value:pr.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return hr=o.slice(e,1<t?1-t:void 0)}var vr=At.extend({data:null}),yr=At.extend({data:null}),gr=[9,13,27,32],br=Z&&"CompositionEvent"in window,wr=null;Z&&"documentMode"in document&&(wr=document.documentMode);var Er=Z&&"TextEvent"in window&&!wr,Sr=Z&&(!br||wr&&8<wr&&11>=wr),Cr=String.fromCharCode(32),_r={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},kr=!1;function xr(e,t){switch(e){case"keyup":return-1!==gr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Tr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Or=!1;var Pr={eventTypes:_r,extractEvents:function(e,t,n,r){var o;if(br)e:{switch(e){case"compositionstart":var i=_r.compositionStart;break e;case"compositionend":i=_r.compositionEnd;break e;case"compositionupdate":i=_r.compositionUpdate;break e}i=void 0}else Or?xr(e,n)&&(i=_r.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=_r.compositionStart);return i?(Sr&&"ko"!==n.locale&&(Or||i!==_r.compositionStart?i===_r.compositionEnd&&Or&&(o=mr()):(dr="value"in(pr=r)?pr.value:pr.textContent,Or=!0)),i=vr.getPooled(i,t,n,r),o?i.data=o:null!==(o=Tr(n))&&(i.data=o),Nt(i),o=i):o=null,(e=Er?function(e,t){switch(e){case"compositionend":return Tr(t);case"keypress":return 32!==t.which?null:(kr=!0,Cr);case"textInput":return(e=t.data)===Cr&&kr?null:e;default:return null}}(e,n):function(e,t){if(Or)return"compositionend"===e||!br&&xr(e,t)?(e=mr(),hr=dr=pr=null,Or=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=yr.getPooled(_r.beforeInput,t,n,r)).data=e,Nt(t)):t=null,null===o?t:null===t?o:[o,t]}},Rr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function jr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Rr[e.type]:"textarea"===t}var Dr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Nr(e,t,n){return(e=At.getPooled(Dr.change,e,t,n)).type="change",oe(n),Nt(e),e}var Mr=null,Ir=null;function Ar(e){R(e)}function Lr(e){if(ke(lr(e)))return e}function Fr(e,t){if("change"===e)return t}var Ur=!1;function zr(){Mr&&(Mr.detachEvent("onpropertychange",Br),Ir=Mr=null)}function Br(e){if("value"===e.propertyName&&Lr(Ir))if(e=Nr(Ir,e,Tt(e)),le)R(e);else{le=!0;try{ae(Ar,e)}finally{le=!1,pe()}}}function Hr(e,t,n){"focus"===e?(zr(),Ir=n,(Mr=t).attachEvent("onpropertychange",Br)):"blur"===e&&zr()}function Wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Lr(Ir)}function qr(e,t){if("click"===e)return Lr(t)}function Vr(e,t){if("input"===e||"change"===e)return Lr(t)}Z&&(Ur=Dn("input")&&(!document.documentMode||9<document.documentMode));var Gr,$r={eventTypes:Dr,_isInputEventSupported:Ur,extractEvents:function(e,t,n,r){var o=t?lr(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=Fr;else if(jr(o))if(Ur)a=Vr;else{a=Wr;var c=Hr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=qr);if(a&&(a=a(e,t)))return Nr(a,n,r);c&&c(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&je(o,"number",o.value)}},Kr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jr={eventTypes:Kr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?sr(t):null)&&(t!==(i=tt(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var c=tn,s=Kr.mouseLeave,u=Kr.mouseEnter,l="mouse";else"pointerout"!==e&&"pointerover"!==e||(c=nn,s=Kr.pointerLeave,u=Kr.pointerEnter,l="pointer");if(e=null==a?o:lr(a),o=null==t?o:lr(t),(s=c.getPooled(s,a,n,r)).type=l+"leave",s.target=e,s.relatedTarget=o,(r=c.getPooled(u,t,n,r)).type=l+"enter",r.target=o,r.relatedTarget=e,l=t,(c=a)&&l)e:{for(e=l,a=0,t=u=c;t;t=Ot(t))a++;for(t=0,o=e;o;o=Ot(o))t++;for(;0<a-t;)u=Ot(u),a--;for(;0<t-a;)e=Ot(e),t--;for(;a--;){if(u===e||u===e.alternate)break e;u=Ot(u),e=Ot(e)}u=null}else u=null;for(e=u,u=[];c&&c!==e&&(null===(a=c.alternate)||a!==e);)u.push(c),c=Ot(c);for(c=[];l&&l!==e&&(null===(a=l.alternate)||a!==e);)c.push(l),l=Ot(l);for(l=0;l<u.length;l++)jt(u[l],"bubbled",s);for(l=c.length;0<l--;)jt(c[l],"captured",r);return n===Gr?(Gr=null,[s]):(Gr=n,[s,r])}};var Yr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Xr=Object.prototype.hasOwnProperty;function Qr(e,t){if(Yr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Xr.call(t,n[r])||!Yr(e[n[r]],t[n[r]]))return!1;return!0}var Zr=Z&&"documentMode"in document&&11>=document.documentMode,eo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},to=null,no=null,ro=null,oo=!1;function io(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return oo||null==to||to!==Vn(n)?null:("selectionStart"in(n=to)&&Jn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},ro&&Qr(ro,n)?null:(ro=n,(e=At.getPooled(eo.select,no,e,t)).type="select",e.target=to,Nt(e),e))}var ao={eventTypes:eo,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Mn(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?lr(t):window,e){case"focus":(jr(i)||"true"===i.contentEditable)&&(to=i,no=t,ro=null);break;case"blur":ro=no=to=null;break;case"mousedown":oo=!0;break;case"contextmenu":case"mouseup":case"dragend":return oo=!1,io(n,r);case"selectionchange":if(Zr)break;case"keydown":case"keyup":return io(n,r)}return null}};j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),S=fr,C=ur,_=lr,j.injectEventPluginsByName({SimpleEventPlugin:gn,EnterLeaveEventPlugin:Jr,ChangeEventPlugin:$r,SelectEventPlugin:ao,BeforeInputEventPlugin:Pr}),new Set;var co=[],so=-1;function uo(e){0>so||(e.current=co[so],co[so]=null,so--)}function lo(e,t){so++,co[so]=e.current,e.current=t}var fo={},po={current:fo},ho={current:!1},mo=fo;function vo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function yo(e){return null!=(e=e.childContextTypes)}function go(e){uo(ho),uo(po)}function bo(e){uo(ho),uo(po)}function wo(e,t,n){if(po.current!==fo)throw Error(a(168));lo(po,t),lo(ho,n)}function Eo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,X(t)||"Unknown",i));return o({},n,{},r)}function So(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,lo(po,t),lo(ho,ho.current),!0}function Co(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=Eo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=t,uo(ho),uo(po),lo(po,t)):uo(ho),lo(ho,n)}var _o=i.unstable_runWithPriority,ko=i.unstable_scheduleCallback,xo=i.unstable_cancelCallback,To=i.unstable_shouldYield,Oo=i.unstable_requestPaint,Po=i.unstable_now,Ro=i.unstable_getCurrentPriorityLevel,jo=i.unstable_ImmediatePriority,Do=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,Mo=i.unstable_LowPriority,Io=i.unstable_IdlePriority,Ao={},Lo=void 0!==Oo?Oo:function(){},Fo=null,Uo=null,zo=!1,Bo=Po(),Ho=1e4>Bo?Po:function(){return Po()-Bo};function Wo(){switch(Ro()){case jo:return 99;case Do:return 98;case No:return 97;case Mo:return 96;case Io:return 95;default:throw Error(a(332))}}function qo(e){switch(e){case 99:return jo;case 98:return Do;case 97:return No;case 96:return Mo;case 95:return Io;default:throw Error(a(332))}}function Vo(e,t){return e=qo(e),_o(e,t)}function Go(e,t,n){return e=qo(e),ko(e,t,n)}function $o(e){return null===Fo?(Fo=[e],Uo=ko(jo,Jo)):Fo.push(e),Ao}function Ko(){if(null!==Uo){var e=Uo;Uo=null,xo(e)}Jo()}function Jo(){if(!zo&&null!==Fo){zo=!0;var e=0;try{var t=Fo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Fo=null}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),ko(jo,Ko),t}finally{zo=!1}}}var Yo=3;function Xo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Zo={current:null},ei=null,ti=null,ni=null;function ri(){ni=ti=ei=null}function oi(e,t){var n=e.type._context;lo(Zo,n._currentValue),n._currentValue=t}function ii(e){var t=Zo.current;uo(Zo),e.type._context._currentValue=t}function ai(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ci(e,t){ei=e,ni=ti=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ba=!0),e.firstContext=null)}function si(e,t){if(ni!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ni=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ti){if(null===ei)throw Error(a(308));ti=t,ei.dependencies={expirationTime:0,firstContext:t,responders:null}}else ti=ti.next=t;return e._currentValue}var ui=!1;function li(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function fi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function pi(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function di(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function hi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=li(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=li(e.memoizedState),o=n.updateQueue=li(n.memoizedState)):r=e.updateQueue=fi(o):null===o&&(o=n.updateQueue=fi(r));null===o||r===o?di(r,t):null===r.lastUpdate||null===o.lastUpdate?(di(r,t),di(o,t)):(di(r,t),o.lastUpdate=t)}function mi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=li(e.memoizedState):vi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function vi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=fi(t)),t}function yi(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:ui=!0}return r}function gi(e,t,n,r,o){ui=!1;for(var i=(t=vi(e,t)).baseState,a=null,c=0,s=t.firstUpdate,u=i;null!==s;){var l=s.expirationTime;l<o?(null===a&&(a=s,i=u),c<l&&(c=l)):(fs(l,s.suspenseConfig),u=yi(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(l=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<o?(null===l&&(l=s,null===a&&(i=u)),c<f&&(c=f)):(u=yi(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===l?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===l&&(i=u),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=l,ps(c),e.expirationTime=c,e.memoizedState=u}function bi(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),wi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,wi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function wi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var Ei=N.ReactCurrentBatchConfig,Si=(new r.Component).refs;function Ci(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var _i={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Qc(),o=Ei.suspense;(o=pi(r=Zc(r,e,o),o)).payload=t,null!=n&&(o.callback=n),hi(e,o),es(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Qc(),o=Ei.suspense;(o=pi(r=Zc(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),hi(e,o),es(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Qc(),r=Ei.suspense;(r=pi(n=Zc(n,e,r),r)).tag=2,null!=t&&(r.callback=t),hi(e,r),es(e,n)}};function ki(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Qr(n,r)||!Qr(o,i))}function xi(e,t,n){var r=!1,o=fo,i=t.contextType;return"object"==typeof i&&null!==i?i=si(i):(o=yo(t)?mo:po.current,i=(r=null!=(r=t.contextTypes))?vo(e,o):fo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=_i,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Ti(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&_i.enqueueReplaceState(t,t.state,null)}function Oi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Si;var i=t.contextType;"object"==typeof i&&null!==i?o.context=si(i):(i=yo(t)?mo:po.current,o.context=vo(e,i)),null!==(i=e.updateQueue)&&(gi(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Ci(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&_i.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(gi(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Pi=Array.isArray;function Ri(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Si&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ji(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Di(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Ds(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function c(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Is(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ri(e,t,n),r.return=e,r):((r=Ns(n.type,n.key,n.props,null,e.mode,r)).ref=Ri(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=As(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Is(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Ns(t.type,t.key,t.props,null,e.mode,n)).ref=Ri(e,null,t),n.return=e,n;case L:return(t=As(t,e.mode,n)).return=e,t}if(Pi(t)||Y(t))return(t=Ms(t,e.mode,n,null)).return=e,t;ji(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===o?n.type===F?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case L:return n.key===o?l(e,t,n,r):null}if(Pi(n)||Y(n))return null!==o?null:f(e,t,n,r,null);ji(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return e=e.get(null===r.key?n:r.key)||null,r.type===F?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case L:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Pi(r)||Y(r))return f(t,e=e.get(n)||null,r,o,null);ji(t,r)}return null}function m(o,a,c,s){for(var u=null,l=null,f=a,m=a=0,v=null;null!==f&&m<c.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(o,f,c[m],s);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===l?u=y:l.sibling=y,l=y,f=v}if(m===c.length)return n(o,f),u;if(null===f){for(;m<c.length;m++)null!==(f=p(o,c[m],s))&&(a=i(f,a,m),null===l?u=f:l.sibling=f,l=f);return u}for(f=r(o,f);m<c.length;m++)null!==(v=h(f,o,m,c[m],s))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===l?u=v:l.sibling=v,l=v);return e&&f.forEach((function(e){return t(o,e)})),u}function v(o,c,s,u){var l=Y(s);if("function"!=typeof l)throw Error(a(150));if(null==(s=l.call(s)))throw Error(a(151));for(var f=l=null,m=c,v=c=0,y=null,g=s.next();null!==m&&!g.done;v++,g=s.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=d(o,m,g.value,u);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),c=i(b,c,v),null===f?l=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),l;if(null===m){for(;!g.done;v++,g=s.next())null!==(g=p(o,g.value,u))&&(c=i(g,c,v),null===f?l=g:f.sibling=g,f=g);return l}for(m=r(o,m);!g.done;v++,g=s.next())null!==(g=h(m,o,v,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),c=i(g,c,v),null===f?l=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),l}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===F&&null===i.key;u&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case A:e:{for(l=i.key,u=r;null!==u;){if(u.key===l){if(7===u.tag?i.type===F:u.elementType===i.type){n(e,u.sibling),(r=o(u,i.type===F?i.props.children:i.props)).ref=Ri(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===F?((r=Ms(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Ns(i.type,i.key,i.props,null,e.mode,s)).ref=Ri(e,r,i),s.return=e,e=s)}return c(e);case L:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=As(i,e.mode,s)).return=e,e=r}return c(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Is(i,e.mode,s)).return=e,e=r),c(e);if(Pi(i))return m(e,r,i,s);if(Y(i))return v(e,r,i,s);if(l&&ji(e,i),void 0===i&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ni=Di(!0),Mi=Di(!1),Ii={},Ai={current:Ii},Li={current:Ii},Fi={current:Ii};function Ui(e){if(e===Ii)throw Error(a(174));return e}function zi(e,t){lo(Fi,t),lo(Li,e),lo(Ai,Ii);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}uo(Ai),lo(Ai,t)}function Bi(e){uo(Ai),uo(Li),uo(Fi)}function Hi(e){Ui(Fi.current);var t=Ui(Ai.current),n=Be(t,e.type);t!==n&&(lo(Li,e),lo(Ai,n))}function Wi(e){Li.current===e&&(uo(Ai),uo(Li))}var qi={current:0};function Vi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Gi(e,t){return{responder:e,props:t}}var $i=N.ReactCurrentDispatcher,Ki=N.ReactCurrentBatchConfig,Ji=0,Yi=null,Xi=null,Qi=null,Zi=null,ea=null,ta=null,na=0,ra=null,oa=0,ia=!1,aa=null,ca=0;function sa(){throw Error(a(321))}function ua(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yr(e[n],t[n]))return!1;return!0}function la(e,t,n,r,o,i){if(Ji=i,Yi=t,Qi=null!==e?e.memoizedState:null,$i.current=null===Qi?Pa:Ra,t=n(r,o),ia){do{ia=!1,ca+=1,Qi=null!==e?e.memoizedState:null,ta=Zi,ra=ea=Xi=null,$i.current=Ra,t=n(r,o)}while(ia);aa=null,ca=0}if($i.current=Oa,(e=Yi).memoizedState=Zi,e.expirationTime=na,e.updateQueue=ra,e.effectTag|=oa,e=null!==Xi&&null!==Xi.next,Ji=0,ta=ea=Zi=Qi=Xi=Yi=null,na=0,ra=null,oa=0,e)throw Error(a(300));return t}function fa(){$i.current=Oa,Ji=0,ta=ea=Zi=Qi=Xi=Yi=null,na=0,ra=null,oa=0,ia=!1,aa=null,ca=0}function pa(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===ea?Zi=ea=e:ea=ea.next=e,ea}function da(){if(null!==ta)ta=(ea=ta).next,Qi=null!==(Xi=Qi)?Xi.next:null;else{if(null===Qi)throw Error(a(310));var e={memoizedState:(Xi=Qi).memoizedState,baseState:Xi.baseState,queue:Xi.queue,baseUpdate:Xi.baseUpdate,next:null};ea=null===ea?Zi=e:ea.next=e,Qi=Xi.next}return ea}function ha(e,t){return"function"==typeof t?t(e):t}function ma(e){var t=da(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<ca){var r=n.dispatch;if(null!==aa){var o=aa.get(n);if(void 0!==o){aa.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Yr(i,t.memoizedState)||(Ba=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var c=t.baseUpdate;if(i=t.baseState,null!==c?(null!==r&&(r.next=null),r=c.next):r=null!==r?r.next:null,null!==r){var s=o=null,u=r,l=!1;do{var f=u.expirationTime;f<Ji?(l||(l=!0,s=c,o=i),f>na&&ps(na=f)):(fs(f,u.suspenseConfig),i=u.eagerReducer===e?u.eagerState:e(i,u.action)),c=u,u=u.next}while(null!==u&&u!==r);l||(s=c,o=i),Yr(i,t.memoizedState)||(Ba=!0),t.memoizedState=i,t.baseUpdate=s,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function va(e){var t=pa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ha,lastRenderedState:e}).dispatch=Ta.bind(null,Yi,e),[t.memoizedState,e]}function ya(e){return ma(ha)}function ga(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ra?(ra={lastEffect:null}).lastEffect=e.next=e:null===(t=ra.lastEffect)?ra.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ra.lastEffect=e),e}function ba(e,t,n,r){var o=pa();oa|=e,o.memoizedState=ga(t,n,void 0,void 0===r?null:r)}function wa(e,t,n,r){var o=da();r=void 0===r?null:r;var i=void 0;if(null!==Xi){var a=Xi.memoizedState;if(i=a.destroy,null!==r&&ua(r,a.deps))return void ga(0,n,i,r)}oa|=e,o.memoizedState=ga(t,n,i,r)}function Ea(e,t){return ba(516,192,e,t)}function Sa(e,t){return wa(516,192,e,t)}function Ca(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _a(){}function ka(e,t){return pa().memoizedState=[e,void 0===t?null:t],e}function xa(e,t){var n=da();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ua(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ta(e,t,n){if(!(25>ca))throw Error(a(301));var r=e.alternate;if(e===Yi||null!==r&&r===Yi)if(ia=!0,e={expirationTime:Ji,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===aa&&(aa=new Map),void 0===(n=aa.get(t)))aa.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=Qc(),i=Ei.suspense;i={expirationTime:o=Zc(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var c=t.last;if(null===c)i.next=i;else{var s=c.next;null!==s&&(i.next=s),c.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=r(u,n);if(i.eagerReducer=r,i.eagerState=l,Yr(l,u))return}catch(e){}es(e,o)}}var Oa={readContext:si,useCallback:sa,useContext:sa,useEffect:sa,useImperativeHandle:sa,useLayoutEffect:sa,useMemo:sa,useReducer:sa,useRef:sa,useState:sa,useDebugValue:sa,useResponder:sa,useDeferredValue:sa,useTransition:sa},Pa={readContext:si,useCallback:ka,useContext:si,useEffect:Ea,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,36,Ca.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,36,e,t)},useMemo:function(e,t){var n=pa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=pa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ta.bind(null,Yi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},pa().memoizedState=e},useState:va,useDebugValue:_a,useResponder:Gi,useDeferredValue:function(e,t){var n=va(e),r=n[0],o=n[1];return Ea((function(){i.unstable_next((function(){var n=Ki.suspense;Ki.suspense=void 0===t?null:t;try{o(e)}finally{Ki.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=va(!1),n=t[0],r=t[1];return[ka((function(t){r(!0),i.unstable_next((function(){var n=Ki.suspense;Ki.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ki.suspense=n}}))}),[e,n]),n]}},Ra={readContext:si,useCallback:xa,useContext:si,useEffect:Sa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,36,Ca.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wa(4,36,e,t)},useMemo:function(e,t){var n=da();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ua(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ma,useRef:function(){return da().memoizedState},useState:ya,useDebugValue:_a,useResponder:Gi,useDeferredValue:function(e,t){var n=ya(),r=n[0],o=n[1];return Sa((function(){i.unstable_next((function(){var n=Ki.suspense;Ki.suspense=void 0===t?null:t;try{o(e)}finally{Ki.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=ya(),n=t[0],r=t[1];return[xa((function(t){r(!0),i.unstable_next((function(){var n=Ki.suspense;Ki.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ki.suspense=n}}))}),[e,n]),n]}},ja=null,Da=null,Na=!1;function Ma(e,t){var n=Rs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ia(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Aa(e){if(Na){var t=Da;if(t){var n=t;if(!Ia(e,t)){if(!(t=nr(n.nextSibling))||!Ia(e,t))return e.effectTag=-1025&e.effectTag|2,Na=!1,void(ja=e);Ma(ja,n)}ja=e,Da=nr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Na=!1,ja=e}}function La(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ja=e}function Fa(e){if(e!==ja)return!1;if(!Na)return La(e),Na=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Zn(t,e.memoizedProps))for(t=Da;t;)Ma(e,t),t=nr(t.nextSibling);if(La(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Da=nr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Da=null}}else Da=ja?nr(e.stateNode.nextSibling):null;return!0}function Ua(){Da=ja=null,Na=!1}var za=N.ReactCurrentOwner,Ba=!1;function Ha(e,t,n,r){t.child=null===e?Mi(t,null,n,r):Ni(t,e.child,n,r)}function Wa(e,t,n,r,o){n=n.render;var i=t.ref;return ci(t,o),r=la(e,t,n,r,i,o),null===e||Ba?(t.effectTag|=1,Ha(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),ic(e,t,o))}function qa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||js(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ns(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Va(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Qr)(o,r)&&e.ref===t.ref)?ic(e,t,i):(t.effectTag|=1,(e=Ds(a,r)).ref=t.ref,e.return=t,t.child=e)}function Va(e,t,n,r,o,i){return null!==e&&Qr(e.memoizedProps,r)&&e.ref===t.ref&&(Ba=!1,o<i)?ic(e,t,i):$a(e,t,n,r,i)}function Ga(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function $a(e,t,n,r,o){var i=yo(n)?mo:po.current;return i=vo(t,i),ci(t,o),n=la(e,t,n,r,i,o),null===e||Ba?(t.effectTag|=1,Ha(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),ic(e,t,o))}function Ka(e,t,n,r,o){if(yo(n)){var i=!0;So(t)}else i=!1;if(ci(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),xi(t,n,r),Oi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,c=t.memoizedProps;a.props=c;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=si(u):u=vo(t,u=yo(n)?mo:po.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||s!==u)&&Ti(t,a,r,u),ui=!1;var p=t.memoizedState;s=a.state=p;var d=t.updateQueue;null!==d&&(gi(t,d,r,a,o),s=t.memoizedState),c!==r||p!==s||ho.current||ui?("function"==typeof l&&(Ci(t,n,l,r),s=t.memoizedState),(c=ui||ki(t,n,c,r,p,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=c):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,c=t.memoizedProps,a.props=t.type===t.elementType?c:Qo(t.type,c),s=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=si(u):u=vo(t,u=yo(n)?mo:po.current),(f="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==r||s!==u)&&Ti(t,a,r,u),ui=!1,s=t.memoizedState,p=a.state=s,null!==(d=t.updateQueue)&&(gi(t,d,r,a,o),p=t.memoizedState),c!==r||s!==p||ho.current||ui?("function"==typeof l&&(Ci(t,n,l,r),p=t.memoizedState),(l=ui||ki(t,n,c,r,s,p,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=l):("function"!=typeof a.componentDidUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Ja(e,t,n,r,i,o)}function Ja(e,t,n,r,o,i){Ga(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Co(t,n,!1),ic(e,t,i);r=t.stateNode,za.current=t;var c=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ni(t,e.child,null,i),t.child=Ni(t,null,c,i)):Ha(e,t,c,i),t.memoizedState=r.state,o&&Co(t,n,!0),t.child}function Ya(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),zi(e,t.containerInfo)}var Xa,Qa,Za,ec={dehydrated:null,retryTime:0};function tc(e,t,n){var r,o=t.mode,i=t.pendingProps,a=qi.current,c=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(c=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),lo(qi,1&a),null===e){if(void 0!==i.fallback&&Aa(t),c){if(c=i.fallback,(i=Ms(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ms(c,o,n,null)).return=t,i.sibling=n,t.memoizedState=ec,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Mi(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,c){if(i=i.fallback,(n=Ds(e,e.pendingProps)).return=t,0==(2&t.mode)&&(c=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=c;null!==c;)c.return=n,c=c.sibling;return(o=Ds(o,i,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=ec,t.child=n,o}return n=Ni(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,c){if(c=i.fallback,(i=Ms(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ms(c,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=ec,t.child=i,n}return t.memoizedState=null,t.child=Ni(t,e,i.children,n)}function nc(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ai(e.return,t)}function rc(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function oc(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ha(e,t,r.children,n),0!=(2&(r=qi.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&nc(e,n);else if(19===e.tag)nc(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(qi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Vi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),rc(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Vi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}rc(t,!0,n,null,i,t.lastEffect);break;case"together":rc(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ic(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ps(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ac(e){e.effectTag|=4}function cc(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function sc(e){switch(e.tag){case 1:yo(e.type)&&go();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Bi(),bo(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Wi(e),null;case 13:return uo(qi),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(qi),null;case 4:return Bi(),null;case 10:return ii(e),null;default:return null}}function uc(e,t){return{value:e,source:t,stack:Q(t)}}Xa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Qa=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var c,s,u=t.stateNode;switch(Ui(Ai.current),e=null,n){case"input":a=xe(u,a),r=xe(u,r),e=[];break;case"option":a=De(u,a),r=De(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Me(u,a),r=Me(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=qn)}for(c in Bn(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c)for(s in u=a[c])u.hasOwnProperty(s)&&(n||(n={}),n[s]="");else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(d.hasOwnProperty(c)?e||(e=[]):(e=e||[]).push(c,null));for(c in r){var l=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&l!==u&&(null!=l||null!=u))if("style"===c)if(u){for(s in u)!u.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in l)l.hasOwnProperty(s)&&u[s]!==l[s]&&(n||(n={}),n[s]=l[s])}else n||(e||(e=[]),e.push(c,n)),n=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,u=u?u.__html:void 0,null!=l&&u!==l&&(e=e||[]).push(c,""+l)):"children"===c?u===l||"string"!=typeof l&&"number"!=typeof l||(e=e||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(d.hasOwnProperty(c)?(null!=l&&Wn(i,c),e||u===l||(e=[])):(e=e||[]).push(c,l))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&ac(t)}},Za=function(e,t,n,r){n!==r&&ac(t)};var lc="function"==typeof WeakSet?WeakSet:Set;function fc(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=Q(n)),null!==n&&X(n.type),t=t.value,null!==e&&1===e.tag&&X(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function pc(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){_s(e,t)}else t.current=null}function dc(e,t){switch(t.tag){case 0:case 11:case 15:hc(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function hc(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function mc(e,t,n){switch("function"==typeof Os&&Os(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){_s(o,e)}}e=e.next}while(e!==r)}))}break;case 1:pc(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){_s(e,t)}}(t,n);break;case 5:pc(t);break;case 4:bc(e,t,n)}}function vc(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&vc(t)}function yc(e){return 5===e.tag||3===e.tag||4===e.tag}function gc(e){e:{for(var t=e.return;null!==t;){if(yc(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(qe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yc(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i){var c=i?o.stateNode:o.stateNode.instance;if(n)if(r){var s=c;c=n,8===(i=t).nodeType?i.parentNode.insertBefore(s,c):i.insertBefore(s,c)}else t.insertBefore(c,n);else r?(8===(s=t).nodeType?(i=s.parentNode).insertBefore(c,s):(i=s).appendChild(c),null!=(s=s._reactRootContainer)||null!==i.onclick||(i.onclick=qn)):t.appendChild(c)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function bc(e,t,n){for(var r,o,i=t,c=!1;;){if(!c){c=i.return;e:for(;;){if(null===c)throw Error(a(160));switch(r=c.stateNode,c.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}c=c.return}c=!0}if(5===i.tag||6===i.tag){e:for(var s=e,u=i,l=n,f=u;;)if(mc(s,f,l),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===u)break;for(;null===f.sibling;){if(null===f.return||f.return===u)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(s=r,u=i.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(mc(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(c=!1)}i.sibling.return=i.return,i=i.sibling}}function wc(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hc(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[ar]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Oe(n,r),Hn(e,o),t=Hn(e,r),o=0;o<i.length;o+=2){var c=i[o],s=i[o+1];"style"===c?Un(n,s):"dangerouslySetInnerHTML"===c?We(n,s):"children"===c?qe(n,s):Se(n,c,s,t)}switch(e){case"input":Pe(n,r);break;case"textarea":Ae(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ne(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ne(n,!!r.multiple,r.defaultValue,!0):Ne(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,xt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,zc=Ho()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=Fn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Ec(t);break;case 19:Ec(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function Ec(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new lc),t.forEach((function(t){var r=xs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Sc="function"==typeof WeakMap?WeakMap:Map;function Cc(e,t,n){(n=pi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hc||(Hc=!0,Wc=r),fc(e,t)},n}function _c(e,t,n){(n=pi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return fc(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qc?qc=new Set([this]):qc.add(this),fc(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var kc,xc=Math.ceil,Tc=N.ReactCurrentDispatcher,Oc=N.ReactCurrentOwner,Pc=0,Rc=null,jc=null,Dc=0,Nc=0,Mc=null,Ic=1073741823,Ac=1073741823,Lc=null,Fc=0,Uc=!1,zc=0,Bc=null,Hc=!1,Wc=null,qc=null,Vc=!1,Gc=null,$c=90,Kc=null,Jc=0,Yc=null,Xc=0;function Qc(){return 0!=(48&Pc)?1073741821-(Ho()/10|0):0!==Xc?Xc:Xc=1073741821-(Ho()/10|0)}function Zc(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Wo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Pc))return Dc;if(null!==n)e=Xo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Xo(e,150,100);break;case 97:case 96:e=Xo(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Rc&&e===Dc&&--e,e}function es(e,t){if(50<Jc)throw Jc=0,Yc=null,Error(a(185));if(null!==(e=ts(e,t))){var n=Wo();1073741823===t?0!=(8&Pc)&&0==(48&Pc)?is(e):(rs(e),0===Pc&&Ko()):rs(e),0==(4&Pc)||98!==n&&99!==n||(null===Kc?Kc=new Map([[e,t]]):(void 0===(n=Kc.get(e))||n>t)&&Kc.set(e,t))}}function ts(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Rc===o&&(ps(t),4===Nc&&Us(o,Dc)),zs(o,t)),o}function ns(e){var t=e.lastExpiredTime;return 0!==t?t:Fs(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function rs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$o(is.bind(null,e));else{var t=ns(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Qc();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Ao&&xo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$o(is.bind(null,e)):Go(r,os.bind(null,e),{timeout:10*(1073741821-t)-Ho()}),e.callbackNode=t}}}function os(e,t){if(Xc=0,t)return Bs(e,t=Qc()),rs(e),null;var n=ns(e);if(0!==n){if(t=e.callbackNode,0!=(48&Pc))throw Error(a(327));if(Es(),e===Rc&&n===Dc||ss(e,n),null!==jc){var r=Pc;Pc|=16;for(var o=ls();;)try{hs();break}catch(t){us(e,t)}if(ri(),Pc=r,Tc.current=o,1===Nc)throw t=Mc,ss(e,n),Us(e,n),rs(e),t;if(null===jc)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Nc,Rc=null,r){case 0:case 1:throw Error(a(345));case 2:Bs(e,2<n?2:n);break;case 3:if(Us(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=ys(o)),1073741823===Ic&&10<(o=zc+500-Ho())){if(Uc){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,ss(e,n);break}}if(0!==(i=ns(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=er(gs.bind(null,e),o);break}gs(e);break;case 4:if(Us(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=ys(o)),Uc&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,ss(e,n);break}if(0!==(o=ns(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ac?r=10*(1073741821-Ac)-Ho():1073741823===Ic?r=0:(r=10*(1073741821-Ic)-5e3,0>(r=(o=Ho())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xc(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=er(gs.bind(null,e),r);break}gs(e);break;case 5:if(1073741823!==Ic&&null!==Lc){i=Ic;var c=Lc;if(0>=(r=0|c.busyMinDurationMs)?r=0:(o=0|c.busyDelayMs,r=(i=Ho()-(10*(1073741821-i)-(0|c.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Us(e,n),e.timeoutHandle=er(gs.bind(null,e),r);break}}gs(e);break;default:throw Error(a(329))}if(rs(e),e.callbackNode===t)return os.bind(null,e)}}return null}function is(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)gs(e);else{if(0!=(48&Pc))throw Error(a(327));if(Es(),e===Rc&&t===Dc||ss(e,t),null!==jc){var n=Pc;Pc|=16;for(var r=ls();;)try{ds();break}catch(t){us(e,t)}if(ri(),Pc=n,Tc.current=r,1===Nc)throw n=Mc,ss(e,t),Us(e,t),rs(e),n;if(null!==jc)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Rc=null,gs(e),rs(e)}}return null}function as(e,t){var n=Pc;Pc|=1;try{return e(t)}finally{0===(Pc=n)&&Ko()}}function cs(e,t){var n=Pc;Pc&=-2,Pc|=8;try{return e(t)}finally{0===(Pc=n)&&Ko()}}function ss(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,tr(n)),null!==jc)for(n=jc.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&go();break;case 3:Bi(),bo();break;case 5:Wi(r);break;case 4:Bi();break;case 13:case 19:uo(qi);break;case 10:ii(r)}n=n.return}Rc=e,jc=Ds(e.current,null),Dc=t,Nc=0,Mc=null,Ac=Ic=1073741823,Lc=null,Fc=0,Uc=!1}function us(e,t){for(;;){try{if(ri(),fa(),null===jc||null===jc.return)return Nc=1,Mc=t,null;e:{var n=e,r=jc.return,o=jc,i=t;if(t=Dc,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==i&&"object"==typeof i&&"function"==typeof i.then){var a=i,c=0!=(1&qi.current),s=r;do{var u;if(u=13===s.tag){var l=s.memoizedState;if(null!==l)u=null!==l.dehydrated;else{var f=s.memoizedProps;u=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!c)}}if(u){var p=s.updateQueue;if(null===p){var d=new Set;d.add(a),s.updateQueue=d}else p.add(a);if(0==(2&s.mode)){if(s.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=pi(1073741823,null);h.tag=2,hi(o,h)}o.expirationTime=1073741823;break e}i=void 0,o=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new Sc,i=new Set,m.set(a,i)):void 0===(i=m.get(a))&&(i=new Set,m.set(a,i)),!i.has(o)){i.add(o);var v=ks.bind(null,n,a,o);a.then(v,v)}s.effectTag|=4096,s.expirationTime=t;break e}s=s.return}while(null!==s);i=Error((X(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Q(o))}5!==Nc&&(Nc=2),i=uc(i,o),s=r;do{switch(s.tag){case 3:a=i,s.effectTag|=4096,s.expirationTime=t,mi(s,Cc(s,a,t));break e;case 1:a=i;var y=s.type,g=s.stateNode;if(0==(64&s.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===qc||!qc.has(g)))){s.effectTag|=4096,s.expirationTime=t,mi(s,_c(s,a,t));break e}}s=s.return}while(null!==s)}jc=vs(jc)}catch(e){t=e;continue}break}}function ls(){var e=Tc.current;return Tc.current=Oa,null===e?Oa:e}function fs(e,t){e<Ic&&2<e&&(Ic=e),null!==t&&e<Ac&&2<e&&(Ac=e,Lc=t)}function ps(e){e>Fc&&(Fc=e)}function ds(){for(;null!==jc;)jc=ms(jc)}function hs(){for(;null!==jc&&!To();)jc=ms(jc)}function ms(e){var t=kc(e.alternate,e,Dc);return e.memoizedProps=e.pendingProps,null===t&&(t=vs(e)),Oc.current=null,t}function vs(e){jc=e;do{var t=jc.alternate;if(e=jc.return,0==(2048&jc.effectTag)){e:{var n=t,r=Dc,i=(t=jc).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:yo(t.type)&&go();break;case 3:Bi(),bo(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(null===n||null===n.child)&&Fa(t)&&ac(t);break;case 5:Wi(t),r=Ui(Fi.current);var c=t.type;if(null!==n&&null!=t.stateNode)Qa(n,t,c,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var s=Ui(Ai.current);if(Fa(t)){var u=(i=t).stateNode;n=i.type;var l=i.memoizedProps,f=r;switch(u[ir]=i,u[ar]=l,c=void 0,r=u,n){case"iframe":case"object":case"embed":kn("load",r);break;case"video":case"audio":for(u=0;u<et.length;u++)kn(et[u],r);break;case"source":kn("error",r);break;case"img":case"image":case"link":kn("error",r),kn("load",r);break;case"form":kn("reset",r),kn("submit",r);break;case"details":kn("toggle",r);break;case"input":Te(r,l),kn("invalid",r),Wn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},kn("invalid",r),Wn(f,"onChange");break;case"textarea":Ie(r,l),kn("invalid",r),Wn(f,"onChange")}for(c in Bn(n,l),u=null,l)l.hasOwnProperty(c)&&(s=l[c],"children"===c?"string"==typeof s?r.textContent!==s&&(u=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(u=["children",""+s]):d.hasOwnProperty(c)&&null!=s&&Wn(f,c));switch(n){case"input":_e(r),Re(r,l,!0);break;case"textarea":_e(r),Le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=qn)}c=u,i.updateQueue=c,(i=null!==c)&&ac(t)}else{n=t,f=c,l=i,u=9===r.nodeType?r:r.ownerDocument,s===Fe&&(s=ze(f)),s===Fe?"script"===f?((l=u.createElement("div")).innerHTML="<script><\/script>",u=l.removeChild(l.firstChild)):"string"==typeof l.is?u=u.createElement(f,{is:l.is}):(u=u.createElement(f),"select"===f&&(f=u,l.multiple?f.multiple=!0:l.size&&(f.size=l.size))):u=u.createElementNS(s,f),(l=u)[ir]=n,l[ar]=i,Xa(l,t),t.stateNode=l;var p=r,h=Hn(f=c,n=i);switch(f){case"iframe":case"object":case"embed":kn("load",l),r=n;break;case"video":case"audio":for(r=0;r<et.length;r++)kn(et[r],l);r=n;break;case"source":kn("error",l),r=n;break;case"img":case"image":case"link":kn("error",l),kn("load",l),r=n;break;case"form":kn("reset",l),kn("submit",l),r=n;break;case"details":kn("toggle",l),r=n;break;case"input":Te(l,n),r=xe(l,n),kn("invalid",l),Wn(p,"onChange");break;case"option":r=De(l,n);break;case"select":l._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),kn("invalid",l),Wn(p,"onChange");break;case"textarea":Ie(l,n),r=Me(l,n),kn("invalid",l),Wn(p,"onChange");break;default:r=n}Bn(f,r),u=void 0,s=f;var m=l,v=r;for(u in v)if(v.hasOwnProperty(u)){var y=v[u];"style"===u?Un(m,y):"dangerouslySetInnerHTML"===u?null!=(y=y?y.__html:void 0)&&We(m,y):"children"===u?"string"==typeof y?("textarea"!==s||""!==y)&&qe(m,y):"number"==typeof y&&qe(m,""+y):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(d.hasOwnProperty(u)?null!=y&&Wn(p,u):null!=y&&Se(m,u,y,h))}switch(f){case"input":_e(l),Re(l,n,!1);break;case"textarea":_e(l),Le(l);break;case"option":null!=n.value&&l.setAttribute("value",""+Ee(n.value));break;case"select":(r=l).multiple=!!n.multiple,null!=(l=n.value)?Ne(r,!!n.multiple,l,!1):null!=n.defaultValue&&Ne(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(l.onclick=qn)}(i=Qn(c,i))&&ac(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)Za(0,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));r=Ui(Fi.current),Ui(Ai.current),Fa(t)?(c=(i=t).stateNode,r=i.memoizedProps,c[ir]=i,(i=c.nodeValue!==r)&&ac(t)):(c=t,(i=(9===r.nodeType?r:r.ownerDocument).createTextNode(i))[ir]=c,t.stateNode=i)}break;case 11:break;case 13:if(uo(qi),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}i=null!==i,c=!1,null===n?void 0!==t.memoizedProps.fallback&&Fa(t):(c=null!==(r=n.memoizedState),i||null===r||null!==(r=n.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=r,r.nextEffect=l):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),i&&!c&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&qi.current)?0===Nc&&(Nc=3):(0!==Nc&&3!==Nc||(Nc=4),0!==Fc&&null!==Rc&&(Us(Rc,Dc),zs(Rc,Fc)))),(i||c)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Bi();break;case 10:ii(t);break;case 9:case 14:break;case 17:yo(t.type)&&go();break;case 19:if(uo(qi),null===(i=t.memoizedState))break;if(c=0!=(64&t.effectTag),null===(l=i.rendering)){if(c)cc(i,!1);else if(0!==Nc||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(l=Vi(n))){for(t.effectTag|=64,cc(i,!1),null!==(c=l.updateQueue)&&(t.updateQueue=c,t.effectTag|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=r,c=t.child;null!==c;)n=i,(r=c).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(l=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=l.childExpirationTime,r.expirationTime=l.expirationTime,r.child=l.child,r.memoizedProps=l.memoizedProps,r.memoizedState=l.memoizedState,r.updateQueue=l.updateQueue,n=l.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),c=c.sibling;lo(qi,1&qi.current|2),t=t.child;break e}n=n.sibling}}else{if(!c)if(null!==(n=Vi(l))){if(t.effectTag|=64,c=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),cc(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate){null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else Ho()>i.tailExpiration&&1<r&&(t.effectTag|=64,c=!0,cc(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=i.last)?r.sibling=l:t.child=l,i.last=l)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=Ho()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,i=qi.current,lo(qi,i=c?1&i|2:1&i),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(i=jc,1===Dc||1!==i.childExpirationTime){for(c=0,r=i.child;null!==r;)(n=r.expirationTime)>c&&(c=n),(l=r.childExpirationTime)>c&&(c=l),r=r.sibling;i.childExpirationTime=c}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=jc.firstEffect),null!==jc.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=jc.firstEffect),e.lastEffect=jc.lastEffect),1<jc.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=jc:e.firstEffect=jc,e.lastEffect=jc))}else{if(null!==(t=sc(jc)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=jc.sibling))return t;jc=e}while(null!==jc);return 0===Nc&&(Nc=5),null}function ys(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function gs(e){var t=Wo();return Vo(99,bs.bind(null,e,t)),null}function bs(e,t){do{Es()}while(null!==Gc);if(0!=(48&Pc))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=ys(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Rc&&(jc=Rc=null,Dc=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Pc;Pc|=32,Oc.current=null,Yn=_n;var c=Kn();if(Jn(c)){if("selectionStart"in c)var s={start:c.selectionStart,end:c.selectionEnd};else e:{var u=(s=(s=c.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(u&&0!==u.rangeCount){s=u.anchorNode;var l=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var p=0,d=-1,h=-1,m=0,v=0,y=c,g=null;t:for(;;){for(var b;y!==s||0!==l&&3!==y.nodeType||(d=p+l),y!==f||0!==u&&3!==y.nodeType||(h=p+u),3===y.nodeType&&(p+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===c)break t;if(g===s&&++m===l&&(d=p),g===f&&++v===u&&(h=p),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}s=-1===d||-1===h?null:{start:d,end:h}}else s=null}s=s||{start:0,end:0}}else s=null;Xn={focusedElem:c,selectionRange:s},_n=!1,Bc=o;do{try{ws()}catch(e){if(null===Bc)throw Error(a(330));_s(Bc,e),Bc=Bc.nextEffect}}while(null!==Bc);Bc=o;do{try{for(c=e,s=t;null!==Bc;){var w=Bc.effectTag;if(16&w&&qe(Bc.stateNode,""),128&w){var E=Bc.alternate;if(null!==E){var S=E.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&w){case 2:gc(Bc),Bc.effectTag&=-3;break;case 6:gc(Bc),Bc.effectTag&=-3,wc(Bc.alternate,Bc);break;case 1024:Bc.effectTag&=-1025;break;case 1028:Bc.effectTag&=-1025,wc(Bc.alternate,Bc);break;case 4:wc(Bc.alternate,Bc);break;case 8:bc(c,l=Bc,s),vc(l)}Bc=Bc.nextEffect}}catch(e){if(null===Bc)throw Error(a(330));_s(Bc,e),Bc=Bc.nextEffect}}while(null!==Bc);if(S=Xn,E=Kn(),w=S.focusedElem,s=S.selectionRange,E!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==s&&Jn(w)&&(E=s.start,void 0===(S=s.end)&&(S=E),"selectionStart"in w?(w.selectionStart=E,w.selectionEnd=Math.min(S,w.value.length)):(S=(E=w.ownerDocument||document)&&E.defaultView||window).getSelection&&(S=S.getSelection(),l=w.textContent.length,c=Math.min(s.start,l),s=void 0===s.end?c:Math.min(s.end,l),!S.extend&&c>s&&(l=s,s=c,c=l),l=$n(w,c),f=$n(w,s),l&&f&&(1!==S.rangeCount||S.anchorNode!==l.node||S.anchorOffset!==l.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((E=E.createRange()).setStart(l.node,l.offset),S.removeAllRanges(),c>s?(S.addRange(E),S.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),S.addRange(E))))),E=[];for(S=w;S=S.parentNode;)1===S.nodeType&&E.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<E.length;w++)(S=E[w]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Xn=null,_n=!!Yn,Yn=null,e.current=n,Bc=o;do{try{for(w=r;null!==Bc;){var C=Bc.effectTag;if(36&C){var _=Bc.alternate;switch(S=w,(E=Bc).tag){case 0:case 11:case 15:hc(16,32,E);break;case 1:var k=E.stateNode;if(4&E.effectTag)if(null===_)k.componentDidMount();else{var x=E.elementType===E.type?_.memoizedProps:Qo(E.type,_.memoizedProps);k.componentDidUpdate(x,_.memoizedState,k.__reactInternalSnapshotBeforeUpdate)}var T=E.updateQueue;null!==T&&bi(0,T,k);break;case 3:var O=E.updateQueue;if(null!==O){if(c=null,null!==E.child)switch(E.child.tag){case 5:c=E.child.stateNode;break;case 1:c=E.child.stateNode}bi(0,O,c)}break;case 5:var P=E.stateNode;null===_&&4&E.effectTag&&Qn(E.type,E.memoizedProps)&&P.focus();break;case 6:case 4:case 12:break;case 13:if(null===E.memoizedState){var R=E.alternate;if(null!==R){var j=R.memoizedState;if(null!==j){var D=j.dehydrated;null!==D&&xt(D)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&C){E=void 0;var N=Bc.ref;if(null!==N){var M=Bc.stateNode;switch(Bc.tag){case 5:E=M;break;default:E=M}"function"==typeof N?N(E):N.current=E}}Bc=Bc.nextEffect}}catch(e){if(null===Bc)throw Error(a(330));_s(Bc,e),Bc=Bc.nextEffect}}while(null!==Bc);Bc=null,Lo(),Pc=i}else e.current=n;if(Vc)Vc=!1,Gc=e,$c=t;else for(Bc=o;null!==Bc;)t=Bc.nextEffect,Bc.nextEffect=null,Bc=t;if(0===(t=e.firstPendingTime)&&(qc=null),1073741823===t?e===Yc?Jc++:(Jc=0,Yc=e):Jc=0,"function"==typeof Ts&&Ts(n.stateNode,r),rs(e),Hc)throw Hc=!1,e=Wc,Wc=null,e;return 0!=(8&Pc)?null:(Ko(),null)}function ws(){for(;null!==Bc;){var e=Bc.effectTag;0!=(256&e)&&dc(Bc.alternate,Bc),0==(512&e)||Vc||(Vc=!0,Go(97,(function(){return Es(),null}))),Bc=Bc.nextEffect}}function Es(){if(90!==$c){var e=97<$c?97:$c;return $c=90,Vo(e,Ss)}}function Ss(){if(null===Gc)return!1;var e=Gc;if(Gc=null,0!=(48&Pc))throw Error(a(331));var t=Pc;for(Pc|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:hc(128,0,n),hc(0,64,n)}}catch(t){if(null===e)throw Error(a(330));_s(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Pc=t,Ko(),!0}function Cs(e,t,n){hi(e,t=Cc(e,t=uc(n,t),1073741823)),null!==(e=ts(e,1073741823))&&rs(e)}function _s(e,t){if(3===e.tag)Cs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Cs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qc||!qc.has(r))){hi(n,e=_c(n,e=uc(t,e),1073741823)),null!==(n=ts(n,1073741823))&&rs(n);break}}n=n.return}}function ks(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Rc===e&&Dc===n?4===Nc||3===Nc&&1073741823===Ic&&Ho()-zc<500?ss(e,Dc):Uc=!0:Fs(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),rs(e)))}function xs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Zc(t=Qc(),e,null)),null!==(e=ts(e,t))&&rs(e)}kc=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||ho.current)Ba=!0;else{if(r<n){switch(Ba=!1,t.tag){case 3:Ya(t),Ua();break;case 5:if(Hi(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:yo(t.type)&&So(t);break;case 4:zi(t,t.stateNode.containerInfo);break;case 10:oi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?tc(e,t,n):(lo(qi,1&qi.current),null!==(t=ic(e,t,n))?t.sibling:null);lo(qi,1&qi.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return oc(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),lo(qi,qi.current),!r)return null}return ic(e,t,n)}Ba=!1}}else Ba=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=vo(t,po.current),ci(t,n),o=la(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,fa(),yo(r)){var i=!0;So(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var c=r.getDerivedStateFromProps;"function"==typeof c&&Ci(t,r,c,e),o.updater=_i,t.stateNode=o,o._reactInternalFiber=t,Oi(t,r,e,n),t=Ja(null,t,r,!0,i,n)}else t.tag=0,Ha(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return js(e)?1:0;if(null!=e){if((e=e.$$typeof)===q)return 11;if(e===$)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=$a(null,t,o,e,n);break;case 1:t=Ka(null,t,o,e,n);break;case 11:t=Wa(null,t,o,e,n);break;case 14:t=qa(null,t,o,Qo(o.type,e),r,n);break;default:throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,$a(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ka(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Ya(t),null===(r=t.updateQueue))throw Error(a(282));if(o=null!==(o=t.memoizedState)?o.element:null,gi(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Ua(),t=ic(e,t,n);else{if((o=t.stateNode.hydrate)&&(Da=nr(t.stateNode.containerInfo.firstChild),ja=t,o=Na=!0),o)for(n=Mi(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ha(e,t,r,n),Ua();t=t.child}return t;case 5:return Hi(t),null===e&&Aa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,c=o.children,Zn(r,o)?c=null:null!==i&&Zn(r,i)&&(t.effectTag|=16),Ga(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ha(e,t,c,n),t=t.child),t;case 6:return null===e&&Aa(t),null;case 13:return tc(e,t,n);case 4:return zi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ni(t,null,r,n):Ha(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Ha(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ha(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,c=t.memoizedProps,oi(t,i=o.value),null!==c){var s=c.value;if(0===(i=Yr(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(c.children===o.children&&!ho.current){t=ic(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){c=s.child;for(var l=u.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&i)){1===s.tag&&((l=pi(n,null)).tag=2,hi(s,l)),s.expirationTime<n&&(s.expirationTime=n),null!==(l=s.alternate)&&l.expirationTime<n&&(l.expirationTime=n),ai(s.return,n),u.expirationTime<n&&(u.expirationTime=n);break}l=l.next}}else c=10===s.tag&&s.type===t.type?null:s.child;if(null!==c)c.return=s;else for(c=s;null!==c;){if(c===t){c=null;break}if(null!==(s=c.sibling)){s.return=c.return,c=s;break}c=c.return}s=c}}Ha(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ci(t,n),r=r(o=si(o,i.unstable_observedBits)),t.effectTag|=1,Ha(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),qa(e,t,o,i=Qo(o.type,i),r,n);case 15:return Va(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,yo(r)?(e=!0,So(t)):e=!1,ci(t,n),xi(t,r,o),Oi(t,r,o,n),Ja(null,t,r,!0,e,n);case 19:return oc(e,t,n)}throw Error(a(156,t.tag))};var Ts=null,Os=null;function Ps(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Rs(e,t,n,r){return new Ps(e,t,n,r)}function js(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Rs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ns(e,t,n,r,o,i){var c=2;if(r=e,"function"==typeof e)js(e)&&(c=1);else if("string"==typeof e)c=5;else e:switch(e){case F:return Ms(n.children,o,i,t);case W:c=8,o|=7;break;case U:c=8,o|=1;break;case z:return(e=Rs(12,n,t,8|o)).elementType=z,e.type=z,e.expirationTime=i,e;case V:return(e=Rs(13,n,t,o)).type=V,e.elementType=V,e.expirationTime=i,e;case G:return(e=Rs(19,n,t,o)).elementType=G,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:c=10;break e;case H:c=9;break e;case q:c=11;break e;case $:c=14;break e;case K:c=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Rs(c,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Ms(e,t,n,r){return(e=Rs(7,e,r,t)).expirationTime=n,e}function Is(e,t,n){return(e=Rs(6,e,null,t)).expirationTime=n,e}function As(e,t,n){return(t=Rs(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ls(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Fs(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Us(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function zs(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Bs(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Hs(e,t,n,r){var o=t.current,i=Qc(),c=Ei.suspense;i=Zc(i,o,c);e:if(n){t:{if(tt(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(yo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var u=n.type;if(yo(u)){n=Eo(n,u,s);break e}}n=s}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=pi(i,c)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),hi(o,t),es(o,i),i}function Ws(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function qs(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Vs(e,t){qs(e,t),(e=e.alternate)&&qs(e,t)}function Gs(e,t,n){var r=new Ls(e,t,n=null!=n&&!0===n.hydrate),o=Rs(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[cr]=r.current,n&&0!==t&&function(e){var t=Mn(e);vt.forEach((function(n){In(n,e,t)})),yt.forEach((function(n){In(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function $s(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ks(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var c=o;o=function(){var e=Ws(a);c.call(e)}}Hs(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gs(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Ws(a);s.call(e)}}cs((function(){Hs(t,a,e,o)}))}return Ws(a)}function Js(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:L,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ys(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$s(t))throw Error(a(200));return Js(e,t,null,n)}Gs.prototype.render=function(e,t){Hs(e,this._internalRoot,null,void 0===t?null:t)},Gs.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;Hs(null,t,null,(function(){r[cr]=null,null!==n&&n()}))},it=function(e){if(13===e.tag){var t=Xo(Qc(),150,100);es(e,t),Vs(e,t)}},at=function(e){if(13===e.tag){Qc();var t=Yo++;es(e,t),Vs(e,t)}},ct=function(e){if(13===e.tag){var t=Qc();es(e,t=Zc(t,e,null)),Vs(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Pe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=fr(r);if(!o)throw Error(a(90));ke(r),Pe(r,o)}}}break;case"textarea":Ae(e,n);break;case"select":null!=(t=n.value)&&Ne(e,!!n.multiple,t,!1)}},ae=as,ce=function(e,t,n,r){var o=Pc;Pc|=4;try{return Vo(98,e.bind(null,t,n,r))}finally{0===(Pc=o)&&Ko()}},se=function(){0==(49&Pc)&&(function(){if(null!==Kc){var e=Kc;Kc=null,e.forEach((function(e,t){Bs(t,e),rs(t)})),Ko()}}(),Es())},ue=function(e,t){var n=Pc;Pc|=2;try{return e(t)}finally{0===(Pc=n)&&Ko()}};var Xs,Qs,Zs={createPortal:Ys,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=ot(t))?null:e.stateNode},hydrate:function(e,t,n){if(!$s(t))throw Error(a(200));return Ks(null,e,t,!0,n)},render:function(e,t,n){if(!$s(t))throw Error(a(200));return Ks(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!$s(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Ks(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!$s(e))throw Error(a(40));return!!e._reactRootContainer&&(cs((function(){Ks(null,null,e,!1,(function(){e._reactRootContainer=null,e[cr]=null}))})),!0)},unstable_createPortal:function(){return Ys.apply(void 0,arguments)},unstable_batchedUpdates:as,flushSync:function(e,t){if(0!=(48&Pc))throw Error(a(187));var n=Pc;Pc|=1;try{return Vo(99,e.bind(null,t))}finally{Pc=n,Ko()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[ur,lr,fr,j.injectEventPluginsByName,p,Nt,function(e){T(e,Dt)},oe,ie,Rn,R,Es,{current:!1}]}};Qs=(Xs={findFiberByHostInstance:sr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ts=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Os=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Xs,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:N.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ot(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Qs?Qs(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var eu={default:Zs},tu=eu&&Zs||eu;e.exports=tu.default||tu},function(e,t,n){"use strict";e.exports=n(71)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,c;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,u=null,l=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(l,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(l,0))},o=function(e,t){u=setTimeout(e,t)},i=function(){clearTimeout(u)},a=function(){return!1},c=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var y=d.now();t.unstable_now=function(){return d.now()-y}}var g=!1,b=null,w=-1,E=5,S=0;a=function(){return t.unstable_now()>=S},c=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var C=new MessageChannel,_=C.port2;C.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();S=e+E;try{b(!0,e)?_.postMessage(null):(g=!1,b=null)}catch(e){throw _.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,_.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){m(w),w=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<O(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],c=i+1,s=e[c];if(void 0!==a&&0>O(a,n))void 0!==s&&0>O(s,a)?(e[r]=s,e[c]=n,r=c):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>O(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],R=[],j=1,D=null,N=3,M=!1,I=!1,A=!1;function L(e){for(var t=x(R);null!==t;){if(null===t.callback)T(R);else{if(!(t.startTime<=e))break;T(R),t.sortIndex=t.expirationTime,k(P,t)}t=x(R)}}function F(e){if(A=!1,L(e),!I)if(null!==x(P))I=!0,r(U);else{var t=x(R);null!==t&&o(F,t.startTime-e)}}function U(e,n){I=!1,A&&(A=!1,i()),M=!0;var r=N;try{for(L(n),D=x(P);null!==D&&(!(D.expirationTime>n)||e&&!a());){var c=D.callback;if(null!==c){D.callback=null,N=D.priorityLevel;var s=c(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?D.callback=s:D===x(P)&&T(P),L(n)}else T(P);D=x(P)}if(null!==D)var u=!0;else{var l=x(R);null!==l&&o(F,l.startTime-n),u=!1}return u}finally{D=null,N=r,M=!1}}function z(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=c;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,a){var c=t.unstable_now();if("object"==typeof a&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?c+s:c,a="number"==typeof a.timeout?a.timeout:z(e)}else a=z(e),s=c;return e={id:j++,callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>c?(e.sortIndex=s,k(R,e),null===x(P)&&e===x(R)&&(A?i():A=!0,o(F,s-c))):(e.sortIndex=a,k(P,e),I||M||(I=!0,r(U))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=x(P);return n!==D&&null!==D&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<D.expirationTime||a()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){I||M||(I=!0,r(U))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return x(P)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=n(73);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case s:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case d:case y:case v:case u:return e;default:return t}}case i:return t}}}function S(e){return E(e)===p}t.typeOf=E,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=l,t.ContextProvider=u,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=s,t.StrictMode=c,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===s||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===u||e.$$typeof===l||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w)},t.isAsyncMode=function(e){return S(e)||E(e)===f},t.isConcurrentMode=S,t.isContextConsumer=function(e){return E(e)===l},t.isContextProvider=function(e){return E(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===d},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===s},t.isStrictMode=function(e){return E(e)===c},t.isSuspense=function(e){return E(e)===h}},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(e,t,n,r){var o=t&&t.prototype instanceof l?t:l,i=Object.create(o.prototype),a=new S(r||[]);return i._invoke=function(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return _()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=b(a,n);if(c){if(c===u)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=s(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var u={};function l(){}function f(){}function p(){}var d={};d[o]=function(){return this};var h=Object.getPrototypeOf,m=h&&h(h(C([])));m&&m!==t&&n.call(m,o)&&(d=m);var v=p.prototype=l.prototype=Object.create(d);function y(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function g(e){var t;this._invoke=function(r,o){function i(){return new Promise((function(t,i){!function t(r,o,i,a){var c=s(e[r],e,o);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==typeof l&&n.call(l,"__await")?Promise.resolve(l.__await).then((function(e){t("next",e,i,a)}),(function(e){t("throw",e,i,a)})):Promise.resolve(l).then((function(e){u.value=e,i(u)}),(function(e){return t("throw",e,i,a)}))}a(c.arg)}(r,o,t,i)}))}return t=t?t.then(i,i):i()}}function b(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,b(e,t),"throw"===t.method))return u;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=s(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,u;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,u):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,u)}function w(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(w,this),this.reset(!0)}function C(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:_}}function _(){return{value:void 0,done:!0}}return f.prototype=v.constructor=p,p.constructor=f,p[a]=f.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,a in e||(e[a]="GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},y(g.prototype),g.prototype[i]=function(){return this},e.AsyncIterator=g,e.async=function(t,n,r,o){var i=new g(c(t,n,r,o));return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},y(v),v[a]="Generator",v[o]=function(){return this},v.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=C,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),u},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),u}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),u}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CopyToClipboard=void 0;var r=i(n(0)),o=i(n(78));function i(e){return e&&e.__esModule?e:{default:e}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?d(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var v=function(e){function t(){var e,n;u(this,t);for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];return m(d(n=f(this,(e=p(t)).call.apply(e,[this].concat(a)))),"onClick",(function(e){var t=n.props,i=t.text,a=t.onCopy,c=t.children,s=t.options,u=r.default.Children.only(c),l=(0,o.default)(i,s);a&&a(i,l),u&&u.props&&"function"==typeof u.props.onClick&&u.props.onClick(e)})),n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),n=t,(i=[{key:"render",value:function(){var e=this.props,t=(e.text,e.onCopy,e.options,e.children),n=s(e,["text","onCopy","options","children"]),o=r.default.Children.only(t);return r.default.cloneElement(o,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(n,!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n,{onClick:this.onClick}))}}])&&l(n.prototype,i),a&&l(n,a),t}(r.default.PureComponent);t.CopyToClipboard=v,m(v,"defaultProps",{onCopy:void 0,options:void 0})},function(e,t,n){"use strict";var r=n(79);e.exports=function(e,t){var n,o,i,a,c,s,u=!1;t||(t={}),n=t.debug||!1;try{if(i=r(),a=document.createRange(),c=document.getSelection(),(s=document.createElement("span")).textContent=e,s.style.all="unset",s.style.position="fixed",s.style.top=0,s.style.clip="rect(0, 0, 0, 0)",s.style.whiteSpace="pre",s.style.webkitUserSelect="text",s.style.MozUserSelect="text",s.style.msUserSelect="text",s.style.userSelect="text",s.addEventListener("copy",(function(n){n.stopPropagation(),t.format&&(n.preventDefault(),n.clipboardData.clearData(),n.clipboardData.setData(t.format,e))})),document.body.appendChild(s),a.selectNodeContents(s),c.addRange(a),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");u=!0}catch(r){n&&console.error("unable to copy using execCommand: ",r),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),u=!0}catch(r){n&&console.error("unable to copy using clipboardData: ",r),n&&console.error("falling back to prompt"),o=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:"Copy to clipboard: #{key}, Enter"),window.prompt(o,e)}}finally{c&&("function"==typeof c.removeRange?c.removeRange(a):c.removeAllRanges()),s&&document.body.removeChild(s),i()}return u}},function(e,t){e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],r=0;r<e.rangeCount;r++)n.push(e.getRangeAt(r));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}},function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},function(e,t,n){var r=n(83),o=n(84),i=n(85),a=n(86),c=n(45);function s(e,t){this.typeNumber=e,this.errorCorrectLevel=t,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}var u=s.prototype;u.addData=function(e){var t=new r(e);this.dataList.push(t),this.dataCache=null},u.isDark=function(e,t){if(e<0||this.moduleCount<=e||t<0||this.moduleCount<=t)throw new Error(e+","+t);return this.modules[e][t]},u.getModuleCount=function(){return this.moduleCount},u.make=function(){if(this.typeNumber<1){var e=1;for(e=1;e<40;e++){for(var t=o.getRSBlocks(e,this.errorCorrectLevel),n=new i,r=0,c=0;c<t.length;c++)r+=t[c].dataCount;for(c=0;c<this.dataList.length;c++){var s=this.dataList[c];n.put(s.mode,4),n.put(s.getLength(),a.getLengthInBits(s.mode,e)),s.write(n)}if(n.getLengthInBits()<=8*r)break}this.typeNumber=e}this.makeImpl(!1,this.getBestMaskPattern())},u.makeImpl=function(e,t){this.moduleCount=4*this.typeNumber+17,this.modules=new Array(this.moduleCount);for(var n=0;n<this.moduleCount;n++){this.modules[n]=new Array(this.moduleCount);for(var r=0;r<this.moduleCount;r++)this.modules[n][r]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(e,t),this.typeNumber>=7&&this.setupTypeNumber(e),null==this.dataCache&&(this.dataCache=s.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,t)},u.setupPositionProbePattern=function(e,t){for(var n=-1;n<=7;n++)if(!(e+n<=-1||this.moduleCount<=e+n))for(var r=-1;r<=7;r++)t+r<=-1||this.moduleCount<=t+r||(this.modules[e+n][t+r]=0<=n&&n<=6&&(0==r||6==r)||0<=r&&r<=6&&(0==n||6==n)||2<=n&&n<=4&&2<=r&&r<=4)},u.getBestMaskPattern=function(){for(var e=0,t=0,n=0;n<8;n++){this.makeImpl(!0,n);var r=a.getLostPoint(this);(0==n||e>r)&&(e=r,t=n)}return t},u.createMovieClip=function(e,t,n){var r=e.createEmptyMovieClip(t,n);this.make();for(var o=0;o<this.modules.length;o++)for(var i=1*o,a=0;a<this.modules[o].length;a++){var c=1*a;this.modules[o][a]&&(r.beginFill(0,100),r.moveTo(c,i),r.lineTo(c+1,i),r.lineTo(c+1,i+1),r.lineTo(c,i+1),r.endFill())}return r},u.setupTimingPattern=function(){for(var e=8;e<this.moduleCount-8;e++)null==this.modules[e][6]&&(this.modules[e][6]=e%2==0);for(var t=8;t<this.moduleCount-8;t++)null==this.modules[6][t]&&(this.modules[6][t]=t%2==0)},u.setupPositionAdjustPattern=function(){for(var e=a.getPatternPosition(this.typeNumber),t=0;t<e.length;t++)for(var n=0;n<e.length;n++){var r=e[t],o=e[n];if(null==this.modules[r][o])for(var i=-2;i<=2;i++)for(var c=-2;c<=2;c++)this.modules[r+i][o+c]=-2==i||2==i||-2==c||2==c||0==i&&0==c}},u.setupTypeNumber=function(e){for(var t=a.getBCHTypeNumber(this.typeNumber),n=0;n<18;n++){var r=!e&&1==(t>>n&1);this.modules[Math.floor(n/3)][n%3+this.moduleCount-8-3]=r}for(n=0;n<18;n++){r=!e&&1==(t>>n&1);this.modules[n%3+this.moduleCount-8-3][Math.floor(n/3)]=r}},u.setupTypeInfo=function(e,t){for(var n=this.errorCorrectLevel<<3|t,r=a.getBCHTypeInfo(n),o=0;o<15;o++){var i=!e&&1==(r>>o&1);o<6?this.modules[o][8]=i:o<8?this.modules[o+1][8]=i:this.modules[this.moduleCount-15+o][8]=i}for(o=0;o<15;o++){i=!e&&1==(r>>o&1);o<8?this.modules[8][this.moduleCount-o-1]=i:o<9?this.modules[8][15-o-1+1]=i:this.modules[8][15-o-1]=i}this.modules[this.moduleCount-8][8]=!e},u.mapData=function(e,t){for(var n=-1,r=this.moduleCount-1,o=7,i=0,c=this.moduleCount-1;c>0;c-=2)for(6==c&&c--;;){for(var s=0;s<2;s++)if(null==this.modules[r][c-s]){var u=!1;i<e.length&&(u=1==(e[i]>>>o&1)),a.getMask(t,r,c-s)&&(u=!u),this.modules[r][c-s]=u,-1==--o&&(i++,o=7)}if((r+=n)<0||this.moduleCount<=r){r-=n,n=-n;break}}},s.PAD0=236,s.PAD1=17,s.createData=function(e,t,n){for(var r=o.getRSBlocks(e,t),c=new i,u=0;u<n.length;u++){var l=n[u];c.put(l.mode,4),c.put(l.getLength(),a.getLengthInBits(l.mode,e)),l.write(c)}var f=0;for(u=0;u<r.length;u++)f+=r[u].dataCount;if(c.getLengthInBits()>8*f)throw new Error("code length overflow. ("+c.getLengthInBits()+">"+8*f+")");for(c.getLengthInBits()+4<=8*f&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;!(c.getLengthInBits()>=8*f||(c.put(s.PAD0,8),c.getLengthInBits()>=8*f));)c.put(s.PAD1,8);return s.createBytes(c,r)},s.createBytes=function(e,t){for(var n=0,r=0,o=0,i=new Array(t.length),s=new Array(t.length),u=0;u<t.length;u++){var l=t[u].dataCount,f=t[u].totalCount-l;r=Math.max(r,l),o=Math.max(o,f),i[u]=new Array(l);for(var p=0;p<i[u].length;p++)i[u][p]=255&e.buffer[p+n];n+=l;var d=a.getErrorCorrectPolynomial(f),h=new c(i[u],d.getLength()-1).mod(d);s[u]=new Array(d.getLength()-1);for(p=0;p<s[u].length;p++){var m=p+h.getLength()-s[u].length;s[u][p]=m>=0?h.get(m):0}}var v=0;for(p=0;p<t.length;p++)v+=t[p].totalCount;var y=new Array(v),g=0;for(p=0;p<r;p++)for(u=0;u<t.length;u++)p<i[u].length&&(y[g++]=i[u][p]);for(p=0;p<o;p++)for(u=0;u<t.length;u++)p<s[u].length&&(y[g++]=s[u][p]);return y},e.exports=s},function(e,t,n){var r=n(43);function o(e){this.mode=r.MODE_8BIT_BYTE,this.data=e}o.prototype={getLength:function(e){return this.data.length},write:function(e){for(var t=0;t<this.data.length;t++)e.put(this.data.charCodeAt(t),8)}},e.exports=o},function(e,t,n){var r=n(44);function o(e,t){this.totalCount=e,this.dataCount=t}o.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],o.getRSBlocks=function(e,t){var n=o.getRsBlockTable(e,t);if(null==n)throw new Error("bad rs block @ typeNumber:"+e+"/errorCorrectLevel:"+t);for(var r=n.length/3,i=new Array,a=0;a<r;a++)for(var c=n[3*a+0],s=n[3*a+1],u=n[3*a+2],l=0;l<c;l++)i.push(new o(s,u));return i},o.getRsBlockTable=function(e,t){switch(t){case r.L:return o.RS_BLOCK_TABLE[4*(e-1)+0];case r.M:return o.RS_BLOCK_TABLE[4*(e-1)+1];case r.Q:return o.RS_BLOCK_TABLE[4*(e-1)+2];case r.H:return o.RS_BLOCK_TABLE[4*(e-1)+3];default:return}},e.exports=o},function(e,t){function n(){this.buffer=new Array,this.length=0}n.prototype={get:function(e){var t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(var n=0;n<t;n++)this.putBit(1==(e>>>t-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){var t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=n},function(e,t,n){var r=n(43),o=n(45),i=n(46),a=0,c=1,s=2,u=3,l=4,f=5,p=6,d=7,h={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(e){for(var t=e<<10;h.getBCHDigit(t)-h.getBCHDigit(h.G15)>=0;)t^=h.G15<<h.getBCHDigit(t)-h.getBCHDigit(h.G15);return(e<<10|t)^h.G15_MASK},getBCHTypeNumber:function(e){for(var t=e<<12;h.getBCHDigit(t)-h.getBCHDigit(h.G18)>=0;)t^=h.G18<<h.getBCHDigit(t)-h.getBCHDigit(h.G18);return e<<12|t},getBCHDigit:function(e){for(var t=0;0!=e;)t++,e>>>=1;return t},getPatternPosition:function(e){return h.PATTERN_POSITION_TABLE[e-1]},getMask:function(e,t,n){switch(e){case a:return(t+n)%2==0;case c:return t%2==0;case s:return n%3==0;case u:return(t+n)%3==0;case l:return(Math.floor(t/2)+Math.floor(n/3))%2==0;case f:return t*n%2+t*n%3==0;case p:return(t*n%2+t*n%3)%2==0;case d:return(t*n%3+(t+n)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}},getErrorCorrectPolynomial:function(e){for(var t=new o([1],0),n=0;n<e;n++)t=t.multiply(new o([1,i.gexp(n)],0));return t},getLengthInBits:function(e,t){if(1<=t&&t<10)switch(e){case r.MODE_NUMBER:return 10;case r.MODE_ALPHA_NUM:return 9;case r.MODE_8BIT_BYTE:case r.MODE_KANJI:return 8;default:throw new Error("mode:"+e)}else if(t<27)switch(e){case r.MODE_NUMBER:return 12;case r.MODE_ALPHA_NUM:return 11;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 10;default:throw new Error("mode:"+e)}else{if(!(t<41))throw new Error("type:"+t);switch(e){case r.MODE_NUMBER:return 14;case r.MODE_ALPHA_NUM:return 13;case r.MODE_8BIT_BYTE:return 16;case r.MODE_KANJI:return 12;default:throw new Error("mode:"+e)}}},getLostPoint:function(e){for(var t=e.getModuleCount(),n=0,r=0;r<t;r++)for(var o=0;o<t;o++){for(var i=0,a=e.isDark(r,o),c=-1;c<=1;c++)if(!(r+c<0||t<=r+c))for(var s=-1;s<=1;s++)o+s<0||t<=o+s||0==c&&0==s||a==e.isDark(r+c,o+s)&&i++;i>5&&(n+=3+i-5)}for(r=0;r<t-1;r++)for(o=0;o<t-1;o++){var u=0;e.isDark(r,o)&&u++,e.isDark(r+1,o)&&u++,e.isDark(r,o+1)&&u++,e.isDark(r+1,o+1)&&u++,0!=u&&4!=u||(n+=3)}for(r=0;r<t;r++)for(o=0;o<t-6;o++)e.isDark(r,o)&&!e.isDark(r,o+1)&&e.isDark(r,o+2)&&e.isDark(r,o+3)&&e.isDark(r,o+4)&&!e.isDark(r,o+5)&&e.isDark(r,o+6)&&(n+=40);for(o=0;o<t;o++)for(r=0;r<t-6;r++)e.isDark(r,o)&&!e.isDark(r+1,o)&&e.isDark(r+2,o)&&e.isDark(r+3,o)&&e.isDark(r+4,o)&&!e.isDark(r+5,o)&&e.isDark(r+6,o)&&(n+=40);var l=0;for(o=0;o<t;o++)for(r=0;r<t;r++)e.isDark(r,o)&&l++;return n+=10*(Math.abs(100*l/t/t-50)/5)}};e.exports=h},function(e,t,n){"use strict";var r=n(9),o=n(47),i=n(88),a=n(53);function c(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var s=c(n(50));s.Axios=i,s.create=function(e){return c(a(s.defaults,e))},s.Cancel=n(54),s.CancelToken=n(101),s.isCancel=n(49),s.all=function(e){return Promise.all(e)},s.spread=n(102),e.exports=s,e.exports.default=s},function(e,t,n){"use strict";var r=n(9),o=n(48),i=n(89),a=n(90),c=n(53);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=c(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},s.prototype.getUri=function(e){return e=c(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=s},function(e,t,n){"use strict";var r=n(9);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(9),o=n(91),i=n(49),a=n(50);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(52);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(96),o=n(97);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(9),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(9);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(9);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var c=[];c.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&c.push("expires="+new Date(n).toGMTString()),r.isString(o)&&c.push("path="+o),r.isString(i)&&c.push("domain="+i),!0===a&&c.push("secure"),document.cookie=c.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(54);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"shimGetUserMedia",(function(){return T})),n.d(r,"shimGetDisplayMedia",(function(){return O})),n.d(r,"shimMediaStream",(function(){return P})),n.d(r,"shimOnTrack",(function(){return R})),n.d(r,"shimGetSendersWithDtmf",(function(){return j})),n.d(r,"shimGetStats",(function(){return D})),n.d(r,"shimSenderReceiverGetStats",(function(){return N})),n.d(r,"shimAddTrackRemoveTrackWithNative",(function(){return M})),n.d(r,"shimAddTrackRemoveTrack",(function(){return I})),n.d(r,"shimPeerConnection",(function(){return A})),n.d(r,"fixNegotiationNeeded",(function(){return L}));var o={};n.r(o),n.d(o,"shimGetUserMedia",(function(){return z})),n.d(o,"shimGetDisplayMedia",(function(){return B})),n.d(o,"shimPeerConnection",(function(){return H})),n.d(o,"shimReplaceTrack",(function(){return W}));var i={};n.r(i),n.d(i,"shimGetUserMedia",(function(){return q})),n.d(i,"shimGetDisplayMedia",(function(){return V})),n.d(i,"shimOnTrack",(function(){return G})),n.d(i,"shimPeerConnection",(function(){return $})),n.d(i,"shimSenderGetStats",(function(){return K})),n.d(i,"shimReceiverGetStats",(function(){return J})),n.d(i,"shimRemoveStream",(function(){return Y})),n.d(i,"shimRTCDataChannel",(function(){return X})),n.d(i,"shimAddTransceiver",(function(){return Q})),n.d(i,"shimCreateOffer",(function(){return Z})),n.d(i,"shimCreateAnswer",(function(){return ee}));var a={};n.r(a),n.d(a,"shimLocalStreamsAPI",(function(){return te})),n.d(a,"shimRemoteStreamsAPI",(function(){return ne})),n.d(a,"shimCallbacksAPI",(function(){return re})),n.d(a,"shimGetUserMedia",(function(){return oe})),n.d(a,"shimConstraints",(function(){return ie})),n.d(a,"shimRTCIceServerUrls",(function(){return ae})),n.d(a,"shimTrackEventTransceiver",(function(){return ce})),n.d(a,"shimCreateOfferLegacy",(function(){return se}));var c={};n.r(c),n.d(c,"shimRTCIceCandidate",(function(){return fe})),n.d(c,"shimMaxMessageSize",(function(){return pe})),n.d(c,"shimSendThrowTypeError",(function(){return de})),n.d(c,"shimConnectionState",(function(){return he})),n.d(c,"removeAllowExtmapMixed",(function(){return me}));var s={};n.r(s),n.d(s,"FunctionToString",(function(){return Rt})),n.d(s,"InboundFilters",(function(){return Ft}));var u={};n.r(u),n.d(u,"initialize",(function(){return jr})),n.d(u,"ga",(function(){return Dr})),n.d(u,"set",(function(){return Nr})),n.d(u,"send",(function(){return Mr})),n.d(u,"pageview",(function(){return Ir})),n.d(u,"modalview",(function(){return Ar})),n.d(u,"timing",(function(){return Lr})),n.d(u,"event",(function(){return Fr})),n.d(u,"exception",(function(){return Ur})),n.d(u,"plugin",(function(){return zr})),n.d(u,"outboundLink",(function(){return Br})),n.d(u,"testModeAPI",(function(){return Hr})),n.d(u,"default",(function(){return Wr}));n(67);var l=n(0),f=n.n(l),p=n(17),d=n.n(p);let h=!0,m=!0;function v(e,t,n){const r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}function y(e,t,n){if(!e.RTCPeerConnection)return;const r=e.RTCPeerConnection.prototype,o=r.addEventListener;r.addEventListener=function(e,r){if(e!==t)return o.apply(this,arguments);const i=e=>{const t=n(e);t&&r(t)};return this._eventMap=this._eventMap||{},this._eventMap[r]=i,o.apply(this,[e,i])};const i=r.removeEventListener;r.removeEventListener=function(e,n){if(e!==t||!this._eventMap||!this._eventMap[n])return i.apply(this,arguments);const r=this._eventMap[n];return delete this._eventMap[n],i.apply(this,[e,r])},Object.defineProperty(r,"on"+t,{get(){return this["_on"+t]},set(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)},enumerable:!0,configurable:!0})}function g(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(h=e,e?"adapter.js logging disabled":"adapter.js logging enabled")}function b(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(m=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))}function w(){if("object"==typeof window){if(h)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}}function E(e,t){m&&console.warn(e+" is deprecated, please use "+t+" instead.")}function S(e){const{navigator:t}=e,n={browser:null,version:null};if(void 0===e||!e.navigator)return n.browser="Not a browser.",n;if(t.mozGetUserMedia)n.browser="firefox",n.version=v(t.userAgent,/Firefox\/(\d+)\./,1);else if(t.webkitGetUserMedia||!1===e.isSecureContext&&e.webkitRTCPeerConnection&&!e.RTCIceGatherer)n.browser="chrome",n.version=v(t.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(t.mediaDevices&&t.userAgent.match(/Edge\/(\d+).(\d+)$/))n.browser="edge",n.version=v(t.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!e.RTCPeerConnection||!t.userAgent.match(/AppleWebKit\/(\d+)\./))return n.browser="Not a supported browser.",n;n.browser="safari",n.version=v(t.userAgent,/AppleWebKit\/(\d+)\./,1),n.supportsUnifiedPlan=e.RTCRtpTransceiver&&"currentDirection"in e.RTCRtpTransceiver.prototype}return n}function C(e){return"[object Object]"===Object.prototype.toString.call(e)}function _(e){return C(e)?Object.keys(e).reduce((function(t,n){const r=C(e[n]),o=r?_(e[n]):e[n],i=r&&!Object.keys(o).length;return void 0===o||i?t:Object.assign(t,{[n]:o})}),{}):e}function k(e,t,n){const r=n?"outbound-rtp":"inbound-rtp",o=new Map;if(null===t)return o;const i=[];return e.forEach(e=>{"track"===e.type&&e.trackIdentifier===t.id&&i.push(e)}),i.forEach(t=>{e.forEach(n=>{n.type===r&&n.trackId===t.id&&function e(t,n,r){n&&!r.has(n.id)&&(r.set(n.id,n),Object.keys(n).forEach(o=>{o.endsWith("Id")?e(t,t.get(n[o]),r):o.endsWith("Ids")&&n[o].forEach(n=>{e(t,t.get(n),r)})}))}(e,n,o)})}),o}const x=w;function T(e){const t=e&&e.navigator;if(!t.mediaDevices)return;const n=S(e),r=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;const t={};return Object.keys(e).forEach(n=>{if("require"===n||"advanced"===n||"mediaSource"===n)return;const r="object"==typeof e[n]?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);const o=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];let e={};"number"==typeof r.ideal?(e[o("min",n)]=r.ideal,t.optional.push(e),e={},e[o("max",n)]=r.ideal,t.optional.push(e)):(e[o("",n)]=r.ideal,t.optional.push(e))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[o("",n)]=r.exact):["min","max"].forEach(e=>{void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[o(e,n)]=r[e])})}),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},o=function(e,o){if(n.version>=61)return o(e);if((e=JSON.parse(JSON.stringify(e)))&&"object"==typeof e.audio){const t=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])};t((e=JSON.parse(JSON.stringify(e))).audio,"autoGainControl","googAutoGainControl"),t(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=r(e.audio)}if(e&&"object"==typeof e.video){let i=e.video.facingMode;i=i&&("object"==typeof i?i:{ideal:i});const a=n.version<66;if(i&&("user"===i.exact||"environment"===i.exact||"user"===i.ideal||"environment"===i.ideal)&&(!t.mediaDevices.getSupportedConstraints||!t.mediaDevices.getSupportedConstraints().facingMode||a)){let n;if(delete e.video.facingMode,"environment"===i.exact||"environment"===i.ideal?n=["back","rear"]:"user"!==i.exact&&"user"!==i.ideal||(n=["front"]),n)return t.mediaDevices.enumerateDevices().then(t=>{let a=(t=t.filter(e=>"videoinput"===e.kind)).find(e=>n.some(t=>e.label.toLowerCase().includes(t)));return!a&&t.length&&n.includes("back")&&(a=t[t.length-1]),a&&(e.video.deviceId=i.exact?{exact:a.deviceId}:{ideal:a.deviceId}),e.video=r(e.video),x("chrome: "+JSON.stringify(e)),o(e)})}e.video=r(e.video)}return x("chrome: "+JSON.stringify(e)),o(e)},i=function(e){return n.version>=64?e:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString(){return this.name+(this.message&&": ")+this.message}}};if(t.getUserMedia=function(e,n,r){o(e,e=>{t.webkitGetUserMedia(e,n,e=>{r&&r(i(e))})})}.bind(t),t.mediaDevices.getUserMedia){const e=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(t){return o(t,t=>e(t).then(e=>{if(t.audio&&!e.getAudioTracks().length||t.video&&!e.getVideoTracks().length)throw e.getTracks().forEach(e=>{e.stop()}),new DOMException("","NotFoundError");return e},e=>Promise.reject(i(e))))}}}function O(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&("function"==typeof t?e.navigator.mediaDevices.getDisplayMedia=function(n){return t(n).then(t=>{const r=n.video&&n.video.width,o=n.video&&n.video.height,i=n.video&&n.video.frameRate;return n.video={mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:t,maxFrameRate:i||3}},r&&(n.video.mandatory.maxWidth=r),o&&(n.video.mandatory.maxHeight=o),e.navigator.mediaDevices.getUserMedia(n)})}:console.error("shimGetDisplayMedia: getSourceId argument is not a function"))}function P(e){e.MediaStream=e.MediaStream||e.webkitMediaStream}function R(e){if("object"!=typeof e||!e.RTCPeerConnection||"ontrack"in e.RTCPeerConnection.prototype)y(e,"track",e=>(e.transceiver||Object.defineProperty(e,"transceiver",{value:{receiver:e.receiver}}),e));else{Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get(){return this._ontrack},set(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)},enumerable:!0,configurable:!0});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){return this._ontrackpoly||(this._ontrackpoly=t=>{t.stream.addEventListener("addtrack",n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find(e=>e.track&&e.track.id===n.track.id):{track:n.track};const o=new Event("track");o.track=n.track,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)}),t.stream.getTracks().forEach(n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find(e=>e.track&&e.track.id===n.id):{track:n};const o=new Event("track");o.track=n,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)})},this.addEventListener("addstream",this._ontrackpoly)),t.apply(this,arguments)}}}function j(e){if("object"==typeof e&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){const t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};const n=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,r){let o=n.apply(this,arguments);return o||(o=t(this,e),this._senders.push(o)),o};const r=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){r.apply(this,arguments);const t=this._senders.indexOf(e);-1!==t&&this._senders.splice(t,1)}}const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._senders=this._senders||[],n.apply(this,[e]),e.getTracks().forEach(e=>{this._senders.push(t(this,e))})};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){this._senders=this._senders||[],r.apply(this,[e]),e.getTracks().forEach(e=>{const t=this._senders.find(t=>t.track===e);t&&this._senders.splice(this._senders.indexOf(t),1)})}}else if("object"==typeof e&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}}function D(e){if(!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,n,r]=arguments;if(arguments.length>0&&"function"==typeof e)return t.apply(this,arguments);if(0===t.length&&(0===arguments.length||"function"!=typeof e))return t.apply(this,[]);const o=function(e){const t={};return e.result().forEach(e=>{const n={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach(t=>{n[t]=e.stat(t)}),t[n.id]=n}),t},i=function(e){return new Map(Object.keys(e).map(t=>[t,e[t]]))};if(arguments.length>=2){const r=function(e){n(i(o(e)))};return t.apply(this,[r,e])}return new Promise((e,n)=>{t.apply(this,[function(t){e(i(o(t)))},n])}).then(n,r)}}function N(e){if(!("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver))return;if(!("getStats"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){const e=this;return this._pc.getStats().then(t=>k(t,e.track,!0))}}if(!("getStats"in e.RTCRtpReceiver.prototype)){const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e}),y(e,"track",e=>(e.receiver._pc=e.srcElement,e)),e.RTCRtpReceiver.prototype.getStats=function(){const e=this;return this._pc.getStats().then(t=>k(t,e.track,!1))}}if(!("getStats"in e.RTCRtpSender.prototype&&"getStats"in e.RTCRtpReceiver.prototype))return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){const e=arguments[0];let t,n,r;return this.getSenders().forEach(n=>{n.track===e&&(t?r=!0:t=n)}),this.getReceivers().forEach(t=>(t.track===e&&(n?r=!0:n=t),t.track===e)),r||t&&n?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):t?t.getStats():n?n.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return t.apply(this,arguments)}}function M(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map(e=>this._shimmedLocalStreams[e][0])};const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){if(!n)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};const r=t.apply(this,arguments);return this._shimmedLocalStreams[n.id]?-1===this._shimmedLocalStreams[n.id].indexOf(r)&&this._shimmedLocalStreams[n.id].push(r):this._shimmedLocalStreams[n.id]=[n,r],r};const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._shimmedLocalStreams=this._shimmedLocalStreams||{},e.getTracks().forEach(e=>{if(this.getSenders().find(t=>t.track===e))throw new DOMException("Track already exists.","InvalidAccessError")});const t=this.getSenders();n.apply(this,arguments);const r=this.getSenders().filter(e=>-1===t.indexOf(e));this._shimmedLocalStreams[e.id]=[e].concat(r)};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[e.id],r.apply(this,arguments)};const o=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},e&&Object.keys(this._shimmedLocalStreams).forEach(t=>{const n=this._shimmedLocalStreams[t].indexOf(e);-1!==n&&this._shimmedLocalStreams[t].splice(n,1),1===this._shimmedLocalStreams[t].length&&delete this._shimmedLocalStreams[t]}),o.apply(this,arguments)}}function I(e){if(!e.RTCPeerConnection)return;const t=S(e);if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return M(e);const n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){const e=n.apply(this);return this._reverseStreams=this._reverseStreams||{},e.map(e=>this._reverseStreams[e.id])};const r=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){if(this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},t.getTracks().forEach(e=>{if(this.getSenders().find(t=>t.track===e))throw new DOMException("Track already exists.","InvalidAccessError")}),!this._reverseStreams[t.id]){const n=new e.MediaStream(t.getTracks());this._streams[t.id]=n,this._reverseStreams[n.id]=t,t=n}r.apply(this,[t])};const o=e.RTCPeerConnection.prototype.removeStream;function i(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(o.id,"g"),r.id)}),new RTCSessionDescription({type:t.type,sdp:n})}function a(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(r.id,"g"),o.id)}),new RTCSessionDescription({type:t.type,sdp:n})}e.RTCPeerConnection.prototype.removeStream=function(e){this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},o.apply(this,[this._streams[e.id]||e]),delete this._reverseStreams[this._streams[e.id]?this._streams[e.id].id:e.id],delete this._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,n){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");const r=[].slice.call(arguments,1);if(1!==r.length||!r[0].getTracks().find(e=>e===t))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");const o=this.getSenders().find(e=>e.track===t);if(o)throw new DOMException("Track already exists.","InvalidAccessError");this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{};const i=this._streams[n.id];if(i)i.addTrack(t),Promise.resolve().then(()=>{this.dispatchEvent(new Event("negotiationneeded"))});else{const r=new e.MediaStream([t]);this._streams[n.id]=r,this._reverseStreams[r.id]=n,this.addStream(r)}return this.getSenders().find(e=>e.track===t)},["createOffer","createAnswer"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){const e=arguments;return arguments.length&&"function"==typeof arguments[0]?n.apply(this,[t=>{const n=i(this,t);e[0].apply(null,[n])},t=>{e[1]&&e[1].apply(null,t)},arguments[2]]):n.apply(this,arguments).then(e=>i(this,e))}};e.RTCPeerConnection.prototype[t]=r[t]}));const c=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return arguments.length&&arguments[0].type?(arguments[0]=a(this,arguments[0]),c.apply(this,arguments)):c.apply(this,arguments)};const s=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get(){const e=s.get.apply(this);return""===e.type?e:i(this,e)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(!(e._pc===this))throw new DOMException("Sender was not created by this connection.","InvalidAccessError");let t;this._streams=this._streams||{},Object.keys(this._streams).forEach(n=>{this._streams[n].getTracks().find(t=>e.track===t)&&(t=this._streams[n])}),t&&(1===t.getTracks().length?this.removeStream(this._reverseStreams[t.id]):t.removeTrack(e.track),this.dispatchEvent(new Event("negotiationneeded")))}}function A(e){const t=S(e);if(!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=e.webkitRTCPeerConnection),!e.RTCPeerConnection)return;const n=0===e.RTCPeerConnection.prototype.addIceCandidate.length;t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]}));const r=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return n||arguments[0]?t.version<78&&arguments[0]&&""===arguments[0].candidate?Promise.resolve():r.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}function L(e){y(e,"negotiationneeded",e=>{if("stable"===e.target.signalingState)return e})}var F=n(55),U=n.n(F);function z(e){const t=e&&e.navigator,n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch(e=>Promise.reject(function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString(){return this.name}}}(e)))}}function B(e){"getDisplayMedia"in e.navigator&&e.navigator.mediaDevices&&(e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||(e.navigator.mediaDevices.getDisplayMedia=e.navigator.getDisplayMedia.bind(e.navigator)))}function H(e){const t=S(e);if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){const t=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set(e){t.set.call(this,e);const n=new Event("enabled");n.enabled=e,this.dispatchEvent(n)}})}!e.RTCRtpSender||"dtmf"in e.RTCRtpSender.prototype||Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCDtmfSender&&!e.RTCDTMFSender&&(e.RTCDTMFSender=e.RTCDtmfSender);const n=U()(e,t.version);e.RTCPeerConnection=function(e){return e&&e.iceServers&&(e.iceServers=function(e,t){let n=!1;return(e=JSON.parse(JSON.stringify(e))).filter(e=>{if(e&&(e.urls||e.url)){var t=e.urls||e.url;e.url&&!e.urls&&E("RTCIceServer.url","RTCIceServer.urls");const r="string"==typeof t;return r&&(t=[t]),t=t.filter(e=>{if(0===e.indexOf("stun:"))return!1;const t=e.startsWith("turn")&&!e.startsWith("turn:[")&&e.includes("transport=udp");return t&&!n?(n=!0,!0):t&&!n}),delete e.url,e.urls=r?t[0]:t,!!t.length}})}(e.iceServers,t.version),w("ICE servers after filtering:",e.iceServers)),new n(e)},e.RTCPeerConnection.prototype=n.prototype}function W(e){!e.RTCRtpSender||"replaceTrack"in e.RTCRtpSender.prototype||(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)}function q(e){const t=S(e),n=e&&e.navigator,r=e&&e.MediaStreamTrack;if(n.getUserMedia=function(e,t,r){E("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(e).then(t,r)},!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){const e=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])},t=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(n){return"object"==typeof n&&"object"==typeof n.audio&&(n=JSON.parse(JSON.stringify(n)),e(n.audio,"autoGainControl","mozAutoGainControl"),e(n.audio,"noiseSuppression","mozNoiseSuppression")),t(n)},r&&r.prototype.getSettings){const t=r.prototype.getSettings;r.prototype.getSettings=function(){const n=t.apply(this,arguments);return e(n,"mozAutoGainControl","autoGainControl"),e(n,"mozNoiseSuppression","noiseSuppression"),n}}if(r&&r.prototype.applyConstraints){const t=r.prototype.applyConstraints;r.prototype.applyConstraints=function(n){return"audio"===this.kind&&"object"==typeof n&&(n=JSON.parse(JSON.stringify(n)),e(n,"autoGainControl","mozAutoGainControl"),e(n,"noiseSuppression","mozNoiseSuppression")),t.apply(this,[n])}}}}function V(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&(e.navigator.mediaDevices.getDisplayMedia=function(n){if(!n||!n.video){const e=new DOMException("getDisplayMedia without video constraints is undefined");return e.name="NotFoundError",e.code=8,Promise.reject(e)}return!0===n.video?n.video={mediaSource:t}:n.video.mediaSource=t,e.navigator.mediaDevices.getUserMedia(n)})}function G(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function $(e){const t=S(e);if("object"!=typeof e||!e.RTCPeerConnection&&!e.mozRTCPeerConnection)return;if(!e.RTCPeerConnection&&e.mozRTCPeerConnection&&(e.RTCPeerConnection=e.mozRTCPeerConnection),t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]})),t.version<68){const t=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?arguments[0]&&""===arguments[0].candidate?Promise.resolve():t.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}const n={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},r=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,o,i]=arguments;return r.apply(this,[e||null]).then(e=>{if(t.version<53&&!o)try{e.forEach(e=>{e.type=n[e.type]||e.type})}catch(t){if("TypeError"!==t.name)throw t;e.forEach((t,r)=>{e.set(r,Object.assign({},t,{type:n[t.type]||t.type}))})}return e}).then(o,i)}}function K(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpSender.prototype)return;const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}function J(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpReceiver.prototype)return;const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach(e=>e._pc=this),e}),y(e,"track",e=>(e.receiver._pc=e.srcElement,e)),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}function Y(e){!e.RTCPeerConnection||"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){E("removeStream","removeTrack"),this.getSenders().forEach(t=>{t.track&&e.getTracks().includes(t.track)&&this.removeTrack(t)})})}function X(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)}function Q(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.addTransceiver;t&&(e.RTCPeerConnection.prototype.addTransceiver=function(){this.setParametersPromises=[];const e=arguments[1],n=e&&"sendEncodings"in e;n&&e.sendEncodings.forEach(e=>{if("rid"in e){if(!/^[a-z0-9]{0,16}$/i.test(e.rid))throw new TypeError("Invalid RID value provided.")}if("scaleResolutionDownBy"in e&&!(parseFloat(e.scaleResolutionDownBy)>=1))throw new RangeError("scale_resolution_down_by must be >= 1.0");if("maxFramerate"in e&&!(parseFloat(e.maxFramerate)>=0))throw new RangeError("max_framerate must be >= 0.0")});const r=t.apply(this,arguments);if(n){const{sender:t}=r,n=t.getParameters();"encodings"in n||(n.encodings=e.sendEncodings,this.setParametersPromises.push(t.setParameters(n).catch(()=>{})))}return r})}function Z(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}function ee(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createAnswer;e.RTCPeerConnection.prototype.createAnswer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}function te(e){if("object"==typeof e&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),!("addStream"in e.RTCPeerConnection.prototype)){const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){this._localStreams||(this._localStreams=[]),this._localStreams.includes(e)||this._localStreams.push(e),e.getAudioTracks().forEach(n=>t.call(this,n,e)),e.getVideoTracks().forEach(n=>t.call(this,n,e))},e.RTCPeerConnection.prototype.addTrack=function(e){const n=arguments[1];return n&&(this._localStreams?this._localStreams.includes(n)||this._localStreams.push(n):this._localStreams=[n]),t.apply(this,arguments)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){this._localStreams||(this._localStreams=[]);const t=this._localStreams.indexOf(e);if(-1===t)return;this._localStreams.splice(t,1);const n=e.getTracks();this.getSenders().forEach(e=>{n.includes(e.track)&&this.removeTrack(e)})})}}function ne(e){if("object"==typeof e&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get(){return this._onaddstream},set(e){this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=e),this.addEventListener("track",this._onaddstreampoly=e=>{e.streams.forEach(e=>{if(this._remoteStreams||(this._remoteStreams=[]),this._remoteStreams.includes(e))return;this._remoteStreams.push(e);const t=new Event("addstream");t.stream=e,this.dispatchEvent(t)})})}});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){const e=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(t){t.streams.forEach(t=>{if(e._remoteStreams||(e._remoteStreams=[]),e._remoteStreams.indexOf(t)>=0)return;e._remoteStreams.push(t);const n=new Event("addstream");n.stream=t,e.dispatchEvent(n)})}),t.apply(e,arguments)}}}function re(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,o=t.setLocalDescription,i=t.setRemoteDescription,a=t.addIceCandidate;t.createOffer=function(e,t){const r=arguments.length>=2?arguments[2]:arguments[0],o=n.apply(this,[r]);return t?(o.then(e,t),Promise.resolve()):o},t.createAnswer=function(e,t){const n=arguments.length>=2?arguments[2]:arguments[0],o=r.apply(this,[n]);return t?(o.then(e,t),Promise.resolve()):o};let c=function(e,t,n){const r=o.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r};t.setLocalDescription=c,c=function(e,t,n){const r=i.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.setRemoteDescription=c,c=function(e,t,n){const r=a.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.addIceCandidate=c}function oe(e){const t=e&&e.navigator;if(t.mediaDevices&&t.mediaDevices.getUserMedia){const e=t.mediaDevices,n=e.getUserMedia.bind(e);t.mediaDevices.getUserMedia=e=>n(ie(e))}!t.getUserMedia&&t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,n,r){t.mediaDevices.getUserMedia(e).then(n,r)}.bind(t))}function ie(e){return e&&void 0!==e.video?Object.assign({},e,{video:_(e.video)}):e}function ae(e){const t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,n){if(e&&e.iceServers){const t=[];for(let n=0;n<e.iceServers.length;n++){let r=e.iceServers[n];!r.hasOwnProperty("urls")&&r.hasOwnProperty("url")?(E("RTCIceServer.url","RTCIceServer.urls"),r=JSON.parse(JSON.stringify(r)),r.urls=r.url,delete r.url,t.push(r)):t.push(e.iceServers[n])}e.iceServers=t}return new t(e,n)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in e.RTCPeerConnection&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:()=>t.generateCertificate})}function ce(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function se(e){const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(e){if(e){void 0!==e.offerToReceiveAudio&&(e.offerToReceiveAudio=!!e.offerToReceiveAudio);const t=this.getTransceivers().find(e=>"audio"===e.receiver.track.kind);!1===e.offerToReceiveAudio&&t?"sendrecv"===t.direction?t.setDirection?t.setDirection("sendonly"):t.direction="sendonly":"recvonly"===t.direction&&(t.setDirection?t.setDirection("inactive"):t.direction="inactive"):!0!==e.offerToReceiveAudio||t||this.addTransceiver("audio"),void 0!==e.offerToReceiveVideo&&(e.offerToReceiveVideo=!!e.offerToReceiveVideo);const n=this.getTransceivers().find(e=>"video"===e.receiver.track.kind);!1===e.offerToReceiveVideo&&n?"sendrecv"===n.direction?n.setDirection?n.setDirection("sendonly"):n.direction="sendonly":"recvonly"===n.direction&&(n.setDirection?n.setDirection("inactive"):n.direction="inactive"):!0!==e.offerToReceiveVideo||n||this.addTransceiver("video")}return t.apply(this,arguments)}}var ue=n(23),le=n.n(ue);function fe(e){if(!e.RTCIceCandidate||e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)return;const t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){if("object"==typeof e&&e.candidate&&0===e.candidate.indexOf("a=")&&((e=JSON.parse(JSON.stringify(e))).candidate=e.candidate.substr(2)),e.candidate&&e.candidate.length){const n=new t(e),r=le.a.parseCandidate(e.candidate),o=Object.assign(n,r);return o.toJSON=function(){return{candidate:o.candidate,sdpMid:o.sdpMid,sdpMLineIndex:o.sdpMLineIndex,usernameFragment:o.usernameFragment}},o}return new t(e)},e.RTCIceCandidate.prototype=t.prototype,y(e,"icecandidate",t=>(t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t))}function pe(e){if(!e.RTCPeerConnection)return;const t=S(e);"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get(){return void 0===this._sctp?null:this._sctp}});const n=function(e){if(!e||!e.sdp)return!1;const t=le.a.splitSections(e.sdp);return t.shift(),t.some(e=>{const t=le.a.parseMLine(e);return t&&"application"===t.kind&&-1!==t.protocol.indexOf("SCTP")})},r=function(e){const t=e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(null===t||t.length<2)return-1;const n=parseInt(t[1],10);return n!=n?-1:n},o=function(e){let n=65536;return"firefox"===t.browser&&(n=t.version<57?-1===e?16384:2147483637:t.version<60?57===t.version?65535:65536:2147483637),n},i=function(e,n){let r=65536;"firefox"===t.browser&&57===t.version&&(r=65535);const o=le.a.matchPrefix(e.sdp,"a=max-message-size:");return o.length>0?r=parseInt(o[0].substr(19),10):"firefox"===t.browser&&-1!==n&&(r=2147483637),r},a=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){if(this._sctp=null,"chrome"===t.browser&&t.version>=76){const{sdpSemantics:e}=this.getConfiguration();"plan-b"===e&&Object.defineProperty(this,"sctp",{get(){return void 0===this._sctp?null:this._sctp},enumerable:!0,configurable:!0})}if(n(arguments[0])){const e=r(arguments[0]),t=o(e),n=i(arguments[0],e);let a;a=0===t&&0===n?Number.POSITIVE_INFINITY:0===t||0===n?Math.max(t,n):Math.min(t,n);const c={};Object.defineProperty(c,"maxMessageSize",{get:()=>a}),this._sctp=c}return a.apply(this,arguments)}}function de(e){if(!(e.RTCPeerConnection&&"createDataChannel"in e.RTCPeerConnection.prototype))return;function t(e,t){const n=e.send;e.send=function(){const r=arguments[0],o=r.length||r.size||r.byteLength;if("open"===e.readyState&&t.sctp&&o>t.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+t.sctp.maxMessageSize+" bytes)");return n.apply(e,arguments)}}const n=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){const e=n.apply(this,arguments);return t(e,this),e},y(e,"datachannel",e=>(t(e.channel,e.target),e))}function he(e){if(!e.RTCPeerConnection||"connectionState"in e.RTCPeerConnection.prototype)return;const t=e.RTCPeerConnection.prototype;Object.defineProperty(t,"connectionState",{get(){return{completed:"connected",checking:"connecting"}[this.iceConnectionState]||this.iceConnectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t,"onconnectionstatechange",{get(){return this._onconnectionstatechange||null},set(e){this._onconnectionstatechange&&(this.removeEventListener("connectionstatechange",this._onconnectionstatechange),delete this._onconnectionstatechange),e&&this.addEventListener("connectionstatechange",this._onconnectionstatechange=e)},enumerable:!0,configurable:!0}),["setLocalDescription","setRemoteDescription"].forEach(e=>{const n=t[e];t[e]=function(){return this._connectionstatechangepoly||(this._connectionstatechangepoly=e=>{const t=e.target;if(t._lastConnectionState!==t.connectionState){t._lastConnectionState=t.connectionState;const n=new Event("connectionstatechange",e);t.dispatchEvent(n)}return e},this.addEventListener("iceconnectionstatechange",this._connectionstatechangepoly)),n.apply(this,arguments)}})}function me(e){if(!e.RTCPeerConnection)return;const t=S(e);if("chrome"===t.browser&&t.version>=71)return;const n=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(e){return e&&e.sdp&&-1!==e.sdp.indexOf("\na=extmap-allow-mixed")&&(e.sdp=e.sdp.split("\n").filter(e=>"a=extmap-allow-mixed"!==e.trim()).join("\n")),n.apply(this,arguments)}}!function({window:e}={},t={shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0}){const n=w,s=S(e),u={browserDetails:s,commonShim:c,extractVersion:v,disableLog:g,disableWarnings:b};switch(s.browser){case"chrome":if(!r||!A||!t.shimChrome)return n("Chrome shim is not included in this adapter release."),u;n("adapter.js shimming chrome."),u.browserShim=r,T(e),P(e),A(e),R(e),I(e),j(e),D(e),N(e),L(e),fe(e),he(e),pe(e),de(e),me(e);break;case"firefox":if(!i||!$||!t.shimFirefox)return n("Firefox shim is not included in this adapter release."),u;n("adapter.js shimming firefox."),u.browserShim=i,q(e),$(e),G(e),Y(e),K(e),J(e),X(e),Q(e),Z(e),ee(e),fe(e),he(e),pe(e),de(e);break;case"edge":if(!o||!H||!t.shimEdge)return n("MS edge shim is not included in this adapter release."),u;n("adapter.js shimming edge."),u.browserShim=o,z(e),B(e),H(e),W(e),pe(e),de(e);break;case"safari":if(!a||!t.shimSafari)return n("Safari shim is not included in this adapter release."),u;n("adapter.js shimming safari."),u.browserShim=a,ae(e),se(e),re(e),te(e),ne(e),ce(e),oe(e),fe(e),pe(e),de(e),me(e);break;default:n("Unsupported browser!")}}({window:window});var ve=n(2),ye=n.n(ve),ge=f.a.createContext(null);var be=function(e){e()},we={notify:function(){}};function Ee(){var e=be,t=[],n=[];return{clear:function(){n=null,t=null},notify:function(){var r=t=n;e((function(){for(var e=0;e<r.length;e++)r[e]()}))},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&null!==t&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}}var Se=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=we,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=Ee())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=we)},e}();function Ce(e){var t=e.store,n=e.context,r=e.children,o=Object(l.useMemo)((function(){var e=new Se(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),i=Object(l.useMemo)((function(){return t.getState()}),[t]);Object(l.useEffect)((function(){var e=o.subscription;return e.trySubscribe(),i!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,i]);var a=n||ge;return f.a.createElement(a.Provider,{value:o},r)}Ce.propTypes={store:ye.a.shape({subscribe:ye.a.func.isRequired,dispatch:ye.a.func.isRequired,getState:ye.a.func.isRequired}),context:ye.a.object,children:ye.a.any};var _e=Ce;function ke(){return(ke=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function xe(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var Te=n(26),Oe=n.n(Te),Pe=n(15),Re=n.n(Pe),je=n(31),De="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect,Ne=[],Me=[null,null];function Ie(e,t){var n=e[1];return[t.payload,n+1]}var Ae=function(){return[null,0]};function Le(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,i=n.methodName,a=void 0===i?"connectAdvanced":i,c=n.renderCountProp,s=void 0===c?void 0:c,u=n.shouldHandleStateChanges,p=void 0===u||u,d=n.storeKey,h=void 0===d?"store":d,m=n.withRef,v=void 0!==m&&m,y=n.forwardRef,g=void 0!==y&&y,b=n.context,w=void 0===b?ge:b,E=xe(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);Re()(void 0===s,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),Re()(!v,"withRef is removed. To access the wrapped instance, use a ref on the connected component");Re()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var S=w;return function(t){var n=t.displayName||t.name||"Component",r=o(n),i=ke({},E,{getDisplayName:o,methodName:a,renderCountProp:s,shouldHandleStateChanges:p,storeKey:h,displayName:r,wrappedComponentName:n,WrappedComponent:t}),c=E.pure;var u=c?l.useMemo:function(e){return e()};function d(n){var o=Object(l.useMemo)((function(){var e=n.forwardedRef,t=xe(n,["forwardedRef"]);return[n.context,e,t]}),[n]),a=o[0],c=o[1],s=o[2],d=Object(l.useMemo)((function(){return a&&a.Consumer&&Object(je.isContextConsumer)(f.a.createElement(a.Consumer,null))?a:S}),[a,S]),h=Object(l.useContext)(d),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch),v=Boolean(h)&&Boolean(h.store);Re()(m||v,'Could not find "store" in the context of "'+r+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+r+" in connect options.");var y=m?n.store:h.store,g=Object(l.useMemo)((function(){return function(t){return e(t.dispatch,i)}(y)}),[y]),b=Object(l.useMemo)((function(){if(!p)return Me;var e=new Se(y,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[y,m,h]),w=b[0],E=b[1],C=Object(l.useMemo)((function(){return m?h:ke({},h,{subscription:w})}),[m,h,w]),_=Object(l.useReducer)(Ie,Ne,Ae),k=_[0][0],x=_[1];if(k&&k.error)throw k.error;var T=Object(l.useRef)(),O=Object(l.useRef)(s),P=Object(l.useRef)(),R=Object(l.useRef)(!1),j=u((function(){return P.current&&s===O.current?P.current:g(y.getState(),s)}),[y,k,s]);De((function(){O.current=s,T.current=j,R.current=!1,P.current&&(P.current=null,E())})),De((function(){if(p){var e=!1,t=null,n=function(){if(!e){var n,r,o=y.getState();try{n=g(o,O.current)}catch(e){r=e,t=e}r||(t=null),n===T.current?R.current||E():(T.current=n,P.current=n,R.current=!0,x({type:"STORE_UPDATED",payload:{error:r}}))}};w.onStateChange=n,w.trySubscribe(),n();return function(){if(e=!0,w.tryUnsubscribe(),w.onStateChange=null,t)throw t}}}),[y,w,g]);var D=Object(l.useMemo)((function(){return f.a.createElement(t,ke({},j,{ref:c}))}),[c,t,j]);return Object(l.useMemo)((function(){return p?f.a.createElement(d.Provider,{value:C},D):D}),[d,D,C])}var m=c?f.a.memo(d):d;if(m.WrappedComponent=t,m.displayName=r,g){var v=f.a.forwardRef((function(e,t){return f.a.createElement(m,ke({},e,{forwardedRef:t}))}));return v.displayName=r,v.WrappedComponent=t,Oe()(v,t)}return Oe()(m,t)}}var Fe=Object.prototype.hasOwnProperty;function Ue(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function ze(e,t){if(Ue(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Fe.call(t,n[o])||!Ue(e[n[o]],t[n[o]]))return!1;return!0}var Be=n(37),He=function(){return Math.random().toString(36).substring(7).split("").join(".")},We={INIT:"@@redux/INIT"+He(),REPLACE:"@@redux/REPLACE"+He(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+He()}};function qe(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Ve(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(Ve)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],c=a,s=!1;function u(){c===a&&(c=a.slice())}function l(){if(s)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(s)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return u(),c.push(e),function(){if(t){if(s)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,u();var n=c.indexOf(e);c.splice(n,1),a=null}}}function p(e){if(!qe(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(s)throw new Error("Reducers may not dispatch actions.");try{s=!0,i=o(i,e)}finally{s=!1}for(var t=a=c,n=0;n<t.length;n++){(0,t[n])()}return e}function d(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,p({type:We.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(l())}return n(),{unsubscribe:t(n)}}})[Be.a]=function(){return this},e}return p({type:We.INIT}),(r={dispatch:p,subscribe:f,getState:l,replaceReducer:d})[Be.a]=h,r}function Ge(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function $e(e,t){return function(){return t(e.apply(this,arguments))}}function Ke(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Je(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function Ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Je(n,!0).forEach((function(t){Ke(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Je(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Xe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function Qe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return Ye({},n,{dispatch:r=Xe.apply(void 0,i)(n.dispatch)})}}}function Ze(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function et(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function tt(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=et(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=et(o),o=r(t,n)),o},r}}var nt=[function(e){return"function"==typeof e?tt(e):void 0},function(e){return e?void 0:Ze((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?Ze((function(t){return function(e,t){if("function"==typeof e)return $e(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=$e(o,t))}return n}(e,t)})):void 0}];var rt=[function(e){return"function"==typeof e?tt(e):void 0},function(e){return e?void 0:Ze((function(){return{}}))}];function ot(e,t,n){return ke({},n,{},e,{},t)}var it=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,c){var s=e(t,n,c);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return ot}}];function at(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function ct(e,t,n,r,o){var i,a,c,s,u,l=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,v=!f(d,a),y=!l(o,i);return i=o,a=d,v&&y?(c=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):v?(e.dependsOnOwnProps&&(c=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):y?(h=e(i,a),m=!p(h,c),c=h,m&&(u=n(c,s,a)),u):u}return function(o,l){return d?h(o,l):(c=e(i=o,a=l),s=t(r,a),u=n(c,s,a),d=!0,u)}}function st(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=xe(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),c=r(e,i),s=o(e,i);return(i.pure?ct:at)(a,c,s,e,i)}function ut(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function lt(e,t){return e===t}var ft,pt,dt,ht,mt,vt,yt,gt,bt,wt,Et,St,Ct=(dt=(pt=void 0===ft?{}:ft).connectHOC,ht=void 0===dt?Le:dt,mt=pt.mapStateToPropsFactories,vt=void 0===mt?rt:mt,yt=pt.mapDispatchToPropsFactories,gt=void 0===yt?nt:yt,bt=pt.mergePropsFactories,wt=void 0===bt?it:bt,Et=pt.selectorFactory,St=void 0===Et?st:Et,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,c=o.areStatesEqual,s=void 0===c?lt:c,u=o.areOwnPropsEqual,l=void 0===u?ze:u,f=o.areStatePropsEqual,p=void 0===f?ze:f,d=o.areMergedPropsEqual,h=void 0===d?ze:d,m=xe(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=ut(e,vt,"mapStateToProps"),y=ut(t,gt,"mapDispatchToProps"),g=ut(n,wt,"mergeProps");return ht(St,ke({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:y,initMergeProps:g,pure:a,areStatesEqual:s,areOwnPropsEqual:l,areStatePropsEqual:p,areMergedPropsEqual:h},m))});function _t(){var e=Object(l.useContext)(ge);return Re()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function kt(e){void 0===e&&(e=ge);var t=e===ge?_t:function(){return Object(l.useContext)(e)};return function(){return t().store}}var xt=kt();!function(e){void 0===e&&(e=ge);var t=e===ge?xt:kt(e)}();var Tt=function(e,t){return e===t};var Ot,Pt;!function(e){void 0===e&&(e=ge);var t=e===ge?_t:function(){return Object(l.useContext)(e)}}();Ot=p.unstable_batchedUpdates,be=Ot;var Rt=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){Pt=Function.prototype.toString,Function.prototype.toString=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.__sentry_original__||this;return Pt.apply(n,e)}},e.id="FunctionToString",e}(),jt=n(1),Dt=n(34),Nt=n(109),Mt=n(21),It=n(4),At=n(20),Lt=[/^Script error\.?$/,/^Javascript error: Script error\.? on line 0$/],Ft=function(){function e(t){void 0===t&&(t={}),this._options=t,this.name=e.id}return e.prototype.setupOnce=function(){Object(Dt.b)((function(t){var n=Object(Nt.a)();if(!n)return t;var r=n.getIntegration(e);if(r){var o=n.getClient(),i=o?o.getOptions():{},a=r._mergeOptions(i);if(r._shouldDropEvent(t,a))return null}return t}))},e.prototype._shouldDropEvent=function(e,t){return this._isSentryError(e,t)?(Mt.a.warn("Event dropped due to being internal Sentry Error.\nEvent: "+Object(It.e)(e)),!0):this._isIgnoredError(e,t)?(Mt.a.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: "+Object(It.e)(e)),!0):this._isBlacklistedUrl(e,t)?(Mt.a.warn("Event dropped due to being matched by `blacklistUrls` option.\nEvent: "+Object(It.e)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0):!this._isWhitelistedUrl(e,t)&&(Mt.a.warn("Event dropped due to not being matched by `whitelistUrls` option.\nEvent: "+Object(It.e)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0)},e.prototype._isSentryError=function(e,t){if(void 0===t&&(t={}),!t.ignoreInternal)return!1;try{return e&&e.exception&&e.exception.values&&e.exception.values[0]&&"SentryError"===e.exception.values[0].type||!1}catch(e){return!1}},e.prototype._isIgnoredError=function(e,t){return void 0===t&&(t={}),!(!t.ignoreErrors||!t.ignoreErrors.length)&&this._getPossibleEventMessages(e).some((function(e){return t.ignoreErrors.some((function(t){return Object(At.a)(e,t)}))}))},e.prototype._isBlacklistedUrl=function(e,t){if(void 0===t&&(t={}),!t.blacklistUrls||!t.blacklistUrls.length)return!1;var n=this._getEventFilterUrl(e);return!!n&&t.blacklistUrls.some((function(e){return Object(At.a)(n,e)}))},e.prototype._isWhitelistedUrl=function(e,t){if(void 0===t&&(t={}),!t.whitelistUrls||!t.whitelistUrls.length)return!0;var n=this._getEventFilterUrl(e);return!n||t.whitelistUrls.some((function(e){return Object(At.a)(n,e)}))},e.prototype._mergeOptions=function(e){return void 0===e&&(e={}),{blacklistUrls:jt.f(this._options.blacklistUrls||[],e.blacklistUrls||[]),ignoreErrors:jt.f(this._options.ignoreErrors||[],e.ignoreErrors||[],Lt),ignoreInternal:void 0===this._options.ignoreInternal||this._options.ignoreInternal,whitelistUrls:jt.f(this._options.whitelistUrls||[],e.whitelistUrls||[])}},e.prototype._getPossibleEventMessages=function(e){if(e.message)return[e.message];if(e.exception)try{var t=e.exception.values&&e.exception.values[0]||{},n=t.type,r=void 0===n?"":n,o=t.value,i=void 0===o?"":o;return[""+i,r+": "+i]}catch(t){return Mt.a.error("Cannot extract message for event "+Object(It.e)(e)),[]}return[]},e.prototype._getEventFilterUrl=function(e){try{if(e.stacktrace){var t=e.stacktrace.frames;return t&&t[t.length-1].filename||null}if(e.exception){var n=e.exception.values&&e.exception.values[0].stacktrace&&e.exception.values[0].stacktrace.frames;return n&&n[n.length-1].filename||null}return null}catch(t){return Mt.a.error("Cannot extract url for event "+Object(It.e)(e)),null}},e.id="InboundFilters",e}();var Ut=n(28),zt=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n]);return e});var Bt=function(e){function t(t){var n=this.constructor,r=e.call(this,t)||this;return r.message=t,r.name=n.prototype.constructor.name,zt(r,n.prototype),r}return jt.c(t,e),t}(Error),Ht=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w\.-]+)(?::(\d+))?\/(.+)/,Wt=function(){function e(e){"string"==typeof e?this._fromString(e):this._fromComponents(e),this._validate()}return e.prototype.toString=function(e){void 0===e&&(e=!1);var t=this,n=t.host,r=t.path,o=t.pass,i=t.port,a=t.projectId;return t.protocol+"://"+t.user+(e&&o?":"+o:"")+"@"+n+(i?":"+i:"")+"/"+(r?r+"/":r)+a},e.prototype._fromString=function(e){var t=Ht.exec(e);if(!t)throw new Bt("Invalid Dsn");var n=jt.e(t.slice(1),6),r=n[0],o=n[1],i=n[2],a=void 0===i?"":i,c=n[3],s=n[4],u=void 0===s?"":s,l="",f=n[5],p=f.split("/");p.length>1&&(l=p.slice(0,-1).join("/"),f=p.pop()),this._fromComponents({host:c,pass:a,path:l,projectId:f,port:u,protocol:r,user:o})},e.prototype._fromComponents=function(e){this.protocol=e.protocol,this.user=e.user,this.pass=e.pass||"",this.host=e.host,this.port=e.port||"",this.path=e.path||"",this.projectId=e.projectId},e.prototype._validate=function(){var e=this;if(["protocol","user","host","projectId"].forEach((function(t){if(!e[t])throw new Bt("Invalid Dsn")})),"http"!==this.protocol&&"https"!==this.protocol)throw new Bt("Invalid Dsn");if(this.port&&isNaN(parseInt(this.port,10)))throw new Bt("Invalid Dsn")},e}(),qt=n(6),Vt=function(){function e(e){this.dsn=e,this._dsnObject=new Wt(e)}return e.prototype.getDsn=function(){return this._dsnObject},e.prototype.getStoreEndpoint=function(){return""+this._getBaseUrl()+this.getStoreEndpointPath()},e.prototype.getStoreEndpointWithUrlEncodedAuth=function(){var e={sentry_key:this._dsnObject.user,sentry_version:"7"};return this.getStoreEndpoint()+"?"+Object(qt.e)(e)},e.prototype._getBaseUrl=function(){var e=this._dsnObject,t=e.protocol?e.protocol+":":"",n=e.port?":"+e.port:"";return t+"//"+e.host+n},e.prototype.getStoreEndpointPath=function(){var e=this._dsnObject;return(e.path?"/"+e.path:"")+"/api/"+e.projectId+"/store/"},e.prototype.getRequestHeaders=function(e,t){var n=this._dsnObject,r=["Sentry sentry_version=7"];return r.push("sentry_timestamp="+Object(It.m)()),r.push("sentry_client="+e+"/"+t),r.push("sentry_key="+n.user),n.pass&&r.push("sentry_secret="+n.pass),{"Content-Type":"application/json","X-Sentry-Auth":r.join(", ")}},e.prototype.getReportDialogEndpoint=function(e){void 0===e&&(e={});var t=this._dsnObject,n=this._getBaseUrl()+(t.path?"/"+t.path:"")+"/api/embed/error-page/",r=[];for(var o in r.push("dsn="+t.toString()),e)if("user"===o){if(!e.user)continue;e.user.name&&r.push("name="+encodeURIComponent(e.user.name)),e.user.email&&r.push("email="+encodeURIComponent(e.user.email))}else r.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return r.length?n+"?"+r.join("&"):n},e}(),Gt=n(8),$t=[];function Kt(e){var t={};return function(e){var t=e.defaultIntegrations&&jt.f(e.defaultIntegrations)||[],n=e.integrations,r=[];if(Array.isArray(n)){var o=n.map((function(e){return e.name})),i=[];t.forEach((function(e){-1===o.indexOf(e.name)&&-1===i.indexOf(e.name)&&(r.push(e),i.push(e.name))})),n.forEach((function(e){-1===i.indexOf(e.name)&&(r.push(e),i.push(e.name))}))}else"function"==typeof n?(r=n(t),r=Array.isArray(r)?r:[r]):r=jt.f(t);var a=r.map((function(e){return e.name}));return-1!==a.indexOf("Debug")&&r.push.apply(r,jt.f(r.splice(a.indexOf("Debug"),1))),r}(e).forEach((function(e){t[e.name]=e,function(e){-1===$t.indexOf(e.name)&&(e.setupOnce(Dt.b,Nt.a),$t.push(e.name),Mt.a.log("Integration installed: "+e.name))}(e)})),t}var Jt,Yt=function(){function e(e,t){this._integrations={},this._processing=!1,this._backend=new e(t),this._options=t,t.dsn&&(this._dsn=new Wt(t.dsn)),this._isEnabled()&&(this._integrations=Kt(this._options))}return e.prototype.captureException=function(e,t,n){var r=this,o=t&&t.event_id;return this._processing=!0,this._getBackend().eventFromException(e,t).then((function(e){return r._processEvent(e,t,n)})).then((function(e){o=e&&e.event_id,r._processing=!1})).then(null,(function(e){Mt.a.error(e),r._processing=!1})),o},e.prototype.captureMessage=function(e,t,n,r){var o=this,i=n&&n.event_id;return this._processing=!0,(Object(Gt.i)(e)?this._getBackend().eventFromMessage(""+e,t,n):this._getBackend().eventFromException(e,n)).then((function(e){return o._processEvent(e,n,r)})).then((function(e){i=e&&e.event_id,o._processing=!1})).then(null,(function(e){Mt.a.error(e),o._processing=!1})),i},e.prototype.captureEvent=function(e,t,n){var r=this,o=t&&t.event_id;return this._processing=!0,this._processEvent(e,t,n).then((function(e){o=e&&e.event_id,r._processing=!1})).then(null,(function(e){Mt.a.error(e),r._processing=!1})),o},e.prototype.getDsn=function(){return this._dsn},e.prototype.getOptions=function(){return this._options},e.prototype.flush=function(e){var t=this;return this._isClientProcessing(e).then((function(n){return clearInterval(n.interval),t._getBackend().getTransport().close(e).then((function(e){return n.ready&&e}))}))},e.prototype.close=function(e){var t=this;return this.flush(e).then((function(e){return t.getOptions().enabled=!1,e}))},e.prototype.getIntegrations=function(){return this._integrations||{}},e.prototype.getIntegration=function(e){try{return this._integrations[e.id]||null}catch(t){return Mt.a.warn("Cannot retrieve integration "+e.id+" from the current Client"),null}},e.prototype._isClientProcessing=function(e){var t=this;return new Ut.a((function(n){var r=0,o=0;clearInterval(o),o=setInterval((function(){t._processing?(r+=1,e&&r>=e&&n({interval:o,ready:!1})):n({interval:o,ready:!0})}),1)}))},e.prototype._getBackend=function(){return this._backend},e.prototype._isEnabled=function(){return!1!==this.getOptions().enabled&&void 0!==this._dsn},e.prototype._prepareEvent=function(e,t,n){var r=this.getOptions(),o=r.environment,i=r.release,a=r.dist,c=r.maxValueLength,s=void 0===c?250:c,u=jt.a({},e);void 0===u.environment&&void 0!==o&&(u.environment=o),void 0===u.release&&void 0!==i&&(u.release=i),void 0===u.dist&&void 0!==a&&(u.dist=a),u.message&&(u.message=Object(At.d)(u.message,s));var l=u.exception&&u.exception.values&&u.exception.values[0];l&&l.value&&(l.value=Object(At.d)(l.value,s));var f=u.request;f&&f.url&&(f.url=Object(At.d)(f.url,s)),void 0===u.event_id&&(u.event_id=Object(It.n)()),this._addIntegrations(u.sdk);var p=Ut.a.resolve(u);return t&&(p=t.applyToEvent(u,n)),p},e.prototype._addIntegrations=function(e){var t=Object.keys(this._integrations);e&&t.length>0&&(e.integrations=t)},e.prototype._processEvent=function(e,t,n){var r=this,o=this.getOptions(),i=o.beforeSend,a=o.sampleRate;return this._isEnabled()?"number"==typeof a&&Math.random()>a?Ut.a.reject("This event has been sampled, will not send event."):new Ut.a((function(o,a){r._prepareEvent(e,n,t).then((function(e){if(null!==e){var n=e;try{if(t&&t.data&&!0===t.data.__sentry__||!i)return r._getBackend().sendEvent(n),void o(n);var c=i(e,t);if(void 0===c)Mt.a.error("`beforeSend` method has to return `null` or a valid event.");else if(Object(Gt.m)(c))r._handleAsyncBeforeSend(c,o,a);else{if(null===(n=c))return Mt.a.log("`beforeSend` returned `null`, will not send event."),void o(null);r._getBackend().sendEvent(n),o(n)}}catch(e){r.captureException(e,{data:{__sentry__:!0},originalException:e}),a("`beforeSend` threw an error, will not send event.")}}else a("An event processor returned null, will not send event.")})).then(null,(function(){a("`beforeSend` threw an error, will not send event.")}))})):Ut.a.reject("SDK not enabled, will not send event.")},e.prototype._handleAsyncBeforeSend=function(e,t,n){var r=this;e.then((function(e){null!==e?(r._getBackend().sendEvent(e),t(e)):n("`beforeSend` returned `null`, will not send event.")})).then(null,(function(e){n("beforeSend rejected with "+e)}))},e}();!function(e){e.Unknown="unknown",e.Skipped="skipped",e.Success="success",e.RateLimit="rate_limit",e.Invalid="invalid",e.Failed="failed"}(Jt||(Jt={})),function(e){e.fromHttpCode=function(t){return t>=200&&t<300?e.Success:429===t?e.RateLimit:t>=400&&t<500?e.Invalid:t>=500?e.Failed:e.Unknown}}(Jt||(Jt={}));var Xt,Qt=function(){function e(){}return e.prototype.sendEvent=function(e){return Ut.a.resolve({reason:"NoopTransport: Event has been skipped because no Dsn is configured.",status:Jt.Skipped})},e.prototype.close=function(e){return Ut.a.resolve(!0)},e}(),Zt=function(){function e(e){this._options=e,this._options.dsn||Mt.a.warn("No DSN provided, backend will not do anything."),this._transport=this._setupTransport()}return e.prototype._setupTransport=function(){return new Qt},e.prototype.eventFromException=function(e,t){throw new Bt("Backend has to implement `eventFromException` method")},e.prototype.eventFromMessage=function(e,t,n){throw new Bt("Backend has to implement `eventFromMessage` method")},e.prototype.sendEvent=function(e){this._transport.sendEvent(e).then(null,(function(e){Mt.a.error("Error while sending event: "+e)}))},e.prototype.getTransport=function(){return this._transport},e}();function en(){if(!("fetch"in Object(It.g)()))return!1;try{return new Headers,new Request(""),new Response,!0}catch(e){return!1}}function tn(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}function nn(){if(!en())return!1;try{return new Request("_",{referrerPolicy:"origin"}),!0}catch(e){return!1}}!function(e){e.Fatal="fatal",e.Error="error",e.Warning="warning",e.Log="log",e.Info="info",e.Debug="debug",e.Critical="critical"}(Xt||(Xt={})),function(e){e.fromString=function(t){switch(t){case"debug":return e.Debug;case"info":return e.Info;case"warn":case"warning":return e.Warning;case"error":return e.Error;case"fatal":return e.Fatal;case"critical":return e.Critical;case"log":default:return e.Log}}}(Xt||(Xt={}));var rn=/^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[-a-z]+:|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,on=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js))(?::(\d+))?(?::(\d+))?\s*$/i,an=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,cn=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,sn=/\((\S*)(?::(\d+))(?::(\d+))\)/;function un(e){var t=null,n=e&&e.framesToPop;try{if(t=function(e){if(!e||!e.stacktrace)return null;for(var t,n=e.stacktrace,r=/ line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,o=/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\))? in (.*):\s*$/i,i=n.split("\n"),a=[],c=0;c<i.length;c+=2){var s=null;(t=r.exec(i[c]))?s={url:t[2],func:t[3],args:[],line:+t[1],column:null}:(t=o.exec(i[c]))&&(s={url:t[6],func:t[3]||t[4],args:t[5]?t[5].split(","):[],line:+t[1],column:+t[2]}),s&&(!s.func&&s.line&&(s.func="?"),a.push(s))}if(!a.length)return null;return{message:fn(e),name:e.name,stack:a}}(e))return ln(t,n)}catch(e){}try{if(t=function(e){if(!e||!e.stack)return null;for(var t,n,r,o=[],i=e.stack.split("\n"),a=0;a<i.length;++a){if(n=rn.exec(i[a])){var c=n[2]&&0===n[2].indexOf("native");n[2]&&0===n[2].indexOf("eval")&&(t=sn.exec(n[2]))&&(n[2]=t[1],n[3]=t[2],n[4]=t[3]),r={url:n[2],func:n[1]||"?",args:c?[n[2]]:[],line:n[3]?+n[3]:null,column:n[4]?+n[4]:null}}else if(n=an.exec(i[a]))r={url:n[2],func:n[1]||"?",args:[],line:+n[3],column:n[4]?+n[4]:null};else{if(!(n=on.exec(i[a])))continue;n[3]&&n[3].indexOf(" > eval")>-1&&(t=cn.exec(n[3]))?(n[1]=n[1]||"eval",n[3]=t[1],n[4]=t[2],n[5]=""):0!==a||n[5]||void 0===e.columnNumber||(o[0].column=e.columnNumber+1),r={url:n[3],func:n[1]||"?",args:n[2]?n[2].split(","):[],line:n[4]?+n[4]:null,column:n[5]?+n[5]:null}}!r.func&&r.line&&(r.func="?"),o.push(r)}if(!o.length)return null;return{message:fn(e),name:e.name,stack:o}}(e))return ln(t,n)}catch(e){}return{message:fn(e),name:e&&e.name,stack:[],failed:!0}}function ln(e,t){try{return jt.a({},e,{stack:e.stack.slice(t)})}catch(t){return e}}function fn(e){var t=e&&e.message;return t?t.error&&"string"==typeof t.error.message?t.error.message:t:"No error message"}function pn(e){var t=hn(e.stack),n={type:e.name,value:e.message};return t&&t.length&&(n.stacktrace={frames:t}),void 0===n.type&&""===n.value&&(n.value="Unrecoverable error caught"),n}function dn(e){return{exception:{values:[pn(e)]}}}function hn(e){if(!e||!e.length)return[];var t=e,n=t[0].func||"",r=t[t.length-1].func||"";return-1===n.indexOf("captureMessage")&&-1===n.indexOf("captureException")||(t=t.slice(1)),-1!==r.indexOf("sentryWrapped")&&(t=t.slice(0,-1)),t.map((function(e){return{colno:null===e.column?void 0:e.column,filename:e.url||t[0].url,function:e.func||"?",in_app:!0,lineno:null===e.line?void 0:e.line}})).slice(0,50).reverse()}function mn(e,t,n){var r;if(void 0===n&&(n={}),Object(Gt.e)(e)&&e.error)return r=dn(un(e=e.error));if(Object(Gt.a)(e)||Object(Gt.b)(e)){var o=e,i=o.name||(Object(Gt.a)(o)?"DOMError":"DOMException"),a=o.message?i+": "+o.message:i;return r=vn(a,t,n),Object(It.b)(r,a),r}return Object(Gt.d)(e)?r=dn(un(e)):Object(Gt.h)(e)||Object(Gt.f)(e)?(r=function(e,t,n){var r={exception:{values:[{type:Object(Gt.f)(e)?e.constructor.name:n?"UnhandledRejection":"Error",value:"Non-Error "+(n?"promise rejection":"exception")+" captured with keys: "+Object(qt.a)(e)}]},extra:{__serialized__:Object(qt.d)(e)}};if(t){var o=hn(un(t).stack);r.stacktrace={frames:o}}return r}(e,t,n.rejection),Object(It.a)(r,{synthetic:!0}),r):(r=vn(e,t,n),Object(It.b)(r,""+e,void 0),Object(It.a)(r,{synthetic:!0}),r)}function vn(e,t,n){void 0===n&&(n={});var r={message:e};if(n.attachStacktrace&&t){var o=hn(un(t).stack);r.stacktrace={frames:o}}return r}var yn=function(){function e(e){this._limit=e,this._buffer=[]}return e.prototype.isReady=function(){return void 0===this._limit||this.length()<this._limit},e.prototype.add=function(e){var t=this;return this.isReady()?(-1===this._buffer.indexOf(e)&&this._buffer.push(e),e.then((function(){return t.remove(e)})).then(null,(function(){return t.remove(e).then(null,(function(){}))})),e):Ut.a.reject(new Bt("Not adding Promise due to buffer limit reached."))},e.prototype.remove=function(e){return this._buffer.splice(this._buffer.indexOf(e),1)[0]},e.prototype.length=function(){return this._buffer.length},e.prototype.drain=function(e){var t=this;return new Ut.a((function(n){var r=setTimeout((function(){e&&e>0&&n(!1)}),e);Ut.a.all(t._buffer).then((function(){clearTimeout(r),n(!0)})).then(null,(function(){n(!0)}))}))},e}(),gn=function(){function e(e){this.options=e,this._buffer=new yn(30),this.url=new Vt(this.options.dsn).getStoreEndpointWithUrlEncodedAuth()}return e.prototype.sendEvent=function(e){throw new Bt("Transport Class has to implement `sendEvent` method")},e.prototype.close=function(e){return this._buffer.drain(e)},e}(),bn=Object(It.g)(),wn=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._disabledUntil=new Date(Date.now()),t}return jt.c(t,e),t.prototype.sendEvent=function(e){var t=this;if(new Date(Date.now())<this._disabledUntil)return Promise.reject({event:e,reason:"Transport locked till "+this._disabledUntil+" due to too many requests.",status:429});var n={body:JSON.stringify(e),method:"POST",referrerPolicy:nn()?"origin":""};return void 0!==this.options.headers&&(n.headers=this.options.headers),this._buffer.add(new Ut.a((function(e,r){bn.fetch(t.url,n).then((function(n){var o=Jt.fromHttpCode(n.status);if(o!==Jt.Success){if(o===Jt.RateLimit){var i=Date.now();t._disabledUntil=new Date(i+Object(It.k)(i,n.headers.get("Retry-After"))),Mt.a.warn("Too many requests, backing off till: "+t._disabledUntil)}r(n)}else e({status:o})})).catch(r)})))},t}(gn),En=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._disabledUntil=new Date(Date.now()),t}return jt.c(t,e),t.prototype.sendEvent=function(e){var t=this;return new Date(Date.now())<this._disabledUntil?Promise.reject({event:e,reason:"Transport locked till "+this._disabledUntil+" due to too many requests.",status:429}):this._buffer.add(new Ut.a((function(n,r){var o=new XMLHttpRequest;for(var i in o.onreadystatechange=function(){if(4===o.readyState){var e=Jt.fromHttpCode(o.status);if(e!==Jt.Success){if(e===Jt.RateLimit){var i=Date.now();t._disabledUntil=new Date(i+Object(It.k)(i,o.getResponseHeader("Retry-After"))),Mt.a.warn("Too many requests, backing off till: "+t._disabledUntil)}r(o)}else n({status:e})}},o.open("POST",t.url),t.options.headers)t.options.headers.hasOwnProperty(i)&&o.setRequestHeader(i,t.options.headers[i]);o.send(JSON.stringify(e))})))},t}(gn),Sn=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return jt.c(t,e),t.prototype._setupTransport=function(){if(!this._options.dsn)return e.prototype._setupTransport.call(this);var t=jt.a({},this._options.transportOptions,{dsn:this._options.dsn});return this._options.transport?new this._options.transport(t):en()?new wn(t):new En(t)},t.prototype.eventFromException=function(e,t){var n=mn(e,t&&t.syntheticException||void 0,{attachStacktrace:this._options.attachStacktrace});return Object(It.a)(n,{handled:!0,type:"generic"}),n.level=Xt.Error,t&&t.event_id&&(n.event_id=t.event_id),Ut.a.resolve(n)},t.prototype.eventFromMessage=function(e,t,n){void 0===t&&(t=Xt.Info);var r=vn(e,n&&n.syntheticException||void 0,{attachStacktrace:this._options.attachStacktrace});return r.level=t,n&&n.event_id&&(r.event_id=n.event_id),Ut.a.resolve(r)},t}(Zt),Cn=function(e){function t(t){return void 0===t&&(t={}),e.call(this,Sn,t)||this}return jt.c(t,e),t.prototype._prepareEvent=function(t,n,r){return t.platform=t.platform||"javascript",t.sdk=jt.a({},t.sdk,{name:"sentry.javascript.browser",packages:jt.f(t.sdk&&t.sdk.packages||[],[{name:"npm:@sentry/browser",version:"5.11.1"}]),version:"5.11.1"}),e.prototype._prepareEvent.call(this,t,n,r)},t.prototype.showReportDialog=function(e){void 0===e&&(e={});var t=Object(It.g)().document;if(t)if(this._isEnabled()){var n=e.dsn||this.getDsn();if(e.eventId)if(n){var r=t.createElement("script");r.async=!0,r.src=new Vt(n).getReportDialogEndpoint(e),e.onLoad&&(r.onload=e.onLoad),(t.head||t.body).appendChild(r)}else Mt.a.error("Missing `Dsn` option in showReportDialog call");else Mt.a.error("Missing `eventId` option in showReportDialog call")}else Mt.a.error("Trying to call showReportDialog with Sentry Client is disabled")},t}(Yt);function _n(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Object(Nt.a)();if(r&&r[e])return r[e].apply(r,jt.f(t));throw new Error("No hub defined or "+e+" was not found on the hub, please open a bug report.")}function kn(e){var t;try{throw new Error("Sentry syntheticException")}catch(e){t=e}return _n("captureException",e,{originalException:e,syntheticException:t})}function xn(e){_n("withScope",e)}var Tn=0;function On(){return Tn>0}function Pn(){Tn+=1,setTimeout((function(){Tn-=1}))}function Rn(e,t,n){if(void 0===t&&(t={}),"function"!=typeof e)return e;try{if(e.__sentry__)return e;if(e.__sentry_wrapped__)return e.__sentry_wrapped__}catch(t){return e}var r=function(){var r=Array.prototype.slice.call(arguments);try{n&&"function"==typeof n&&n.apply(this,arguments);var o=r.map((function(e){return Rn(e,t)}));return e.handleEvent?e.handleEvent.apply(this,o):e.apply(this,o)}catch(e){throw Pn(),xn((function(n){n.addEventProcessor((function(e){var n=jt.a({},e);return t.mechanism&&(Object(It.b)(n,void 0,void 0),Object(It.a)(n,t.mechanism)),n.extra=jt.a({},n.extra,{arguments:Object(qt.c)(r,3)}),n})),kn(e)})),e}};try{for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(r[o]=e[o])}catch(e){}e.prototype=e.prototype||{},r.prototype=e.prototype,Object.defineProperty(e,"__sentry_wrapped__",{enumerable:!1,value:r}),Object.defineProperties(r,{__sentry__:{enumerable:!1,value:!0},__sentry_original__:{enumerable:!1,value:e}});try{Object.getOwnPropertyDescriptor(r,"name").configurable&&Object.defineProperty(r,"name",{get:function(){return e.name}})}catch(e){}return r}var jn,Dn=function(){function e(){this._ignoreOnError=0,this.name=e.id}return e.prototype._wrapTimeFunction=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[0];return t[0]=Rn(r,{mechanism:{data:{function:Object(It.f)(e)},handled:!0,type:"instrument"}}),e.apply(this,t)}},e.prototype._wrapRAF=function(e){return function(t){return e(Rn(t,{mechanism:{data:{function:"requestAnimationFrame",handler:Object(It.f)(e)},handled:!0,type:"instrument"}}))}},e.prototype._wrapEventTarget=function(e){var t=Object(It.g)(),n=t[e]&&t[e].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&(Object(qt.b)(n,"addEventListener",(function(t){return function(n,r,o){try{"function"==typeof r.handleEvent&&(r.handleEvent=Rn(r.handleEvent.bind(r),{mechanism:{data:{function:"handleEvent",handler:Object(It.f)(r),target:e},handled:!0,type:"instrument"}}))}catch(e){}return t.call(this,n,Rn(r,{mechanism:{data:{function:"addEventListener",handler:Object(It.f)(r),target:e},handled:!0,type:"instrument"}}),o)}})),Object(qt.b)(n,"removeEventListener",(function(e){return function(t,n,r){var o=n;try{o=o&&(o.__sentry_wrapped__||o)}catch(e){}return e.call(this,t,o,r)}})))},e.prototype._wrapXHR=function(e){return function(){for(var t=this,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=this,i=["onload","onerror","onprogress"];return i.forEach((function(e){e in t&&"function"==typeof t[e]&&Object(qt.b)(t,e,(function(t){return Rn(t,{mechanism:{data:{function:e,handler:Object(It.f)(t)},handled:!0,type:"instrument"}})}))})),"onreadystatechange"in o&&"function"==typeof o.onreadystatechange&&Object(qt.b)(o,"onreadystatechange",(function(e){var t={mechanism:{data:{function:"onreadystatechange",handler:Object(It.f)(e)},handled:!0,type:"instrument"}};return e.__sentry_original__&&(t.mechanism.data.handler=Object(It.f)(e.__sentry_original__)),Rn(e,t)})),e.apply(this,n)}},e.prototype.setupOnce=function(){this._ignoreOnError=this._ignoreOnError;var e=Object(It.g)();Object(qt.b)(e,"setTimeout",this._wrapTimeFunction.bind(this)),Object(qt.b)(e,"setInterval",this._wrapTimeFunction.bind(this)),Object(qt.b)(e,"requestAnimationFrame",this._wrapRAF.bind(this)),"XMLHttpRequest"in e&&Object(qt.b)(XMLHttpRequest.prototype,"send",this._wrapXHR.bind(this)),["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"].forEach(this._wrapEventTarget.bind(this))},e.id="TryCatch",e}(),Nn=Object(It.g)(),Mn={},In={};function An(e){if(!In[e])switch(In[e]=!0,e){case"console":!function(){if(!("console"in Nn))return;["debug","info","warn","error","log","assert"].forEach((function(e){e in Nn.console&&Object(qt.b)(Nn.console,e,(function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Fn("console",{args:n,level:e}),t&&Function.prototype.apply.call(t,Nn.console,n)}}))}))}();break;case"dom":!function(){if(!("document"in Nn))return;Nn.document.addEventListener("click",qn("click",Fn.bind(null,"dom")),!1),Nn.document.addEventListener("keypress",Vn(Fn.bind(null,"dom")),!1),["EventTarget","Node"].forEach((function(e){var t=Nn[e]&&Nn[e].prototype;t&&t.hasOwnProperty&&t.hasOwnProperty("addEventListener")&&(Object(qt.b)(t,"addEventListener",(function(e){return function(t,n,r){return n&&n.handleEvent?("click"===t&&Object(qt.b)(n,"handleEvent",(function(e){return function(t){return qn("click",Fn.bind(null,"dom"))(t),e.call(this,t)}})),"keypress"===t&&Object(qt.b)(n,"handleEvent",(function(e){return function(t){return Vn(Fn.bind(null,"dom"))(t),e.call(this,t)}}))):("click"===t&&qn("click",Fn.bind(null,"dom"),!0)(this),"keypress"===t&&Vn(Fn.bind(null,"dom"))(this)),e.call(this,t,n,r)}})),Object(qt.b)(t,"removeEventListener",(function(e){return function(t,n,r){var o=n;try{o=o&&(o.__sentry_wrapped__||o)}catch(e){}return e.call(this,t,o,r)}})))}))}();break;case"xhr":!function(){if(!("XMLHttpRequest"in Nn))return;var e=XMLHttpRequest.prototype;Object(qt.b)(e,"open",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[1];return this.__sentry_xhr__={method:Object(Gt.k)(t[0])?t[0].toUpperCase():t[0],url:t[1]},Object(Gt.k)(r)&&"POST"===this.__sentry_xhr__.method&&r.match(/sentry_key/)&&(this.__sentry_own_request__=!0),e.apply(this,t)}})),Object(qt.b)(e,"send",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this,o={args:t,startTimestamp:Date.now(),xhr:r};function i(){if(4===r.readyState){try{r.__sentry_xhr__&&(r.__sentry_xhr__.status_code=r.status)}catch(e){}Fn("xhr",jt.a({},o,{endTimestamp:Date.now()}))}}return Fn("xhr",jt.a({},o)),"onreadystatechange"in r&&"function"==typeof r.onreadystatechange?Object(qt.b)(r,"onreadystatechange",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return i(),e.apply(r,t)}})):r.onreadystatechange=i,e.apply(this,t)}}))}();break;case"fetch":!function(){if(!function(){if(!en())return!1;var e=Object(It.g)();if(tn(e.fetch))return!0;var t=!1,n=e.document;if(n){var r=n.createElement("iframe");r.hidden=!0;try{n.head.appendChild(r),r.contentWindow&&r.contentWindow.fetch&&(t=tn(r.contentWindow.fetch)),n.head.removeChild(r)}catch(e){Mt.a.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}}return t}())return;Object(qt.b)(Nn,"fetch",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r={args:t,fetchData:{method:Un(t),url:zn(t)},startTimestamp:Date.now()};return Fn("fetch",jt.a({},r)),e.apply(Nn,t).then((function(e){return Fn("fetch",jt.a({},r,{endTimestamp:Date.now(),response:e})),e}),(function(e){throw Fn("fetch",jt.a({},r,{endTimestamp:Date.now(),error:e})),e}))}}))}();break;case"history":!function(){if(e=Object(It.g)(),t=e.chrome,n=t&&t.app&&t.app.runtime,r="history"in e&&!!e.history.pushState&&!!e.history.replaceState,n||!r)return;var e,t,n,r;var o=Nn.onpopstate;function i(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length>2?t[2]:void 0;if(r){var o=jn,i=String(r);jn=i,Fn("history",{from:o,to:i})}return e.apply(this,t)}}Nn.onpopstate=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Nn.location.href,r=jn;if(jn=n,Fn("history",{from:r,to:n}),o)return o.apply(this,e)},Object(qt.b)(Nn.history,"pushState",i),Object(qt.b)(Nn.history,"replaceState",i)}();break;default:Mt.a.warn("unknown instrumentation type:",e)}}function Ln(e){e&&"string"==typeof e.type&&"function"==typeof e.callback&&(Mn[e.type]=Mn[e.type]||[],Mn[e.type].push(e.callback),An(e.type))}function Fn(e,t){var n,r;if(e&&Mn[e])try{for(var o=jt.g(Mn[e]||[]),i=o.next();!i.done;i=o.next()){var a=i.value;try{a(t)}catch(t){Mt.a.error("Error while triggering instrumentation handler.\nType: "+e+"\nName: "+Object(It.f)(a)+"\nError: "+t)}}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}function Un(e){return void 0===e&&(e=[]),"Request"in Nn&&Object(Gt.g)(e[0],Request)&&e[0].method?String(e[0].method).toUpperCase():e[1]&&e[1].method?String(e[1].method).toUpperCase():"GET"}function zn(e){return void 0===e&&(e=[]),"string"==typeof e[0]?e[0]:"Request"in Nn&&Object(Gt.g)(e[0],Request)?e[0].url:String(e[0])}var Bn,Hn,Wn=0;function qn(e,t,n){return void 0===n&&(n=!1),function(r){Bn=void 0,r&&Hn!==r&&(Hn=r,Wn&&clearTimeout(Wn),n?Wn=setTimeout((function(){t({event:r,name:e})})):t({event:r,name:e}))}}function Vn(e){return function(t){var n;try{n=t.target}catch(e){return}var r=n&&n.tagName;r&&("INPUT"===r||"TEXTAREA"===r||n.isContentEditable)&&(Bn||qn("input",e)(t),clearTimeout(Bn),Bn=setTimeout((function(){Bn=void 0}),1e3))}}var Gn=function(){function e(t){this.name=e.id,this._options=jt.a({console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0},t)}return e.prototype._consoleBreadcrumb=function(e){var t={category:"console",data:{extra:{arguments:Object(qt.c)(e.args,3)},logger:"console"},level:Xt.fromString(e.level),message:Object(At.b)(e.args," ")};if("assert"===e.level){if(!1!==e.args[0])return;t.message="Assertion failed: "+(Object(At.b)(e.args.slice(1)," ")||"console.assert"),t.data.extra.arguments=Object(qt.c)(e.args.slice(1),3)}Object(Nt.a)().addBreadcrumb(t,{input:e.args,level:e.level})},e.prototype._domBreadcrumb=function(e){var t;try{t=e.event.target?Object(It.i)(e.event.target):Object(It.i)(e.event)}catch(e){t="<unknown>"}0!==t.length&&Object(Nt.a)().addBreadcrumb({category:"ui."+e.name,message:t},{event:event,name:e.name})},e.prototype._xhrBreadcrumb=function(e){if(e.endTimestamp){if(e.xhr.__sentry_own_request__)return;Object(Nt.a)().addBreadcrumb({category:"xhr",data:e.xhr.__sentry_xhr__,type:"http"},{xhr:e.xhr})}else e.xhr.__sentry_own_request__&&$n(e.args[0])},e.prototype._fetchBreadcrumb=function(e){if(e.endTimestamp){var t=Object(Nt.a)().getClient(),n=t&&t.getDsn();if(n){var r=new Vt(n).getStoreEndpoint();if(r&&-1!==e.fetchData.url.indexOf(r)&&"POST"===e.fetchData.method&&e.args[1]&&e.args[1].body)return void $n(e.args[1].body)}e.error?Object(Nt.a)().addBreadcrumb({category:"fetch",data:jt.a({},e.fetchData,{status_code:e.response.status}),level:Xt.Error,type:"http"},{data:e.error,input:e.args}):Object(Nt.a)().addBreadcrumb({category:"fetch",data:jt.a({},e.fetchData,{status_code:e.response.status}),type:"http"},{input:e.args,response:e.response})}},e.prototype._historyBreadcrumb=function(e){var t=Object(It.g)(),n=e.from,r=e.to,o=Object(It.l)(t.location.href),i=Object(It.l)(n),a=Object(It.l)(r);i.path||(i=o),o.protocol===a.protocol&&o.host===a.host&&(r=a.relative),o.protocol===i.protocol&&o.host===i.host&&(n=i.relative),Object(Nt.a)().addBreadcrumb({category:"navigation",data:{from:n,to:r}})},e.prototype.setupOnce=function(){var e=this;this._options.console&&Ln({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._consoleBreadcrumb.apply(e,jt.f(t))},type:"console"}),this._options.dom&&Ln({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._domBreadcrumb.apply(e,jt.f(t))},type:"dom"}),this._options.xhr&&Ln({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._xhrBreadcrumb.apply(e,jt.f(t))},type:"xhr"}),this._options.fetch&&Ln({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._fetchBreadcrumb.apply(e,jt.f(t))},type:"fetch"}),this._options.history&&Ln({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._historyBreadcrumb.apply(e,jt.f(t))},type:"history"})},e.id="Breadcrumbs",e}();function $n(e){try{var t=JSON.parse(e);Object(Nt.a)().addBreadcrumb({category:"sentry",event_id:t.event_id,level:t.level||Xt.fromString("error"),message:Object(It.e)(t)},{event:t})}catch(e){Mt.a.error("Error while adding sentry type breadcrumb")}}var Kn=function(){function e(t){this.name=e.id,this._global=Object(It.g)(),this._oldOnErrorHandler=null,this._oldOnUnhandledRejectionHandler=null,this._onErrorHandlerInstalled=!1,this._onUnhandledRejectionHandlerInstalled=!1,this._options=jt.a({onerror:!0,onunhandledrejection:!0},t)}return e.prototype.setupOnce=function(){Error.stackTraceLimit=50,this._options.onerror&&(Mt.a.log("Global Handler attached: onerror"),this._installGlobalOnErrorHandler()),this._options.onunhandledrejection&&(Mt.a.log("Global Handler attached: onunhandledrejection"),this._installGlobalOnUnhandledRejectionHandler())},e.prototype._installGlobalOnErrorHandler=function(){if(!this._onErrorHandlerInstalled){var t=this;this._oldOnErrorHandler=this._global.onerror,this._global.onerror=function(n,r,o,i,a){var c=Object(Nt.a)(),s=c.getIntegration(e),u=a&&!0===a.__sentry_own_request__;if(!s||On()||u)return!!t._oldOnErrorHandler&&t._oldOnErrorHandler.apply(this,arguments);var l=c.getClient(),f=Object(Gt.i)(a)?t._eventFromIncompleteOnError(n,r,o,i):t._enhanceEventWithInitialFrame(mn(a,void 0,{attachStacktrace:l&&l.getOptions().attachStacktrace,rejection:!1}),r,o,i);return Object(It.a)(f,{handled:!1,type:"onerror"}),c.captureEvent(f,{originalException:a}),!!t._oldOnErrorHandler&&t._oldOnErrorHandler.apply(this,arguments)},this._onErrorHandlerInstalled=!0}},e.prototype._installGlobalOnUnhandledRejectionHandler=function(){if(!this._onUnhandledRejectionHandlerInstalled){var t=this;this._oldOnUnhandledRejectionHandler=this._global.onunhandledrejection,this._global.onunhandledrejection=function(n){var r=n;try{r=n&&"reason"in n?n.reason:n}catch(e){}var o=Object(Nt.a)(),i=o.getIntegration(e),a=r&&!0===r.__sentry_own_request__;if(!i||On()||a)return!t._oldOnUnhandledRejectionHandler||t._oldOnUnhandledRejectionHandler.apply(this,arguments);var c=o.getClient(),s=Object(Gt.i)(r)?t._eventFromIncompleteRejection(r):mn(r,void 0,{attachStacktrace:c&&c.getOptions().attachStacktrace,rejection:!0});return s.level=Xt.Error,Object(It.a)(s,{handled:!1,type:"onunhandledrejection"}),o.captureEvent(s,{originalException:r}),!t._oldOnUnhandledRejectionHandler||t._oldOnUnhandledRejectionHandler.apply(this,arguments)},this._onUnhandledRejectionHandlerInstalled=!0}},e.prototype._eventFromIncompleteOnError=function(e,t,n,r){var o,i=Object(Gt.e)(e)?e.message:e;if(Object(Gt.k)(i)){var a=i.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);a&&(o=a[1],i=a[2])}var c={exception:{values:[{type:o||"Error",value:i}]}};return this._enhanceEventWithInitialFrame(c,t,n,r)},e.prototype._eventFromIncompleteRejection=function(e){return{exception:{values:[{type:"UnhandledRejection",value:"Non-Error promise rejection captured with value: "+e}]}}},e.prototype._enhanceEventWithInitialFrame=function(e,t,n,r){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].stacktrace=e.exception.values[0].stacktrace||{},e.exception.values[0].stacktrace.frames=e.exception.values[0].stacktrace.frames||[];var o=isNaN(parseInt(r,10))?void 0:r,i=isNaN(parseInt(n,10))?void 0:n,a=Object(Gt.k)(t)&&t.length>0?t:Object(It.h)();return 0===e.exception.values[0].stacktrace.frames.length&&e.exception.values[0].stacktrace.frames.push({colno:o,filename:a,function:"?",in_app:!0,lineno:i}),e},e.id="GlobalHandlers",e}(),Jn=function(){function e(t){void 0===t&&(t={}),this.name=e.id,this._key=t.key||"cause",this._limit=t.limit||5}return e.prototype.setupOnce=function(){Object(Dt.b)((function(t,n){var r=Object(Nt.a)().getIntegration(e);return r?r._handler(t,n):t}))},e.prototype._handler=function(e,t){if(!(e.exception&&e.exception.values&&t&&Object(Gt.g)(t.originalException,Error)))return e;var n=this._walkErrorTree(t.originalException,this._key);return e.exception.values=jt.f(n,e.exception.values),e},e.prototype._walkErrorTree=function(e,t,n){if(void 0===n&&(n=[]),!Object(Gt.g)(e[t],Error)||n.length+1>=this._limit)return n;var r=pn(un(e[t]));return this._walkErrorTree(e[t],t,jt.f([r],n))},e.id="LinkedErrors",e}(),Yn=Object(It.g)(),Xn=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){Object(Dt.b)((function(t){if(Object(Nt.a)().getIntegration(e)){if(!Yn.navigator||!Yn.location)return t;var n=t.request||{};return n.url=n.url||Yn.location.href,n.headers=n.headers||{},n.headers["User-Agent"]=Yn.navigator.userAgent,jt.a({},t,{request:n})}return t}))},e.id="UserAgent",e}(),Qn=[new s.InboundFilters,new s.FunctionToString,new Dn,new Gn,new Kn,new Jn,new Xn];function Zn(e){console.warn("[react-ga]",e)}function er(e){return(er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function rr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function or(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ir(e,t){return!t||"object"!==er(t)&&"function"!=typeof t?cr(e):t}function ar(e){return(ar=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function cr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function sr(e,t){return(sr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ur(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var lr=function(e){function t(){var e,n;rr(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return ur(cr(n=ir(this,(e=ar(t)).call.apply(e,[this].concat(o)))),"handleClick",(function(e){var r=n.props,o=r.target,i=r.eventLabel,a=r.to,c=r.onClick,s=r.trackerNames,u={label:i},l="_blank"!==o,f=!(e.ctrlKey||e.shiftKey||e.metaKey||1===e.button);l&&f?(e.preventDefault(),t.trackLink(u,(function(){window.location.href=a}),s)):t.trackLink(u,(function(){}),s),c&&c(e)})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&sr(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.to,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?tr(n,!0).forEach((function(t){ur(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},nr(e,["to"]),{href:t,onClick:this.handleClick});return"_blank"===this.props.target&&(n.rel="noopener noreferrer"),delete n.eventLabel,delete n.trackerNames,f.a.createElement("a",n)}}])&&or(n.prototype,r),o&&or(n,o),t}(l.Component);function fr(e){return e.replace(/^\s+|\s+$/g,"")}ur(lr,"trackLink",(function(){Zn("ga tracking not enabled")})),ur(lr,"propTypes",{eventLabel:ye.a.string.isRequired,target:ye.a.string,to:ye.a.string,onClick:ye.a.func,trackerNames:ye.a.arrayOf(ye.a.string)}),ur(lr,"defaultProps",{target:null,to:null,onClick:null,trackerNames:null});var pr=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;function dr(e,t){return function(e){return"string"==typeof e&&-1!==e.indexOf("@")}(e)?(Zn("This arg looks like an email address, redacting."),"REDACTED (Potential Email Address)"):t?fr(e).replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,(function(e,t,n){return t>0&&t+e.length!==n.length&&e.search(pr)>-1&&":"!==n.charAt(t-2)&&("-"!==n.charAt(t+e.length)||"-"===n.charAt(t-1))&&n.charAt(t-1).search(/[^\s-]/)<0?e.toLowerCase():e.substr(1).search(/[A-Z]|\../)>-1?e:e.charAt(0).toUpperCase()+e.substr(1)})):e}function hr(e){console.info("[react-ga]",e)}var mr=[],vr={calls:mr,ga:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];mr.push([].concat(t))},resetCalls:function(){mr.length=0}};function yr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function gr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function br(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function wr(e){return(wr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Er(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Sr="undefined"==typeof window||"undefined"==typeof document,Cr=!1,_r=!0,kr=!1,xr=!0,Tr=function(){var e;return kr?vr.ga.apply(vr,arguments):!Sr&&(window.ga?(e=window).ga.apply(e,arguments):Zn("ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually"))};function Or(e){return dr(e,_r)}function Pr(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=n[0];"string"==typeof o?(!xr&&Array.isArray(e)||Tr.apply(void 0,n),Array.isArray(e)&&e.forEach((function(e){Tr.apply(void 0,Er(["".concat(e,".").concat(o)].concat(n.slice(1))))}))):Zn("ga command must be a string")}function Rr(e,t){e?t&&(t.debug&&!0===t.debug&&(Cr=!0),!1===t.titleCase&&(_r=!1),t.useExistingGa)||(t&&t.gaOptions?Tr("create",e,t.gaOptions):Tr("create",e,"auto")):Zn("gaTrackingID is required in initialize()")}function jr(e,t){if(t&&!0===t.testMode)kr=!0;else{if(Sr)return!1;t&&!0===t.standardImplementation||function(e){var t,n,r,o,i,a,c,s="https://www.google-analytics.com/analytics.js";e&&e.gaAddress?s=e.gaAddress:e&&e.debug&&(s="https://www.google-analytics.com/analytics_debug.js"),t=window,n=document,r="script",o=s,i="ga",t.GoogleAnalyticsObject=i,t.ga=t.ga||function(){(t.ga.q=t.ga.q||[]).push(arguments)},t.ga.l=1*new Date,a=n.createElement(r),c=n.getElementsByTagName(r)[0],a.async=1,a.src=o,c.parentNode.insertBefore(a,c)}(t)}return xr=!t||"boolean"!=typeof t.alwaysSendToDefaultTracker||t.alwaysSendToDefaultTracker,Array.isArray(e)?e.forEach((function(e){"object"===wr(e)?Rr(e.trackingId,e):Zn("All configs must be an object")})):Rr(e,t),!0}function Dr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.length>0&&(Tr.apply(void 0,t),Cr&&(hr("called ga('arguments');"),hr("with arguments: ".concat(JSON.stringify(t))))),window.ga}function Nr(e,t){e?"object"===wr(e)?(0===Object.keys(e).length&&Zn("empty `fieldsObject` given to .set()"),Pr(t,"set",e),Cr&&(hr("called ga('set', fieldsObject);"),hr("with fieldsObject: ".concat(JSON.stringify(e))))):Zn("Expected `fieldsObject` arg to be an Object"):Zn("`fieldsObject` is required in .set()")}function Mr(e,t){Pr(t,"send",e),Cr&&(hr("called ga('send', fieldObject);"),hr("with fieldObject: ".concat(JSON.stringify(e))),hr("with trackers: ".concat(JSON.stringify(t))))}function Ir(e,t,n){if(e){var r=fr(e);if(""!==r){var o={};if(n&&(o.title=n),Pr(t,"send",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gr(n,!0).forEach((function(t){br(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({hitType:"pageview",page:r},o)),Cr){hr("called ga('send', 'pageview', path);");var i="";n&&(i=" and title: ".concat(n)),hr("with path: ".concat(r).concat(i))}}else Zn("path cannot be an empty string in .pageview()")}else Zn("path is required in .pageview()")}function Ar(e,t){if(e){var n,r="/"===(n=fr(e)).substring(0,1)?n.substring(1):n;if(""!==r){var o="/modal/".concat(r);Pr(t,"send","pageview",o),Cr&&(hr("called ga('send', 'pageview', path);"),hr("with path: ".concat(o)))}else Zn("modalName cannot be an empty string or a single / in .modalview()")}else Zn("modalName is required in .modalview(modalName)")}function Lr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.variable,r=e.value,o=e.label,i=arguments.length>1?arguments[1]:void 0;if(t&&n&&r&&"number"==typeof r){var a={hitType:"timing",timingCategory:Or(t),timingVar:Or(n),timingValue:r};o&&(a.timingLabel=Or(o)),Mr(a,i)}else Zn("args.category, args.variable AND args.value are required in timing() AND args.value has to be a number")}function Fr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.action,r=e.label,o=e.value,i=e.nonInteraction,a=e.transport,c=yr(e,["category","action","label","value","nonInteraction","transport"]),s=arguments.length>1?arguments[1]:void 0;if(t&&n){var u={hitType:"event",eventCategory:Or(t),eventAction:Or(n)};r&&(u.eventLabel=Or(r)),void 0!==o&&("number"!=typeof o?Zn("Expected `args.value` arg to be a Number."):u.eventValue=o),void 0!==i&&("boolean"!=typeof i?Zn("`args.nonInteraction` must be a boolean."):u.nonInteraction=i),void 0!==a&&("string"!=typeof a?Zn("`args.transport` must be a string."):(-1===["beacon","xhr","image"].indexOf(a)&&Zn("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"),u.transport=a)),Object.keys(c).filter((function(e){return"dimension"===e.substr(0,"dimension".length)})).forEach((function(e){u[e]=c[e]})),Object.keys(c).filter((function(e){return"metric"===e.substr(0,"metric".length)})).forEach((function(e){u[e]=c[e]})),Mr(u,s)}else Zn("args.category AND args.action are required in event()")}function Ur(e,t){var n=e.description,r=e.fatal,o={hitType:"exception"};n&&(o.exDescription=Or(n)),void 0!==r&&("boolean"!=typeof r?Zn("`args.fatal` must be a boolean."):o.exFatal=r),Mr(o,t)}var zr={require:function(e,t,n){if(e){var r=fr(e);if(""!==r){var o=n?"".concat(n,".require"):"require";if(t){if("object"!==wr(t))return void Zn("Expected `options` arg to be an Object");0===Object.keys(t).length&&Zn("Empty `options` given to .require()"),Dr(o,r,t),Cr&&hr("called ga('require', '".concat(r,"', ").concat(JSON.stringify(t)))}else Dr(o,r),Cr&&hr("called ga('require', '".concat(r,"');"))}else Zn("`name` cannot be an empty string in .require()")}else Zn("`name` is required in .require()")},execute:function(e,t){var n,r;if(1==(arguments.length<=2?0:arguments.length-2)?n=arguments.length<=2?void 0:arguments[2]:(r=arguments.length<=2?void 0:arguments[2],n=arguments.length<=3?void 0:arguments[3]),"string"!=typeof e)Zn("Expected `pluginName` arg to be a String.");else if("string"!=typeof t)Zn("Expected `action` arg to be a String.");else{var o="".concat(e,":").concat(t);n=n||null,r&&n?(Dr(o,r,n),Cr&&(hr("called ga('".concat(o,"');")),hr('actionType: "'.concat(r,'" with payload: ').concat(JSON.stringify(n))))):n?(Dr(o,n),Cr&&(hr("called ga('".concat(o,"');")),hr("with payload: ".concat(JSON.stringify(n))))):(Dr(o),Cr&&hr("called ga('".concat(o,"');")))}}};function Br(e,t,n){if("function"==typeof t)if(e&&e.label){var r={hitType:"event",eventCategory:"Outbound",eventAction:"Click",eventLabel:Or(e.label)},o=!1,i=setTimeout((function(){o=!0,t()}),250);r.hitCallback=function(){clearTimeout(i),o||t()},Mr(r,n)}else Zn("args.label is required in outboundLink()");else Zn("hitCallback function is required")}var Hr=vr,Wr={initialize:jr,ga:Dr,set:Nr,send:Mr,pageview:Ir,modalview:Ar,timing:Lr,event:Fr,exception:Ur,plugin:zr,outboundLink:Br,testModeAPI:vr};function qr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}lr.origTrackLink=lr.trackLink,lr.trackLink=Br;var Gr=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qr(n,!0).forEach((function(t){Vr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},u,{OutboundLink:lr});function $r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function Kr(e){return"/"===e.charAt(0)}function Jr(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var Yr=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&Kr(e),a=t&&Kr(t),c=i||a;if(e&&Kr(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var u=0,l=o.length;l>=0;l--){var f=o[l];"."===f?Jr(o,l):".."===f?(Jr(o,l),u++):u&&(Jr(o,l),u--)}if(!c)for(;u--;u)o.unshift("..");!c||""===o[0]||o[0]&&Kr(o[0])||o.unshift("");var p=o.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p};function Xr(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var Qr=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=Xr(t),o=Xr(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var Zr=function(e,t){if(!e)throw new Error("Invariant failed")};function eo(e){return"/"===e.charAt(0)?e:"/"+e}function to(e){return"/"===e.charAt(0)?e.substr(1):e}function no(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function ro(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function oo(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function io(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=ke({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Yr(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function ao(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var co=!("undefined"==typeof window||!window.document||!window.document.createElement);function so(e,t){t(window.confirm(e))}function uo(){try{return window.history.state||{}}catch(e){return{}}}function lo(e){void 0===e&&(e={}),co||Zr(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,c=void 0!==a&&a,s=i.getUserConfirmation,u=void 0===s?so:s,l=i.keyLength,f=void 0===l?6:l,p=e.basename?ro(eo(e.basename)):"";function d(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=no(i,p)),io(i,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=ao();function v(e){ke(O,e),O.length=n.length,m.notifyListeners(O.location,O.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||w(d(e.state))}function g(){w(d(uo()))}var b=!1;function w(e){if(b)b=!1,v();else{m.confirmTransitionTo(e,"POP",u,(function(t){t?v({action:"POP",location:e}):function(e){var t=O.location,n=S.indexOf(t.key);-1===n&&(n=0);var r=S.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,_(o))}(e)}))}}var E=d(uo()),S=[E.key];function C(e){return p+oo(e)}function _(e){n.go(e)}var k=0;function x(e){1===(k+=e)&&1===e?(window.addEventListener("popstate",y),o&&window.addEventListener("hashchange",g)):0===k&&(window.removeEventListener("popstate",y),o&&window.removeEventListener("hashchange",g))}var T=!1;var O={length:n.length,action:"POP",location:E,createHref:C,push:function(e,t){var o=io(e,t,h(),O.location);m.confirmTransitionTo(o,"PUSH",u,(function(e){if(e){var t=C(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),c)window.location.href=t;else{var s=S.indexOf(O.location.key),u=S.slice(0,s+1);u.push(o.key),S=u,v({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=io(e,t,h(),O.location);m.confirmTransitionTo(o,"REPLACE",u,(function(e){if(e){var t=C(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),c)window.location.replace(t);else{var s=S.indexOf(O.location.key);-1!==s&&(S[s]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:_,goBack:function(){_(-1)},goForward:function(){_(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return T||(x(1),T=!0),function(){return T&&(T=!1,x(-1)),t()}},listen:function(e){var t=m.appendListener(e);return x(1),function(){x(-1),t()}}};return O}var fo={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+to(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:to,decodePath:eo},slash:{encodePath:eo,decodePath:eo}};function po(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function ho(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function mo(e){window.location.replace(po(window.location.href)+"#"+e)}function vo(e){void 0===e&&(e={}),co||Zr(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?so:r,i=n.hashType,a=void 0===i?"slash":i,c=e.basename?ro(eo(e.basename)):"",s=fo[a],u=s.encodePath,l=s.decodePath;function f(){var e=l(ho());return c&&(e=no(e,c)),io(e)}var p=ao();function d(e){ke(k,e),k.length=t.length,p.notifyListeners(k.location,k.action)}var h=!1,m=null;function v(){var e,t,n=ho(),r=u(n);if(n!==r)mo(r);else{var i=f(),a=k.location;if(!h&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===oo(i))return;m=null,function(e){if(h)h=!1,d();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?d({action:"POP",location:e}):function(e){var t=k.location,n=w.lastIndexOf(oo(t));-1===n&&(n=0);var r=w.lastIndexOf(oo(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,E(o))}(e)}))}}(i)}}var y=ho(),g=u(y);y!==g&&mo(g);var b=f(),w=[oo(b)];function E(e){t.go(e)}var S=0;function C(e){1===(S+=e)&&1===e?window.addEventListener("hashchange",v):0===S&&window.removeEventListener("hashchange",v)}var _=!1;var k={length:t.length,action:"POP",location:b,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=po(window.location.href)),n+"#"+u(c+oo(e))},push:function(e,t){var n=io(e,void 0,void 0,k.location);p.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=oo(n),r=u(c+t);if(ho()!==r){m=t,function(e){window.location.hash=e}(r);var o=w.lastIndexOf(oo(k.location)),i=w.slice(0,o+1);i.push(t),w=i,d({action:"PUSH",location:n})}else d()}}))},replace:function(e,t){var n=io(e,void 0,void 0,k.location);p.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=oo(n),r=u(c+t);ho()!==r&&(m=t,mo(r));var o=w.indexOf(oo(k.location));-1!==o&&(w[o]=t),d({action:"REPLACE",location:n})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return _||(C(1),_=!0),function(){return _&&(_=!1,C(-1)),t()}},listen:function(e){var t=p.appendListener(e);return C(1),function(){C(-1),t()}}};return k}function yo(e,t,n){return Math.min(Math.max(e,t),n)}function go(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,a=void 0===i?0:i,c=t.keyLength,s=void 0===c?6:c,u=ao();function l(e){ke(v,e),v.length=v.entries.length,u.notifyListeners(v.location,v.action)}function f(){return Math.random().toString(36).substr(2,s)}var p=yo(a,0,o.length-1),d=o.map((function(e){return io(e,void 0,"string"==typeof e?f():e.key||f())})),h=oo;function m(e){var t=yo(v.index+e,0,v.entries.length-1),r=v.entries[t];u.confirmTransitionTo(r,"POP",n,(function(e){e?l({action:"POP",location:r,index:t}):l()}))}var v={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:h,push:function(e,t){var r=io(e,t,f(),v.location);u.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),l({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=io(e,t,f(),v.location);u.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(v.entries[v.index]=r,l({action:"REPLACE",location:r}))}))},go:m,goBack:function(){m(-1)},goForward:function(){m(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(e){return void 0===e&&(e=!1),u.setPrompt(e)},listen:function(e){return u.appendListener(e)}};return v}var bo=n(38),wo=n.n(bo),Eo=n(57),So=n.n(Eo);function Co(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var _o=f.a.createContext||function(e,t){var n,r,o="__create-react-context-"+So()()+"__",i=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=Co(t.props.value),t}wo()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(l.Component);i.childContextTypes=((n={})[o]=ye.a.object.isRequired,n);var a=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}wo()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(l.Component);return a.contextTypes=((r={})[o]=ye.a.object,r),{Provider:i,Consumer:a}},ko=n(39),xo=n.n(ko),To=function(e){var t=_o();return t.displayName=e,t}("Router"),Oo=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}$r(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return f.a.createElement(To.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(f.a.Component);f.a.Component;var Po=function(e){function t(){return e.apply(this,arguments)||this}$r(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(f.a.Component);var Ro={},jo=0;function Do(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(Ro[e])return Ro[e];var t=xo.a.compile(e);return jo<1e4&&(Ro[e]=t,jo++),t}(e)(t,{pretty:!0})}function No(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return f.a.createElement(To.Consumer,null,(function(e){e||Zr(!1);var r=e.history,i=e.staticContext,a=o?r.push:r.replace,c=io(t?"string"==typeof n?Do(n,t.params):ke({},n,{pathname:Do(n.pathname,t.params)}):n);return i?(a(c),null):f.a.createElement(Po,{onMount:function(){a(c)},onUpdate:function(e,t){var n,r,o=io(t.to);n=o,r=ke({},c,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&Qr(n.state,r.state)||a(c)},to:n})}))}var Mo={},Io=0;function Ao(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,c=void 0!==a&&a,s=n.sensitive,u=void 0!==s&&s;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Mo[n]||(Mo[n]={});if(r[e])return r[e];var o=[],i={regexp:xo()(e,o,t),keys:o};return Io<1e4&&(r[e]=i,Io++),i}(n,{end:i,strict:c,sensitive:u}),o=r.regexp,a=r.keys,s=o.exec(e);if(!s)return null;var l=s[0],f=s.slice(1),p=e===l;return i&&!p?null:{path:n,url:"/"===n&&""===l?"/":l,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var Lo=function(e){function t(){return e.apply(this,arguments)||this}return $r(t,e),t.prototype.render=function(){var e=this;return f.a.createElement(To.Consumer,null,(function(t){t||Zr(!1);var n=e.props.location||t.location,r=ke({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?Ao(n.pathname,e.props):t.match}),o=e.props,i=o.children,a=o.component,c=o.render;return Array.isArray(i)&&0===i.length&&(i=null),f.a.createElement(To.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:a?f.a.createElement(a,r):c?c(r):null:"function"==typeof i?i(r):null)}))},t}(f.a.Component);function Fo(e){return"/"===e.charAt(0)?e:"/"+e}function Uo(e,t){if(!e)return t;var n=Fo(e);return 0!==t.pathname.indexOf(n)?t:ke({},t,{pathname:t.pathname.substr(n.length)})}function zo(e){return"string"==typeof e?e:oo(e)}function Bo(e){return function(){Zr(!1)}}function Ho(){}f.a.Component;var Wo=function(e){function t(){return e.apply(this,arguments)||this}return $r(t,e),t.prototype.render=function(){var e=this;return f.a.createElement(To.Consumer,null,(function(t){t||Zr(!1);var n,r,o=e.props.location||t.location;return f.a.Children.forEach(e.props.children,(function(e){if(null==r&&f.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?Ao(o.pathname,ke({},e.props,{path:i})):t.match}})),r?f.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(f.a.Component);function qo(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=xe(t,["wrappedComponentRef"]);return f.a.createElement(To.Consumer,null,(function(t){return t||Zr(!1),f.a.createElement(e,ke({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,Oe()(n,e)}f.a.useContext;var Vo=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=lo(t.props),t}return $r(t,e),t.prototype.render=function(){return f.a.createElement(Oo,{history:this.history,children:this.props.children})},t}(f.a.Component);f.a.Component;var Go=function(e,t){return"function"==typeof e?e(t):e},$o=function(e,t){return"string"==typeof e?io(e,null,null,t):e},Ko=function(e){return e},Jo=f.a.forwardRef;void 0===Jo&&(Jo=Ko);var Yo=Jo((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=xe(e,["innerRef","navigate","onClick"]),a=i.target,c=ke({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||a&&"_self"!==a||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=Ko!==Jo&&t||n,f.a.createElement("a",c)}));var Xo=Jo((function(e,t){var n=e.component,r=void 0===n?Yo:n,o=e.replace,i=e.to,a=e.innerRef,c=xe(e,["component","replace","to","innerRef"]);return f.a.createElement(To.Consumer,null,(function(e){e||Zr(!1);var n=e.history,s=$o(Go(i,e.location),e.location),u=s?n.createHref(s):"",l=ke({},c,{href:u,navigate:function(){var t=Go(i,e.location);(o?n.replace:n.push)(t)}});return Ko!==Jo?l.ref=t||a:l.innerRef=a,f.a.createElement(r,l)}))})),Qo=function(e){return e},Zo=f.a.forwardRef;void 0===Zo&&(Zo=Qo);Zo((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,a=e.activeStyle,c=e.className,s=e.exact,u=e.isActive,l=e.location,p=e.strict,d=e.style,h=e.to,m=e.innerRef,v=xe(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return f.a.createElement(To.Consumer,null,(function(e){e||Zr(!1);var n=l||e.location,o=$o(Go(h,n),n),y=o.pathname,g=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),b=g?Ao(n.pathname,{path:g,exact:s,strict:p}):null,w=!!(u?u(b,n):b),E=w?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,i):c,S=w?ke({},d,{},a):d,C=ke({"aria-current":w&&r||null,className:E,style:S,to:o},v);return Qo!==Zo?C.ref=t||m:C.innerRef=m,f.a.createElement(Xo,C)}))}));function ei(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ti(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ni(e,t,n){return t&&ti(e.prototype,t),n&&ti(e,n),e}function ri(e){return(ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oi(e){return(oi="function"==typeof Symbol&&"symbol"===ri(Symbol.iterator)?function(e){return ri(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":ri(e)})(e)}function ii(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ai(e,t){return!t||"object"!==oi(t)&&"function"!=typeof t?ii(e):t}function ci(e){return(ci=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function si(e,t){return(si=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ui(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&si(e,t)}function li(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fi(Object(n),!0).forEach((function(t){li(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var di=n(11),hi=n.n(di),mi=null,vi=new Map;function yi(e){if("string"==typeof e.data){var t=JSON.parse(e.data),n=t.type,r=t.payload,o=vi.get(n);if(!o)return;for(var i=0;i<o.length;i++){var a=o[i];try{a(r)}catch(e){console.error("websocket message handler error: ",e)}}}else console.log("received not string ws msg")}function gi(){return new Promise((function(e,t){var n,r,o=(n=window.location,r="","https:"===n.protocol?r+="wss://":r+="ws://",r+=n.host,r+="/ws");if(mi&&1===mi.readyState)return e();(mi=new window.WebSocket(o)).onopen=function(){e()},mi.onerror=function(e){console.log("connect web socket error: ",e),t(e)},mi.onclose=function(){console.log("websocket closed")},mi.onmessage=yi}))}function bi(e){return hi.a.async((function(t){for(;;)switch(t.prev=t.next){case 0:if(mi&&1===mi.readyState){t.next=3;break}return t.next=3,hi.a.awrap(gi());case 3:mi.send(e);case 4:case"end":return t.stop()}}))}var wi={sendJSON:function(e){return hi.a.async((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,hi.a.awrap(bi(JSON.stringify(e)));case 2:case"end":return t.stop()}}))},registerMessageHandler:function(e,t){var n=vi.get(e)||[];n.push(t),vi.set(e,n)},removeMessageHandler:function(e,t){var n=(vi.get(e)||[]).filter((function(e){return e!==t}));0===n.length?vi.delete(e):vi.set(e,n)}},Ei=n(7),Si=n.n(Ei),Ci=n(12),_i=n.n(Ci);function ki(e){var t=e.location.pathname,n=Ao(t,"/recv/:recvCode?");return f.a.createElement("div",{className:_i.a.base},f.a.createElement("a",{href:"/"},f.a.createElement("img",{src:"/images/logo.png",alt:"logo",className:_i.a.logo})),f.a.createElement("div",{className:_i.a.slogan},"简单安全高效的P2P文件传输服务"),f.a.createElement("div",{className:_i.a.menus},f.a.createElement(Xo,{to:"/send"},f.a.createElement("span",{className:Si()(_i.a.menu,"/send"===t&&_i.a.active)},"发送文件")),f.a.createElement(Xo,{to:"/recv"},f.a.createElement("span",{className:Si()(_i.a.menu,n&&_i.a.active)},"接收文件")),f.a.createElement(Xo,{to:"/contact"},f.a.createElement("span",{className:Si()(_i.a.menu,"/contact"===t&&_i.a.active)},"联系我们"))))}ki.defaultProps={};var xi=qo(ki),Ti=n(40),Oi=n.n(Ti),Pi=n(16),Ri=n.n(Pi),ji=n(32),Di=n.n(ji),Ni=n(58),Mi=n.n(Ni),Ii=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function Ai(e,t){var n=function(e){var t=e.name;if(t&&-1!==t.lastIndexOf(".")&&!e.type){var n=t.split(".").pop().toLowerCase(),r=Ii.get(n);r&&Object.defineProperty(e,"type",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if("string"!=typeof n.path){var r=e.webkitRelativePath;Object.defineProperty(n,"path",{value:"string"==typeof t?t:"string"==typeof r&&r.length>0?r:e.name,writable:!1,configurable:!1,enumerable:!0})}return n}var Li=[".DS_Store","Thumbs.db"];function Fi(e){return jt.b(this,void 0,void 0,(function(){return jt.d(this,(function(t){return[2,(n=e,n.dataTransfer&&e.dataTransfer?zi(e.dataTransfer,e.type):Ui(e))];var n}))}))}function Ui(e){return(null!==e.target&&e.target.files?Hi(e.target.files):[]).map((function(e){return Ai(e)}))}function zi(e,t){return jt.b(this,void 0,void 0,(function(){var n;return jt.d(this,(function(r){switch(r.label){case 0:return e.items?(n=Hi(e.items).filter((function(e){return"file"===e.kind})),"drop"!==t?[2,n]:[4,Promise.all(n.map(Wi))]):[3,2];case 1:return[2,Bi(qi(r.sent()))];case 2:return[2,Bi(Hi(e.files).map((function(e){return Ai(e)})))]}}))}))}function Bi(e){return e.filter((function(e){return-1===Li.indexOf(e.name)}))}function Hi(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r)}return t}function Wi(e){if("function"!=typeof e.webkitGetAsEntry)return Vi(e);var t=e.webkitGetAsEntry();return t&&t.isDirectory?$i(t):Vi(e)}function qi(e){return e.reduce((function(e,t){return jt.f(e,Array.isArray(t)?qi(t):[t])}),[])}function Vi(e){var t=e.getAsFile();if(!t)return Promise.reject(e+" is not a File");var n=Ai(t);return Promise.resolve(n)}function Gi(e){return jt.b(this,void 0,void 0,(function(){return jt.d(this,(function(t){return[2,e.isDirectory?$i(e):Ki(e)]}))}))}function $i(e){var t=e.createReader();return new Promise((function(e,n){var r=[];!function o(){var i=this;t.readEntries((function(t){return jt.b(i,void 0,void 0,(function(){var i,a,c;return jt.d(this,(function(s){switch(s.label){case 0:if(t.length)return[3,5];s.label=1;case 1:return s.trys.push([1,3,,4]),[4,Promise.all(r)];case 2:return i=s.sent(),e(i),[3,4];case 3:return a=s.sent(),n(a),[3,4];case 4:return[3,6];case 5:c=Promise.all(t.map(Gi)),r.push(c),o(),s.label=6;case 6:return[2]}}))}))}),(function(e){n(e)}))}()}))}function Ki(e){return jt.b(this,void 0,void 0,(function(){return jt.d(this,(function(t){return[2,new Promise((function(t,n){e.file((function(n){var r=Ai(n,e.fullPath);t(r)}),(function(e){n(e)}))}))]}))}))}var Ji=n(59),Yi=n.n(Ji);function Xi(e,t){return"application/x-moz-file"===e.type||Yi()(e,t)}function Qi(e,t,n){if(Zi(e.size)){if(Zi(t)&&Zi(n))return e.size>=t&&e.size<=n;if(Zi(t))return e.size>=t;if(Zi(n))return e.size<=n}return!0}function Zi(e){return null!=e}function ea(e,t,n,r){return e.every((function(e){return Xi(e,t)&&Qi(e,n,r)}))}function ta(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function na(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,(function(e){return"Files"===e||"application/x-moz-file"===e})):!!e.target&&!!e.target.files}function ra(e){e.preventDefault()}function oa(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}function ia(e){return-1!==e.indexOf("Edge/")}function aa(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.navigator.userAgent;return oa(e)||ia(e)}function ca(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return t.some((function(t){return!ta(e)&&t&&t.apply(void 0,[e].concat(r)),ta(e)}))}}function sa(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function ua(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function la(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fa(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?la(n,!0).forEach((function(t){pa(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):la(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pa(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function da(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ha=Object(l.forwardRef)((function(e,t){var n=e.children,r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.accept,n=e.disabled,r=void 0!==n&&n,o=e.getFilesFromEvent,i=void 0===o?Fi:o,a=e.maxSize,c=void 0===a?1/0:a,s=e.minSize,u=void 0===s?0:s,f=e.multiple,p=void 0===f||f,d=e.onDragEnter,h=e.onDragLeave,m=e.onDragOver,v=e.onDrop,y=e.onDropAccepted,g=e.onDropRejected,b=e.onFileDialogCancel,w=e.preventDropOnDocument,E=void 0===w||w,S=e.noClick,C=void 0!==S&&S,_=e.noKeyboard,k=void 0!==_&&_,x=e.noDrag,T=void 0!==x&&x,O=e.noDragEventsBubbling,P=void 0!==O&&O,R=Object(l.useRef)(null),j=Object(l.useRef)(null),D=Object(l.useReducer)(ya,va),N=ua(D,2),M=N[0],I=N[1],A=M.isFocused,L=M.isFileDialogActive,F=M.draggedFiles,U=Object(l.useCallback)((function(){j.current&&(I({type:"openDialog"}),j.current.value=null,j.current.click())}),[I]),z=function(){L&&setTimeout((function(){j.current&&(j.current.files.length||(I({type:"closeDialog"}),"function"==typeof b&&b()))}),300)};Object(l.useEffect)((function(){return window.addEventListener("focus",z,!1),function(){window.removeEventListener("focus",z,!1)}}),[j,L,b]);var B=Object(l.useCallback)((function(e){R.current&&R.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),U()))}),[R,j]),H=Object(l.useCallback)((function(){I({type:"focus"})}),[]),W=Object(l.useCallback)((function(){I({type:"blur"})}),[]),q=Object(l.useCallback)((function(){C||(aa()?setTimeout(U,0):U())}),[j,C]),V=Object(l.useRef)([]),G=function(e){R.current&&R.current.contains(e.target)||(e.preventDefault(),V.current=[])};Object(l.useEffect)((function(){return E&&(document.addEventListener("dragover",ra,!1),document.addEventListener("drop",G,!1)),function(){E&&(document.removeEventListener("dragover",ra),document.removeEventListener("drop",G))}}),[R,E]);var $=Object(l.useCallback)((function(e){e.preventDefault(),e.persist(),ee(e),-1===V.current.indexOf(e.target)&&(V.current=[].concat(sa(V.current),[e.target])),na(e)&&Promise.resolve(i(e)).then((function(t){ta(e)&&!P||(I({draggedFiles:t,isDragActive:!0,type:"setDraggedFiles"}),d&&d(e))}))}),[i,d,P]),K=Object(l.useCallback)((function(e){if(e.preventDefault(),e.persist(),ee(e),e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return na(e)&&m&&m(e),!1}),[m,P]),J=Object(l.useCallback)((function(e){e.preventDefault(),e.persist(),ee(e);var t=V.current.filter((function(t){return t!==e.target&&R.current&&R.current.contains(t)}));V.current=t,t.length>0||(I({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),na(e)&&h&&h(e))}),[R,h,P]),Y=Object(l.useCallback)((function(e){e.preventDefault(),e.persist(),ee(e),V.current=[],I({type:"reset"}),na(e)&&Promise.resolve(i(e)).then((function(n){if(!ta(e)||P){var r=[],o=[];n.forEach((function(e){Xi(e,t)&&Qi(e,u,c)?r.push(e):o.push(e)})),!p&&r.length>1&&o.push.apply(o,sa(r.splice(0))),I({acceptedFiles:r,rejectedFiles:o,type:"setFiles"}),v&&v(r,o,e),o.length>0&&g&&g(o,e),r.length>0&&y&&y(r,e)}}))}),[p,t,u,c,i,v,y,g,P]),X=function(e){return r?null:e},Q=function(e){return k?null:X(e)},Z=function(e){return T?null:X(e)},ee=function(e){P&&e.stopPropagation()},te=Object(l.useMemo)((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,o=e.onKeyDown,i=e.onFocus,a=e.onBlur,c=e.onClick,s=e.onDragEnter,u=e.onDragOver,l=e.onDragLeave,f=e.onDrop,p=da(e,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return fa(pa({onKeyDown:Q(ca(o,B)),onFocus:Q(ca(i,H)),onBlur:Q(ca(a,W)),onClick:X(ca(c,q)),onDragEnter:Z(ca(s,$)),onDragOver:Z(ca(u,K)),onDragLeave:Z(ca(l,J)),onDrop:Z(ca(f,Y))},n,R),r||k?{}:{tabIndex:0},{},p)}}),[R,B,H,W,q,$,K,J,Y,k,T,r]),ne=Object(l.useCallback)((function(e){e.stopPropagation()}),[]),re=Object(l.useMemo)((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,r=void 0===n?"ref":n,o=e.onChange,i=e.onClick,a=da(e,["refKey","onChange","onClick"]),c=pa({accept:t,multiple:p,type:"file",style:{display:"none"},onChange:X(ca(o,Y)),onClick:X(ca(i,ne)),autoComplete:"off",tabIndex:-1},r,j);return fa({},c,{},a)}}),[j,t,p,Y,r]),oe=F.length,ie=p||oe<=1,ae=oe>0&&ea(F,t,u,c),ce=oe>0&&(!ae||!ie);return fa({},M,{isDragAccept:ae,isDragReject:ce,isFocused:A&&!r,getRootProps:te,getInputProps:re,rootRef:R,inputRef:j,open:X(U)})}(da(e,["children"])),o=r.open,i=da(r,["open"]);return Object(l.useImperativeHandle)(t,(function(){return{open:o}}),[o]),f.a.createElement(l.Fragment,null,n(fa({},i,{open:o})))}));ha.displayName="Dropzone",ha.propTypes={children:ye.a.func,accept:ye.a.oneOfType([ye.a.string,ye.a.arrayOf(ye.a.string)]),multiple:ye.a.bool,preventDropOnDocument:ye.a.bool,noClick:ye.a.bool,noKeyboard:ye.a.bool,noDrag:ye.a.bool,noDragEventsBubbling:ye.a.bool,minSize:ye.a.number,maxSize:ye.a.number,disabled:ye.a.bool,getFilesFromEvent:ye.a.func,onFileDialogCancel:ye.a.func,onDragEnter:ye.a.func,onDragLeave:ye.a.func,onDragOver:ye.a.func,onDrop:ye.a.func,onDropAccepted:ye.a.func,onDropRejected:ye.a.func};var ma=ha,va={isFocused:!1,isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],rejectedFiles:[]};function ya(e,t){switch(t.type){case"focus":return fa({},e,{isFocused:!0});case"blur":return fa({},e,{isFocused:!1});case"openDialog":return fa({},e,{isFileDialogActive:!0});case"closeDialog":return fa({},e,{isFileDialogActive:!1});case"setDraggedFiles":var n=t.isDragActive;return fa({},e,{draggedFiles:t.draggedFiles,isDragActive:n});case"setFiles":return fa({},e,{acceptedFiles:t.acceptedFiles,rejectedFiles:t.rejectedFiles});case"reset":return fa({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[]});default:return e}}var ga=function(e){function t(e){return ei(this,t),ai(this,ci(t).call(this,e))}return ui(t,e),ni(t,[{key:"render",value:function(){var e=this.props,t=e.className,n=e.name,r=e.tooltip,o=e.onClick,i=f.a.createElement("i",{className:Si()("iconfont","icon-".concat(n),t),onClick:o});return r?f.a.createElement("span",{className:Si()("tooltip--top"),"aria-label":r},i):i}}]),t}(l.Component);ga.defaultProps={className:null,name:null,onClick:null};var ba=ga,wa=n(60),Ea=n.n(wa),Sa=n(61),Ca=n.n(Sa),_a=Ea.a.bind(Ca.a),ka=function(e){function t(){return ei(this,t),ai(this,ci(t).apply(this,arguments))}return ui(t,e),ni(t,[{key:"render",value:function(){var e=this.props,t=e.type,n=e.style,r=e.disabled,o=e.children,i=e.href,a=e.onClick,c=Si()(_a("btn-".concat(t),{"btn-disabled":r}),this.props.className);return i?f.a.createElement(Xo,{to:i,style:n,className:c},o):f.a.createElement("button",{type:"button",style:n,className:c,onClick:a,disabled:r},o)}}]),t}(l.Component);ka.defaultProps={disabled:!1,style:null,className:null,onClick:null,children:null,href:null};var xa=ka,Ta=n(18),Oa=n.n(Ta),Pa=function(e){function t(e){return ei(this,t),ai(this,ci(t).call(this,e))}return ui(t,e),ni(t,[{key:"render",value:function(){return f.a.createElement("div",{className:Oa.a.steps},this.props.children)}}]),t}(l.Component),Ra=function(e){function t(e){return ei(this,t),ai(this,ci(t).call(this,e))}return ui(t,e),ni(t,[{key:"render",value:function(){var e=this.props,t=e.title,n=e.index,r=e.active;return f.a.createElement("span",{className:Si()(Oa.a.step,r&&Oa.a.active)},f.a.createElement("span",{className:Si()(Oa.a.indexWrapper,r&&Oa.a.active)},f.a.createElement("span",{className:Oa.a.index},n)),f.a.createElement("span",{className:Oa.a.title},t))}}]),t}(l.Component);Pa.Step=Ra;var ja=Pa;function Da(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Na(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ma=f.a.createContext(null);function Ia(e,t){var n=Object.create(null);return e&&l.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(l.isValidElement)(e)?t(e):e}(e)})),n}function Aa(e,t,n){return null!=n[t]?n[t]:e.props[t]}function La(e,t,n){var r=Ia(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var c={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];c[o[s][r]]=n(u)}c[s]=n(s)}for(r=0;r<i.length;r++)c[i[r]]=n(i[r]);return c}(t,r);return Object.keys(o).forEach((function(i){var a=o[i];if(Object(l.isValidElement)(a)){var c=i in t,s=i in r,u=t[i],f=Object(l.isValidElement)(u)&&!u.props.in;!s||c&&!f?s||!c||f?s&&c&&Object(l.isValidElement)(u)&&(o[i]=Object(l.cloneElement)(a,{onExited:n.bind(null,a),in:u.props.in,exit:Aa(a,"exit",e),enter:Aa(a,"enter",e)})):o[i]=Object(l.cloneElement)(a,{in:!1}):o[i]=Object(l.cloneElement)(a,{onExited:n.bind(null,a),in:!0,exit:Aa(a,"exit",e),enter:Aa(a,"enter",e)})}})),o}var Fa=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Ua=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Na(Na(r)));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}$r(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,r=i,Ia(n.children,(function(e){return Object(l.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:Aa(e,"appear",n),enter:Aa(e,"enter",n),exit:Aa(e,"exit",n)})}))):La(e,o,i),firstRender:!1}},n.handleExited=function(e,t){var n=Ia(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=ke({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=xe(e,["component","childFactory"]),o=this.state.contextValue,i=Fa(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?f.a.createElement(Ma.Provider,{value:o},i):f.a.createElement(Ma.Provider,{value:o},f.a.createElement(t,r,i))},t}(f.a.Component);Ua.propTypes={},Ua.defaultProps={component:"div",childFactory:function(e){return e}};var za=Ua;function Ba(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}var Ha=!1,Wa=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}$r(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=d.a.findDOMNode(this);"entering"===t?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:t,i=this.getTimeouts(),a=o?i.appear:i.enter;!t&&!r||Ha?this.safeSetState({status:"entered"},(function(){n.props.onEntered(e)})):(this.props.onEnter(e,o),this.safeSetState({status:"entering"},(function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a,(function(){n.safeSetState({status:"entered"},(function(){n.props.onEntered(e,o)}))}))})))},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n&&!Ha?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,(function(){t.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=xe(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return f.a.createElement(Ma.Provider,{value:null},n(e,r));var o=f.a.Children.only(n);return(f.a.createElement(Ma.Provider,{value:null},f.a.cloneElement(o,r)))},t}(f.a.Component);function qa(){}Wa.contextType=Ma,Wa.propTypes={},Wa.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:qa,onEntering:qa,onEntered:qa,onExit:qa,onExiting:qa,onExited:qa},Wa.UNMOUNTED=0,Wa.EXITED=1,Wa.ENTERING=2,Wa.ENTERED=3,Wa.EXITING=4;var Va=Wa,Ga=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.remove(r):"string"==typeof n.className?n.className=Ba(n.className,r):n.setAttribute("class",Ba(n.className&&n.className.baseVal||"",r)));var n,r}))},$a=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).appliedClasses={appear:{},enter:{},exit:{}},t.onEnter=function(e,n){t.removeClasses(e,"exit"),t.addClass(e,n?"appear":"enter","base"),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var r=n?"appear":"enter";t.addClass(e,r,"active"),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var r=n?"appear":"enter";t.removeClasses(e,r),t.addClass(e,r,"done"),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){t.removeClasses(e,"appear"),t.removeClasses(e,"enter"),t.addClass(e,"exit","base"),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){t.addClass(e,"exit","active"),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){t.removeClasses(e,"exit"),t.addClass(e,"exit","done"),t.props.onExited&&t.props.onExited(e)},t.getClassNames=function(e){var n=t.props.classNames,r="string"==typeof n,o=r?""+(r&&n?n+"-":"")+e:n[e];return{baseClassName:o,activeClassName:r?o+"-active":n[e+"Active"],doneClassName:r?o+"-done":n[e+"Done"]}},t}$r(t,e);var n=t.prototype;return n.addClass=function(e,t,n){var r=this.getClassNames(t)[n+"ClassName"];"appear"===t&&"done"===n&&(r+=" "+this.getClassNames("enter").doneClassName),"active"===n&&e&&e.scrollTop,this.appliedClasses[t][n]=r,function(e,t){e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.add(r):function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")}(n,r)||("string"==typeof n.className?n.className=n.className+" "+r:n.setAttribute("class",(n.className&&n.className.baseVal||"")+" "+r)));var n,r}))}(e,r)},n.removeClasses=function(e,t){var n=this.appliedClasses[t],r=n.base,o=n.active,i=n.done;this.appliedClasses[t]={},r&&Ga(e,r),o&&Ga(e,o),i&&Ga(e,i)},n.render=function(){var e=this.props,t=(e.classNames,xe(e,["classNames"]));return f.a.createElement(Va,ke({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(f.a.Component);$a.defaultProps={classNames:""},$a.propTypes={};var Ka=$a,Ja=n(19),Ya=n.n(Ja),Xa=1,Qa=2,Za=3,ec=function(e){function t(e){var n;return ei(this,t),(n=ai(this,ci(t).call(this,e))).state={toasts:[]},n}return ui(t,e),ni(t,[{key:"add",value:function(e,t){var n=this,r=Di()(),o={id:r,type:e,title:t};setTimeout((function(){n.setState((function(e){return{toasts:e.toasts.filter((function(e){return e.id!==r}))}}))}),2e3),this.setState((function(e){return{toasts:[].concat(Da(e.toasts),[o])}}))}},{key:"render",value:function(){var e,t,n=this.state.toasts,r=void 0===n?[]:n,o=(li(e={},Xa,"check"),li(e,Qa,"close"),li(e,Za,"info"),e),i=(li(t={},Xa,Ya.a.success),li(t,Qa,Ya.a.error),li(t,Za,Ya.a.info),t);return f.a.createElement("div",{className:Ya.a.container},f.a.createElement(za,{component:null},r.map((function(e){var t=e.type;return f.a.createElement(Ka,{key:e.id,classNames:"toast-animation",timeout:220},f.a.createElement("div",{className:Si()(Ya.a.toast,i[t])},f.a.createElement("div",{className:Si()(Ya.a.iconWrapper,i[t])},f.a.createElement(ba,{name:o[t]})),f.a.createElement("div",{key:e.id,className:Si()(Ya.a.content,i[t])},e.title)))}))))}}]),t}(l.Component),tc=document.createElement("div");document.body.appendChild(tc);var nc=f.a.createRef();d.a.render(f.a.createElement(ec,{ref:nc}),tc),ec.success=function(e){nc.current.add(Xa,e)},ec.error=function(e){nc.current.add(Qa,e)},ec.info=function(e){nc.current.add(Za,e)};var rc=ec,oc=n(10),ic=n.n(oc),ac=function(e){function t(){return ei(this,t),ai(this,ci(t).apply(this,arguments))}return ui(t,e),ni(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.files,r=t.removable,o=t.curFileId;return f.a.createElement("div",{className:ic.a.container},n.map((function(t){var n=t.uid,i=t.name,a=t.size,c=t.downloadUrl,s=t.pct,u=null;return u=c?f.a.createElement("a",{href:c,download:i,className:ic.a.download},"下载"):s>=100?f.a.createElement("span",{className:ic.a.completed},"完成"):n===o?f.a.createElement("span",null,s,"%"):f.a.createElement("span",{className:ic.a.waiting},"等待"),f.a.createElement("div",{key:t.uid,className:ic.a.fileRow},f.a.createElement("div",{className:ic.a.left},f.a.createElement(ba,{name:"file",className:ic.a.fileIcon}),f.a.createElement("div",{className:ic.a.fileInfo},f.a.createElement("div",{className:ic.a.fileName},i),f.a.createElement("div",{className:ic.a.fileSize},Ri()(a)))),f.a.createElement("div",{className:ic.a.right},!r&&u,r&&f.a.createElement(ba,{name:"close",onClick:e.props.onRemoveFile(t.uid),className:ic.a.closeIcon})))})))}}]),t}(l.Component),cc=n(62),sc=function(e){function t(){var e;return ei(this,t),(e=ai(this,ci(t).call(this))).id=null,e.targetId=null,e.pc=null,e.dc=null,e.waitingCallback=null,e.onIceCandidate=e.onIceCandidate.bind(ii(e)),e.onDescription=e.onDescription.bind(ii(e)),e.connectPeer=e.connectPeer.bind(ii(e)),e.onConnectionStateChange=e.onConnectionStateChange.bind(ii(e)),e.onRTCMessage=e.onRTCMessage.bind(ii(e)),e.onChannelOpen=e.onChannelOpen.bind(ii(e)),e.onChannelClose=e.onChannelClose.bind(ii(e)),e.onBufferedAmountLow=e.onBufferedAmountLow.bind(ii(e)),e.onS2cSignal=e.onS2cSignal.bind(ii(e)),e.onS2cOpen=e.onS2cOpen.bind(ii(e)),wi.registerMessageHandler("s2c_open",e.onS2cOpen),wi.registerMessageHandler("s2c_signal",e.onS2cSignal),e}return ui(t,e),ni(t,[{key:"onS2cOpen",value:function(e){this.id=e.id,this.emit("peerId",this.id)}},{key:"onS2cSignal",value:function(e){var t=this;this.targetId||(this.targetId=e.srcId),this.pc||this.createRTCConnection(!1),e.sdp?this.pc.setRemoteDescription(new RTCSessionDescription(e.sdp)).then((function(n){if("offer"===e.sdp.type)return t.makeAnswer()})):e.ice&&this.pc.addIceCandidate(new RTCIceCandidate(e.ice))}},{key:"onDescription",value:function(e){var t=this;this.pc.setLocalDescription(e).then((function(){wi.sendJSON({type:"c2s_signal",payload:{targetId:t.targetId,sdp:e}})})).catch((function(e){return console.log("onDescription error: ",e)}))}},{key:"onConnectionStateChange",value:function(){"disconnected"===this.pc.connectionState?(this.dc&&this.dc.close(),this.waitingCallback&&(this.waitingCallback(new Error("peer disconnected, cannot send")),this.waitingCallback=null),this.emit("disconnected")):"connected"===this.pc.connectionState?this.emit("connected"):"connecting"===this.pc.connectionState?this.emit("connecting"):"failed"===this.pc.connectionState&&this.emit("connectFailed"),console.log("onConnectionStateChange: ",this.pc.connectionState)}},{key:"onRTCMessage",value:function(e){this.emit("data",e.data)}},{key:"createRTCConnection",value:function(e){var t=this,n=new RTCPeerConnection({iceServers:[{urls:"stun:0.peerjs.com:3478"}]});if(this.pc=n,n.onconnectionstatechange=function(e){return t.onConnectionStateChange(e)},n.onicecandidate=this.onIceCandidate,e){var r=n.createDataChannel("file-transfer",{ordered:!0});this.setupDataChannel(r),this.makeOffer()}else this.pc.ondatachannel=function(e){var n=e.channel||e.target;t.setupDataChannel(n)}}},{key:"setupDataChannel",value:function(e){this.dc=e,e.bufferedAmountLowThreshold=14680064,e.binaryType="arraybuffer",e.onopen=this.onChannelOpen,e.onclose=this.onChannelClose,e.onerror=this.onChannelError,e.onbufferedamountlow=this.onBufferedAmountLow}},{key:"makeOffer",value:function(){var e=this;this.pc.createOffer().then((function(t){return e.onDescription(t)}))}},{key:"makeAnswer",value:function(){var e=this;return this.pc.createAnswer().then((function(t){return e.onDescription(t)}))}},{key:"connectPeer",value:function(e){this.targetId=e,this.createRTCConnection(!0)}},{key:"destroy",value:function(){this.targetId=null,this.waitingCallback=null,this.pc&&(this.pc.close(),this.pc=null),this.dc&&(this.dc.close(),this.dc=null),this.removeAllListeners()}},{key:"onIceCandidate",value:function(e){e.candidate&&wi.sendJSON({type:"c2s_signal",payload:{targetId:this.targetId,ice:e.candidate}})}},{key:"onChannelOpen",value:function(e){this.emit("channelOpen"),this.dc.onmessage=this.onRTCMessage}},{key:"onChannelClose",value:function(e){console.log("## channel close: ",e)}},{key:"onChannelError",value:function(e){console.log("## channel error: ",e)}},{key:"onBufferedAmountLow",value:function(){this.waitingCallback&&(this.waitingCallback(),this.waitingCallback=null)}},{key:"send",value:function(e){var t=this;return new Promise((function(n,r){if("open"===t.dc.readyState)if(t.dc.bufferedAmount>=15728640)t.waitingCallback=function(e){e?r(e):n()};else try{t.dc.send(e),n()}catch(e){console.error("send error: ",e),r(e)}else{var o="send but channel is not open, now state is: "+t.dc.readyState;console.error(o),r(new Error(o))}}))}},{key:"sendJSON",value:function(e){return this.send(JSON.stringify(e))}}]),t}(n.n(cc).a),uc=function(){function e(t){ei(this,e),this.file=t,this.reader=new FileReader,this.offset=0}return ni(e,[{key:"getNextChunk",value:function(){var e=this;return new Promise((function(t,n){e.offset>=e.file.size&&t({done:!0}),e.reader.onload=function(n){e.offset+=16384,t({done:e.offset>=e.file.size,chunk:n.target.result,offset:e.offset})},e.reader.onabort=function(){n(new Error("FileReader abort"))},e.reader.onerror=function(e){n(new Error("FileReader onerror"+e))};var r=e.file.slice(e.offset,e.offset+16384);e.reader.readAsArrayBuffer(r)}))}}]),e}();function lc(e,t){return(e/t*100).toFixed(1)}function fc(e){wi.sendJSON({type:"c2s_delete_recv_code",payload:{recvCode:e}})}function pc(e){wi.sendJSON({type:"c2s_prepare_recv",payload:{recvCode:e}})}var dc=n(3),hc=n.n(dc),mc=ja.Step,vc=function(e){function t(e){var n;return ei(this,t),(n=ai(this,ci(t).call(this,e))).peer=new sc,n.inputRef=f.a.createRef(),n.onChangeFile=n.onChangeFile.bind(ii(n)),n.onRemoveFile=n.onRemoveFile.bind(ii(n)),n.onClickSelectDone=n.onClickSelectDone.bind(ii(n)),n.onClickBack=n.onClickBack.bind(ii(n)),n.onReset=n.onReset.bind(ii(n)),n.sendSizes={},n.bps=0,n.timer=setInterval((function(){var e=n.props.files.map((function(e){return pi({},e,{pct:lc(n.sendSizes[e.uid]||0,e.size)})}));n.props.setState({files:e,bps:n.bps}),n.bps=0}),1e3),n}return ui(t,e),ni(t,[{key:"componentDidMount",value:function(){document.title="小鹿快传｜发送文件"}},{key:"componentWillUnmount",value:function(){clearInterval(this.timer)}},{key:"onClickSelectDone",value:function(){var e=this;this.props.setState({curStep:2}),function(e){wi.sendJSON({type:"c2s_prepare_send",payload:{files:e}})}(this.props.files.map((function(e){return{uid:e.uid,name:e.name,size:e.size,type:e.type}})));var t=this.peer;t.on("connecting",(function(){e.props.setState({peerState:"connecting"})})),t.on("connected",(function(){e.props.setState({peerState:"connected"})})),t.on("connectFailed",(function(){e.props.setState({peerState:"connectFailed"}),rc.error("连接失败")})),t.on("disconnected",(function(){return hi.a.async((function(t){for(;;)switch(t.prev=t.next){case 0:e.props.setState({peerState:"disconnected"}),rc.error("连接断开，请重试");case 2:case"end":return t.stop()}}))})),t.on("channelOpen",(function(){var n,r,o,i,a,c,s,u,l,f;return hi.a.async((function(p){for(;;)switch(p.prev=p.next){case 0:e.props.setState({curStep:3,peerState:"transfer"}),n=e.props.files,r=0;case 3:if(!(r<n.length)){p.next=38;break}return o=n[r],i=o.uid,p.next=8,hi.a.awrap(t.sendJSON({type:"fileStart",fileId:i}));case 8:e.props.setState({curFileId:i}),a=new uc(o.realFile),c=!1,s=0;case 12:if(c){p.next=32;break}return p.next=15,hi.a.awrap(a.getNextChunk());case 15:return u=p.sent,c=u.done,l=u.chunk,f=u.offset,p.prev=18,p.next=21,hi.a.awrap(t.send(l));case 21:p.next=27;break;case 23:return p.prev=23,p.t0=p.catch(18),rc.error("传输错误："+p.t0),p.abrupt("break",32);case 27:e.sendSizes[i]=f,e.bps+=f-s,s=f,p.next=12;break;case 32:if(!c){p.next=35;break}return p.next=35,hi.a.awrap(t.sendJSON({type:"fileEnd",fileId:i}));case 35:r++,p.next=3;break;case 38:case"end":return p.stop()}}),null,null,[[18,23]])}))}},{key:"onClickBack",value:function(){fc(this.props.recvCode),this.props.setState({curStep:this.props.curStep-1})}},{key:"onReset",value:function(){this.peer.destroy(),this.props.setState({curStep:1,files:[],peerState:""})}},{key:"onChangeFile",value:function(e){var t=this,n=e.filter((function(e){return!t.props.files.find((function(t){var n=t.realFile;return n.name===e.name&&n.size===e.size&&n.lastModified===e.lastModified&&n.type===e.type}))})).map((function(e){return{realFile:e,uid:Di()(),name:e.name,size:e.size,type:e.type}}));n.length!==e.length&&rc.info("发现疑似相同的文件，已自动过滤");var r=this.props.files.concat(n);this.props.setState({files:r}),event.target.value=null}},{key:"onRemoveFile",value:function(e){var t=this;return function(){var n=t.props.files.filter((function(t){return t.uid!==e}));t.props.setState({files:n})}}},{key:"renderStep1",value:function(){var e=this,t=this.props.files,n=t.reduce((function(e,t){return e+t.size}),0);return f.a.createElement(f.a.Fragment,null,f.a.createElement(ma,{onDrop:this.onChangeFile,noClick:!0},(function(n){var r=n.getRootProps,o=n.getInputProps,i=n.isDragAccept,a=n.open;return f.a.createElement("div",Object.assign({className:Si()(hc.a.uploadArea,i&&hc.a.dragActive)},r()),0===t.length&&f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:hc.a.iconPlusWrapper},f.a.createElement(ba,{name:"plus",className:hc.a.iconPlus})),f.a.createElement("div",{className:hc.a.uploadTip},"将文件拖动到方框内或点击下方按钮"),f.a.createElement(xa,{type:"primary",className:hc.a.uploadBtn,onClick:function(){return a()}},"上传文件")),t.length>0&&f.a.createElement(ac,{files:t,removable:!0,onRemoveFile:e.onRemoveFile}),f.a.createElement("input",o()))})),0===t.length&&f.a.createElement("div",{className:hc.a.recvGuide},"已有收件码？点击",f.a.createElement(Xo,{to:"/recv",className:hc.a.link}," 接收文件")),t.length>0&&f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:hc.a.uploadMore},f.a.createElement("div",{className:hc.a.addMore},f.a.createElement("span",null,"添加文件")),f.a.createElement("div",{className:hc.a.fileSummary},t.length," 个文件，共 ",Ri()(n))),f.a.createElement(xa,{type:"primary",className:hc.a.btnSelectFileDone,onClick:this.onClickSelectDone},"选好了")))}},{key:"renderStep2",value:function(){var e=this.props.recvCode,t="http://".concat(document.location.host,"/recv/").concat(e);return f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:hc.a.selectSendMethod},"请选择发送方式："),f.a.createElement("div",{className:hc.a.sendMethod1},"1. 通过链接发送（对方打开链接即可下载文件）"),f.a.createElement("div",{className:hc.a.recvLinkContainer},f.a.createElement("span",{className:hc.a.recvLink},t),f.a.createElement(Oi.a,{text:t,onCopy:function(){return rc.success("复制成功")}},f.a.createElement("span",{className:hc.a.btnCopy},"复制"))),f.a.createElement("div",null,"2. 通过6位数取件码（对方在小鹿快传网站输入即可下载文件）"),f.a.createElement("div",{className:hc.a.recvCodeContainer},f.a.createElement("span",{className:hc.a.recvCode},e),f.a.createElement(Oi.a,{text:e,onCopy:function(){return rc.success("复制成功")}},f.a.createElement("span",{className:hc.a.btnCopy},"复制"))),f.a.createElement("div",null,"3. 扫描下方二维码："),f.a.createElement("div",{className:hc.a.qrcodeContainer},f.a.createElement(Mi.a,{value:t})),f.a.createElement("div",{className:hc.a.connectTips},"温馨提示：",f.a.createElement("br",null),"以上取件码在10分钟内有效，请尽快发送给对方 ",f.a.createElement("br",null),"对方输入取件码并确认之后会自动开始发送"),f.a.createElement(xa,{type:"primary",className:hc.a.btnWaitConnect,disabled:!0},"等待连接..."))}},{key:"renderStep3",value:function(){var e,t=this.props,n=t.curFileId,r=t.files,o=t.peerState,i=r.reduce((function(e,t){return e+t.size}),0),a=!0;r.forEach((function(e){e.pct<100&&(a=!1)})),a?e="继续发送":"connecting"===o?e="正在连接...":"connected"===o?e="连接成功":"transfer"===o?e="正在发送...(".concat(Ri()(this.bps||0),"/s)"):"disconnected"!==o&&"connectFailed"!==o||(e="连接断开，等待重连...");var c=!0;return a&&(c=!1),f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:hc.a.sendingBox},f.a.createElement(ac,{files:r,curFileId:n})),f.a.createElement("div",{className:hc.a.sendingSummary},f.a.createElement("div",null,r.length,"个文件，共",Ri()(i))),f.a.createElement(xa,{type:"primary",className:hc.a.btnSending,disabled:c,onClick:this.onReset},e))}},{key:"render",value:function(){var e=this.props,t=e.curStep,n=e.files;return f.a.createElement("div",{className:hc.a.base},f.a.createElement("div",{className:hc.a.titleRow},(1===t&&n.length>0||3===t)&&f.a.createElement("div",{className:hc.a.back,onClick:this.onReset},"取消"),2===t&&f.a.createElement("div",{className:hc.a.back,onClick:this.onClickBack},"返回"),f.a.createElement("div",{className:hc.a.title},"发送文件")),f.a.createElement(ja,null,f.a.createElement(mc,{index:1,title:"选择文件",active:1===t}),f.a.createElement(mc,{index:2,title:"收件码",active:2===t}),f.a.createElement(mc,{index:3,title:"发送",active:3===t})),1===t&&this.renderStep1(),2===t&&this.renderStep2(),3===t&&this.renderStep3())}}]),t}(l.Component);function yc(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var gc=n(24),bc=n.n(gc),wc=function(e){function t(){return ei(this,t),ai(this,ci(t).apply(this,arguments))}return ui(t,e),ni(t,[{key:"render",value:function(){var e=this.props,t=e.error,n=e.containerClassName,r=e.inputClassName,o=e.type,i=e.value,a=e.readOnly,c=e.placeholder,s=e.autoComplete,u=e.autoFocus,l=e.autoCapitalize,p=e.onChange,d=e.onEnter,h=void 0===d?function(){}:d,m=e.onBlur,v=e.onFocus,y=e.onClick,g=yc(e,["error","containerClassName","inputClassName","type","value","readOnly","placeholder","autoComplete","autoFocus","autoCapitalize","onChange","onEnter","onBlur","onFocus","onClick"]);return f.a.createElement("div",{className:Si()(bc.a.container,n)},f.a.createElement("div",{className:bc.a.wrapper},f.a.createElement("input",Object.assign({className:Si()(bc.a.input,r),type:o||"text",value:i||"",placeholder:c,autoComplete:s,readOnly:a,autoFocus:u,autoCapitalize:l,onChange:function(e){return p(e.target.value)},onKeyDown:function(e){return 13===e.keyCode&&h()},onBlur:m,onFocus:v,onClick:y},g))),!!t&&f.a.createElement("div",{className:bc.a.error},f.a.createElement(ba,{name:"warning-circle",className:bc.a.errorIcon}),t))}}]),t}(l.Component);wc.defaultProps={label:null,error:null};var Ec=wc,Sc=n(13),Cc=n.n(Sc),_c=qo(function(e){function t(e){var n;return ei(this,t),(n=ai(this,ci(t).call(this,e))).onChangeRecvCode=n.onChangeRecvCode.bind(ii(n)),n.onPrepareRecv=n.onPrepareRecv.bind(ii(n)),n.onStartRecv=n.onStartRecv.bind(ii(n)),n.onReset=n.onReset.bind(ii(n)),n.onRecvData=n.onRecvData.bind(ii(n)),n.handleMsg=n.handleMsg.bind(ii(n)),n.peer=new sc,n.recvBuffer=[],n.recvSizes={},n.bps=0,n.timer=setInterval((function(){var e=n.props.files.map((function(e){return pi({},e,{pct:lc(n.recvSizes[e.uid]||0,e.size)})}));n.props.setState({files:e}),n.bps=0}),1e3),n}return ui(t,e),ni(t,[{key:"componentDidMount",value:function(){document.title="小鹿快传｜接收文件";var e=this.props.match.params.recvCode;e&&pc(e)}},{key:"componentWillUnMount",value:function(){clearInterval(this.timer)}},{key:"onChangeRecvCode",value:function(e){this.props.setState({recvCode:e})}},{key:"onPrepareRecv",value:function(){pc(this.props.recvCode)}},{key:"onReset",value:function(){this.peer.destroy(),this.props.setState({recvCode:"",peerState:"",started:!1,files:[],targetId:""})}},{key:"onStartRecv",value:function(){var e=this;this.props.setState({started:!0});var t=this.peer;t.on("connecting",(function(){e.props.setState({peerState:"connecting"})})),t.on("connected",(function(){rc.success("连接成功"),e.props.setState({peerState:"connected"})})),t.on("disconnected",(function(){rc.error("连接已断开"),e.props.setState({peerState:"disconnected"})})),t.on("connectFailed",(function(){rc.error("连接失败，请重试"),e.props.setState({peerState:"connectFailed"})})),t.on("channelOpen",(function(){e.props.setState({peerState:"transfer"}),fc(e.props.recvCode||e.props.match.params.recvCode)})),t.on("data",this.onRecvData),t.connectPeer(this.props.targetId)}},{key:"onRecvData",value:function(e){var t=this.props.curFileId;if("string"==typeof e){var n=JSON.parse(e);this.handleMsg(n)}else{this.recvBuffer.push(e);var r=(this.recvSizes[t]||0)+e.byteLength;this.recvSizes[t]=r,this.bps+=e.byteLength}}},{key:"handleMsg",value:function(e){if("fileStart"===e.type)this.props.setState({curFileId:e.fileId});else if("fileEnd"===e.type){var t=e.fileId,n=new Blob(this.recvBuffer);this.recvBuffer=[];var r=window.URL.createObjectURL(n),o=this.props.files.map((function(e){return e.uid===t?pi({},e,{downloadUrl:r}):e}));this.props.setState({files:o})}}},{key:"renderStep1",value:function(){var e=this.props.recvCode;return f.a.createElement(f.a.Fragment,null,f.a.createElement(Ec,{placeholder:"请输入6位收件码",inputClassName:Cc.a.input,value:e,onChange:this.onChangeRecvCode}),f.a.createElement(xa,{type:"primary",className:Cc.a.recvBtn,onClick:this.onPrepareRecv},"接收文件"),f.a.createElement("div",{className:Cc.a.tip},f.a.createElement(ba,{name:"info"}),"如何获取收件码？"))}},{key:"renderStep2",value:function(){var e=this.props,t=e.peerState,n=e.started,r=e.curFileId,o=e.files,i=o.reduce((function(e,t){return e+t.size}),0),a=!0;o.forEach((function(e){e.downloadUrl||(a=!1)}));var c="开始下载";return a?c="继续接收":n?"disconnected"===t||"connectFailed"===t?c="重新下载":"connecting"===t?c="正在连接...":"connected"===t?c="连接成功":"transfer"===t&&(c="正在下载...(".concat(Ri()(this.bps),"/s)")):c="开始下载",f.a.createElement(f.a.Fragment,null,f.a.createElement("div",{className:Cc.a.msg1},"对方发送给您以下文件："),f.a.createElement(ac,{files:this.props.files,curFileId:r}),f.a.createElement("div",{className:Cc.a.msg2},f.a.createElement("div",null,o.length," 个文件，共 ",Ri()(i))),f.a.createElement(xa,{type:"primary",className:Cc.a.recvBtn,disabled:n&&!a&&("connected"===t||"connecting"===t||"transfer"===t),onClick:a?this.onReset:this.onStartRecv},c))}},{key:"render",value:function(){var e=this.props.files;return f.a.createElement("div",{className:Cc.a.base},f.a.createElement("div",{className:Cc.a.titleRow},e.length>0&&f.a.createElement("div",{className:Cc.a.cancel,onClick:this.onReset},"取消"),f.a.createElement("div",{className:Cc.a.title},"接收文件")),0===e.length&&this.renderStep1(),e.length>0&&this.renderStep2())}}]),t}(l.Component)),kc=n(63),xc=n.n(kc),Tc=n(22),Oc=n.n(Tc),Pc=function(e){function t(e){var n;return ei(this,t),(n=ai(this,ci(t).call(this,e))).state={contact:"",content:""},n.handleContactChange=n.handleContactChange.bind(ii(n)),n.handleContentChange=n.handleContentChange.bind(ii(n)),n.handleSubmit=n.handleSubmit.bind(ii(n)),n}return ui(t,e),ni(t,[{key:"componentDidMount",value:function(){document.title="小鹿快传｜联系我们"}},{key:"handleContactChange",value:function(e){this.setState({contact:e})}},{key:"handleContentChange",value:function(e){this.setState({content:e.target.value})}},{key:"handleSubmit",value:function(){var e=this,t=this.state,n=t.contact,r=t.content;n?r?xc.a.post("/api/feedback",{contact:n,content:r}).then((function(t){rc.success("留言成功"),e.setState({contact:"",content:""})})):rc.error("请输入留言内容"):rc.error("请输入联系方式")}},{key:"render",value:function(){var e=this.state,t=e.contact,n=e.content;return f.a.createElement("div",{className:Oc.a.base},f.a.createElement("div",{className:Oc.a.title},"联系我们"),f.a.createElement(Ec,{placeholder:"请输入您的手机号或邮箱",inputClassName:Oc.a.input,value:t,onChange:this.handleContactChange}),f.a.createElement("textarea",{placeholder:"请输入留言内容",rows:"6",className:Oc.a.textarea,value:n,onChange:this.handleContentChange}),f.a.createElement(xa,{type:"primary",className:Oc.a.btn,onClick:this.handleSubmit},"留言"),f.a.createElement("div",{className:Oc.a.tips},"请直接在上方留言，我们会尽快给您回复，",f.a.createElement("br",null),"您也可以发邮件到 ",f.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"mailto:support@deershare.com"},"support@deershare.com")))}}]),t}(l.Component),Rc=n(27),jc=n.n(Rc);function Dc(e){var t=e.title,n=e.desc,r=e.icon;return f.a.createElement("div",{className:jc.a.card},f.a.createElement("div",{className:jc.a.title},r,f.a.createElement("span",{className:jc.a.titleText},t)),f.a.createElement("div",{className:jc.a.desc},n))}Dc.defaultProps={};var Nc=Dc,Mc=n(14),Ic=n.n(Mc),Ac=function(e){function t(){var e;return ei(this,t),(e=ai(this,ci(t).call(this))).state={send:{curStep:1,files:[],peerState:""},recv:{recvCode:"",peerState:"",started:!1,files:[],targetId:""}},e.setSendState=e.setSendState.bind(ii(e)),e.setRecvState=e.setRecvState.bind(ii(e)),e.onS2cPrepareSend=e.onS2cPrepareSend.bind(ii(e)),e.onS2cPrepareRecv=e.onS2cPrepareRecv.bind(ii(e)),e}return ui(t,e),ni(t,[{key:"onS2cPrepareSend",value:function(e){this.setSendState({recvCode:e.recvCode})}},{key:"onS2cPrepareRecv",value:function(e){this.setRecvState({targetId:e.clientId,files:e.files})}},{key:"componentDidMount",value:function(){wi.registerMessageHandler("s2c_prepare_send",this.onS2cPrepareSend),wi.registerMessageHandler("s2c_prepare_recv",this.onS2cPrepareRecv)}},{key:"setSendState",value:function(e){this.setState((function(t){return pi({},t,{send:pi({},t.send,{},e)})}))}},{key:"setRecvState",value:function(e){this.setState((function(t){return pi({},t,{recv:pi({},t.recv,{},e)})}))}},{key:"render",value:function(){return f.a.createElement("div",{className:Ic.a.container},f.a.createElement(xi,null),f.a.createElement(Lo,{exact:!0,path:"/"},f.a.createElement(No,{to:"/send"})),f.a.createElement("div",{className:Ic.a.content},f.a.createElement(Wo,null,f.a.createElement(Lo,{path:"/send"},f.a.createElement(vc,Object.assign({},this.state.send,{setState:this.setSendState}))),f.a.createElement(Lo,{path:"/recv/:recvCode?"},f.a.createElement(_c,Object.assign({},this.state.recv,{setState:this.setRecvState}))),f.a.createElement(Lo,{path:"/contact"},f.a.createElement(Pc,null))),f.a.createElement("div",{className:Ic.a.cardsArea},f.a.createElement("div",{className:Ic.a.cardRow},f.a.createElement(Nc,{title:"简单",icon:f.a.createElement(ba,{name:"simple",className:Ic.a.iconSimple}),desc:"无需登录只需要选择好想要发送的文件，然后将生成的下载链接发送给对方即可开始传送"}),f.a.createElement(Nc,{title:"安全",icon:f.a.createElement(ba,{name:"secure",className:Ic.a.iconSecure}),desc:"小鹿快传使用P2P技术，文件数据不走服务器，直接发送给对方，且数据自带加密，免去隐私被泄漏的风险。"})),f.a.createElement("div",{className:Ic.a.cardRow},f.a.createElement(Nc,{title:"高效",icon:f.a.createElement(ba,{name:"speed",className:Ic.a.iconSpeed}),desc:"由于使用P2P技术，文件传输速度不会受到服务器性能的影响，完全取决于你和对方的网速。"}),f.a.createElement(Nc,{title:"专业",icon:f.a.createElement(ba,{name:"check-fill",className:Ic.a.iconCheck}),desc:"不限制文件类型，任何文件都可随心传输。所有文件都是原文件传输，传视频图片不损失画质。"})))))}}]),t}(f.a.Component);Ac.defaultProps={};var Lc=Ac,Fc=(n(103),n(104),function(e){function t(e){var n;return ei(this,t),(n=ai(this,ci(t).call(this,e))).state={hasError:!1},n}return ui(t,e),ni(t,[{key:"componentDidMount",value:function(){this.props.history.listen((function(e){Gr.pageview(e.pathname)}))}},{key:"componentDidCatch",value:function(e,t){xn((function(n){Object.keys(t).forEach((function(e){n.setExtra(e,t[e])})),kn(e)}))}},{key:"render",value:function(){return this.state.hasError?f.a.createElement(f.a.Fragment,null,f.a.createElement("h1",{style:{textAlign:"center"}},"抱歉页面出现错误，我们的工程师已经收到通知，会尽快处理。您可以：",f.a.createElement("a",{href:""},"点此刷新页面重试"))):f.a.createElement(Wo,null,f.a.createElement(Lo,{path:"/"},f.a.createElement(Lc,null)))}}],[{key:"getDerivedStateFromError",value:function(){return{hasError:!0}}}]),t}(f.a.Component));var Uc=qo(Ct((function(e){return{user:e.user}}),{})(Fc));function zc(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Bc=zc();Bc.withExtraArgument=zc;var Hc=Bc,Wc=n(33),qc={recvCode:""},Vc=Object(Wc.a)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:qc,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"UPDATE_SEND_FILE_INFO":e.recvCode=t.payload.recvCode}return e})),Gc={targetId:"",files:[]},$c=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:We.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:We.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+We.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},c=0;c<a.length;c++){var s=a[c],u=n[s],l=e[s],f=u(l,t);if(void 0===f){var p=Ge(s,t);throw new Error(p)}o[s]=f,r=r||f!==l}return(r=r||a.length!==Object.keys(e).length)?o:e}}({sendFile:Vc,recvFile:Object(Wc.a)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Gc,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"UPDATE_RECV_FILE_INFO":e.targetId=t.payload.clientId,e.files=t.payload.files}return e}))}),Kc=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||Xe;var Jc,Yc,Xc=(Yc=[Hc],Ve($c,Jc,Kc(Qe.apply(void 0,Yc))));Xc.dispatch,wi.registerMessageHandler("s2c_error",(function(e){rc.error(e.message)})),function(e){if(void 0===e&&(e={}),void 0===e.defaultIntegrations&&(e.defaultIntegrations=Qn),void 0===e.release){var t=Object(It.g)();t.SENTRY_RELEASE&&t.SENTRY_RELEASE.id&&(e.release=t.SENTRY_RELEASE.id)}!function(e,t){!0===t.debug&&Mt.a.enable(),Object(Nt.a)().bindClient(new e(t))}(Cn,e)}({dsn:"https://be8db30a0db043f686f64c4fc91682c8@sentry.io/2034634",environment:"production"}),Gr.initialize("UA-131382726-2"),Gr.pageview(window.location.pathname+window.location.search),d.a.render(f.a.createElement(_e,{store:Xc},f.a.createElement(Vo,null,f.a.createElement(Uc,null))),document.getElementById("root"))},,,,function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r=n(1),o=n(4),i=n(21),a=n(34),c=function(){function e(e,t,n){void 0===t&&(t=new a.a),void 0===n&&(n=3),this._version=n,this._stack=[],this._stack.push({client:e,scope:t})}return e.prototype._invokeClient=function(e){for(var t,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var i=this.getStackTop();i&&i.client&&i.client[e]&&(t=i.client)[e].apply(t,r.f(n,[i.scope]))},e.prototype.isOlderThan=function(e){return this._version<e},e.prototype.bindClient=function(e){this.getStackTop().client=e},e.prototype.pushScope=function(){var e=this.getStack(),t=e.length>0?e[e.length-1].scope:void 0,n=a.a.clone(t);return this.getStack().push({client:this.getClient(),scope:n}),n},e.prototype.popScope=function(){return void 0!==this.getStack().pop()},e.prototype.withScope=function(e){var t=this.pushScope();try{e(t)}finally{this.popScope()}},e.prototype.getClient=function(){return this.getStackTop().client},e.prototype.getScope=function(){return this.getStackTop().scope},e.prototype.getStack=function(){return this._stack},e.prototype.getStackTop=function(){return this._stack[this._stack.length-1]},e.prototype.captureException=function(e,t){var n=this._lastEventId=Object(o.n)(),i=t;if(!t){var a=void 0;try{throw new Error("Sentry syntheticException")}catch(e){a=e}i={originalException:e,syntheticException:a}}return this._invokeClient("captureException",e,r.a({},i,{event_id:n})),n},e.prototype.captureMessage=function(e,t,n){var i=this._lastEventId=Object(o.n)(),a=n;if(!n){var c=void 0;try{throw new Error(e)}catch(e){c=e}a={originalException:e,syntheticException:c}}return this._invokeClient("captureMessage",e,t,r.a({},a,{event_id:i})),i},e.prototype.captureEvent=function(e,t){var n=this._lastEventId=Object(o.n)();return this._invokeClient("captureEvent",e,r.a({},t,{event_id:n})),n},e.prototype.lastEventId=function(){return this._lastEventId},e.prototype.addBreadcrumb=function(e,t){var n=this.getStackTop();if(n.scope&&n.client){var i=n.client.getOptions&&n.client.getOptions()||{},a=i.beforeBreadcrumb,c=void 0===a?null:a,s=i.maxBreadcrumbs,u=void 0===s?100:s;if(!(u<=0)){var l=Object(o.m)(),f=r.a({timestamp:l},e),p=c?Object(o.c)((function(){return c(f,t)})):f;null!==p&&n.scope.addBreadcrumb(p,Math.min(u,100))}}},e.prototype.setUser=function(e){var t=this.getStackTop();t.scope&&t.scope.setUser(e)},e.prototype.setTags=function(e){var t=this.getStackTop();t.scope&&t.scope.setTags(e)},e.prototype.setExtras=function(e){var t=this.getStackTop();t.scope&&t.scope.setExtras(e)},e.prototype.setTag=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setTag(e,t)},e.prototype.setExtra=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setExtra(e,t)},e.prototype.setContext=function(e,t){var n=this.getStackTop();n.scope&&n.scope.setContext(e,t)},e.prototype.configureScope=function(e){var t=this.getStackTop();t.scope&&t.client&&e(t.scope)},e.prototype.run=function(e){var t=u(this);try{e(this)}finally{u(t)}},e.prototype.getIntegration=function(e){var t=this.getClient();if(!t)return null;try{return t.getIntegration(e)}catch(t){return i.a.warn("Cannot retrieve integration "+e.id+" from the current Hub"),null}},e.prototype.startSpan=function(e,t){return void 0===t&&(t=!1),this._callExtensionMethod("startSpan",e,t)},e.prototype.traceHeaders=function(){return this._callExtensionMethod("traceHeaders")},e.prototype._callExtensionMethod=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=s(),o=r.__SENTRY__;if(o&&o.extensions&&"function"==typeof o.extensions[e])return o.extensions[e].apply(this,t);i.a.warn("Extension method "+e+" couldn't be found, doing nothing.")},e}();function s(){var e=Object(o.g)();return e.__SENTRY__=e.__SENTRY__||{extensions:{},hub:void 0},e}function u(e){var t=s(),n=p(t);return d(t,e),n}function l(){var t=s();return f(t)&&!p(t).isOlderThan(3)||d(t,new c),Object(o.j)()?function(t){try{var n=Object(o.d)(e,"domain").active;if(!n)return p(t);if(!f(n)||p(n).isOlderThan(3)){var r=p(t).getStackTop();d(n,new c(r.client,a.a.clone(r.scope)))}return p(n)}catch(e){return p(t)}}(t):p(t)}function f(e){return!!(e&&e.__SENTRY__&&e.__SENTRY__.hub)}function p(e){return e&&e.__SENTRY__&&e.__SENTRY__.hub?e.__SENTRY__.hub:(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=new c,e.__SENTRY__.hub)}function d(e,t){return!!e&&(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=t,!0)}}).call(this,n(42)(e))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,